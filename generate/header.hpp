#include "hardware_registers.hpp"
namespace hr = hardware_registers;

// =============================================================================
//
// ATSAM3X8E
//
// Atmel ATSAM3X8E device: Cortex-M3 Microcontroller with 2x256 KB Flash, HS USB, 144 Pins (refer to http://www.atmel.com/devices/SAM3X8E.aspx for more)
//
// =============================================================================

// =============================================================================
//
// HSMCI
// base address = 0x40000000
// High Speed MultiMedia Card Interface
//
// =============================================================================

struct hsmci_cr {
   
};

struct hsmci_struct {
   hr::hardware_register< 0x40000000 > CR( this );
   hr::hardware_register<0x40000004> MR;
   hr::hardware_register<0x40000008> DTOR;
   hr::hardware_register<0x4000000c> SDCR;
   hr::hardware_register<0x40000010> ARGR;
   hr::hardware_register<0x40000014> CMDR;
   hr::hardware_register<0x40000018> BLKR;
   hr::hardware_register<0x4000001c> CSTOR;
   hr::hardware_register<0x40000020> RSPR[4];
   hr::hardware_register<0x40000030> RDR;
   hr::hardware_register<0x40000034> TDR;
   hr::reserved< 0x38, 2 > _reserved_at_0x38;
   hr::hardware_register<0x40000040> SR;
   hr::hardware_register<0x40000044> IER;
   hr::hardware_register<0x40000048> IDR;
   hr::hardware_register<0x4000004c> IMR;
   hr::hardware_register<0x40000050> DMA;
   hr::hardware_register<0x40000054> CFG;
   hr::reserved< 0x58, 35 > _reserved_at_0x58;
   hr::hardware_register<0x400000e4> WPMR;
   hr::hardware_register<0x400000e8> WPSR;
   hr::reserved< 0xEC, 69 > _reserved_at_0xEC;
   hr::hardware_register<0x40000200> FIFO[256];
};

auto hsmci = new( 0x40000000 ) hscmi_struct;

// CR
   // Multi-Media Interface Enable
   constexpr auto HSMCI_CR_MCIEN = hr::field_mask_literal< 0x40000000, 0, 1 >();
   // Multi-Media Interface Disable
   constexpr auto HSMCI_CR_MCIDIS = hr::field_mask_literal< 0x40000000, 1, 1 >();
   // Power Save Mode Enable
   constexpr auto HSMCI_CR_PWSEN = hr::field_mask_literal< 0x40000000, 2, 1 >();
   // Power Save Mode Disable
   constexpr auto HSMCI_CR_PWSDIS = hr::field_mask_literal< 0x40000000, 3, 1 >();
   // Software Reset
   constexpr auto HSMCI_CR_SWRST = hr::field_mask_literal< 0x40000000, 7, 1 >();

// MR
   // Clock Divider
   constexpr auto HSMCI_MR_CLKDIV_Msk = hr::field_mask_literal< 0x40000004, 0, 8 >();
   // Power Saving Divider
   constexpr auto HSMCI_MR_PWSDIV_Msk = hr::field_mask_literal< 0x40000004, 8, 3 >();
   // None
   constexpr auto HSMCI_MR_RDPROOF = hr::field_mask_literal< 0x40000004, 11, 1 >();
   // None
   constexpr auto HSMCI_MR_WRPROOF = hr::field_mask_literal< 0x40000004, 12, 1 >();
   // Force Byte Transfer
   constexpr auto HSMCI_MR_FBYTE = hr::field_mask_literal< 0x40000004, 13, 1 >();
   // Padding Value
   constexpr auto HSMCI_MR_PADV = hr::field_mask_literal< 0x40000004, 14, 1 >();

// DTOR
   // Data Timeout Cycle Number
   constexpr auto HSMCI_DTOR_DTOCYC_Msk = hr::field_mask_literal< 0x40000008, 0, 4 >();
   // Data Timeout Multiplier
   constexpr auto HSMCI_DTOR_DTOMUL_Msk = hr::field_mask_literal< 0x40000008, 4, 3 >();
      // DTOCYC
      constexpr auto HSMCI_DTOR_DTOMUL_1 = hr::field_value_literal< 0x40000008, 4, 3 >( 0 );
      // DTOCYC x 16
      constexpr auto HSMCI_DTOR_DTOMUL_16 = hr::field_value_literal< 0x40000008, 4, 3 >( 1 );
      // DTOCYC x 128
      constexpr auto HSMCI_DTOR_DTOMUL_128 = hr::field_value_literal< 0x40000008, 4, 3 >( 2 );
      // DTOCYC x 256
      constexpr auto HSMCI_DTOR_DTOMUL_256 = hr::field_value_literal< 0x40000008, 4, 3 >( 3 );
      // DTOCYC x 1024
      constexpr auto HSMCI_DTOR_DTOMUL_1024 = hr::field_value_literal< 0x40000008, 4, 3 >( 4 );
      // DTOCYC x 4096
      constexpr auto HSMCI_DTOR_DTOMUL_4096 = hr::field_value_literal< 0x40000008, 4, 3 >( 5 );
      // DTOCYC x 65536
      constexpr auto HSMCI_DTOR_DTOMUL_65536 = hr::field_value_literal< 0x40000008, 4, 3 >( 6 );
      // DTOCYC x 1048576
      constexpr auto HSMCI_DTOR_DTOMUL_1048576 = hr::field_value_literal< 0x40000008, 4, 3 >( 7 );

// SDCR
   // SDCard/SDIO Slot
   constexpr auto HSMCI_SDCR_SDCSEL_Msk = hr::field_mask_literal< 0x4000000c, 0, 2 >();
      // Slot A is selected.
      constexpr auto HSMCI_SDCR_SDCSEL_SLOTA = hr::field_value_literal< 0x4000000c, 0, 2 >( 0 );
      // SDCARD/SDIO Slot B selected
      constexpr auto HSMCI_SDCR_SDCSEL_SLOTB = hr::field_value_literal< 0x4000000c, 0, 2 >( 1 );
      // -
      constexpr auto HSMCI_SDCR_SDCSEL_SLOTC = hr::field_value_literal< 0x4000000c, 0, 2 >( 2 );
      // -
      constexpr auto HSMCI_SDCR_SDCSEL_SLOTD = hr::field_value_literal< 0x4000000c, 0, 2 >( 3 );
   // SDCard/SDIO Bus Width
   constexpr auto HSMCI_SDCR_SDCBUS_Msk = hr::field_mask_literal< 0x4000000c, 6, 2 >();
      // 1 bit
      constexpr auto HSMCI_SDCR_SDCBUS_1 = hr::field_value_literal< 0x4000000c, 6, 2 >( 0 );
      // 4 bit
      constexpr auto HSMCI_SDCR_SDCBUS_4 = hr::field_value_literal< 0x4000000c, 6, 2 >( 2 );
      // 8 bit
      constexpr auto HSMCI_SDCR_SDCBUS_8 = hr::field_value_literal< 0x4000000c, 6, 2 >( 3 );

// ARGR
   // Command Argument
   constexpr auto HSMCI_ARGR_ARG_Msk = hr::field_mask_literal< 0x40000010, 0, 32 >();

// CMDR
   // Command Number
   constexpr auto HSMCI_CMDR_CMDNB_Msk = hr::field_mask_literal< 0x40000014, 0, 6 >();
   // Response Type
   constexpr auto HSMCI_CMDR_RSPTYP_Msk = hr::field_mask_literal< 0x40000014, 6, 2 >();
      // No response.
      constexpr auto HSMCI_CMDR_RSPTYP_NORESP = hr::field_value_literal< 0x40000014, 6, 2 >( 0 );
      // 48-bit response.
      constexpr auto HSMCI_CMDR_RSPTYP_48_BIT = hr::field_value_literal< 0x40000014, 6, 2 >( 1 );
      // 136-bit response.
      constexpr auto HSMCI_CMDR_RSPTYP_136_BIT = hr::field_value_literal< 0x40000014, 6, 2 >( 2 );
      // R1b response type
      constexpr auto HSMCI_CMDR_RSPTYP_R1B = hr::field_value_literal< 0x40000014, 6, 2 >( 3 );
   // Special Command
   constexpr auto HSMCI_CMDR_SPCMD_Msk = hr::field_mask_literal< 0x40000014, 8, 3 >();
      // Not a special CMD.
      constexpr auto HSMCI_CMDR_SPCMD_STD = hr::field_value_literal< 0x40000014, 8, 3 >( 0 );
      // Initialization CMD: 74 clock cycles for initialization sequence.
      constexpr auto HSMCI_CMDR_SPCMD_INIT = hr::field_value_literal< 0x40000014, 8, 3 >( 1 );
      // Synchronized CMD: Wait for the end of the current data block transfer before sending the pending command.
      constexpr auto HSMCI_CMDR_SPCMD_SYNC = hr::field_value_literal< 0x40000014, 8, 3 >( 2 );
      // CE-ATA Completion Signal disable Command. The host cancels the ability for the device to return a command completion signal on the command line.
      constexpr auto HSMCI_CMDR_SPCMD_CE_ATA = hr::field_value_literal< 0x40000014, 8, 3 >( 3 );
      // Interrupt command: Corresponds to the Interrupt Mode (CMD40).
      constexpr auto HSMCI_CMDR_SPCMD_IT_CMD = hr::field_value_literal< 0x40000014, 8, 3 >( 4 );
      // Interrupt response: Corresponds to the Interrupt Mode (CMD40).
      constexpr auto HSMCI_CMDR_SPCMD_IT_RESP = hr::field_value_literal< 0x40000014, 8, 3 >( 5 );
      // Boot Operation Request. Start a boot operation mode, the host processor can read boot data from the MMC device directly.
      constexpr auto HSMCI_CMDR_SPCMD_BOR = hr::field_value_literal< 0x40000014, 8, 3 >( 6 );
      // End Boot Operation. This command allows the host processor to terminate the boot operation mode.
      constexpr auto HSMCI_CMDR_SPCMD_EBO = hr::field_value_literal< 0x40000014, 8, 3 >( 7 );
   // Open Drain Command
   constexpr auto HSMCI_CMDR_OPDCMD = hr::field_mask_literal< 0x40000014, 11, 1 >();
      // Push pull command.
      constexpr auto HSMCI_CMDR_OPDCMD_PUSHPULL = hr::field_value_literal< 0x40000014, 11, 1 >( 0 );
      // Open drain command.
      constexpr auto HSMCI_CMDR_OPDCMD_OPENDRAIN = hr::field_value_literal< 0x40000014, 11, 1 >( 1 );
   // Max Latency for Command to Response
   constexpr auto HSMCI_CMDR_MAXLAT = hr::field_mask_literal< 0x40000014, 12, 1 >();
      // 5-cycle max latency.
      constexpr auto HSMCI_CMDR_MAXLAT_5 = hr::field_value_literal< 0x40000014, 12, 1 >( 0 );
      // 64-cycle max latency.
      constexpr auto HSMCI_CMDR_MAXLAT_64 = hr::field_value_literal< 0x40000014, 12, 1 >( 1 );
   // Transfer Command
   constexpr auto HSMCI_CMDR_TRCMD_Msk = hr::field_mask_literal< 0x40000014, 16, 2 >();
      // No data transfer
      constexpr auto HSMCI_CMDR_TRCMD_NO_DATA = hr::field_value_literal< 0x40000014, 16, 2 >( 0 );
      // Start data transfer
      constexpr auto HSMCI_CMDR_TRCMD_START_DATA = hr::field_value_literal< 0x40000014, 16, 2 >( 1 );
      // Stop data transfer
      constexpr auto HSMCI_CMDR_TRCMD_STOP_DATA = hr::field_value_literal< 0x40000014, 16, 2 >( 2 );
   // Transfer Direction
   constexpr auto HSMCI_CMDR_TRDIR = hr::field_mask_literal< 0x40000014, 18, 1 >();
      // Write.
      constexpr auto HSMCI_CMDR_TRDIR_WRITE = hr::field_value_literal< 0x40000014, 18, 1 >( 0 );
      // Read.
      constexpr auto HSMCI_CMDR_TRDIR_READ = hr::field_value_literal< 0x40000014, 18, 1 >( 1 );
   // Transfer Type
   constexpr auto HSMCI_CMDR_TRTYP_Msk = hr::field_mask_literal< 0x40000014, 19, 3 >();
      // MMC/SDCard Single Block
      constexpr auto HSMCI_CMDR_TRTYP_SINGLE = hr::field_value_literal< 0x40000014, 19, 3 >( 0 );
      // MMC/SDCard Multiple Block
      constexpr auto HSMCI_CMDR_TRTYP_MULTIPLE = hr::field_value_literal< 0x40000014, 19, 3 >( 1 );
      // MMC Stream
      constexpr auto HSMCI_CMDR_TRTYP_STREAM = hr::field_value_literal< 0x40000014, 19, 3 >( 2 );
      // SDIO Byte
      constexpr auto HSMCI_CMDR_TRTYP_BYTE = hr::field_value_literal< 0x40000014, 19, 3 >( 4 );
      // SDIO Block
      constexpr auto HSMCI_CMDR_TRTYP_BLOCK = hr::field_value_literal< 0x40000014, 19, 3 >( 5 );
   // SDIO Special Command
   constexpr auto HSMCI_CMDR_IOSPCMD_Msk = hr::field_mask_literal< 0x40000014, 24, 2 >();
      // Not an SDIO Special Command
      constexpr auto HSMCI_CMDR_IOSPCMD_STD = hr::field_value_literal< 0x40000014, 24, 2 >( 0 );
      // SDIO Suspend Command
      constexpr auto HSMCI_CMDR_IOSPCMD_SUSPEND = hr::field_value_literal< 0x40000014, 24, 2 >( 1 );
      // SDIO Resume Command
      constexpr auto HSMCI_CMDR_IOSPCMD_RESUME = hr::field_value_literal< 0x40000014, 24, 2 >( 2 );
   // ATA with Command Completion Signal
   constexpr auto HSMCI_CMDR_ATACS = hr::field_mask_literal< 0x40000014, 26, 1 >();
      // Normal operation mode.
      constexpr auto HSMCI_CMDR_ATACS_NORMAL = hr::field_value_literal< 0x40000014, 26, 1 >( 0 );
      // This bit indicates that a completion signal is expected within a programmed amount of time (HSMCI_CSTOR).
      constexpr auto HSMCI_CMDR_ATACS_COMPLETION = hr::field_value_literal< 0x40000014, 26, 1 >( 1 );
   // Boot Operation Acknowledge.
   constexpr auto HSMCI_CMDR_BOOT_ACK = hr::field_mask_literal< 0x40000014, 27, 1 >();

// BLKR
   // MMC/SDIO Block Count - SDIO Byte Count
   constexpr auto HSMCI_BLKR_BCNT_Msk = hr::field_mask_literal< 0x40000018, 0, 16 >();
      // MMC/SDCARD Multiple BlockFrom 1 to 65635: Value 0 corresponds to an infinite block transfer.
      constexpr auto HSMCI_BLKR_BCNT_MULTIPLE = hr::field_value_literal< 0x40000018, 0, 16 >( 0 );
      // SDIO ByteFrom 1 to 512 bytes: Value 0 corresponds to a 512-byte transfer.Values from 0x200 to 0xFFFF are forbidden.
      constexpr auto HSMCI_BLKR_BCNT_BYTE = hr::field_value_literal< 0x40000018, 0, 16 >( 4 );
      // SDIO BlockFrom 1 to 511 blocks: Value 0 corresponds to an infinite block transfer.Values from 0x200 to 0xFFFF are forbidden.
      constexpr auto HSMCI_BLKR_BCNT_BLOCK = hr::field_value_literal< 0x40000018, 0, 16 >( 5 );
   // Data Block Length
   constexpr auto HSMCI_BLKR_BLKLEN_Msk = hr::field_mask_literal< 0x40000018, 16, 16 >();

// CSTOR
   // Completion Signal Timeout Cycle Number
   constexpr auto HSMCI_CSTOR_CSTOCYC_Msk = hr::field_mask_literal< 0x4000001c, 0, 4 >();
   // Completion Signal Timeout Multiplier
   constexpr auto HSMCI_CSTOR_CSTOMUL_Msk = hr::field_mask_literal< 0x4000001c, 4, 3 >();
      // CSTOCYC x 1
      constexpr auto HSMCI_CSTOR_CSTOMUL_1 = hr::field_value_literal< 0x4000001c, 4, 3 >( 0 );
      // CSTOCYC x 16
      constexpr auto HSMCI_CSTOR_CSTOMUL_16 = hr::field_value_literal< 0x4000001c, 4, 3 >( 1 );
      // CSTOCYC x 128
      constexpr auto HSMCI_CSTOR_CSTOMUL_128 = hr::field_value_literal< 0x4000001c, 4, 3 >( 2 );
      // CSTOCYC x 256
      constexpr auto HSMCI_CSTOR_CSTOMUL_256 = hr::field_value_literal< 0x4000001c, 4, 3 >( 3 );
      // CSTOCYC x 1024
      constexpr auto HSMCI_CSTOR_CSTOMUL_1024 = hr::field_value_literal< 0x4000001c, 4, 3 >( 4 );
      // CSTOCYC x 4096
      constexpr auto HSMCI_CSTOR_CSTOMUL_4096 = hr::field_value_literal< 0x4000001c, 4, 3 >( 5 );
      // CSTOCYC x 65536
      constexpr auto HSMCI_CSTOR_CSTOMUL_65536 = hr::field_value_literal< 0x4000001c, 4, 3 >( 6 );
      // CSTOCYC x 1048576
      constexpr auto HSMCI_CSTOR_CSTOMUL_1048576 = hr::field_value_literal< 0x4000001c, 4, 3 >( 7 );

// RSPR[0]
   // Response
   constexpr auto HSMCI_RSPR_RSP_Msk = hr::field_mask_literal< 0x40000020, 0, 32 >();

// RDR
   // Data to Read
   constexpr auto HSMCI_RDR_DATA_Msk = hr::field_mask_literal< 0x40000030, 0, 32 >();

// TDR
   // Data to Write
   constexpr auto HSMCI_TDR_DATA_Msk = hr::field_mask_literal< 0x40000034, 0, 32 >();

// SR
   // Command Ready
   constexpr auto HSMCI_SR_CMDRDY = hr::field_mask_literal< 0x40000040, 0, 1 >();
   // Receiver Ready
   constexpr auto HSMCI_SR_RXRDY = hr::field_mask_literal< 0x40000040, 1, 1 >();
   // Transmit Ready
   constexpr auto HSMCI_SR_TXRDY = hr::field_mask_literal< 0x40000040, 2, 1 >();
   // Data Block Ended
   constexpr auto HSMCI_SR_BLKE = hr::field_mask_literal< 0x40000040, 3, 1 >();
   // Data Transfer in Progress
   constexpr auto HSMCI_SR_DTIP = hr::field_mask_literal< 0x40000040, 4, 1 >();
   // HSMCI Not Busy
   constexpr auto HSMCI_SR_NOTBUSY = hr::field_mask_literal< 0x40000040, 5, 1 >();
   // None
   constexpr auto HSMCI_SR_SDIOIRQFORSLOTA = hr::field_mask_literal< 0x40000040, 8, 1 >();
   // None
   constexpr auto HSMCI_SR_SDIOIRQFORSLOTB = hr::field_mask_literal< 0x40000040, 9, 1 >();
   // SDIO Read Wait Operation Status
   constexpr auto HSMCI_SR_SDIOWAIT = hr::field_mask_literal< 0x40000040, 12, 1 >();
   // CE-ATA Completion Signal Received
   constexpr auto HSMCI_SR_CSRCV = hr::field_mask_literal< 0x40000040, 13, 1 >();
   // Response Index Error
   constexpr auto HSMCI_SR_RINDE = hr::field_mask_literal< 0x40000040, 16, 1 >();
   // Response Direction Error
   constexpr auto HSMCI_SR_RDIRE = hr::field_mask_literal< 0x40000040, 17, 1 >();
   // Response CRC Error
   constexpr auto HSMCI_SR_RCRCE = hr::field_mask_literal< 0x40000040, 18, 1 >();
   // Response End Bit Error
   constexpr auto HSMCI_SR_RENDE = hr::field_mask_literal< 0x40000040, 19, 1 >();
   // Response Time-out Error
   constexpr auto HSMCI_SR_RTOE = hr::field_mask_literal< 0x40000040, 20, 1 >();
   // Data CRC Error
   constexpr auto HSMCI_SR_DCRCE = hr::field_mask_literal< 0x40000040, 21, 1 >();
   // Data Time-out Error
   constexpr auto HSMCI_SR_DTOE = hr::field_mask_literal< 0x40000040, 22, 1 >();
   // Completion Signal Time-out Error
   constexpr auto HSMCI_SR_CSTOE = hr::field_mask_literal< 0x40000040, 23, 1 >();
   // DMA Block Overrun Error
   constexpr auto HSMCI_SR_BLKOVRE = hr::field_mask_literal< 0x40000040, 24, 1 >();
   // DMA Transfer done
   constexpr auto HSMCI_SR_DMADONE = hr::field_mask_literal< 0x40000040, 25, 1 >();
   // FIFO empty flag
   constexpr auto HSMCI_SR_FIFOEMPTY = hr::field_mask_literal< 0x40000040, 26, 1 >();
   // Transfer Done flag
   constexpr auto HSMCI_SR_XFRDONE = hr::field_mask_literal< 0x40000040, 27, 1 >();
   // Boot Operation Acknowledge Received
   constexpr auto HSMCI_SR_ACKRCV = hr::field_mask_literal< 0x40000040, 28, 1 >();
   // Boot Operation Acknowledge Error
   constexpr auto HSMCI_SR_ACKRCVE = hr::field_mask_literal< 0x40000040, 29, 1 >();
   // Overrun
   constexpr auto HSMCI_SR_OVRE = hr::field_mask_literal< 0x40000040, 30, 1 >();
   // Underrun
   constexpr auto HSMCI_SR_UNRE = hr::field_mask_literal< 0x40000040, 31, 1 >();

// IER
   // Command Ready Interrupt Enable
   constexpr auto HSMCI_IER_CMDRDY = hr::field_mask_literal< 0x40000044, 0, 1 >();
   // Receiver Ready Interrupt Enable
   constexpr auto HSMCI_IER_RXRDY = hr::field_mask_literal< 0x40000044, 1, 1 >();
   // Transmit Ready Interrupt Enable
   constexpr auto HSMCI_IER_TXRDY = hr::field_mask_literal< 0x40000044, 2, 1 >();
   // Data Block Ended Interrupt Enable
   constexpr auto HSMCI_IER_BLKE = hr::field_mask_literal< 0x40000044, 3, 1 >();
   // Data Transfer in Progress Interrupt Enable
   constexpr auto HSMCI_IER_DTIP = hr::field_mask_literal< 0x40000044, 4, 1 >();
   // Data Not Busy Interrupt Enable
   constexpr auto HSMCI_IER_NOTBUSY = hr::field_mask_literal< 0x40000044, 5, 1 >();
   // None
   constexpr auto HSMCI_IER_SDIOIRQFORSLOTA = hr::field_mask_literal< 0x40000044, 8, 1 >();
   // None
   constexpr auto HSMCI_IER_SDIOIRQFORSLOTB = hr::field_mask_literal< 0x40000044, 9, 1 >();
   // SDIO Read Wait Operation Status Interrupt Enable
   constexpr auto HSMCI_IER_SDIOWAIT = hr::field_mask_literal< 0x40000044, 12, 1 >();
   // Completion Signal Received Interrupt Enable
   constexpr auto HSMCI_IER_CSRCV = hr::field_mask_literal< 0x40000044, 13, 1 >();
   // Response Index Error Interrupt Enable
   constexpr auto HSMCI_IER_RINDE = hr::field_mask_literal< 0x40000044, 16, 1 >();
   // Response Direction Error Interrupt Enable
   constexpr auto HSMCI_IER_RDIRE = hr::field_mask_literal< 0x40000044, 17, 1 >();
   // Response CRC Error Interrupt Enable
   constexpr auto HSMCI_IER_RCRCE = hr::field_mask_literal< 0x40000044, 18, 1 >();
   // Response End Bit Error Interrupt Enable
   constexpr auto HSMCI_IER_RENDE = hr::field_mask_literal< 0x40000044, 19, 1 >();
   // Response Time-out Error Interrupt Enable
   constexpr auto HSMCI_IER_RTOE = hr::field_mask_literal< 0x40000044, 20, 1 >();
   // Data CRC Error Interrupt Enable
   constexpr auto HSMCI_IER_DCRCE = hr::field_mask_literal< 0x40000044, 21, 1 >();
   // Data Time-out Error Interrupt Enable
   constexpr auto HSMCI_IER_DTOE = hr::field_mask_literal< 0x40000044, 22, 1 >();
   // Completion Signal Timeout Error Interrupt Enable
   constexpr auto HSMCI_IER_CSTOE = hr::field_mask_literal< 0x40000044, 23, 1 >();
   // DMA Block Overrun Error Interrupt Enable
   constexpr auto HSMCI_IER_BLKOVRE = hr::field_mask_literal< 0x40000044, 24, 1 >();
   // DMA Transfer completed Interrupt Enable
   constexpr auto HSMCI_IER_DMADONE = hr::field_mask_literal< 0x40000044, 25, 1 >();
   // FIFO empty Interrupt enable
   constexpr auto HSMCI_IER_FIFOEMPTY = hr::field_mask_literal< 0x40000044, 26, 1 >();
   // Transfer Done Interrupt enable
   constexpr auto HSMCI_IER_XFRDONE = hr::field_mask_literal< 0x40000044, 27, 1 >();
   // Boot Acknowledge Interrupt Enable
   constexpr auto HSMCI_IER_ACKRCV = hr::field_mask_literal< 0x40000044, 28, 1 >();
   // Boot Acknowledge Error Interrupt Enable
   constexpr auto HSMCI_IER_ACKRCVE = hr::field_mask_literal< 0x40000044, 29, 1 >();
   // Overrun Interrupt Enable
   constexpr auto HSMCI_IER_OVRE = hr::field_mask_literal< 0x40000044, 30, 1 >();
   // Underrun Interrupt Enable
   constexpr auto HSMCI_IER_UNRE = hr::field_mask_literal< 0x40000044, 31, 1 >();

// IDR
   // Command Ready Interrupt Disable
   constexpr auto HSMCI_IDR_CMDRDY = hr::field_mask_literal< 0x40000048, 0, 1 >();
   // Receiver Ready Interrupt Disable
   constexpr auto HSMCI_IDR_RXRDY = hr::field_mask_literal< 0x40000048, 1, 1 >();
   // Transmit Ready Interrupt Disable
   constexpr auto HSMCI_IDR_TXRDY = hr::field_mask_literal< 0x40000048, 2, 1 >();
   // Data Block Ended Interrupt Disable
   constexpr auto HSMCI_IDR_BLKE = hr::field_mask_literal< 0x40000048, 3, 1 >();
   // Data Transfer in Progress Interrupt Disable
   constexpr auto HSMCI_IDR_DTIP = hr::field_mask_literal< 0x40000048, 4, 1 >();
   // Data Not Busy Interrupt Disable
   constexpr auto HSMCI_IDR_NOTBUSY = hr::field_mask_literal< 0x40000048, 5, 1 >();
   // None
   constexpr auto HSMCI_IDR_SDIOIRQFORSLOTA = hr::field_mask_literal< 0x40000048, 8, 1 >();
   // None
   constexpr auto HSMCI_IDR_SDIOIRQFORSLOTB = hr::field_mask_literal< 0x40000048, 9, 1 >();
   // SDIO Read Wait Operation Status Interrupt Disable
   constexpr auto HSMCI_IDR_SDIOWAIT = hr::field_mask_literal< 0x40000048, 12, 1 >();
   // Completion Signal received interrupt Disable
   constexpr auto HSMCI_IDR_CSRCV = hr::field_mask_literal< 0x40000048, 13, 1 >();
   // Response Index Error Interrupt Disable
   constexpr auto HSMCI_IDR_RINDE = hr::field_mask_literal< 0x40000048, 16, 1 >();
   // Response Direction Error Interrupt Disable
   constexpr auto HSMCI_IDR_RDIRE = hr::field_mask_literal< 0x40000048, 17, 1 >();
   // Response CRC Error Interrupt Disable
   constexpr auto HSMCI_IDR_RCRCE = hr::field_mask_literal< 0x40000048, 18, 1 >();
   // Response End Bit Error Interrupt Disable
   constexpr auto HSMCI_IDR_RENDE = hr::field_mask_literal< 0x40000048, 19, 1 >();
   // Response Time-out Error Interrupt Disable
   constexpr auto HSMCI_IDR_RTOE = hr::field_mask_literal< 0x40000048, 20, 1 >();
   // Data CRC Error Interrupt Disable
   constexpr auto HSMCI_IDR_DCRCE = hr::field_mask_literal< 0x40000048, 21, 1 >();
   // Data Time-out Error Interrupt Disable
   constexpr auto HSMCI_IDR_DTOE = hr::field_mask_literal< 0x40000048, 22, 1 >();
   // Completion Signal Time out Error Interrupt Disable
   constexpr auto HSMCI_IDR_CSTOE = hr::field_mask_literal< 0x40000048, 23, 1 >();
   // DMA Block Overrun Error Interrupt Disable
   constexpr auto HSMCI_IDR_BLKOVRE = hr::field_mask_literal< 0x40000048, 24, 1 >();
   // DMA Transfer completed Interrupt Disable
   constexpr auto HSMCI_IDR_DMADONE = hr::field_mask_literal< 0x40000048, 25, 1 >();
   // FIFO empty Interrupt Disable
   constexpr auto HSMCI_IDR_FIFOEMPTY = hr::field_mask_literal< 0x40000048, 26, 1 >();
   // Transfer Done Interrupt Disable
   constexpr auto HSMCI_IDR_XFRDONE = hr::field_mask_literal< 0x40000048, 27, 1 >();
   // Boot Acknowledge Interrupt Disable
   constexpr auto HSMCI_IDR_ACKRCV = hr::field_mask_literal< 0x40000048, 28, 1 >();
   // Boot Acknowledge Error Interrupt Disable
   constexpr auto HSMCI_IDR_ACKRCVE = hr::field_mask_literal< 0x40000048, 29, 1 >();
   // Overrun Interrupt Disable
   constexpr auto HSMCI_IDR_OVRE = hr::field_mask_literal< 0x40000048, 30, 1 >();
   // Underrun Interrupt Disable
   constexpr auto HSMCI_IDR_UNRE = hr::field_mask_literal< 0x40000048, 31, 1 >();

// IMR
   // Command Ready Interrupt Mask
   constexpr auto HSMCI_IMR_CMDRDY = hr::field_mask_literal< 0x4000004c, 0, 1 >();
   // Receiver Ready Interrupt Mask
   constexpr auto HSMCI_IMR_RXRDY = hr::field_mask_literal< 0x4000004c, 1, 1 >();
   // Transmit Ready Interrupt Mask
   constexpr auto HSMCI_IMR_TXRDY = hr::field_mask_literal< 0x4000004c, 2, 1 >();
   // Data Block Ended Interrupt Mask
   constexpr auto HSMCI_IMR_BLKE = hr::field_mask_literal< 0x4000004c, 3, 1 >();
   // Data Transfer in Progress Interrupt Mask
   constexpr auto HSMCI_IMR_DTIP = hr::field_mask_literal< 0x4000004c, 4, 1 >();
   // Data Not Busy Interrupt Mask
   constexpr auto HSMCI_IMR_NOTBUSY = hr::field_mask_literal< 0x4000004c, 5, 1 >();
   // None
   constexpr auto HSMCI_IMR_SDIOIRQFORSLOTA = hr::field_mask_literal< 0x4000004c, 8, 1 >();
   // None
   constexpr auto HSMCI_IMR_SDIOIRQFORSLOTB = hr::field_mask_literal< 0x4000004c, 9, 1 >();
   // SDIO Read Wait Operation Status Interrupt Mask
   constexpr auto HSMCI_IMR_SDIOWAIT = hr::field_mask_literal< 0x4000004c, 12, 1 >();
   // Completion Signal Received Interrupt Mask
   constexpr auto HSMCI_IMR_CSRCV = hr::field_mask_literal< 0x4000004c, 13, 1 >();
   // Response Index Error Interrupt Mask
   constexpr auto HSMCI_IMR_RINDE = hr::field_mask_literal< 0x4000004c, 16, 1 >();
   // Response Direction Error Interrupt Mask
   constexpr auto HSMCI_IMR_RDIRE = hr::field_mask_literal< 0x4000004c, 17, 1 >();
   // Response CRC Error Interrupt Mask
   constexpr auto HSMCI_IMR_RCRCE = hr::field_mask_literal< 0x4000004c, 18, 1 >();
   // Response End Bit Error Interrupt Mask
   constexpr auto HSMCI_IMR_RENDE = hr::field_mask_literal< 0x4000004c, 19, 1 >();
   // Response Time-out Error Interrupt Mask
   constexpr auto HSMCI_IMR_RTOE = hr::field_mask_literal< 0x4000004c, 20, 1 >();
   // Data CRC Error Interrupt Mask
   constexpr auto HSMCI_IMR_DCRCE = hr::field_mask_literal< 0x4000004c, 21, 1 >();
   // Data Time-out Error Interrupt Mask
   constexpr auto HSMCI_IMR_DTOE = hr::field_mask_literal< 0x4000004c, 22, 1 >();
   // Completion Signal Time-out Error Interrupt Mask
   constexpr auto HSMCI_IMR_CSTOE = hr::field_mask_literal< 0x4000004c, 23, 1 >();
   // DMA Block Overrun Error Interrupt Mask
   constexpr auto HSMCI_IMR_BLKOVRE = hr::field_mask_literal< 0x4000004c, 24, 1 >();
   // DMA Transfer Completed Interrupt Mask
   constexpr auto HSMCI_IMR_DMADONE = hr::field_mask_literal< 0x4000004c, 25, 1 >();
   // FIFO Empty Interrupt Mask
   constexpr auto HSMCI_IMR_FIFOEMPTY = hr::field_mask_literal< 0x4000004c, 26, 1 >();
   // Transfer Done Interrupt Mask
   constexpr auto HSMCI_IMR_XFRDONE = hr::field_mask_literal< 0x4000004c, 27, 1 >();
   // Boot Operation Acknowledge Received Interrupt Mask
   constexpr auto HSMCI_IMR_ACKRCV = hr::field_mask_literal< 0x4000004c, 28, 1 >();
   // Boot Operation Acknowledge Error Interrupt Mask
   constexpr auto HSMCI_IMR_ACKRCVE = hr::field_mask_literal< 0x4000004c, 29, 1 >();
   // Overrun Interrupt Mask
   constexpr auto HSMCI_IMR_OVRE = hr::field_mask_literal< 0x4000004c, 30, 1 >();
   // Underrun Interrupt Mask
   constexpr auto HSMCI_IMR_UNRE = hr::field_mask_literal< 0x4000004c, 31, 1 >();

// DMA
   // DMA Write Buffer Offset
   constexpr auto HSMCI_DMA_OFFSET_Msk = hr::field_mask_literal< 0x40000050, 0, 2 >();
   // DMA Channel Read and Write Chunk Size
   constexpr auto HSMCI_DMA_CHKSIZE = hr::field_mask_literal< 0x40000050, 4, 1 >();
      // 1 data available
      constexpr auto HSMCI_DMA_CHKSIZE_1 = hr::field_value_literal< 0x40000050, 4, 1 >( 0 );
      // 4 data available
      constexpr auto HSMCI_DMA_CHKSIZE_4 = hr::field_value_literal< 0x40000050, 4, 1 >( 1 );
   // DMA Hardware Handshaking Enable
   constexpr auto HSMCI_DMA_DMAEN = hr::field_mask_literal< 0x40000050, 8, 1 >();
   // Read Optimization with padding
   constexpr auto HSMCI_DMA_ROPT = hr::field_mask_literal< 0x40000050, 12, 1 >();

// CFG
   // HSMCI Internal FIFO control mode
   constexpr auto HSMCI_CFG_FIFOMODE = hr::field_mask_literal< 0x40000054, 0, 1 >();
   // Flow Error flag reset control mode
   constexpr auto HSMCI_CFG_FERRCTRL = hr::field_mask_literal< 0x40000054, 4, 1 >();
   // High Speed Mode
   constexpr auto HSMCI_CFG_HSMODE = hr::field_mask_literal< 0x40000054, 8, 1 >();
   // Synchronize on the last block
   constexpr auto HSMCI_CFG_LSYNC = hr::field_mask_literal< 0x40000054, 12, 1 >();

// WPMR
   // Write Protection Enable
   constexpr auto HSMCI_WPMR_WP_EN = hr::field_mask_literal< 0x400000e4, 0, 1 >();
   // Write Protection Key password
   constexpr auto HSMCI_WPMR_WP_KEY_Msk = hr::field_mask_literal< 0x400000e4, 8, 24 >();

// WPSR
   // Write Protection Violation Status
   constexpr auto HSMCI_WPSR_WP_VS_Msk = hr::field_mask_literal< 0x400000e8, 0, 4 >();
      // No Write Protection Violation occurred since the last read of this register (WP_SR)
      constexpr auto HSMCI_WPSR_WP_VS_NONE = hr::field_value_literal< 0x400000e8, 0, 4 >( 0 );
      // Write Protection detected unauthorized attempt to write a control register had occurred (since the last read.)
      constexpr auto HSMCI_WPSR_WP_VS_WRITE = hr::field_value_literal< 0x400000e8, 0, 4 >( 1 );
      // Software reset had been performed while Write Protection was enabled (since the last read).
      constexpr auto HSMCI_WPSR_WP_VS_RESET = hr::field_value_literal< 0x400000e8, 0, 4 >( 2 );
      // Both Write Protection violation and software reset with Write Protection enabled have occurred since the last read.
      constexpr auto HSMCI_WPSR_WP_VS_BOTH = hr::field_value_literal< 0x400000e8, 0, 4 >( 3 );
   // Write Protection Violation SouRCe
   constexpr auto HSMCI_WPSR_WP_VSRC_Msk = hr::field_mask_literal< 0x400000e8, 8, 16 >();

// FIFO[0]
   // Data to Read or Data to Write
   constexpr auto HSMCI_FIFO_DATA_Msk = hr::field_mask_literal< 0x40000200, 0, 32 >();

// =============================================================================
//
// SSC
// base address = 0x40004000
// Synchronous Serial Controller
//
// =============================================================================

struct Ssc {
   hr::hardware_register<0x40004000> CR;
   hr::hardware_register<0x40004004> CMR;
   hr::reserved< 0x8, 2 > _reserved_at_0x8;
   hr::hardware_register<0x40004010> RCMR;
   hr::hardware_register<0x40004014> RFMR;
   hr::hardware_register<0x40004018> TCMR;
   hr::hardware_register<0x4000401c> TFMR;
   hr::hardware_register<0x40004020> RHR;
   hr::hardware_register<0x40004024> THR;
   hr::reserved< 0x28, 2 > _reserved_at_0x28;
   hr::hardware_register<0x40004030> RSHR;
   hr::hardware_register<0x40004034> TSHR;
   hr::hardware_register<0x40004038> RC0R;
   hr::hardware_register<0x4000403c> RC1R;
   hr::hardware_register<0x40004040> SR;
   hr::hardware_register<0x40004044> IER;
   hr::hardware_register<0x40004048> IDR;
   hr::hardware_register<0x4000404c> IMR;
   hr::reserved< 0x50, 37 > _reserved_at_0x50;
   hr::hardware_register<0x400040e4> WPMR;
   hr::hardware_register<0x400040e8> WPSR;
};

#define SSC ( ( Ssc * ) 0x40004000 )

// CR
   // Receive Enable
   constexpr auto SSC_CR_RXEN = hr::field_mask_literal< 0x40004000, 0, 1 >();
   // Receive Disable
   constexpr auto SSC_CR_RXDIS = hr::field_mask_literal< 0x40004000, 1, 1 >();
   // Transmit Enable
   constexpr auto SSC_CR_TXEN = hr::field_mask_literal< 0x40004000, 8, 1 >();
   // Transmit Disable
   constexpr auto SSC_CR_TXDIS = hr::field_mask_literal< 0x40004000, 9, 1 >();
   // Software Reset
   constexpr auto SSC_CR_SWRST = hr::field_mask_literal< 0x40004000, 15, 1 >();

// CMR
   // Clock Divider
   constexpr auto SSC_CMR_DIV_Msk = hr::field_mask_literal< 0x40004004, 0, 12 >();

// RCMR
   // Receive Clock Selection
   constexpr auto SSC_RCMR_CKS_Msk = hr::field_mask_literal< 0x40004010, 0, 2 >();
      // Divided Clock
      constexpr auto SSC_RCMR_CKS_MCK = hr::field_value_literal< 0x40004010, 0, 2 >( 0 );
      // TK Clock signal
      constexpr auto SSC_RCMR_CKS_TK = hr::field_value_literal< 0x40004010, 0, 2 >( 1 );
      // RK pin
      constexpr auto SSC_RCMR_CKS_RK = hr::field_value_literal< 0x40004010, 0, 2 >( 2 );
   // Receive Clock Output Mode Selection
   constexpr auto SSC_RCMR_CKO_Msk = hr::field_mask_literal< 0x40004010, 2, 3 >();
      // None
      constexpr auto SSC_RCMR_CKO_NONE = hr::field_value_literal< 0x40004010, 2, 3 >( 0 );
      // Continuous Receive Clock
      constexpr auto SSC_RCMR_CKO_CONTINUOUS = hr::field_value_literal< 0x40004010, 2, 3 >( 1 );
      // Receive Clock only during data transfers
      constexpr auto SSC_RCMR_CKO_TRANSFER = hr::field_value_literal< 0x40004010, 2, 3 >( 2 );
   // Receive Clock Inversion
   constexpr auto SSC_RCMR_CKI = hr::field_mask_literal< 0x40004010, 5, 1 >();
   // Receive Clock Gating Selection
   constexpr auto SSC_RCMR_CKG_Msk = hr::field_mask_literal< 0x40004010, 6, 2 >();
      // None
      constexpr auto SSC_RCMR_CKG_NONE = hr::field_value_literal< 0x40004010, 6, 2 >( 0 );
      // Continuous Receive Clock
      constexpr auto SSC_RCMR_CKG_CONTINUOUS = hr::field_value_literal< 0x40004010, 6, 2 >( 1 );
      // Receive Clock only during data transfers
      constexpr auto SSC_RCMR_CKG_TRANSFER = hr::field_value_literal< 0x40004010, 6, 2 >( 2 );
   // Receive Start Selection
   constexpr auto SSC_RCMR_START_Msk = hr::field_mask_literal< 0x40004010, 8, 4 >();
      // Continuous, as soon as the receiver is enabled, and immediately after the end of transfer of the previous data.
      constexpr auto SSC_RCMR_START_CONTINUOUS = hr::field_value_literal< 0x40004010, 8, 4 >( 0 );
      // Transmit start
      constexpr auto SSC_RCMR_START_TRANSMIT = hr::field_value_literal< 0x40004010, 8, 4 >( 1 );
      // Detection of a low level on RF signal
      constexpr auto SSC_RCMR_START_RF_LOW = hr::field_value_literal< 0x40004010, 8, 4 >( 2 );
      // Detection of a high level on RF signal
      constexpr auto SSC_RCMR_START_RF_HIGH = hr::field_value_literal< 0x40004010, 8, 4 >( 3 );
      // Detection of a falling edge on RF signal
      constexpr auto SSC_RCMR_START_RF_FALLING = hr::field_value_literal< 0x40004010, 8, 4 >( 4 );
      // Detection of a rising edge on RF signal
      constexpr auto SSC_RCMR_START_RF_RISING = hr::field_value_literal< 0x40004010, 8, 4 >( 5 );
      // Detection of any level change on RF signal
      constexpr auto SSC_RCMR_START_RF_LEVEL = hr::field_value_literal< 0x40004010, 8, 4 >( 6 );
      // Detection of any edge on RF signal
      constexpr auto SSC_RCMR_START_RF_EDGE = hr::field_value_literal< 0x40004010, 8, 4 >( 7 );
      // Compare 0
      constexpr auto SSC_RCMR_START_CMP_0 = hr::field_value_literal< 0x40004010, 8, 4 >( 8 );
   // Receive Stop Selection
   constexpr auto SSC_RCMR_STOP = hr::field_mask_literal< 0x40004010, 12, 1 >();
   // Receive Start Delay
   constexpr auto SSC_RCMR_STTDLY_Msk = hr::field_mask_literal< 0x40004010, 16, 8 >();
   // Receive Period Divider Selection
   constexpr auto SSC_RCMR_PERIOD_Msk = hr::field_mask_literal< 0x40004010, 24, 8 >();

// RFMR
   // Data Length
   constexpr auto SSC_RFMR_DATLEN_Msk = hr::field_mask_literal< 0x40004014, 0, 5 >();
   // Loop Mode
   constexpr auto SSC_RFMR_LOOP = hr::field_mask_literal< 0x40004014, 5, 1 >();
   // Most Significant Bit First
   constexpr auto SSC_RFMR_MSBF = hr::field_mask_literal< 0x40004014, 7, 1 >();
   // Data Number per Frame
   constexpr auto SSC_RFMR_DATNB_Msk = hr::field_mask_literal< 0x40004014, 8, 4 >();
   // Receive Frame Sync Length
   constexpr auto SSC_RFMR_FSLEN_Msk = hr::field_mask_literal< 0x40004014, 16, 4 >();
   // Receive Frame Sync Output Selection
   constexpr auto SSC_RFMR_FSOS_Msk = hr::field_mask_literal< 0x40004014, 20, 3 >();
      // None
      constexpr auto SSC_RFMR_FSOS_NONE = hr::field_value_literal< 0x40004014, 20, 3 >( 0 );
      // Negative Pulse
      constexpr auto SSC_RFMR_FSOS_NEGATIVE = hr::field_value_literal< 0x40004014, 20, 3 >( 1 );
      // Positive Pulse
      constexpr auto SSC_RFMR_FSOS_POSITIVE = hr::field_value_literal< 0x40004014, 20, 3 >( 2 );
      // Driven Low during data transfer
      constexpr auto SSC_RFMR_FSOS_LOW = hr::field_value_literal< 0x40004014, 20, 3 >( 3 );
      // Driven High during data transfer
      constexpr auto SSC_RFMR_FSOS_HIGH = hr::field_value_literal< 0x40004014, 20, 3 >( 4 );
      // Toggling at each start of data transfer
      constexpr auto SSC_RFMR_FSOS_TOGGLING = hr::field_value_literal< 0x40004014, 20, 3 >( 5 );
   // Frame Sync Edge Detection
   constexpr auto SSC_RFMR_FSEDGE = hr::field_mask_literal< 0x40004014, 24, 1 >();
      // Positive Edge Detection
      constexpr auto SSC_RFMR_FSEDGE_POSITIVE = hr::field_value_literal< 0x40004014, 24, 1 >( 0 );
      // Negative Edge Detection
      constexpr auto SSC_RFMR_FSEDGE_NEGATIVE = hr::field_value_literal< 0x40004014, 24, 1 >( 1 );
   // FSLEN Field Extension
   constexpr auto SSC_RFMR_FSLEN_EXT_Msk = hr::field_mask_literal< 0x40004014, 28, 4 >();

// TCMR
   // Transmit Clock Selection
   constexpr auto SSC_TCMR_CKS_Msk = hr::field_mask_literal< 0x40004018, 0, 2 >();
      // Divided Clock
      constexpr auto SSC_TCMR_CKS_MCK = hr::field_value_literal< 0x40004018, 0, 2 >( 0 );
      // TK Clock signal
      constexpr auto SSC_TCMR_CKS_TK = hr::field_value_literal< 0x40004018, 0, 2 >( 1 );
      // RK pin
      constexpr auto SSC_TCMR_CKS_RK = hr::field_value_literal< 0x40004018, 0, 2 >( 2 );
   // Transmit Clock Output Mode Selection
   constexpr auto SSC_TCMR_CKO_Msk = hr::field_mask_literal< 0x40004018, 2, 3 >();
      // None
      constexpr auto SSC_TCMR_CKO_NONE = hr::field_value_literal< 0x40004018, 2, 3 >( 0 );
      // Continuous Receive Clock
      constexpr auto SSC_TCMR_CKO_CONTINUOUS = hr::field_value_literal< 0x40004018, 2, 3 >( 1 );
      // Transmit Clock only during data transfers
      constexpr auto SSC_TCMR_CKO_TRANSFER = hr::field_value_literal< 0x40004018, 2, 3 >( 2 );
   // Transmit Clock Inversion
   constexpr auto SSC_TCMR_CKI = hr::field_mask_literal< 0x40004018, 5, 1 >();
   // Transmit Clock Gating Selection
   constexpr auto SSC_TCMR_CKG_Msk = hr::field_mask_literal< 0x40004018, 6, 2 >();
      // None
      constexpr auto SSC_TCMR_CKG_NONE = hr::field_value_literal< 0x40004018, 6, 2 >( 0 );
      // Transmit Clock enabled only if TF Low
      constexpr auto SSC_TCMR_CKG_CONTINUOUS = hr::field_value_literal< 0x40004018, 6, 2 >( 1 );
      // Transmit Clock enabled only if TF High
      constexpr auto SSC_TCMR_CKG_TRANSFER = hr::field_value_literal< 0x40004018, 6, 2 >( 2 );
   // Transmit Start Selection
   constexpr auto SSC_TCMR_START_Msk = hr::field_mask_literal< 0x40004018, 8, 4 >();
      // Continuous, as soon as a word is written in the SSC_THR Register (if Transmit is enabled), and immediately after the end of transfer of the previous data.
      constexpr auto SSC_TCMR_START_CONTINUOUS = hr::field_value_literal< 0x40004018, 8, 4 >( 0 );
      // Receive start
      constexpr auto SSC_TCMR_START_RECEIVE = hr::field_value_literal< 0x40004018, 8, 4 >( 1 );
      // Detection of a low level on TF signal
      constexpr auto SSC_TCMR_START_RF_LOW = hr::field_value_literal< 0x40004018, 8, 4 >( 2 );
      // Detection of a high level on TF signal
      constexpr auto SSC_TCMR_START_RF_HIGH = hr::field_value_literal< 0x40004018, 8, 4 >( 3 );
      // Detection of a falling edge on TF signal
      constexpr auto SSC_TCMR_START_RF_FALLING = hr::field_value_literal< 0x40004018, 8, 4 >( 4 );
      // Detection of a rising edge on TF signal
      constexpr auto SSC_TCMR_START_RF_RISING = hr::field_value_literal< 0x40004018, 8, 4 >( 5 );
      // Detection of any level change on TF signal
      constexpr auto SSC_TCMR_START_RF_LEVEL = hr::field_value_literal< 0x40004018, 8, 4 >( 6 );
      // Detection of any edge on TF signal
      constexpr auto SSC_TCMR_START_RF_EDGE = hr::field_value_literal< 0x40004018, 8, 4 >( 7 );
      // Compare 0
      constexpr auto SSC_TCMR_START_CMP_0 = hr::field_value_literal< 0x40004018, 8, 4 >( 8 );
   // Transmit Start Delay
   constexpr auto SSC_TCMR_STTDLY_Msk = hr::field_mask_literal< 0x40004018, 16, 8 >();
   // Transmit Period Divider Selection
   constexpr auto SSC_TCMR_PERIOD_Msk = hr::field_mask_literal< 0x40004018, 24, 8 >();

// TFMR
   // Data Length
   constexpr auto SSC_TFMR_DATLEN_Msk = hr::field_mask_literal< 0x4000401c, 0, 5 >();
   // Data Default Value
   constexpr auto SSC_TFMR_DATDEF = hr::field_mask_literal< 0x4000401c, 5, 1 >();
   // Most Significant Bit First
   constexpr auto SSC_TFMR_MSBF = hr::field_mask_literal< 0x4000401c, 7, 1 >();
   // Data Number per frame
   constexpr auto SSC_TFMR_DATNB_Msk = hr::field_mask_literal< 0x4000401c, 8, 4 >();
   // Transmit Frame Sync Length
   constexpr auto SSC_TFMR_FSLEN_Msk = hr::field_mask_literal< 0x4000401c, 16, 4 >();
   // Transmit Frame Sync Output Selection
   constexpr auto SSC_TFMR_FSOS_Msk = hr::field_mask_literal< 0x4000401c, 20, 3 >();
      // None
      constexpr auto SSC_TFMR_FSOS_NONE = hr::field_value_literal< 0x4000401c, 20, 3 >( 0 );
      // Negative Pulse
      constexpr auto SSC_TFMR_FSOS_NEGATIVE = hr::field_value_literal< 0x4000401c, 20, 3 >( 1 );
      // Positive Pulse
      constexpr auto SSC_TFMR_FSOS_POSITIVE = hr::field_value_literal< 0x4000401c, 20, 3 >( 2 );
      // Driven Low during data transfer
      constexpr auto SSC_TFMR_FSOS_LOW = hr::field_value_literal< 0x4000401c, 20, 3 >( 3 );
      // Driven High during data transfer
      constexpr auto SSC_TFMR_FSOS_HIGH = hr::field_value_literal< 0x4000401c, 20, 3 >( 4 );
      // Toggling at each start of data transfer
      constexpr auto SSC_TFMR_FSOS_TOGGLING = hr::field_value_literal< 0x4000401c, 20, 3 >( 5 );
   // Frame Sync Data Enable
   constexpr auto SSC_TFMR_FSDEN = hr::field_mask_literal< 0x4000401c, 23, 1 >();
   // Frame Sync Edge Detection
   constexpr auto SSC_TFMR_FSEDGE = hr::field_mask_literal< 0x4000401c, 24, 1 >();
      // Positive Edge Detection
      constexpr auto SSC_TFMR_FSEDGE_POSITIVE = hr::field_value_literal< 0x4000401c, 24, 1 >( 0 );
      // Negative Edge Detection
      constexpr auto SSC_TFMR_FSEDGE_NEGATIVE = hr::field_value_literal< 0x4000401c, 24, 1 >( 1 );
   // FSLEN Field Extension
   constexpr auto SSC_TFMR_FSLEN_EXT_Msk = hr::field_mask_literal< 0x4000401c, 28, 4 >();

// RHR
   // Receive Data
   constexpr auto SSC_RHR_RDAT_Msk = hr::field_mask_literal< 0x40004020, 0, 32 >();

// THR
   // Transmit Data
   constexpr auto SSC_THR_TDAT_Msk = hr::field_mask_literal< 0x40004024, 0, 32 >();

// RSHR
   // Receive Synchronization Data
   constexpr auto SSC_RSHR_RSDAT_Msk = hr::field_mask_literal< 0x40004030, 0, 16 >();

// TSHR
   // Transmit Synchronization Data
   constexpr auto SSC_TSHR_TSDAT_Msk = hr::field_mask_literal< 0x40004034, 0, 16 >();

// RC0R
   // Receive Compare Data 0
   constexpr auto SSC_RC0R_CP0_Msk = hr::field_mask_literal< 0x40004038, 0, 16 >();

// RC1R
   // Receive Compare Data 1
   constexpr auto SSC_RC1R_CP1_Msk = hr::field_mask_literal< 0x4000403c, 0, 16 >();

// SR
   // Transmit Ready
   constexpr auto SSC_SR_TXRDY = hr::field_mask_literal< 0x40004040, 0, 1 >();
   // Transmit Empty
   constexpr auto SSC_SR_TXEMPTY = hr::field_mask_literal< 0x40004040, 1, 1 >();
   // Receive Ready
   constexpr auto SSC_SR_RXRDY = hr::field_mask_literal< 0x40004040, 4, 1 >();
   // Receive Overrun
   constexpr auto SSC_SR_OVRUN = hr::field_mask_literal< 0x40004040, 5, 1 >();
   // Compare 0
   constexpr auto SSC_SR_CP0 = hr::field_mask_literal< 0x40004040, 8, 1 >();
   // Compare 1
   constexpr auto SSC_SR_CP1 = hr::field_mask_literal< 0x40004040, 9, 1 >();
   // Transmit Sync
   constexpr auto SSC_SR_TXSYN = hr::field_mask_literal< 0x40004040, 10, 1 >();
   // Receive Sync
   constexpr auto SSC_SR_RXSYN = hr::field_mask_literal< 0x40004040, 11, 1 >();
   // Transmit Enable
   constexpr auto SSC_SR_TXEN = hr::field_mask_literal< 0x40004040, 16, 1 >();
   // Receive Enable
   constexpr auto SSC_SR_RXEN = hr::field_mask_literal< 0x40004040, 17, 1 >();

// IER
   // Transmit Ready Interrupt Enable
   constexpr auto SSC_IER_TXRDY = hr::field_mask_literal< 0x40004044, 0, 1 >();
   // Transmit Empty Interrupt Enable
   constexpr auto SSC_IER_TXEMPTY = hr::field_mask_literal< 0x40004044, 1, 1 >();
   // Receive Ready Interrupt Enable
   constexpr auto SSC_IER_RXRDY = hr::field_mask_literal< 0x40004044, 4, 1 >();
   // Receive Overrun Interrupt Enable
   constexpr auto SSC_IER_OVRUN = hr::field_mask_literal< 0x40004044, 5, 1 >();
   // Compare 0 Interrupt Enable
   constexpr auto SSC_IER_CP0 = hr::field_mask_literal< 0x40004044, 8, 1 >();
   // Compare 1 Interrupt Enable
   constexpr auto SSC_IER_CP1 = hr::field_mask_literal< 0x40004044, 9, 1 >();
   // Tx Sync Interrupt Enable
   constexpr auto SSC_IER_TXSYN = hr::field_mask_literal< 0x40004044, 10, 1 >();
   // Rx Sync Interrupt Enable
   constexpr auto SSC_IER_RXSYN = hr::field_mask_literal< 0x40004044, 11, 1 >();

// IDR
   // Transmit Ready Interrupt Disable
   constexpr auto SSC_IDR_TXRDY = hr::field_mask_literal< 0x40004048, 0, 1 >();
   // Transmit Empty Interrupt Disable
   constexpr auto SSC_IDR_TXEMPTY = hr::field_mask_literal< 0x40004048, 1, 1 >();
   // Receive Ready Interrupt Disable
   constexpr auto SSC_IDR_RXRDY = hr::field_mask_literal< 0x40004048, 4, 1 >();
   // Receive Overrun Interrupt Disable
   constexpr auto SSC_IDR_OVRUN = hr::field_mask_literal< 0x40004048, 5, 1 >();
   // Compare 0 Interrupt Disable
   constexpr auto SSC_IDR_CP0 = hr::field_mask_literal< 0x40004048, 8, 1 >();
   // Compare 1 Interrupt Disable
   constexpr auto SSC_IDR_CP1 = hr::field_mask_literal< 0x40004048, 9, 1 >();
   // Tx Sync Interrupt Enable
   constexpr auto SSC_IDR_TXSYN = hr::field_mask_literal< 0x40004048, 10, 1 >();
   // Rx Sync Interrupt Enable
   constexpr auto SSC_IDR_RXSYN = hr::field_mask_literal< 0x40004048, 11, 1 >();

// IMR
   // Transmit Ready Interrupt Mask
   constexpr auto SSC_IMR_TXRDY = hr::field_mask_literal< 0x4000404c, 0, 1 >();
   // Transmit Empty Interrupt Mask
   constexpr auto SSC_IMR_TXEMPTY = hr::field_mask_literal< 0x4000404c, 1, 1 >();
   // Receive Ready Interrupt Mask
   constexpr auto SSC_IMR_RXRDY = hr::field_mask_literal< 0x4000404c, 4, 1 >();
   // Receive Overrun Interrupt Mask
   constexpr auto SSC_IMR_OVRUN = hr::field_mask_literal< 0x4000404c, 5, 1 >();
   // Compare 0 Interrupt Mask
   constexpr auto SSC_IMR_CP0 = hr::field_mask_literal< 0x4000404c, 8, 1 >();
   // Compare 1 Interrupt Mask
   constexpr auto SSC_IMR_CP1 = hr::field_mask_literal< 0x4000404c, 9, 1 >();
   // Tx Sync Interrupt Mask
   constexpr auto SSC_IMR_TXSYN = hr::field_mask_literal< 0x4000404c, 10, 1 >();
   // Rx Sync Interrupt Mask
   constexpr auto SSC_IMR_RXSYN = hr::field_mask_literal< 0x4000404c, 11, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto SSC_WPMR_WPEN = hr::field_mask_literal< 0x400040e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto SSC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400040e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto SSC_WPSR_WPVS = hr::field_mask_literal< 0x400040e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto SSC_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400040e8, 8, 16 >();

// =============================================================================
//
// SPI0
// base address = 0x40008000
// Serial Peripheral Interface 0
//
// =============================================================================

struct Spi0 {
   hr::hardware_register<0x40008000> CR;
   hr::hardware_register<0x40008004> MR;
   hr::hardware_register<0x40008008> RDR;
   hr::hardware_register<0x4000800c> TDR;
   hr::hardware_register<0x40008010> SR;
   hr::hardware_register<0x40008014> IER;
   hr::hardware_register<0x40008018> IDR;
   hr::hardware_register<0x4000801c> IMR;
   hr::reserved< 0x20, 4 > _reserved_at_0x20;
   hr::hardware_register<0x40008030> CSR[4];
   hr::reserved< 0x40, 41 > _reserved_at_0x40;
   hr::hardware_register<0x400080e4> WPMR;
   hr::hardware_register<0x400080e8> WPSR;
};

#define SPI0 ( ( Spi0 * ) 0x40008000 )

// CR
   // SPI Enable
   constexpr auto SPI0_CR_SPIEN = hr::field_mask_literal< 0x40008000, 0, 1 >();
   // SPI Disable
   constexpr auto SPI0_CR_SPIDIS = hr::field_mask_literal< 0x40008000, 1, 1 >();
   // SPI Software Reset
   constexpr auto SPI0_CR_SWRST = hr::field_mask_literal< 0x40008000, 7, 1 >();
   // Last Transfer
   constexpr auto SPI0_CR_LASTXFER = hr::field_mask_literal< 0x40008000, 24, 1 >();

// MR
   // Master/Slave Mode
   constexpr auto SPI0_MR_MSTR = hr::field_mask_literal< 0x40008004, 0, 1 >();
   // Peripheral Select
   constexpr auto SPI0_MR_PS = hr::field_mask_literal< 0x40008004, 1, 1 >();
   // Chip Select Decode
   constexpr auto SPI0_MR_PCSDEC = hr::field_mask_literal< 0x40008004, 2, 1 >();
   // Mode Fault Detection
   constexpr auto SPI0_MR_MODFDIS = hr::field_mask_literal< 0x40008004, 4, 1 >();
   // Wait Data Read Before Transfer
   constexpr auto SPI0_MR_WDRBT = hr::field_mask_literal< 0x40008004, 5, 1 >();
   // Local Loopback Enable
   constexpr auto SPI0_MR_LLB = hr::field_mask_literal< 0x40008004, 7, 1 >();
   // Peripheral Chip Select
   constexpr auto SPI0_MR_PCS_Msk = hr::field_mask_literal< 0x40008004, 16, 4 >();
   // Delay Between Chip Selects
   constexpr auto SPI0_MR_DLYBCS_Msk = hr::field_mask_literal< 0x40008004, 24, 8 >();

// RDR
   // Receive Data
   constexpr auto SPI0_RDR_RD_Msk = hr::field_mask_literal< 0x40008008, 0, 16 >();
   // Peripheral Chip Select
   constexpr auto SPI0_RDR_PCS_Msk = hr::field_mask_literal< 0x40008008, 16, 4 >();

// TDR
   // Transmit Data
   constexpr auto SPI0_TDR_TD_Msk = hr::field_mask_literal< 0x4000800c, 0, 16 >();
   // Peripheral Chip Select
   constexpr auto SPI0_TDR_PCS_Msk = hr::field_mask_literal< 0x4000800c, 16, 4 >();
   // Last Transfer
   constexpr auto SPI0_TDR_LASTXFER = hr::field_mask_literal< 0x4000800c, 24, 1 >();

// SR
   // Receive Data Register Full
   constexpr auto SPI0_SR_RDRF = hr::field_mask_literal< 0x40008010, 0, 1 >();
   // Transmit Data Register Empty
   constexpr auto SPI0_SR_TDRE = hr::field_mask_literal< 0x40008010, 1, 1 >();
   // Mode Fault Error
   constexpr auto SPI0_SR_MODF = hr::field_mask_literal< 0x40008010, 2, 1 >();
   // Overrun Error Status
   constexpr auto SPI0_SR_OVRES = hr::field_mask_literal< 0x40008010, 3, 1 >();
   // NSS Rising
   constexpr auto SPI0_SR_NSSR = hr::field_mask_literal< 0x40008010, 8, 1 >();
   // Transmission Registers Empty
   constexpr auto SPI0_SR_TXEMPTY = hr::field_mask_literal< 0x40008010, 9, 1 >();
   // Underrun Error Status (Slave Mode Only)
   constexpr auto SPI0_SR_UNDES = hr::field_mask_literal< 0x40008010, 10, 1 >();
   // SPI Enable Status
   constexpr auto SPI0_SR_SPIENS = hr::field_mask_literal< 0x40008010, 16, 1 >();

// IER
   // Receive Data Register Full Interrupt Enable
   constexpr auto SPI0_IER_RDRF = hr::field_mask_literal< 0x40008014, 0, 1 >();
   // SPI Transmit Data Register Empty Interrupt Enable
   constexpr auto SPI0_IER_TDRE = hr::field_mask_literal< 0x40008014, 1, 1 >();
   // Mode Fault Error Interrupt Enable
   constexpr auto SPI0_IER_MODF = hr::field_mask_literal< 0x40008014, 2, 1 >();
   // Overrun Error Interrupt Enable
   constexpr auto SPI0_IER_OVRES = hr::field_mask_literal< 0x40008014, 3, 1 >();
   // NSS Rising Interrupt Enable
   constexpr auto SPI0_IER_NSSR = hr::field_mask_literal< 0x40008014, 8, 1 >();
   // Transmission Registers Empty Enable
   constexpr auto SPI0_IER_TXEMPTY = hr::field_mask_literal< 0x40008014, 9, 1 >();
   // Underrun Error Interrupt Enable
   constexpr auto SPI0_IER_UNDES = hr::field_mask_literal< 0x40008014, 10, 1 >();

// IDR
   // Receive Data Register Full Interrupt Disable
   constexpr auto SPI0_IDR_RDRF = hr::field_mask_literal< 0x40008018, 0, 1 >();
   // SPI Transmit Data Register Empty Interrupt Disable
   constexpr auto SPI0_IDR_TDRE = hr::field_mask_literal< 0x40008018, 1, 1 >();
   // Mode Fault Error Interrupt Disable
   constexpr auto SPI0_IDR_MODF = hr::field_mask_literal< 0x40008018, 2, 1 >();
   // Overrun Error Interrupt Disable
   constexpr auto SPI0_IDR_OVRES = hr::field_mask_literal< 0x40008018, 3, 1 >();
   // NSS Rising Interrupt Disable
   constexpr auto SPI0_IDR_NSSR = hr::field_mask_literal< 0x40008018, 8, 1 >();
   // Transmission Registers Empty Disable
   constexpr auto SPI0_IDR_TXEMPTY = hr::field_mask_literal< 0x40008018, 9, 1 >();
   // Underrun Error Interrupt Disable
   constexpr auto SPI0_IDR_UNDES = hr::field_mask_literal< 0x40008018, 10, 1 >();

// IMR
   // Receive Data Register Full Interrupt Mask
   constexpr auto SPI0_IMR_RDRF = hr::field_mask_literal< 0x4000801c, 0, 1 >();
   // SPI Transmit Data Register Empty Interrupt Mask
   constexpr auto SPI0_IMR_TDRE = hr::field_mask_literal< 0x4000801c, 1, 1 >();
   // Mode Fault Error Interrupt Mask
   constexpr auto SPI0_IMR_MODF = hr::field_mask_literal< 0x4000801c, 2, 1 >();
   // Overrun Error Interrupt Mask
   constexpr auto SPI0_IMR_OVRES = hr::field_mask_literal< 0x4000801c, 3, 1 >();
   // NSS Rising Interrupt Mask
   constexpr auto SPI0_IMR_NSSR = hr::field_mask_literal< 0x4000801c, 8, 1 >();
   // Transmission Registers Empty Mask
   constexpr auto SPI0_IMR_TXEMPTY = hr::field_mask_literal< 0x4000801c, 9, 1 >();
   // Underrun Error Interrupt Mask
   constexpr auto SPI0_IMR_UNDES = hr::field_mask_literal< 0x4000801c, 10, 1 >();

// CSR[0]
   // Clock Polarity
   constexpr auto SPI0_CSR_CPOL = hr::field_mask_literal< 0x40008030, 0, 1 >();
   // Clock Phase
   constexpr auto SPI0_CSR_NCPHA = hr::field_mask_literal< 0x40008030, 1, 1 >();
   // Chip Select Not Active After Transfer (Ignored if CSAAT = 1)
   constexpr auto SPI0_CSR_CSNAAT = hr::field_mask_literal< 0x40008030, 2, 1 >();
   // Chip Select Active After Transfer
   constexpr auto SPI0_CSR_CSAAT = hr::field_mask_literal< 0x40008030, 3, 1 >();
   // Bits Per Transfer
   constexpr auto SPI0_CSR_BITS_Msk = hr::field_mask_literal< 0x40008030, 4, 4 >();
      // 8 bits for transfer
      constexpr auto SPI0_CSR_BITS_8_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 0 );
      // 9 bits for transfer
      constexpr auto SPI0_CSR_BITS_9_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 1 );
      // 10 bits for transfer
      constexpr auto SPI0_CSR_BITS_10_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 2 );
      // 11 bits for transfer
      constexpr auto SPI0_CSR_BITS_11_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 3 );
      // 12 bits for transfer
      constexpr auto SPI0_CSR_BITS_12_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 4 );
      // 13 bits for transfer
      constexpr auto SPI0_CSR_BITS_13_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 5 );
      // 14 bits for transfer
      constexpr auto SPI0_CSR_BITS_14_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 6 );
      // 15 bits for transfer
      constexpr auto SPI0_CSR_BITS_15_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 7 );
      // 16 bits for transfer
      constexpr auto SPI0_CSR_BITS_16_BIT = hr::field_value_literal< 0x40008030, 4, 4 >( 8 );
   // Serial Clock Baud Rate
   constexpr auto SPI0_CSR_SCBR_Msk = hr::field_mask_literal< 0x40008030, 8, 8 >();
   // Delay Before SPCK
   constexpr auto SPI0_CSR_DLYBS_Msk = hr::field_mask_literal< 0x40008030, 16, 8 >();
   // Delay Between Consecutive Transfers
   constexpr auto SPI0_CSR_DLYBCT_Msk = hr::field_mask_literal< 0x40008030, 24, 8 >();

// WPMR
   // Write Protection Enable
   constexpr auto SPI0_WPMR_WPEN = hr::field_mask_literal< 0x400080e4, 0, 1 >();
   // Write Protection Key Password
   constexpr auto SPI0_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400080e4, 8, 24 >();

// WPSR
   // Write Protection Violation Status
   constexpr auto SPI0_WPSR_WPVS = hr::field_mask_literal< 0x400080e8, 0, 1 >();
   // Write Protection Violation Source
   constexpr auto SPI0_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400080e8, 8, 8 >();

// =============================================================================
//
// TC0
// base address = 0x40080000
// Timer Counter 0
//
// =============================================================================

struct Tc0 {
   hr::hardware_register<0x40080000> CCR0;
   hr::hardware_register<0x40080004> CMR0;
   hr::hardware_register<0x40080008> SMMR0;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x40080010> CV0;
   hr::hardware_register<0x40080014> RA0;
   hr::hardware_register<0x40080018> RB0;
   hr::hardware_register<0x4008001c> RC0;
   hr::hardware_register<0x40080020> SR0;
   hr::hardware_register<0x40080024> IER0;
   hr::hardware_register<0x40080028> IDR0;
   hr::hardware_register<0x4008002c> IMR0;
   hr::reserved< 0x30, 4 > _reserved_at_0x30;
   hr::hardware_register<0x40080040> CCR1;
   hr::hardware_register<0x40080044> CMR1;
   hr::hardware_register<0x40080048> SMMR1;
   hr::reserved< 0x4C, 1 > _reserved_at_0x4C;
   hr::hardware_register<0x40080050> CV1;
   hr::hardware_register<0x40080054> RA1;
   hr::hardware_register<0x40080058> RB1;
   hr::hardware_register<0x4008005c> RC1;
   hr::hardware_register<0x40080060> SR1;
   hr::hardware_register<0x40080064> IER1;
   hr::hardware_register<0x40080068> IDR1;
   hr::hardware_register<0x4008006c> IMR1;
   hr::reserved< 0x70, 4 > _reserved_at_0x70;
   hr::hardware_register<0x40080080> CCR2;
   hr::hardware_register<0x40080084> CMR2;
   hr::hardware_register<0x40080088> SMMR2;
   hr::reserved< 0x8C, 1 > _reserved_at_0x8C;
   hr::hardware_register<0x40080090> CV2;
   hr::hardware_register<0x40080094> RA2;
   hr::hardware_register<0x40080098> RB2;
   hr::hardware_register<0x4008009c> RC2;
   hr::hardware_register<0x400800a0> SR2;
   hr::hardware_register<0x400800a4> IER2;
   hr::hardware_register<0x400800a8> IDR2;
   hr::hardware_register<0x400800ac> IMR2;
   hr::reserved< 0xB0, 4 > _reserved_at_0xB0;
   hr::hardware_register<0x400800c0> BCR;
   hr::hardware_register<0x400800c4> BMR;
   hr::hardware_register<0x400800c8> QIER;
   hr::hardware_register<0x400800cc> QIDR;
   hr::hardware_register<0x400800d0> QIMR;
   hr::hardware_register<0x400800d4> QISR;
   hr::hardware_register<0x400800d8> FMR;
   hr::reserved< 0xDC, 2 > _reserved_at_0xDC;
   hr::hardware_register<0x400800e4> WPMR;
};

#define TC0 ( ( Tc0 * ) 0x40080000 )

// CCR0
   // Counter Clock Enable Command
   constexpr auto TC0_CCR0_CLKEN = hr::field_mask_literal< 0x40080000, 0, 1 >();
   // Counter Clock Disable Command
   constexpr auto TC0_CCR0_CLKDIS = hr::field_mask_literal< 0x40080000, 1, 1 >();
   // Software Trigger Command
   constexpr auto TC0_CCR0_SWTRG = hr::field_mask_literal< 0x40080000, 2, 1 >();

// CMR0
   // Clock Selection
   constexpr auto TC0_CMR0_TCCLKS_Msk = hr::field_mask_literal< 0x40080004, 0, 3 >();
      // Clock selected: TCLK1
      constexpr auto TC0_CMR0_TCCLKS_TIMER_CLOCK1 = hr::field_value_literal< 0x40080004, 0, 3 >( 0 );
      // Clock selected: TCLK2
      constexpr auto TC0_CMR0_TCCLKS_TIMER_CLOCK2 = hr::field_value_literal< 0x40080004, 0, 3 >( 1 );
      // Clock selected: TCLK3
      constexpr auto TC0_CMR0_TCCLKS_TIMER_CLOCK3 = hr::field_value_literal< 0x40080004, 0, 3 >( 2 );
      // Clock selected: TCLK4
      constexpr auto TC0_CMR0_TCCLKS_TIMER_CLOCK4 = hr::field_value_literal< 0x40080004, 0, 3 >( 3 );
      // Clock selected: TCLK5
      constexpr auto TC0_CMR0_TCCLKS_TIMER_CLOCK5 = hr::field_value_literal< 0x40080004, 0, 3 >( 4 );
      // Clock selected: XC0
      constexpr auto TC0_CMR0_TCCLKS_XC0 = hr::field_value_literal< 0x40080004, 0, 3 >( 5 );
      // Clock selected: XC1
      constexpr auto TC0_CMR0_TCCLKS_XC1 = hr::field_value_literal< 0x40080004, 0, 3 >( 6 );
      // Clock selected: XC2
      constexpr auto TC0_CMR0_TCCLKS_XC2 = hr::field_value_literal< 0x40080004, 0, 3 >( 7 );
   // Clock Invert
   constexpr auto TC0_CMR0_CLKI = hr::field_mask_literal< 0x40080004, 3, 1 >();
   // Burst Signal Selection
   constexpr auto TC0_CMR0_BURST_Msk = hr::field_mask_literal< 0x40080004, 4, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR0_BURST_NONE = hr::field_value_literal< 0x40080004, 4, 2 >( 0 );
      // XC0 is ANDed with the selected clock.
      constexpr auto TC0_CMR0_BURST_XC0 = hr::field_value_literal< 0x40080004, 4, 2 >( 1 );
      // XC1 is ANDed with the selected clock.
      constexpr auto TC0_CMR0_BURST_XC1 = hr::field_value_literal< 0x40080004, 4, 2 >( 2 );
      // XC2 is ANDed with the selected clock.
      constexpr auto TC0_CMR0_BURST_XC2 = hr::field_value_literal< 0x40080004, 4, 2 >( 3 );
   // Counter Clock Stopped with RB Loading
   constexpr auto TC0_CMR0_LDBSTOP = hr::field_mask_literal< 0x40080004, 6, 1 >();
   // Counter Clock Disable with RB Loading
   constexpr auto TC0_CMR0_LDBDIS = hr::field_mask_literal< 0x40080004, 7, 1 >();
   // External Trigger Edge Selection
   constexpr auto TC0_CMR0_ETRGEDG_Msk = hr::field_mask_literal< 0x40080004, 8, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR0_ETRGEDG_NONE = hr::field_value_literal< 0x40080004, 8, 2 >( 0 );
      // Rising edge
      constexpr auto TC0_CMR0_ETRGEDG_RISING = hr::field_value_literal< 0x40080004, 8, 2 >( 1 );
      // Falling edge
      constexpr auto TC0_CMR0_ETRGEDG_FALLING = hr::field_value_literal< 0x40080004, 8, 2 >( 2 );
      // Each edge
      constexpr auto TC0_CMR0_ETRGEDG_EDGE = hr::field_value_literal< 0x40080004, 8, 2 >( 3 );
   // TIOA or TIOB External Trigger Selection
   constexpr auto TC0_CMR0_ABETRG = hr::field_mask_literal< 0x40080004, 10, 1 >();
   // RC Compare Trigger Enable
   constexpr auto TC0_CMR0_CPCTRG = hr::field_mask_literal< 0x40080004, 14, 1 >();
   // Waveform Mode
   constexpr auto TC0_CMR0_WAVE = hr::field_mask_literal< 0x40080004, 15, 1 >();
   // RA Loading Edge Selection
   constexpr auto TC0_CMR0_LDRA_Msk = hr::field_mask_literal< 0x40080004, 16, 2 >();
      // None
      constexpr auto TC0_CMR0_LDRA_NONE = hr::field_value_literal< 0x40080004, 16, 2 >( 0 );
      // Rising edge of TIOA
      constexpr auto TC0_CMR0_LDRA_RISING = hr::field_value_literal< 0x40080004, 16, 2 >( 1 );
      // Falling edge of TIOA
      constexpr auto TC0_CMR0_LDRA_FALLING = hr::field_value_literal< 0x40080004, 16, 2 >( 2 );
      // Each edge of TIOA
      constexpr auto TC0_CMR0_LDRA_EDGE = hr::field_value_literal< 0x40080004, 16, 2 >( 3 );
   // RB Loading Edge Selection
   constexpr auto TC0_CMR0_LDRB_Msk = hr::field_mask_literal< 0x40080004, 18, 2 >();
      // None
      constexpr auto TC0_CMR0_LDRB_NONE = hr::field_value_literal< 0x40080004, 18, 2 >( 0 );
      // Rising edge of TIOA
      constexpr auto TC0_CMR0_LDRB_RISING = hr::field_value_literal< 0x40080004, 18, 2 >( 1 );
      // Falling edge of TIOA
      constexpr auto TC0_CMR0_LDRB_FALLING = hr::field_value_literal< 0x40080004, 18, 2 >( 2 );
      // Each edge of TIOA
      constexpr auto TC0_CMR0_LDRB_EDGE = hr::field_value_literal< 0x40080004, 18, 2 >( 3 );

// CMR0_WAVE_EQ_1
   // Clock Selection
   constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_Msk = hr::field_mask_literal< 0x40080004, 0, 3 >();
      // Clock selected: TCLK1
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_TIMER_CLOCK1 = hr::field_value_literal< 0x40080004, 0, 3 >( 0 );
      // Clock selected: TCLK2
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_TIMER_CLOCK2 = hr::field_value_literal< 0x40080004, 0, 3 >( 1 );
      // Clock selected: TCLK3
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_TIMER_CLOCK3 = hr::field_value_literal< 0x40080004, 0, 3 >( 2 );
      // Clock selected: TCLK4
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_TIMER_CLOCK4 = hr::field_value_literal< 0x40080004, 0, 3 >( 3 );
      // Clock selected: TCLK5
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_TIMER_CLOCK5 = hr::field_value_literal< 0x40080004, 0, 3 >( 4 );
      // Clock selected: XC0
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_XC0 = hr::field_value_literal< 0x40080004, 0, 3 >( 5 );
      // Clock selected: XC1
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_XC1 = hr::field_value_literal< 0x40080004, 0, 3 >( 6 );
      // Clock selected: XC2
      constexpr auto TC0_CMR0_WAVE_EQ_1_TCCLKS_XC2 = hr::field_value_literal< 0x40080004, 0, 3 >( 7 );
   // Clock Invert
   constexpr auto TC0_CMR0_WAVE_EQ_1_CLKI = hr::field_mask_literal< 0x40080004, 3, 1 >();
   // Burst Signal Selection
   constexpr auto TC0_CMR0_WAVE_EQ_1_BURST_Msk = hr::field_mask_literal< 0x40080004, 4, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR0_WAVE_EQ_1_BURST_NONE = hr::field_value_literal< 0x40080004, 4, 2 >( 0 );
      // XC0 is ANDed with the selected clock.
      constexpr auto TC0_CMR0_WAVE_EQ_1_BURST_XC0 = hr::field_value_literal< 0x40080004, 4, 2 >( 1 );
      // XC1 is ANDed with the selected clock.
      constexpr auto TC0_CMR0_WAVE_EQ_1_BURST_XC1 = hr::field_value_literal< 0x40080004, 4, 2 >( 2 );
      // XC2 is ANDed with the selected clock.
      constexpr auto TC0_CMR0_WAVE_EQ_1_BURST_XC2 = hr::field_value_literal< 0x40080004, 4, 2 >( 3 );
   // Counter Clock Stopped with RC Compare
   constexpr auto TC0_CMR0_WAVE_EQ_1_CPCSTOP = hr::field_mask_literal< 0x40080004, 6, 1 >();
   // Counter Clock Disable with RC Compare
   constexpr auto TC0_CMR0_WAVE_EQ_1_CPCDIS = hr::field_mask_literal< 0x40080004, 7, 1 >();
   // External Event Edge Selection
   constexpr auto TC0_CMR0_WAVE_EQ_1_EEVTEDG_Msk = hr::field_mask_literal< 0x40080004, 8, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVTEDG_NONE = hr::field_value_literal< 0x40080004, 8, 2 >( 0 );
      // Rising edge
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVTEDG_RISING = hr::field_value_literal< 0x40080004, 8, 2 >( 1 );
      // Falling edge
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVTEDG_FALLING = hr::field_value_literal< 0x40080004, 8, 2 >( 2 );
      // Each edge
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVTEDG_EDGE = hr::field_value_literal< 0x40080004, 8, 2 >( 3 );
   // External Event Selection
   constexpr auto TC0_CMR0_WAVE_EQ_1_EEVT_Msk = hr::field_mask_literal< 0x40080004, 10, 2 >();
      // TIOB
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVT_TIOB = hr::field_value_literal< 0x40080004, 10, 2 >( 0 );
      // XC0
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVT_XC0 = hr::field_value_literal< 0x40080004, 10, 2 >( 1 );
      // XC1
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVT_XC1 = hr::field_value_literal< 0x40080004, 10, 2 >( 2 );
      // XC2
      constexpr auto TC0_CMR0_WAVE_EQ_1_EEVT_XC2 = hr::field_value_literal< 0x40080004, 10, 2 >( 3 );
   // External Event Trigger Enable
   constexpr auto TC0_CMR0_WAVE_EQ_1_ENETRG = hr::field_mask_literal< 0x40080004, 12, 1 >();
   // Waveform Selection
   constexpr auto TC0_CMR0_WAVE_EQ_1_WAVSEL_Msk = hr::field_mask_literal< 0x40080004, 13, 2 >();
      // UP mode without automatic trigger on RC Compare
      constexpr auto TC0_CMR0_WAVE_EQ_1_WAVSEL_UP = hr::field_value_literal< 0x40080004, 13, 2 >( 0 );
      // UPDOWN mode without automatic trigger on RC Compare
      constexpr auto TC0_CMR0_WAVE_EQ_1_WAVSEL_UPDOWN = hr::field_value_literal< 0x40080004, 13, 2 >( 1 );
      // UP mode with automatic trigger on RC Compare
      constexpr auto TC0_CMR0_WAVE_EQ_1_WAVSEL_UP_RC = hr::field_value_literal< 0x40080004, 13, 2 >( 2 );
      // UPDOWN mode with automatic trigger on RC Compare
      constexpr auto TC0_CMR0_WAVE_EQ_1_WAVSEL_UPDOWN_RC = hr::field_value_literal< 0x40080004, 13, 2 >( 3 );
   // Waveform Mode
   constexpr auto TC0_CMR0_WAVE_EQ_1_WAVE = hr::field_mask_literal< 0x40080004, 15, 1 >();
   // RA Compare Effect on TIOA
   constexpr auto TC0_CMR0_WAVE_EQ_1_ACPA_Msk = hr::field_mask_literal< 0x40080004, 16, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPA_NONE = hr::field_value_literal< 0x40080004, 16, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPA_SET = hr::field_value_literal< 0x40080004, 16, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPA_CLEAR = hr::field_value_literal< 0x40080004, 16, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPA_TOGGLE = hr::field_value_literal< 0x40080004, 16, 2 >( 3 );
   // RC Compare Effect on TIOA
   constexpr auto TC0_CMR0_WAVE_EQ_1_ACPC_Msk = hr::field_mask_literal< 0x40080004, 18, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPC_NONE = hr::field_value_literal< 0x40080004, 18, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPC_SET = hr::field_value_literal< 0x40080004, 18, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPC_CLEAR = hr::field_value_literal< 0x40080004, 18, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_ACPC_TOGGLE = hr::field_value_literal< 0x40080004, 18, 2 >( 3 );
   // External Event Effect on TIOA
   constexpr auto TC0_CMR0_WAVE_EQ_1_AEEVT_Msk = hr::field_mask_literal< 0x40080004, 20, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_AEEVT_NONE = hr::field_value_literal< 0x40080004, 20, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_AEEVT_SET = hr::field_value_literal< 0x40080004, 20, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_AEEVT_CLEAR = hr::field_value_literal< 0x40080004, 20, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_AEEVT_TOGGLE = hr::field_value_literal< 0x40080004, 20, 2 >( 3 );
   // Software Trigger Effect on TIOA
   constexpr auto TC0_CMR0_WAVE_EQ_1_ASWTRG_Msk = hr::field_mask_literal< 0x40080004, 22, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_ASWTRG_NONE = hr::field_value_literal< 0x40080004, 22, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_ASWTRG_SET = hr::field_value_literal< 0x40080004, 22, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_ASWTRG_CLEAR = hr::field_value_literal< 0x40080004, 22, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_ASWTRG_TOGGLE = hr::field_value_literal< 0x40080004, 22, 2 >( 3 );
   // RB Compare Effect on TIOB
   constexpr auto TC0_CMR0_WAVE_EQ_1_BCPB_Msk = hr::field_mask_literal< 0x40080004, 24, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPB_NONE = hr::field_value_literal< 0x40080004, 24, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPB_SET = hr::field_value_literal< 0x40080004, 24, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPB_CLEAR = hr::field_value_literal< 0x40080004, 24, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPB_TOGGLE = hr::field_value_literal< 0x40080004, 24, 2 >( 3 );
   // RC Compare Effect on TIOB
   constexpr auto TC0_CMR0_WAVE_EQ_1_BCPC_Msk = hr::field_mask_literal< 0x40080004, 26, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPC_NONE = hr::field_value_literal< 0x40080004, 26, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPC_SET = hr::field_value_literal< 0x40080004, 26, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPC_CLEAR = hr::field_value_literal< 0x40080004, 26, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_BCPC_TOGGLE = hr::field_value_literal< 0x40080004, 26, 2 >( 3 );
   // External Event Effect on TIOB
   constexpr auto TC0_CMR0_WAVE_EQ_1_BEEVT_Msk = hr::field_mask_literal< 0x40080004, 28, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_BEEVT_NONE = hr::field_value_literal< 0x40080004, 28, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_BEEVT_SET = hr::field_value_literal< 0x40080004, 28, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_BEEVT_CLEAR = hr::field_value_literal< 0x40080004, 28, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_BEEVT_TOGGLE = hr::field_value_literal< 0x40080004, 28, 2 >( 3 );
   // Software Trigger Effect on TIOB
   constexpr auto TC0_CMR0_WAVE_EQ_1_BSWTRG_Msk = hr::field_mask_literal< 0x40080004, 30, 2 >();
      // None
      constexpr auto TC0_CMR0_WAVE_EQ_1_BSWTRG_NONE = hr::field_value_literal< 0x40080004, 30, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR0_WAVE_EQ_1_BSWTRG_SET = hr::field_value_literal< 0x40080004, 30, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR0_WAVE_EQ_1_BSWTRG_CLEAR = hr::field_value_literal< 0x40080004, 30, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR0_WAVE_EQ_1_BSWTRG_TOGGLE = hr::field_value_literal< 0x40080004, 30, 2 >( 3 );

// SMMR0
   // Gray Count Enable
   constexpr auto TC0_SMMR0_GCEN = hr::field_mask_literal< 0x40080008, 0, 1 >();
   // DOWN Count
   constexpr auto TC0_SMMR0_DOWN = hr::field_mask_literal< 0x40080008, 1, 1 >();

// CV0
   // Counter Value
   constexpr auto TC0_CV0_CV_Msk = hr::field_mask_literal< 0x40080010, 0, 32 >();

// RA0
   // Register A
   constexpr auto TC0_RA0_RA_Msk = hr::field_mask_literal< 0x40080014, 0, 32 >();

// RB0
   // Register B
   constexpr auto TC0_RB0_RB_Msk = hr::field_mask_literal< 0x40080018, 0, 32 >();

// RC0
   // Register C
   constexpr auto TC0_RC0_RC_Msk = hr::field_mask_literal< 0x4008001c, 0, 32 >();

// SR0
   // Counter Overflow Status
   constexpr auto TC0_SR0_COVFS = hr::field_mask_literal< 0x40080020, 0, 1 >();
   // Load Overrun Status
   constexpr auto TC0_SR0_LOVRS = hr::field_mask_literal< 0x40080020, 1, 1 >();
   // RA Compare Status
   constexpr auto TC0_SR0_CPAS = hr::field_mask_literal< 0x40080020, 2, 1 >();
   // RB Compare Status
   constexpr auto TC0_SR0_CPBS = hr::field_mask_literal< 0x40080020, 3, 1 >();
   // RC Compare Status
   constexpr auto TC0_SR0_CPCS = hr::field_mask_literal< 0x40080020, 4, 1 >();
   // RA Loading Status
   constexpr auto TC0_SR0_LDRAS = hr::field_mask_literal< 0x40080020, 5, 1 >();
   // RB Loading Status
   constexpr auto TC0_SR0_LDRBS = hr::field_mask_literal< 0x40080020, 6, 1 >();
   // External Trigger Status
   constexpr auto TC0_SR0_ETRGS = hr::field_mask_literal< 0x40080020, 7, 1 >();
   // Clock Enabling Status
   constexpr auto TC0_SR0_CLKSTA = hr::field_mask_literal< 0x40080020, 16, 1 >();
   // TIOA Mirror
   constexpr auto TC0_SR0_MTIOA = hr::field_mask_literal< 0x40080020, 17, 1 >();
   // TIOB Mirror
   constexpr auto TC0_SR0_MTIOB = hr::field_mask_literal< 0x40080020, 18, 1 >();

// IER0
   // Counter Overflow
   constexpr auto TC0_IER0_COVFS = hr::field_mask_literal< 0x40080024, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IER0_LOVRS = hr::field_mask_literal< 0x40080024, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IER0_CPAS = hr::field_mask_literal< 0x40080024, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IER0_CPBS = hr::field_mask_literal< 0x40080024, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IER0_CPCS = hr::field_mask_literal< 0x40080024, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IER0_LDRAS = hr::field_mask_literal< 0x40080024, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IER0_LDRBS = hr::field_mask_literal< 0x40080024, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IER0_ETRGS = hr::field_mask_literal< 0x40080024, 7, 1 >();

// IDR0
   // Counter Overflow
   constexpr auto TC0_IDR0_COVFS = hr::field_mask_literal< 0x40080028, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IDR0_LOVRS = hr::field_mask_literal< 0x40080028, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IDR0_CPAS = hr::field_mask_literal< 0x40080028, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IDR0_CPBS = hr::field_mask_literal< 0x40080028, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IDR0_CPCS = hr::field_mask_literal< 0x40080028, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IDR0_LDRAS = hr::field_mask_literal< 0x40080028, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IDR0_LDRBS = hr::field_mask_literal< 0x40080028, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IDR0_ETRGS = hr::field_mask_literal< 0x40080028, 7, 1 >();

// IMR0
   // Counter Overflow
   constexpr auto TC0_IMR0_COVFS = hr::field_mask_literal< 0x4008002c, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IMR0_LOVRS = hr::field_mask_literal< 0x4008002c, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IMR0_CPAS = hr::field_mask_literal< 0x4008002c, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IMR0_CPBS = hr::field_mask_literal< 0x4008002c, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IMR0_CPCS = hr::field_mask_literal< 0x4008002c, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IMR0_LDRAS = hr::field_mask_literal< 0x4008002c, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IMR0_LDRBS = hr::field_mask_literal< 0x4008002c, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IMR0_ETRGS = hr::field_mask_literal< 0x4008002c, 7, 1 >();

// CCR1
   // Counter Clock Enable Command
   constexpr auto TC0_CCR1_CLKEN = hr::field_mask_literal< 0x40080040, 0, 1 >();
   // Counter Clock Disable Command
   constexpr auto TC0_CCR1_CLKDIS = hr::field_mask_literal< 0x40080040, 1, 1 >();
   // Software Trigger Command
   constexpr auto TC0_CCR1_SWTRG = hr::field_mask_literal< 0x40080040, 2, 1 >();

// CMR1
   // Clock Selection
   constexpr auto TC0_CMR1_TCCLKS_Msk = hr::field_mask_literal< 0x40080044, 0, 3 >();
      // Clock selected: TCLK1
      constexpr auto TC0_CMR1_TCCLKS_TIMER_CLOCK1 = hr::field_value_literal< 0x40080044, 0, 3 >( 0 );
      // Clock selected: TCLK2
      constexpr auto TC0_CMR1_TCCLKS_TIMER_CLOCK2 = hr::field_value_literal< 0x40080044, 0, 3 >( 1 );
      // Clock selected: TCLK3
      constexpr auto TC0_CMR1_TCCLKS_TIMER_CLOCK3 = hr::field_value_literal< 0x40080044, 0, 3 >( 2 );
      // Clock selected: TCLK4
      constexpr auto TC0_CMR1_TCCLKS_TIMER_CLOCK4 = hr::field_value_literal< 0x40080044, 0, 3 >( 3 );
      // Clock selected: TCLK5
      constexpr auto TC0_CMR1_TCCLKS_TIMER_CLOCK5 = hr::field_value_literal< 0x40080044, 0, 3 >( 4 );
      // Clock selected: XC0
      constexpr auto TC0_CMR1_TCCLKS_XC0 = hr::field_value_literal< 0x40080044, 0, 3 >( 5 );
      // Clock selected: XC1
      constexpr auto TC0_CMR1_TCCLKS_XC1 = hr::field_value_literal< 0x40080044, 0, 3 >( 6 );
      // Clock selected: XC2
      constexpr auto TC0_CMR1_TCCLKS_XC2 = hr::field_value_literal< 0x40080044, 0, 3 >( 7 );
   // Clock Invert
   constexpr auto TC0_CMR1_CLKI = hr::field_mask_literal< 0x40080044, 3, 1 >();
   // Burst Signal Selection
   constexpr auto TC0_CMR1_BURST_Msk = hr::field_mask_literal< 0x40080044, 4, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR1_BURST_NONE = hr::field_value_literal< 0x40080044, 4, 2 >( 0 );
      // XC0 is ANDed with the selected clock.
      constexpr auto TC0_CMR1_BURST_XC0 = hr::field_value_literal< 0x40080044, 4, 2 >( 1 );
      // XC1 is ANDed with the selected clock.
      constexpr auto TC0_CMR1_BURST_XC1 = hr::field_value_literal< 0x40080044, 4, 2 >( 2 );
      // XC2 is ANDed with the selected clock.
      constexpr auto TC0_CMR1_BURST_XC2 = hr::field_value_literal< 0x40080044, 4, 2 >( 3 );
   // Counter Clock Stopped with RB Loading
   constexpr auto TC0_CMR1_LDBSTOP = hr::field_mask_literal< 0x40080044, 6, 1 >();
   // Counter Clock Disable with RB Loading
   constexpr auto TC0_CMR1_LDBDIS = hr::field_mask_literal< 0x40080044, 7, 1 >();
   // External Trigger Edge Selection
   constexpr auto TC0_CMR1_ETRGEDG_Msk = hr::field_mask_literal< 0x40080044, 8, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR1_ETRGEDG_NONE = hr::field_value_literal< 0x40080044, 8, 2 >( 0 );
      // Rising edge
      constexpr auto TC0_CMR1_ETRGEDG_RISING = hr::field_value_literal< 0x40080044, 8, 2 >( 1 );
      // Falling edge
      constexpr auto TC0_CMR1_ETRGEDG_FALLING = hr::field_value_literal< 0x40080044, 8, 2 >( 2 );
      // Each edge
      constexpr auto TC0_CMR1_ETRGEDG_EDGE = hr::field_value_literal< 0x40080044, 8, 2 >( 3 );
   // TIOA or TIOB External Trigger Selection
   constexpr auto TC0_CMR1_ABETRG = hr::field_mask_literal< 0x40080044, 10, 1 >();
   // RC Compare Trigger Enable
   constexpr auto TC0_CMR1_CPCTRG = hr::field_mask_literal< 0x40080044, 14, 1 >();
   // Waveform Mode
   constexpr auto TC0_CMR1_WAVE = hr::field_mask_literal< 0x40080044, 15, 1 >();
   // RA Loading Edge Selection
   constexpr auto TC0_CMR1_LDRA_Msk = hr::field_mask_literal< 0x40080044, 16, 2 >();
      // None
      constexpr auto TC0_CMR1_LDRA_NONE = hr::field_value_literal< 0x40080044, 16, 2 >( 0 );
      // Rising edge of TIOA
      constexpr auto TC0_CMR1_LDRA_RISING = hr::field_value_literal< 0x40080044, 16, 2 >( 1 );
      // Falling edge of TIOA
      constexpr auto TC0_CMR1_LDRA_FALLING = hr::field_value_literal< 0x40080044, 16, 2 >( 2 );
      // Each edge of TIOA
      constexpr auto TC0_CMR1_LDRA_EDGE = hr::field_value_literal< 0x40080044, 16, 2 >( 3 );
   // RB Loading Edge Selection
   constexpr auto TC0_CMR1_LDRB_Msk = hr::field_mask_literal< 0x40080044, 18, 2 >();
      // None
      constexpr auto TC0_CMR1_LDRB_NONE = hr::field_value_literal< 0x40080044, 18, 2 >( 0 );
      // Rising edge of TIOA
      constexpr auto TC0_CMR1_LDRB_RISING = hr::field_value_literal< 0x40080044, 18, 2 >( 1 );
      // Falling edge of TIOA
      constexpr auto TC0_CMR1_LDRB_FALLING = hr::field_value_literal< 0x40080044, 18, 2 >( 2 );
      // Each edge of TIOA
      constexpr auto TC0_CMR1_LDRB_EDGE = hr::field_value_literal< 0x40080044, 18, 2 >( 3 );

// CMR1_WAVE_EQ_1
   // Clock Selection
   constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_Msk = hr::field_mask_literal< 0x40080044, 0, 3 >();
      // Clock selected: TCLK1
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_TIMER_CLOCK1 = hr::field_value_literal< 0x40080044, 0, 3 >( 0 );
      // Clock selected: TCLK2
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_TIMER_CLOCK2 = hr::field_value_literal< 0x40080044, 0, 3 >( 1 );
      // Clock selected: TCLK3
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_TIMER_CLOCK3 = hr::field_value_literal< 0x40080044, 0, 3 >( 2 );
      // Clock selected: TCLK4
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_TIMER_CLOCK4 = hr::field_value_literal< 0x40080044, 0, 3 >( 3 );
      // Clock selected: TCLK5
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_TIMER_CLOCK5 = hr::field_value_literal< 0x40080044, 0, 3 >( 4 );
      // Clock selected: XC0
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_XC0 = hr::field_value_literal< 0x40080044, 0, 3 >( 5 );
      // Clock selected: XC1
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_XC1 = hr::field_value_literal< 0x40080044, 0, 3 >( 6 );
      // Clock selected: XC2
      constexpr auto TC0_CMR1_WAVE_EQ_1_TCCLKS_XC2 = hr::field_value_literal< 0x40080044, 0, 3 >( 7 );
   // Clock Invert
   constexpr auto TC0_CMR1_WAVE_EQ_1_CLKI = hr::field_mask_literal< 0x40080044, 3, 1 >();
   // Burst Signal Selection
   constexpr auto TC0_CMR1_WAVE_EQ_1_BURST_Msk = hr::field_mask_literal< 0x40080044, 4, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR1_WAVE_EQ_1_BURST_NONE = hr::field_value_literal< 0x40080044, 4, 2 >( 0 );
      // XC0 is ANDed with the selected clock.
      constexpr auto TC0_CMR1_WAVE_EQ_1_BURST_XC0 = hr::field_value_literal< 0x40080044, 4, 2 >( 1 );
      // XC1 is ANDed with the selected clock.
      constexpr auto TC0_CMR1_WAVE_EQ_1_BURST_XC1 = hr::field_value_literal< 0x40080044, 4, 2 >( 2 );
      // XC2 is ANDed with the selected clock.
      constexpr auto TC0_CMR1_WAVE_EQ_1_BURST_XC2 = hr::field_value_literal< 0x40080044, 4, 2 >( 3 );
   // Counter Clock Stopped with RC Compare
   constexpr auto TC0_CMR1_WAVE_EQ_1_CPCSTOP = hr::field_mask_literal< 0x40080044, 6, 1 >();
   // Counter Clock Disable with RC Compare
   constexpr auto TC0_CMR1_WAVE_EQ_1_CPCDIS = hr::field_mask_literal< 0x40080044, 7, 1 >();
   // External Event Edge Selection
   constexpr auto TC0_CMR1_WAVE_EQ_1_EEVTEDG_Msk = hr::field_mask_literal< 0x40080044, 8, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVTEDG_NONE = hr::field_value_literal< 0x40080044, 8, 2 >( 0 );
      // Rising edge
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVTEDG_RISING = hr::field_value_literal< 0x40080044, 8, 2 >( 1 );
      // Falling edge
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVTEDG_FALLING = hr::field_value_literal< 0x40080044, 8, 2 >( 2 );
      // Each edge
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVTEDG_EDGE = hr::field_value_literal< 0x40080044, 8, 2 >( 3 );
   // External Event Selection
   constexpr auto TC0_CMR1_WAVE_EQ_1_EEVT_Msk = hr::field_mask_literal< 0x40080044, 10, 2 >();
      // TIOB
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVT_TIOB = hr::field_value_literal< 0x40080044, 10, 2 >( 0 );
      // XC0
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVT_XC0 = hr::field_value_literal< 0x40080044, 10, 2 >( 1 );
      // XC1
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVT_XC1 = hr::field_value_literal< 0x40080044, 10, 2 >( 2 );
      // XC2
      constexpr auto TC0_CMR1_WAVE_EQ_1_EEVT_XC2 = hr::field_value_literal< 0x40080044, 10, 2 >( 3 );
   // External Event Trigger Enable
   constexpr auto TC0_CMR1_WAVE_EQ_1_ENETRG = hr::field_mask_literal< 0x40080044, 12, 1 >();
   // Waveform Selection
   constexpr auto TC0_CMR1_WAVE_EQ_1_WAVSEL_Msk = hr::field_mask_literal< 0x40080044, 13, 2 >();
      // UP mode without automatic trigger on RC Compare
      constexpr auto TC0_CMR1_WAVE_EQ_1_WAVSEL_UP = hr::field_value_literal< 0x40080044, 13, 2 >( 0 );
      // UPDOWN mode without automatic trigger on RC Compare
      constexpr auto TC0_CMR1_WAVE_EQ_1_WAVSEL_UPDOWN = hr::field_value_literal< 0x40080044, 13, 2 >( 1 );
      // UP mode with automatic trigger on RC Compare
      constexpr auto TC0_CMR1_WAVE_EQ_1_WAVSEL_UP_RC = hr::field_value_literal< 0x40080044, 13, 2 >( 2 );
      // UPDOWN mode with automatic trigger on RC Compare
      constexpr auto TC0_CMR1_WAVE_EQ_1_WAVSEL_UPDOWN_RC = hr::field_value_literal< 0x40080044, 13, 2 >( 3 );
   // Waveform Mode
   constexpr auto TC0_CMR1_WAVE_EQ_1_WAVE = hr::field_mask_literal< 0x40080044, 15, 1 >();
   // RA Compare Effect on TIOA
   constexpr auto TC0_CMR1_WAVE_EQ_1_ACPA_Msk = hr::field_mask_literal< 0x40080044, 16, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPA_NONE = hr::field_value_literal< 0x40080044, 16, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPA_SET = hr::field_value_literal< 0x40080044, 16, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPA_CLEAR = hr::field_value_literal< 0x40080044, 16, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPA_TOGGLE = hr::field_value_literal< 0x40080044, 16, 2 >( 3 );
   // RC Compare Effect on TIOA
   constexpr auto TC0_CMR1_WAVE_EQ_1_ACPC_Msk = hr::field_mask_literal< 0x40080044, 18, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPC_NONE = hr::field_value_literal< 0x40080044, 18, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPC_SET = hr::field_value_literal< 0x40080044, 18, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPC_CLEAR = hr::field_value_literal< 0x40080044, 18, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_ACPC_TOGGLE = hr::field_value_literal< 0x40080044, 18, 2 >( 3 );
   // External Event Effect on TIOA
   constexpr auto TC0_CMR1_WAVE_EQ_1_AEEVT_Msk = hr::field_mask_literal< 0x40080044, 20, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_AEEVT_NONE = hr::field_value_literal< 0x40080044, 20, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_AEEVT_SET = hr::field_value_literal< 0x40080044, 20, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_AEEVT_CLEAR = hr::field_value_literal< 0x40080044, 20, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_AEEVT_TOGGLE = hr::field_value_literal< 0x40080044, 20, 2 >( 3 );
   // Software Trigger Effect on TIOA
   constexpr auto TC0_CMR1_WAVE_EQ_1_ASWTRG_Msk = hr::field_mask_literal< 0x40080044, 22, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_ASWTRG_NONE = hr::field_value_literal< 0x40080044, 22, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_ASWTRG_SET = hr::field_value_literal< 0x40080044, 22, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_ASWTRG_CLEAR = hr::field_value_literal< 0x40080044, 22, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_ASWTRG_TOGGLE = hr::field_value_literal< 0x40080044, 22, 2 >( 3 );
   // RB Compare Effect on TIOB
   constexpr auto TC0_CMR1_WAVE_EQ_1_BCPB_Msk = hr::field_mask_literal< 0x40080044, 24, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPB_NONE = hr::field_value_literal< 0x40080044, 24, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPB_SET = hr::field_value_literal< 0x40080044, 24, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPB_CLEAR = hr::field_value_literal< 0x40080044, 24, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPB_TOGGLE = hr::field_value_literal< 0x40080044, 24, 2 >( 3 );
   // RC Compare Effect on TIOB
   constexpr auto TC0_CMR1_WAVE_EQ_1_BCPC_Msk = hr::field_mask_literal< 0x40080044, 26, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPC_NONE = hr::field_value_literal< 0x40080044, 26, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPC_SET = hr::field_value_literal< 0x40080044, 26, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPC_CLEAR = hr::field_value_literal< 0x40080044, 26, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_BCPC_TOGGLE = hr::field_value_literal< 0x40080044, 26, 2 >( 3 );
   // External Event Effect on TIOB
   constexpr auto TC0_CMR1_WAVE_EQ_1_BEEVT_Msk = hr::field_mask_literal< 0x40080044, 28, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_BEEVT_NONE = hr::field_value_literal< 0x40080044, 28, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_BEEVT_SET = hr::field_value_literal< 0x40080044, 28, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_BEEVT_CLEAR = hr::field_value_literal< 0x40080044, 28, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_BEEVT_TOGGLE = hr::field_value_literal< 0x40080044, 28, 2 >( 3 );
   // Software Trigger Effect on TIOB
   constexpr auto TC0_CMR1_WAVE_EQ_1_BSWTRG_Msk = hr::field_mask_literal< 0x40080044, 30, 2 >();
      // None
      constexpr auto TC0_CMR1_WAVE_EQ_1_BSWTRG_NONE = hr::field_value_literal< 0x40080044, 30, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR1_WAVE_EQ_1_BSWTRG_SET = hr::field_value_literal< 0x40080044, 30, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR1_WAVE_EQ_1_BSWTRG_CLEAR = hr::field_value_literal< 0x40080044, 30, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR1_WAVE_EQ_1_BSWTRG_TOGGLE = hr::field_value_literal< 0x40080044, 30, 2 >( 3 );

// SMMR1
   // Gray Count Enable
   constexpr auto TC0_SMMR1_GCEN = hr::field_mask_literal< 0x40080048, 0, 1 >();
   // DOWN Count
   constexpr auto TC0_SMMR1_DOWN = hr::field_mask_literal< 0x40080048, 1, 1 >();

// CV1
   // Counter Value
   constexpr auto TC0_CV1_CV_Msk = hr::field_mask_literal< 0x40080050, 0, 32 >();

// RA1
   // Register A
   constexpr auto TC0_RA1_RA_Msk = hr::field_mask_literal< 0x40080054, 0, 32 >();

// RB1
   // Register B
   constexpr auto TC0_RB1_RB_Msk = hr::field_mask_literal< 0x40080058, 0, 32 >();

// RC1
   // Register C
   constexpr auto TC0_RC1_RC_Msk = hr::field_mask_literal< 0x4008005c, 0, 32 >();

// SR1
   // Counter Overflow Status
   constexpr auto TC0_SR1_COVFS = hr::field_mask_literal< 0x40080060, 0, 1 >();
   // Load Overrun Status
   constexpr auto TC0_SR1_LOVRS = hr::field_mask_literal< 0x40080060, 1, 1 >();
   // RA Compare Status
   constexpr auto TC0_SR1_CPAS = hr::field_mask_literal< 0x40080060, 2, 1 >();
   // RB Compare Status
   constexpr auto TC0_SR1_CPBS = hr::field_mask_literal< 0x40080060, 3, 1 >();
   // RC Compare Status
   constexpr auto TC0_SR1_CPCS = hr::field_mask_literal< 0x40080060, 4, 1 >();
   // RA Loading Status
   constexpr auto TC0_SR1_LDRAS = hr::field_mask_literal< 0x40080060, 5, 1 >();
   // RB Loading Status
   constexpr auto TC0_SR1_LDRBS = hr::field_mask_literal< 0x40080060, 6, 1 >();
   // External Trigger Status
   constexpr auto TC0_SR1_ETRGS = hr::field_mask_literal< 0x40080060, 7, 1 >();
   // Clock Enabling Status
   constexpr auto TC0_SR1_CLKSTA = hr::field_mask_literal< 0x40080060, 16, 1 >();
   // TIOA Mirror
   constexpr auto TC0_SR1_MTIOA = hr::field_mask_literal< 0x40080060, 17, 1 >();
   // TIOB Mirror
   constexpr auto TC0_SR1_MTIOB = hr::field_mask_literal< 0x40080060, 18, 1 >();

// IER1
   // Counter Overflow
   constexpr auto TC0_IER1_COVFS = hr::field_mask_literal< 0x40080064, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IER1_LOVRS = hr::field_mask_literal< 0x40080064, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IER1_CPAS = hr::field_mask_literal< 0x40080064, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IER1_CPBS = hr::field_mask_literal< 0x40080064, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IER1_CPCS = hr::field_mask_literal< 0x40080064, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IER1_LDRAS = hr::field_mask_literal< 0x40080064, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IER1_LDRBS = hr::field_mask_literal< 0x40080064, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IER1_ETRGS = hr::field_mask_literal< 0x40080064, 7, 1 >();

// IDR1
   // Counter Overflow
   constexpr auto TC0_IDR1_COVFS = hr::field_mask_literal< 0x40080068, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IDR1_LOVRS = hr::field_mask_literal< 0x40080068, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IDR1_CPAS = hr::field_mask_literal< 0x40080068, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IDR1_CPBS = hr::field_mask_literal< 0x40080068, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IDR1_CPCS = hr::field_mask_literal< 0x40080068, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IDR1_LDRAS = hr::field_mask_literal< 0x40080068, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IDR1_LDRBS = hr::field_mask_literal< 0x40080068, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IDR1_ETRGS = hr::field_mask_literal< 0x40080068, 7, 1 >();

// IMR1
   // Counter Overflow
   constexpr auto TC0_IMR1_COVFS = hr::field_mask_literal< 0x4008006c, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IMR1_LOVRS = hr::field_mask_literal< 0x4008006c, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IMR1_CPAS = hr::field_mask_literal< 0x4008006c, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IMR1_CPBS = hr::field_mask_literal< 0x4008006c, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IMR1_CPCS = hr::field_mask_literal< 0x4008006c, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IMR1_LDRAS = hr::field_mask_literal< 0x4008006c, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IMR1_LDRBS = hr::field_mask_literal< 0x4008006c, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IMR1_ETRGS = hr::field_mask_literal< 0x4008006c, 7, 1 >();

// CCR2
   // Counter Clock Enable Command
   constexpr auto TC0_CCR2_CLKEN = hr::field_mask_literal< 0x40080080, 0, 1 >();
   // Counter Clock Disable Command
   constexpr auto TC0_CCR2_CLKDIS = hr::field_mask_literal< 0x40080080, 1, 1 >();
   // Software Trigger Command
   constexpr auto TC0_CCR2_SWTRG = hr::field_mask_literal< 0x40080080, 2, 1 >();

// CMR2
   // Clock Selection
   constexpr auto TC0_CMR2_TCCLKS_Msk = hr::field_mask_literal< 0x40080084, 0, 3 >();
      // Clock selected: TCLK1
      constexpr auto TC0_CMR2_TCCLKS_TIMER_CLOCK1 = hr::field_value_literal< 0x40080084, 0, 3 >( 0 );
      // Clock selected: TCLK2
      constexpr auto TC0_CMR2_TCCLKS_TIMER_CLOCK2 = hr::field_value_literal< 0x40080084, 0, 3 >( 1 );
      // Clock selected: TCLK3
      constexpr auto TC0_CMR2_TCCLKS_TIMER_CLOCK3 = hr::field_value_literal< 0x40080084, 0, 3 >( 2 );
      // Clock selected: TCLK4
      constexpr auto TC0_CMR2_TCCLKS_TIMER_CLOCK4 = hr::field_value_literal< 0x40080084, 0, 3 >( 3 );
      // Clock selected: TCLK5
      constexpr auto TC0_CMR2_TCCLKS_TIMER_CLOCK5 = hr::field_value_literal< 0x40080084, 0, 3 >( 4 );
      // Clock selected: XC0
      constexpr auto TC0_CMR2_TCCLKS_XC0 = hr::field_value_literal< 0x40080084, 0, 3 >( 5 );
      // Clock selected: XC1
      constexpr auto TC0_CMR2_TCCLKS_XC1 = hr::field_value_literal< 0x40080084, 0, 3 >( 6 );
      // Clock selected: XC2
      constexpr auto TC0_CMR2_TCCLKS_XC2 = hr::field_value_literal< 0x40080084, 0, 3 >( 7 );
   // Clock Invert
   constexpr auto TC0_CMR2_CLKI = hr::field_mask_literal< 0x40080084, 3, 1 >();
   // Burst Signal Selection
   constexpr auto TC0_CMR2_BURST_Msk = hr::field_mask_literal< 0x40080084, 4, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR2_BURST_NONE = hr::field_value_literal< 0x40080084, 4, 2 >( 0 );
      // XC0 is ANDed with the selected clock.
      constexpr auto TC0_CMR2_BURST_XC0 = hr::field_value_literal< 0x40080084, 4, 2 >( 1 );
      // XC1 is ANDed with the selected clock.
      constexpr auto TC0_CMR2_BURST_XC1 = hr::field_value_literal< 0x40080084, 4, 2 >( 2 );
      // XC2 is ANDed with the selected clock.
      constexpr auto TC0_CMR2_BURST_XC2 = hr::field_value_literal< 0x40080084, 4, 2 >( 3 );
   // Counter Clock Stopped with RB Loading
   constexpr auto TC0_CMR2_LDBSTOP = hr::field_mask_literal< 0x40080084, 6, 1 >();
   // Counter Clock Disable with RB Loading
   constexpr auto TC0_CMR2_LDBDIS = hr::field_mask_literal< 0x40080084, 7, 1 >();
   // External Trigger Edge Selection
   constexpr auto TC0_CMR2_ETRGEDG_Msk = hr::field_mask_literal< 0x40080084, 8, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR2_ETRGEDG_NONE = hr::field_value_literal< 0x40080084, 8, 2 >( 0 );
      // Rising edge
      constexpr auto TC0_CMR2_ETRGEDG_RISING = hr::field_value_literal< 0x40080084, 8, 2 >( 1 );
      // Falling edge
      constexpr auto TC0_CMR2_ETRGEDG_FALLING = hr::field_value_literal< 0x40080084, 8, 2 >( 2 );
      // Each edge
      constexpr auto TC0_CMR2_ETRGEDG_EDGE = hr::field_value_literal< 0x40080084, 8, 2 >( 3 );
   // TIOA or TIOB External Trigger Selection
   constexpr auto TC0_CMR2_ABETRG = hr::field_mask_literal< 0x40080084, 10, 1 >();
   // RC Compare Trigger Enable
   constexpr auto TC0_CMR2_CPCTRG = hr::field_mask_literal< 0x40080084, 14, 1 >();
   // Waveform Mode
   constexpr auto TC0_CMR2_WAVE = hr::field_mask_literal< 0x40080084, 15, 1 >();
   // RA Loading Edge Selection
   constexpr auto TC0_CMR2_LDRA_Msk = hr::field_mask_literal< 0x40080084, 16, 2 >();
      // None
      constexpr auto TC0_CMR2_LDRA_NONE = hr::field_value_literal< 0x40080084, 16, 2 >( 0 );
      // Rising edge of TIOA
      constexpr auto TC0_CMR2_LDRA_RISING = hr::field_value_literal< 0x40080084, 16, 2 >( 1 );
      // Falling edge of TIOA
      constexpr auto TC0_CMR2_LDRA_FALLING = hr::field_value_literal< 0x40080084, 16, 2 >( 2 );
      // Each edge of TIOA
      constexpr auto TC0_CMR2_LDRA_EDGE = hr::field_value_literal< 0x40080084, 16, 2 >( 3 );
   // RB Loading Edge Selection
   constexpr auto TC0_CMR2_LDRB_Msk = hr::field_mask_literal< 0x40080084, 18, 2 >();
      // None
      constexpr auto TC0_CMR2_LDRB_NONE = hr::field_value_literal< 0x40080084, 18, 2 >( 0 );
      // Rising edge of TIOA
      constexpr auto TC0_CMR2_LDRB_RISING = hr::field_value_literal< 0x40080084, 18, 2 >( 1 );
      // Falling edge of TIOA
      constexpr auto TC0_CMR2_LDRB_FALLING = hr::field_value_literal< 0x40080084, 18, 2 >( 2 );
      // Each edge of TIOA
      constexpr auto TC0_CMR2_LDRB_EDGE = hr::field_value_literal< 0x40080084, 18, 2 >( 3 );

// CMR2_WAVE_EQ_1
   // Clock Selection
   constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_Msk = hr::field_mask_literal< 0x40080084, 0, 3 >();
      // Clock selected: TCLK1
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_TIMER_CLOCK1 = hr::field_value_literal< 0x40080084, 0, 3 >( 0 );
      // Clock selected: TCLK2
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_TIMER_CLOCK2 = hr::field_value_literal< 0x40080084, 0, 3 >( 1 );
      // Clock selected: TCLK3
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_TIMER_CLOCK3 = hr::field_value_literal< 0x40080084, 0, 3 >( 2 );
      // Clock selected: TCLK4
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_TIMER_CLOCK4 = hr::field_value_literal< 0x40080084, 0, 3 >( 3 );
      // Clock selected: TCLK5
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_TIMER_CLOCK5 = hr::field_value_literal< 0x40080084, 0, 3 >( 4 );
      // Clock selected: XC0
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_XC0 = hr::field_value_literal< 0x40080084, 0, 3 >( 5 );
      // Clock selected: XC1
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_XC1 = hr::field_value_literal< 0x40080084, 0, 3 >( 6 );
      // Clock selected: XC2
      constexpr auto TC0_CMR2_WAVE_EQ_1_TCCLKS_XC2 = hr::field_value_literal< 0x40080084, 0, 3 >( 7 );
   // Clock Invert
   constexpr auto TC0_CMR2_WAVE_EQ_1_CLKI = hr::field_mask_literal< 0x40080084, 3, 1 >();
   // Burst Signal Selection
   constexpr auto TC0_CMR2_WAVE_EQ_1_BURST_Msk = hr::field_mask_literal< 0x40080084, 4, 2 >();
      // The clock is not gated by an external signal.
      constexpr auto TC0_CMR2_WAVE_EQ_1_BURST_NONE = hr::field_value_literal< 0x40080084, 4, 2 >( 0 );
      // XC0 is ANDed with the selected clock.
      constexpr auto TC0_CMR2_WAVE_EQ_1_BURST_XC0 = hr::field_value_literal< 0x40080084, 4, 2 >( 1 );
      // XC1 is ANDed with the selected clock.
      constexpr auto TC0_CMR2_WAVE_EQ_1_BURST_XC1 = hr::field_value_literal< 0x40080084, 4, 2 >( 2 );
      // XC2 is ANDed with the selected clock.
      constexpr auto TC0_CMR2_WAVE_EQ_1_BURST_XC2 = hr::field_value_literal< 0x40080084, 4, 2 >( 3 );
   // Counter Clock Stopped with RC Compare
   constexpr auto TC0_CMR2_WAVE_EQ_1_CPCSTOP = hr::field_mask_literal< 0x40080084, 6, 1 >();
   // Counter Clock Disable with RC Compare
   constexpr auto TC0_CMR2_WAVE_EQ_1_CPCDIS = hr::field_mask_literal< 0x40080084, 7, 1 >();
   // External Event Edge Selection
   constexpr auto TC0_CMR2_WAVE_EQ_1_EEVTEDG_Msk = hr::field_mask_literal< 0x40080084, 8, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVTEDG_NONE = hr::field_value_literal< 0x40080084, 8, 2 >( 0 );
      // Rising edge
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVTEDG_RISING = hr::field_value_literal< 0x40080084, 8, 2 >( 1 );
      // Falling edge
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVTEDG_FALLING = hr::field_value_literal< 0x40080084, 8, 2 >( 2 );
      // Each edge
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVTEDG_EDGE = hr::field_value_literal< 0x40080084, 8, 2 >( 3 );
   // External Event Selection
   constexpr auto TC0_CMR2_WAVE_EQ_1_EEVT_Msk = hr::field_mask_literal< 0x40080084, 10, 2 >();
      // TIOB
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVT_TIOB = hr::field_value_literal< 0x40080084, 10, 2 >( 0 );
      // XC0
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVT_XC0 = hr::field_value_literal< 0x40080084, 10, 2 >( 1 );
      // XC1
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVT_XC1 = hr::field_value_literal< 0x40080084, 10, 2 >( 2 );
      // XC2
      constexpr auto TC0_CMR2_WAVE_EQ_1_EEVT_XC2 = hr::field_value_literal< 0x40080084, 10, 2 >( 3 );
   // External Event Trigger Enable
   constexpr auto TC0_CMR2_WAVE_EQ_1_ENETRG = hr::field_mask_literal< 0x40080084, 12, 1 >();
   // Waveform Selection
   constexpr auto TC0_CMR2_WAVE_EQ_1_WAVSEL_Msk = hr::field_mask_literal< 0x40080084, 13, 2 >();
      // UP mode without automatic trigger on RC Compare
      constexpr auto TC0_CMR2_WAVE_EQ_1_WAVSEL_UP = hr::field_value_literal< 0x40080084, 13, 2 >( 0 );
      // UPDOWN mode without automatic trigger on RC Compare
      constexpr auto TC0_CMR2_WAVE_EQ_1_WAVSEL_UPDOWN = hr::field_value_literal< 0x40080084, 13, 2 >( 1 );
      // UP mode with automatic trigger on RC Compare
      constexpr auto TC0_CMR2_WAVE_EQ_1_WAVSEL_UP_RC = hr::field_value_literal< 0x40080084, 13, 2 >( 2 );
      // UPDOWN mode with automatic trigger on RC Compare
      constexpr auto TC0_CMR2_WAVE_EQ_1_WAVSEL_UPDOWN_RC = hr::field_value_literal< 0x40080084, 13, 2 >( 3 );
   // Waveform Mode
   constexpr auto TC0_CMR2_WAVE_EQ_1_WAVE = hr::field_mask_literal< 0x40080084, 15, 1 >();
   // RA Compare Effect on TIOA
   constexpr auto TC0_CMR2_WAVE_EQ_1_ACPA_Msk = hr::field_mask_literal< 0x40080084, 16, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPA_NONE = hr::field_value_literal< 0x40080084, 16, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPA_SET = hr::field_value_literal< 0x40080084, 16, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPA_CLEAR = hr::field_value_literal< 0x40080084, 16, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPA_TOGGLE = hr::field_value_literal< 0x40080084, 16, 2 >( 3 );
   // RC Compare Effect on TIOA
   constexpr auto TC0_CMR2_WAVE_EQ_1_ACPC_Msk = hr::field_mask_literal< 0x40080084, 18, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPC_NONE = hr::field_value_literal< 0x40080084, 18, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPC_SET = hr::field_value_literal< 0x40080084, 18, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPC_CLEAR = hr::field_value_literal< 0x40080084, 18, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_ACPC_TOGGLE = hr::field_value_literal< 0x40080084, 18, 2 >( 3 );
   // External Event Effect on TIOA
   constexpr auto TC0_CMR2_WAVE_EQ_1_AEEVT_Msk = hr::field_mask_literal< 0x40080084, 20, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_AEEVT_NONE = hr::field_value_literal< 0x40080084, 20, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_AEEVT_SET = hr::field_value_literal< 0x40080084, 20, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_AEEVT_CLEAR = hr::field_value_literal< 0x40080084, 20, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_AEEVT_TOGGLE = hr::field_value_literal< 0x40080084, 20, 2 >( 3 );
   // Software Trigger Effect on TIOA
   constexpr auto TC0_CMR2_WAVE_EQ_1_ASWTRG_Msk = hr::field_mask_literal< 0x40080084, 22, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_ASWTRG_NONE = hr::field_value_literal< 0x40080084, 22, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_ASWTRG_SET = hr::field_value_literal< 0x40080084, 22, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_ASWTRG_CLEAR = hr::field_value_literal< 0x40080084, 22, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_ASWTRG_TOGGLE = hr::field_value_literal< 0x40080084, 22, 2 >( 3 );
   // RB Compare Effect on TIOB
   constexpr auto TC0_CMR2_WAVE_EQ_1_BCPB_Msk = hr::field_mask_literal< 0x40080084, 24, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPB_NONE = hr::field_value_literal< 0x40080084, 24, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPB_SET = hr::field_value_literal< 0x40080084, 24, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPB_CLEAR = hr::field_value_literal< 0x40080084, 24, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPB_TOGGLE = hr::field_value_literal< 0x40080084, 24, 2 >( 3 );
   // RC Compare Effect on TIOB
   constexpr auto TC0_CMR2_WAVE_EQ_1_BCPC_Msk = hr::field_mask_literal< 0x40080084, 26, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPC_NONE = hr::field_value_literal< 0x40080084, 26, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPC_SET = hr::field_value_literal< 0x40080084, 26, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPC_CLEAR = hr::field_value_literal< 0x40080084, 26, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_BCPC_TOGGLE = hr::field_value_literal< 0x40080084, 26, 2 >( 3 );
   // External Event Effect on TIOB
   constexpr auto TC0_CMR2_WAVE_EQ_1_BEEVT_Msk = hr::field_mask_literal< 0x40080084, 28, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_BEEVT_NONE = hr::field_value_literal< 0x40080084, 28, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_BEEVT_SET = hr::field_value_literal< 0x40080084, 28, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_BEEVT_CLEAR = hr::field_value_literal< 0x40080084, 28, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_BEEVT_TOGGLE = hr::field_value_literal< 0x40080084, 28, 2 >( 3 );
   // Software Trigger Effect on TIOB
   constexpr auto TC0_CMR2_WAVE_EQ_1_BSWTRG_Msk = hr::field_mask_literal< 0x40080084, 30, 2 >();
      // None
      constexpr auto TC0_CMR2_WAVE_EQ_1_BSWTRG_NONE = hr::field_value_literal< 0x40080084, 30, 2 >( 0 );
      // Set
      constexpr auto TC0_CMR2_WAVE_EQ_1_BSWTRG_SET = hr::field_value_literal< 0x40080084, 30, 2 >( 1 );
      // Clear
      constexpr auto TC0_CMR2_WAVE_EQ_1_BSWTRG_CLEAR = hr::field_value_literal< 0x40080084, 30, 2 >( 2 );
      // Toggle
      constexpr auto TC0_CMR2_WAVE_EQ_1_BSWTRG_TOGGLE = hr::field_value_literal< 0x40080084, 30, 2 >( 3 );

// SMMR2
   // Gray Count Enable
   constexpr auto TC0_SMMR2_GCEN = hr::field_mask_literal< 0x40080088, 0, 1 >();
   // DOWN Count
   constexpr auto TC0_SMMR2_DOWN = hr::field_mask_literal< 0x40080088, 1, 1 >();

// CV2
   // Counter Value
   constexpr auto TC0_CV2_CV_Msk = hr::field_mask_literal< 0x40080090, 0, 32 >();

// RA2
   // Register A
   constexpr auto TC0_RA2_RA_Msk = hr::field_mask_literal< 0x40080094, 0, 32 >();

// RB2
   // Register B
   constexpr auto TC0_RB2_RB_Msk = hr::field_mask_literal< 0x40080098, 0, 32 >();

// RC2
   // Register C
   constexpr auto TC0_RC2_RC_Msk = hr::field_mask_literal< 0x4008009c, 0, 32 >();

// SR2
   // Counter Overflow Status
   constexpr auto TC0_SR2_COVFS = hr::field_mask_literal< 0x400800a0, 0, 1 >();
   // Load Overrun Status
   constexpr auto TC0_SR2_LOVRS = hr::field_mask_literal< 0x400800a0, 1, 1 >();
   // RA Compare Status
   constexpr auto TC0_SR2_CPAS = hr::field_mask_literal< 0x400800a0, 2, 1 >();
   // RB Compare Status
   constexpr auto TC0_SR2_CPBS = hr::field_mask_literal< 0x400800a0, 3, 1 >();
   // RC Compare Status
   constexpr auto TC0_SR2_CPCS = hr::field_mask_literal< 0x400800a0, 4, 1 >();
   // RA Loading Status
   constexpr auto TC0_SR2_LDRAS = hr::field_mask_literal< 0x400800a0, 5, 1 >();
   // RB Loading Status
   constexpr auto TC0_SR2_LDRBS = hr::field_mask_literal< 0x400800a0, 6, 1 >();
   // External Trigger Status
   constexpr auto TC0_SR2_ETRGS = hr::field_mask_literal< 0x400800a0, 7, 1 >();
   // Clock Enabling Status
   constexpr auto TC0_SR2_CLKSTA = hr::field_mask_literal< 0x400800a0, 16, 1 >();
   // TIOA Mirror
   constexpr auto TC0_SR2_MTIOA = hr::field_mask_literal< 0x400800a0, 17, 1 >();
   // TIOB Mirror
   constexpr auto TC0_SR2_MTIOB = hr::field_mask_literal< 0x400800a0, 18, 1 >();

// IER2
   // Counter Overflow
   constexpr auto TC0_IER2_COVFS = hr::field_mask_literal< 0x400800a4, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IER2_LOVRS = hr::field_mask_literal< 0x400800a4, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IER2_CPAS = hr::field_mask_literal< 0x400800a4, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IER2_CPBS = hr::field_mask_literal< 0x400800a4, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IER2_CPCS = hr::field_mask_literal< 0x400800a4, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IER2_LDRAS = hr::field_mask_literal< 0x400800a4, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IER2_LDRBS = hr::field_mask_literal< 0x400800a4, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IER2_ETRGS = hr::field_mask_literal< 0x400800a4, 7, 1 >();

// IDR2
   // Counter Overflow
   constexpr auto TC0_IDR2_COVFS = hr::field_mask_literal< 0x400800a8, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IDR2_LOVRS = hr::field_mask_literal< 0x400800a8, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IDR2_CPAS = hr::field_mask_literal< 0x400800a8, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IDR2_CPBS = hr::field_mask_literal< 0x400800a8, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IDR2_CPCS = hr::field_mask_literal< 0x400800a8, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IDR2_LDRAS = hr::field_mask_literal< 0x400800a8, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IDR2_LDRBS = hr::field_mask_literal< 0x400800a8, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IDR2_ETRGS = hr::field_mask_literal< 0x400800a8, 7, 1 >();

// IMR2
   // Counter Overflow
   constexpr auto TC0_IMR2_COVFS = hr::field_mask_literal< 0x400800ac, 0, 1 >();
   // Load Overrun
   constexpr auto TC0_IMR2_LOVRS = hr::field_mask_literal< 0x400800ac, 1, 1 >();
   // RA Compare
   constexpr auto TC0_IMR2_CPAS = hr::field_mask_literal< 0x400800ac, 2, 1 >();
   // RB Compare
   constexpr auto TC0_IMR2_CPBS = hr::field_mask_literal< 0x400800ac, 3, 1 >();
   // RC Compare
   constexpr auto TC0_IMR2_CPCS = hr::field_mask_literal< 0x400800ac, 4, 1 >();
   // RA Loading
   constexpr auto TC0_IMR2_LDRAS = hr::field_mask_literal< 0x400800ac, 5, 1 >();
   // RB Loading
   constexpr auto TC0_IMR2_LDRBS = hr::field_mask_literal< 0x400800ac, 6, 1 >();
   // External Trigger
   constexpr auto TC0_IMR2_ETRGS = hr::field_mask_literal< 0x400800ac, 7, 1 >();

// BCR
   // Synchro Command
   constexpr auto TC0_BCR_SYNC = hr::field_mask_literal< 0x400800c0, 0, 1 >();

// BMR
   // External Clock Signal 0 Selection
   constexpr auto TC0_BMR_TC0XC0S_Msk = hr::field_mask_literal< 0x400800c4, 0, 2 >();
      // Signal connected to XC0: TCLK0
      constexpr auto TC0_BMR_TC0XC0S_TCLK0 = hr::field_value_literal< 0x400800c4, 0, 2 >( 0 );
      // Signal connected to XC0: TIOA1
      constexpr auto TC0_BMR_TC0XC0S_TIOA1 = hr::field_value_literal< 0x400800c4, 0, 2 >( 2 );
      // Signal connected to XC0: TIOA2
      constexpr auto TC0_BMR_TC0XC0S_TIOA2 = hr::field_value_literal< 0x400800c4, 0, 2 >( 3 );
   // External Clock Signal 1 Selection
   constexpr auto TC0_BMR_TC1XC1S_Msk = hr::field_mask_literal< 0x400800c4, 2, 2 >();
      // Signal connected to XC1: TCLK1
      constexpr auto TC0_BMR_TC1XC1S_TCLK1 = hr::field_value_literal< 0x400800c4, 2, 2 >( 0 );
      // Signal connected to XC1: TIOA0
      constexpr auto TC0_BMR_TC1XC1S_TIOA0 = hr::field_value_literal< 0x400800c4, 2, 2 >( 2 );
      // Signal connected to XC1: TIOA2
      constexpr auto TC0_BMR_TC1XC1S_TIOA2 = hr::field_value_literal< 0x400800c4, 2, 2 >( 3 );
   // External Clock Signal 2 Selection
   constexpr auto TC0_BMR_TC2XC2S_Msk = hr::field_mask_literal< 0x400800c4, 4, 2 >();
      // Signal connected to XC2: TCLK2
      constexpr auto TC0_BMR_TC2XC2S_TCLK2 = hr::field_value_literal< 0x400800c4, 4, 2 >( 0 );
      // Signal connected to XC2: TIOA1
      constexpr auto TC0_BMR_TC2XC2S_TIOA1 = hr::field_value_literal< 0x400800c4, 4, 2 >( 2 );
      // Signal connected to XC2: TIOA2
      constexpr auto TC0_BMR_TC2XC2S_TIOA2 = hr::field_value_literal< 0x400800c4, 4, 2 >( 3 );
   // Quadrature Decoder ENabled
   constexpr auto TC0_BMR_QDEN = hr::field_mask_literal< 0x400800c4, 8, 1 >();
   // POSition ENabled
   constexpr auto TC0_BMR_POSEN = hr::field_mask_literal< 0x400800c4, 9, 1 >();
   // SPEED ENabled
   constexpr auto TC0_BMR_SPEEDEN = hr::field_mask_literal< 0x400800c4, 10, 1 >();
   // Quadrature Decoding TRANSparent
   constexpr auto TC0_BMR_QDTRANS = hr::field_mask_literal< 0x400800c4, 11, 1 >();
   // EDGe on PHA count mode
   constexpr auto TC0_BMR_EDGPHA = hr::field_mask_literal< 0x400800c4, 12, 1 >();
   // INVerted phA
   constexpr auto TC0_BMR_INVA = hr::field_mask_literal< 0x400800c4, 13, 1 >();
   // INVerted phB
   constexpr auto TC0_BMR_INVB = hr::field_mask_literal< 0x400800c4, 14, 1 >();
   // INVerted InDeX
   constexpr auto TC0_BMR_INVIDX = hr::field_mask_literal< 0x400800c4, 15, 1 >();
   // SWAP PHA and PHB
   constexpr auto TC0_BMR_SWAP = hr::field_mask_literal< 0x400800c4, 16, 1 >();
   // InDeX pin is PHB pin
   constexpr auto TC0_BMR_IDXPHB = hr::field_mask_literal< 0x400800c4, 17, 1 >();
   // None
   constexpr auto TC0_BMR_FILTER = hr::field_mask_literal< 0x400800c4, 19, 1 >();
   // MAXimum FILTer
   constexpr auto TC0_BMR_MAXFILT_Msk = hr::field_mask_literal< 0x400800c4, 20, 6 >();

// QIER
   // InDeX
   constexpr auto TC0_QIER_IDX = hr::field_mask_literal< 0x400800c8, 0, 1 >();
   // DIRection CHanGe
   constexpr auto TC0_QIER_DIRCHG = hr::field_mask_literal< 0x400800c8, 1, 1 >();
   // Quadrature ERRor
   constexpr auto TC0_QIER_QERR = hr::field_mask_literal< 0x400800c8, 2, 1 >();

// QIDR
   // InDeX
   constexpr auto TC0_QIDR_IDX = hr::field_mask_literal< 0x400800cc, 0, 1 >();
   // DIRection CHanGe
   constexpr auto TC0_QIDR_DIRCHG = hr::field_mask_literal< 0x400800cc, 1, 1 >();
   // Quadrature ERRor
   constexpr auto TC0_QIDR_QERR = hr::field_mask_literal< 0x400800cc, 2, 1 >();

// QIMR
   // InDeX
   constexpr auto TC0_QIMR_IDX = hr::field_mask_literal< 0x400800d0, 0, 1 >();
   // DIRection CHanGe
   constexpr auto TC0_QIMR_DIRCHG = hr::field_mask_literal< 0x400800d0, 1, 1 >();
   // Quadrature ERRor
   constexpr auto TC0_QIMR_QERR = hr::field_mask_literal< 0x400800d0, 2, 1 >();

// QISR
   // InDeX
   constexpr auto TC0_QISR_IDX = hr::field_mask_literal< 0x400800d4, 0, 1 >();
   // DIRection CHanGe
   constexpr auto TC0_QISR_DIRCHG = hr::field_mask_literal< 0x400800d4, 1, 1 >();
   // Quadrature ERRor
   constexpr auto TC0_QISR_QERR = hr::field_mask_literal< 0x400800d4, 2, 1 >();
   // DIRection
   constexpr auto TC0_QISR_DIR = hr::field_mask_literal< 0x400800d4, 8, 1 >();

// FMR
   // ENable Compare Fault Channel 0
   constexpr auto TC0_FMR_ENCF0 = hr::field_mask_literal< 0x400800d8, 0, 1 >();
   // ENable Compare Fault Channel 1
   constexpr auto TC0_FMR_ENCF1 = hr::field_mask_literal< 0x400800d8, 1, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto TC0_WPMR_WPEN = hr::field_mask_literal< 0x400800e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto TC0_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400800e4, 8, 24 >();

// =============================================================================
//
// TC1
// base address = 0x40084000
// Timer Counter 1
//
// =============================================================================

struct Tc1 {
   hr::hardware_register<0x40084000> CCR0;
   hr::hardware_register<0x40084004> CMR0;
   hr::hardware_register<0x40084008> SMMR0;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x40084010> CV0;
   hr::hardware_register<0x40084014> RA0;
   hr::hardware_register<0x40084018> RB0;
   hr::hardware_register<0x4008401c> RC0;
   hr::hardware_register<0x40084020> SR0;
   hr::hardware_register<0x40084024> IER0;
   hr::hardware_register<0x40084028> IDR0;
   hr::hardware_register<0x4008402c> IMR0;
   hr::reserved< 0x30, 4 > _reserved_at_0x30;
   hr::hardware_register<0x40084040> CCR1;
   hr::hardware_register<0x40084044> CMR1;
   hr::hardware_register<0x40084048> SMMR1;
   hr::reserved< 0x4C, 1 > _reserved_at_0x4C;
   hr::hardware_register<0x40084050> CV1;
   hr::hardware_register<0x40084054> RA1;
   hr::hardware_register<0x40084058> RB1;
   hr::hardware_register<0x4008405c> RC1;
   hr::hardware_register<0x40084060> SR1;
   hr::hardware_register<0x40084064> IER1;
   hr::hardware_register<0x40084068> IDR1;
   hr::hardware_register<0x4008406c> IMR1;
   hr::reserved< 0x70, 4 > _reserved_at_0x70;
   hr::hardware_register<0x40084080> CCR2;
   hr::hardware_register<0x40084084> CMR2;
   hr::hardware_register<0x40084088> SMMR2;
   hr::reserved< 0x8C, 1 > _reserved_at_0x8C;
   hr::hardware_register<0x40084090> CV2;
   hr::hardware_register<0x40084094> RA2;
   hr::hardware_register<0x40084098> RB2;
   hr::hardware_register<0x4008409c> RC2;
   hr::hardware_register<0x400840a0> SR2;
   hr::hardware_register<0x400840a4> IER2;
   hr::hardware_register<0x400840a8> IDR2;
   hr::hardware_register<0x400840ac> IMR2;
   hr::reserved< 0xB0, 4 > _reserved_at_0xB0;
   hr::hardware_register<0x400840c0> BCR;
   hr::hardware_register<0x400840c4> BMR;
   hr::hardware_register<0x400840c8> QIER;
   hr::hardware_register<0x400840cc> QIDR;
   hr::hardware_register<0x400840d0> QIMR;
   hr::hardware_register<0x400840d4> QISR;
   hr::hardware_register<0x400840d8> FMR;
   hr::reserved< 0xDC, 2 > _reserved_at_0xDC;
   hr::hardware_register<0x400840e4> WPMR;
};

#define TC1 ( ( Tc1 * ) 0x40084000 )

// =============================================================================
//
// TC2
// base address = 0x40088000
// Timer Counter 2
//
// =============================================================================

struct Tc2 {
   hr::hardware_register<0x40088000> CCR0;
   hr::hardware_register<0x40088004> CMR0;
   hr::hardware_register<0x40088008> SMMR0;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x40088010> CV0;
   hr::hardware_register<0x40088014> RA0;
   hr::hardware_register<0x40088018> RB0;
   hr::hardware_register<0x4008801c> RC0;
   hr::hardware_register<0x40088020> SR0;
   hr::hardware_register<0x40088024> IER0;
   hr::hardware_register<0x40088028> IDR0;
   hr::hardware_register<0x4008802c> IMR0;
   hr::reserved< 0x30, 4 > _reserved_at_0x30;
   hr::hardware_register<0x40088040> CCR1;
   hr::hardware_register<0x40088044> CMR1;
   hr::hardware_register<0x40088048> SMMR1;
   hr::reserved< 0x4C, 1 > _reserved_at_0x4C;
   hr::hardware_register<0x40088050> CV1;
   hr::hardware_register<0x40088054> RA1;
   hr::hardware_register<0x40088058> RB1;
   hr::hardware_register<0x4008805c> RC1;
   hr::hardware_register<0x40088060> SR1;
   hr::hardware_register<0x40088064> IER1;
   hr::hardware_register<0x40088068> IDR1;
   hr::hardware_register<0x4008806c> IMR1;
   hr::reserved< 0x70, 4 > _reserved_at_0x70;
   hr::hardware_register<0x40088080> CCR2;
   hr::hardware_register<0x40088084> CMR2;
   hr::hardware_register<0x40088088> SMMR2;
   hr::reserved< 0x8C, 1 > _reserved_at_0x8C;
   hr::hardware_register<0x40088090> CV2;
   hr::hardware_register<0x40088094> RA2;
   hr::hardware_register<0x40088098> RB2;
   hr::hardware_register<0x4008809c> RC2;
   hr::hardware_register<0x400880a0> SR2;
   hr::hardware_register<0x400880a4> IER2;
   hr::hardware_register<0x400880a8> IDR2;
   hr::hardware_register<0x400880ac> IMR2;
   hr::reserved< 0xB0, 4 > _reserved_at_0xB0;
   hr::hardware_register<0x400880c0> BCR;
   hr::hardware_register<0x400880c4> BMR;
   hr::hardware_register<0x400880c8> QIER;
   hr::hardware_register<0x400880cc> QIDR;
   hr::hardware_register<0x400880d0> QIMR;
   hr::hardware_register<0x400880d4> QISR;
   hr::hardware_register<0x400880d8> FMR;
   hr::reserved< 0xDC, 2 > _reserved_at_0xDC;
   hr::hardware_register<0x400880e4> WPMR;
};

#define TC2 ( ( Tc2 * ) 0x40088000 )

// =============================================================================
//
// TWI0
// base address = 0x4008c000
// Two-wire Interface 0
//
// =============================================================================

struct Twi0 {
   hr::hardware_register<0x4008c000> CR;
   hr::hardware_register<0x4008c004> MMR;
   hr::hardware_register<0x4008c008> SMR;
   hr::hardware_register<0x4008c00c> IADR;
   hr::hardware_register<0x4008c010> CWGR;
   hr::reserved< 0x14, 3 > _reserved_at_0x14;
   hr::hardware_register<0x4008c020> SR;
   hr::hardware_register<0x4008c024> IER;
   hr::hardware_register<0x4008c028> IDR;
   hr::hardware_register<0x4008c02c> IMR;
   hr::hardware_register<0x4008c030> RHR;
   hr::hardware_register<0x4008c034> THR;
   hr::reserved< 0x38, 50 > _reserved_at_0x38;
   hr::hardware_register<0x4008c100> RPR;
   hr::hardware_register<0x4008c104> RCR;
   hr::hardware_register<0x4008c108> TPR;
   hr::hardware_register<0x4008c10c> TCR;
   hr::hardware_register<0x4008c110> RNPR;
   hr::hardware_register<0x4008c114> RNCR;
   hr::hardware_register<0x4008c118> TNPR;
   hr::hardware_register<0x4008c11c> TNCR;
   hr::hardware_register<0x4008c120> PTCR;
   hr::hardware_register<0x4008c124> PTSR;
};

#define TWI0 ( ( Twi0 * ) 0x4008c000 )

// CR
   // Send a START Condition
   constexpr auto TWI0_CR_START = hr::field_mask_literal< 0x4008c000, 0, 1 >();
   // Send a STOP Condition
   constexpr auto TWI0_CR_STOP = hr::field_mask_literal< 0x4008c000, 1, 1 >();
   // TWI Master Mode Enabled
   constexpr auto TWI0_CR_MSEN = hr::field_mask_literal< 0x4008c000, 2, 1 >();
   // TWI Master Mode Disabled
   constexpr auto TWI0_CR_MSDIS = hr::field_mask_literal< 0x4008c000, 3, 1 >();
   // TWI Slave Mode Enabled
   constexpr auto TWI0_CR_SVEN = hr::field_mask_literal< 0x4008c000, 4, 1 >();
   // TWI Slave Mode Disabled
   constexpr auto TWI0_CR_SVDIS = hr::field_mask_literal< 0x4008c000, 5, 1 >();
   // SMBUS Quick Command
   constexpr auto TWI0_CR_QUICK = hr::field_mask_literal< 0x4008c000, 6, 1 >();
   // Software Reset
   constexpr auto TWI0_CR_SWRST = hr::field_mask_literal< 0x4008c000, 7, 1 >();

// MMR
   // Internal Device Address Size
   constexpr auto TWI0_MMR_IADRSZ_Msk = hr::field_mask_literal< 0x4008c004, 8, 2 >();
      // No internal device address
      constexpr auto TWI0_MMR_IADRSZ_NONE = hr::field_value_literal< 0x4008c004, 8, 2 >( 0 );
      // One-byte internal device address
      constexpr auto TWI0_MMR_IADRSZ_1_BYTE = hr::field_value_literal< 0x4008c004, 8, 2 >( 1 );
      // Two-byte internal device address
      constexpr auto TWI0_MMR_IADRSZ_2_BYTE = hr::field_value_literal< 0x4008c004, 8, 2 >( 2 );
      // Three-byte internal device address
      constexpr auto TWI0_MMR_IADRSZ_3_BYTE = hr::field_value_literal< 0x4008c004, 8, 2 >( 3 );
   // Master Read Direction
   constexpr auto TWI0_MMR_MREAD = hr::field_mask_literal< 0x4008c004, 12, 1 >();
   // Device Address
   constexpr auto TWI0_MMR_DADR_Msk = hr::field_mask_literal< 0x4008c004, 16, 7 >();

// SMR
   // Slave Address
   constexpr auto TWI0_SMR_SADR_Msk = hr::field_mask_literal< 0x4008c008, 16, 7 >();

// IADR
   // Internal Address
   constexpr auto TWI0_IADR_IADR_Msk = hr::field_mask_literal< 0x4008c00c, 0, 24 >();

// CWGR
   // Clock Low Divider
   constexpr auto TWI0_CWGR_CLDIV_Msk = hr::field_mask_literal< 0x4008c010, 0, 8 >();
   // Clock High Divider
   constexpr auto TWI0_CWGR_CHDIV_Msk = hr::field_mask_literal< 0x4008c010, 8, 8 >();
   // Clock Divider
   constexpr auto TWI0_CWGR_CKDIV_Msk = hr::field_mask_literal< 0x4008c010, 16, 3 >();

// SR
   // Transmission Completed (automatically set / reset)
   constexpr auto TWI0_SR_TXCOMP = hr::field_mask_literal< 0x4008c020, 0, 1 >();
   // Receive Holding Register Ready (automatically set / reset)
   constexpr auto TWI0_SR_RXRDY = hr::field_mask_literal< 0x4008c020, 1, 1 >();
   // Transmit Holding Register Ready (automatically set / reset)
   constexpr auto TWI0_SR_TXRDY = hr::field_mask_literal< 0x4008c020, 2, 1 >();
   // Slave Read (automatically set / reset)
   constexpr auto TWI0_SR_SVREAD = hr::field_mask_literal< 0x4008c020, 3, 1 >();
   // Slave Access (automatically set / reset)
   constexpr auto TWI0_SR_SVACC = hr::field_mask_literal< 0x4008c020, 4, 1 >();
   // General Call Access (clear on read)
   constexpr auto TWI0_SR_GACC = hr::field_mask_literal< 0x4008c020, 5, 1 >();
   // Overrun Error (clear on read)
   constexpr auto TWI0_SR_OVRE = hr::field_mask_literal< 0x4008c020, 6, 1 >();
   // Not Acknowledged (clear on read)
   constexpr auto TWI0_SR_NACK = hr::field_mask_literal< 0x4008c020, 8, 1 >();
   // Arbitration Lost (clear on read)
   constexpr auto TWI0_SR_ARBLST = hr::field_mask_literal< 0x4008c020, 9, 1 >();
   // Clock Wait State (automatically set / reset)
   constexpr auto TWI0_SR_SCLWS = hr::field_mask_literal< 0x4008c020, 10, 1 >();
   // End Of Slave Access (clear on read)
   constexpr auto TWI0_SR_EOSACC = hr::field_mask_literal< 0x4008c020, 11, 1 >();
   // End of RX buffer
   constexpr auto TWI0_SR_ENDRX = hr::field_mask_literal< 0x4008c020, 12, 1 >();
   // End of TX buffer
   constexpr auto TWI0_SR_ENDTX = hr::field_mask_literal< 0x4008c020, 13, 1 >();
   // RX Buffer Full
   constexpr auto TWI0_SR_RXBUFF = hr::field_mask_literal< 0x4008c020, 14, 1 >();
   // TX Buffer Empty
   constexpr auto TWI0_SR_TXBUFE = hr::field_mask_literal< 0x4008c020, 15, 1 >();

// IER
   // Transmission Completed Interrupt Enable
   constexpr auto TWI0_IER_TXCOMP = hr::field_mask_literal< 0x4008c024, 0, 1 >();
   // Receive Holding Register Ready Interrupt Enable
   constexpr auto TWI0_IER_RXRDY = hr::field_mask_literal< 0x4008c024, 1, 1 >();
   // Transmit Holding Register Ready Interrupt Enable
   constexpr auto TWI0_IER_TXRDY = hr::field_mask_literal< 0x4008c024, 2, 1 >();
   // Slave Access Interrupt Enable
   constexpr auto TWI0_IER_SVACC = hr::field_mask_literal< 0x4008c024, 4, 1 >();
   // General Call Access Interrupt Enable
   constexpr auto TWI0_IER_GACC = hr::field_mask_literal< 0x4008c024, 5, 1 >();
   // Overrun Error Interrupt Enable
   constexpr auto TWI0_IER_OVRE = hr::field_mask_literal< 0x4008c024, 6, 1 >();
   // Not Acknowledge Interrupt Enable
   constexpr auto TWI0_IER_NACK = hr::field_mask_literal< 0x4008c024, 8, 1 >();
   // Arbitration Lost Interrupt Enable
   constexpr auto TWI0_IER_ARBLST = hr::field_mask_literal< 0x4008c024, 9, 1 >();
   // Clock Wait State Interrupt Enable
   constexpr auto TWI0_IER_SCL_WS = hr::field_mask_literal< 0x4008c024, 10, 1 >();
   // End Of Slave Access Interrupt Enable
   constexpr auto TWI0_IER_EOSACC = hr::field_mask_literal< 0x4008c024, 11, 1 >();
   // End of Receive Buffer Interrupt Enable
   constexpr auto TWI0_IER_ENDRX = hr::field_mask_literal< 0x4008c024, 12, 1 >();
   // End of Transmit Buffer Interrupt Enable
   constexpr auto TWI0_IER_ENDTX = hr::field_mask_literal< 0x4008c024, 13, 1 >();
   // Receive Buffer Full Interrupt Enable
   constexpr auto TWI0_IER_RXBUFF = hr::field_mask_literal< 0x4008c024, 14, 1 >();
   // Transmit Buffer Empty Interrupt Enable
   constexpr auto TWI0_IER_TXBUFE = hr::field_mask_literal< 0x4008c024, 15, 1 >();

// IDR
   // Transmission Completed Interrupt Disable
   constexpr auto TWI0_IDR_TXCOMP = hr::field_mask_literal< 0x4008c028, 0, 1 >();
   // Receive Holding Register Ready Interrupt Disable
   constexpr auto TWI0_IDR_RXRDY = hr::field_mask_literal< 0x4008c028, 1, 1 >();
   // Transmit Holding Register Ready Interrupt Disable
   constexpr auto TWI0_IDR_TXRDY = hr::field_mask_literal< 0x4008c028, 2, 1 >();
   // Slave Access Interrupt Disable
   constexpr auto TWI0_IDR_SVACC = hr::field_mask_literal< 0x4008c028, 4, 1 >();
   // General Call Access Interrupt Disable
   constexpr auto TWI0_IDR_GACC = hr::field_mask_literal< 0x4008c028, 5, 1 >();
   // Overrun Error Interrupt Disable
   constexpr auto TWI0_IDR_OVRE = hr::field_mask_literal< 0x4008c028, 6, 1 >();
   // Not Acknowledge Interrupt Disable
   constexpr auto TWI0_IDR_NACK = hr::field_mask_literal< 0x4008c028, 8, 1 >();
   // Arbitration Lost Interrupt Disable
   constexpr auto TWI0_IDR_ARBLST = hr::field_mask_literal< 0x4008c028, 9, 1 >();
   // Clock Wait State Interrupt Disable
   constexpr auto TWI0_IDR_SCL_WS = hr::field_mask_literal< 0x4008c028, 10, 1 >();
   // End Of Slave Access Interrupt Disable
   constexpr auto TWI0_IDR_EOSACC = hr::field_mask_literal< 0x4008c028, 11, 1 >();
   // End of Receive Buffer Interrupt Disable
   constexpr auto TWI0_IDR_ENDRX = hr::field_mask_literal< 0x4008c028, 12, 1 >();
   // End of Transmit Buffer Interrupt Disable
   constexpr auto TWI0_IDR_ENDTX = hr::field_mask_literal< 0x4008c028, 13, 1 >();
   // Receive Buffer Full Interrupt Disable
   constexpr auto TWI0_IDR_RXBUFF = hr::field_mask_literal< 0x4008c028, 14, 1 >();
   // Transmit Buffer Empty Interrupt Disable
   constexpr auto TWI0_IDR_TXBUFE = hr::field_mask_literal< 0x4008c028, 15, 1 >();

// IMR
   // Transmission Completed Interrupt Mask
   constexpr auto TWI0_IMR_TXCOMP = hr::field_mask_literal< 0x4008c02c, 0, 1 >();
   // Receive Holding Register Ready Interrupt Mask
   constexpr auto TWI0_IMR_RXRDY = hr::field_mask_literal< 0x4008c02c, 1, 1 >();
   // Transmit Holding Register Ready Interrupt Mask
   constexpr auto TWI0_IMR_TXRDY = hr::field_mask_literal< 0x4008c02c, 2, 1 >();
   // Slave Access Interrupt Mask
   constexpr auto TWI0_IMR_SVACC = hr::field_mask_literal< 0x4008c02c, 4, 1 >();
   // General Call Access Interrupt Mask
   constexpr auto TWI0_IMR_GACC = hr::field_mask_literal< 0x4008c02c, 5, 1 >();
   // Overrun Error Interrupt Mask
   constexpr auto TWI0_IMR_OVRE = hr::field_mask_literal< 0x4008c02c, 6, 1 >();
   // Not Acknowledge Interrupt Mask
   constexpr auto TWI0_IMR_NACK = hr::field_mask_literal< 0x4008c02c, 8, 1 >();
   // Arbitration Lost Interrupt Mask
   constexpr auto TWI0_IMR_ARBLST = hr::field_mask_literal< 0x4008c02c, 9, 1 >();
   // Clock Wait State Interrupt Mask
   constexpr auto TWI0_IMR_SCL_WS = hr::field_mask_literal< 0x4008c02c, 10, 1 >();
   // End Of Slave Access Interrupt Mask
   constexpr auto TWI0_IMR_EOSACC = hr::field_mask_literal< 0x4008c02c, 11, 1 >();
   // End of Receive Buffer Interrupt Mask
   constexpr auto TWI0_IMR_ENDRX = hr::field_mask_literal< 0x4008c02c, 12, 1 >();
   // End of Transmit Buffer Interrupt Mask
   constexpr auto TWI0_IMR_ENDTX = hr::field_mask_literal< 0x4008c02c, 13, 1 >();
   // Receive Buffer Full Interrupt Mask
   constexpr auto TWI0_IMR_RXBUFF = hr::field_mask_literal< 0x4008c02c, 14, 1 >();
   // Transmit Buffer Empty Interrupt Mask
   constexpr auto TWI0_IMR_TXBUFE = hr::field_mask_literal< 0x4008c02c, 15, 1 >();

// RHR
   // Master or Slave Receive Holding Data
   constexpr auto TWI0_RHR_RXDATA_Msk = hr::field_mask_literal< 0x4008c030, 0, 8 >();

// THR
   // Master or Slave Transmit Holding Data
   constexpr auto TWI0_THR_TXDATA_Msk = hr::field_mask_literal< 0x4008c034, 0, 8 >();

// RPR
   // Receive Pointer Register
   constexpr auto TWI0_RPR_RXPTR_Msk = hr::field_mask_literal< 0x4008c100, 0, 32 >();

// RCR
   // Receive Counter Register
   constexpr auto TWI0_RCR_RXCTR_Msk = hr::field_mask_literal< 0x4008c104, 0, 16 >();

// TPR
   // Transmit Counter Register
   constexpr auto TWI0_TPR_TXPTR_Msk = hr::field_mask_literal< 0x4008c108, 0, 32 >();

// TCR
   // Transmit Counter Register
   constexpr auto TWI0_TCR_TXCTR_Msk = hr::field_mask_literal< 0x4008c10c, 0, 16 >();

// RNPR
   // Receive Next Pointer
   constexpr auto TWI0_RNPR_RXNPTR_Msk = hr::field_mask_literal< 0x4008c110, 0, 32 >();

// RNCR
   // Receive Next Counter
   constexpr auto TWI0_RNCR_RXNCTR_Msk = hr::field_mask_literal< 0x4008c114, 0, 16 >();

// TNPR
   // Transmit Next Pointer
   constexpr auto TWI0_TNPR_TXNPTR_Msk = hr::field_mask_literal< 0x4008c118, 0, 32 >();

// TNCR
   // Transmit Counter Next
   constexpr auto TWI0_TNCR_TXNCTR_Msk = hr::field_mask_literal< 0x4008c11c, 0, 16 >();

// PTCR
   // Receiver Transfer Enable
   constexpr auto TWI0_PTCR_RXTEN = hr::field_mask_literal< 0x4008c120, 0, 1 >();
   // Receiver Transfer Disable
   constexpr auto TWI0_PTCR_RXTDIS = hr::field_mask_literal< 0x4008c120, 1, 1 >();
   // Transmitter Transfer Enable
   constexpr auto TWI0_PTCR_TXTEN = hr::field_mask_literal< 0x4008c120, 8, 1 >();
   // Transmitter Transfer Disable
   constexpr auto TWI0_PTCR_TXTDIS = hr::field_mask_literal< 0x4008c120, 9, 1 >();

// PTSR
   // Receiver Transfer Enable
   constexpr auto TWI0_PTSR_RXTEN = hr::field_mask_literal< 0x4008c124, 0, 1 >();
   // Transmitter Transfer Enable
   constexpr auto TWI0_PTSR_TXTEN = hr::field_mask_literal< 0x4008c124, 8, 1 >();

// =============================================================================
//
// TWI1
// base address = 0x40090000
// Two-wire Interface 1
//
// =============================================================================

struct Twi1 {
   hr::hardware_register<0x40090000> CR;
   hr::hardware_register<0x40090004> MMR;
   hr::hardware_register<0x40090008> SMR;
   hr::hardware_register<0x4009000c> IADR;
   hr::hardware_register<0x40090010> CWGR;
   hr::reserved< 0x14, 3 > _reserved_at_0x14;
   hr::hardware_register<0x40090020> SR;
   hr::hardware_register<0x40090024> IER;
   hr::hardware_register<0x40090028> IDR;
   hr::hardware_register<0x4009002c> IMR;
   hr::hardware_register<0x40090030> RHR;
   hr::hardware_register<0x40090034> THR;
   hr::reserved< 0x38, 50 > _reserved_at_0x38;
   hr::hardware_register<0x40090100> RPR;
   hr::hardware_register<0x40090104> RCR;
   hr::hardware_register<0x40090108> TPR;
   hr::hardware_register<0x4009010c> TCR;
   hr::hardware_register<0x40090110> RNPR;
   hr::hardware_register<0x40090114> RNCR;
   hr::hardware_register<0x40090118> TNPR;
   hr::hardware_register<0x4009011c> TNCR;
   hr::hardware_register<0x40090120> PTCR;
   hr::hardware_register<0x40090124> PTSR;
};

#define TWI1 ( ( Twi1 * ) 0x40090000 )

// =============================================================================
//
// PWM
// base address = 0x40094000
// Pulse Width Modulation Controller
//
// =============================================================================

struct Pwm {
   hr::hardware_register<0x40094000> CLK;
   hr::hardware_register<0x40094004> ENA;
   hr::hardware_register<0x40094008> DIS;
   hr::hardware_register<0x4009400c> SR;
   hr::hardware_register<0x40094010> IER1;
   hr::hardware_register<0x40094014> IDR1;
   hr::hardware_register<0x40094018> IMR1;
   hr::hardware_register<0x4009401c> ISR1;
   hr::hardware_register<0x40094020> SCM;
   hr::reserved< 0x24, 1 > _reserved_at_0x24;
   hr::hardware_register<0x40094028> SCUC;
   hr::hardware_register<0x4009402c> SCUP;
   hr::hardware_register<0x40094030> SCUPUPD;
   hr::hardware_register<0x40094034> IER2;
   hr::hardware_register<0x40094038> IDR2;
   hr::hardware_register<0x4009403c> IMR2;
   hr::hardware_register<0x40094040> ISR2;
   hr::hardware_register<0x40094044> OOV;
   hr::hardware_register<0x40094048> OS;
   hr::hardware_register<0x4009404c> OSS;
   hr::hardware_register<0x40094050> OSC;
   hr::hardware_register<0x40094054> OSSUPD;
   hr::hardware_register<0x40094058> OSCUPD;
   hr::hardware_register<0x4009405c> FMR;
   hr::hardware_register<0x40094060> FSR;
   hr::hardware_register<0x40094064> FCR;
   hr::hardware_register<0x40094068> FPV;
   hr::hardware_register<0x4009406c> FPE1;
   hr::hardware_register<0x40094070> FPE2;
   hr::reserved< 0x74, 2 > _reserved_at_0x74;
   hr::hardware_register<0x4009407c> ELMR[2];
   hr::reserved< 0x84, 11 > _reserved_at_0x84;
   hr::hardware_register<0x400940b0> SMMR;
   hr::reserved< 0xB4, 12 > _reserved_at_0xB4;
   hr::hardware_register<0x400940e4> WPCR;
   hr::hardware_register<0x400940e8> WPSR;
   hr::reserved< 0xEC, 7 > _reserved_at_0xEC;
   hr::hardware_register<0x40094108> TPR;
   hr::hardware_register<0x4009410c> TCR;
   hr::reserved< 0x110, 2 > _reserved_at_0x110;
   hr::hardware_register<0x40094118> TNPR;
   hr::hardware_register<0x4009411c> TNCR;
   hr::hardware_register<0x40094120> PTCR;
   hr::hardware_register<0x40094124> PTSR;
   hr::reserved< 0x128, 2 > _reserved_at_0x128;
   hr::hardware_register<0x40094130> CMPV0;
   hr::hardware_register<0x40094134> CMPVUPD0;
   hr::hardware_register<0x40094138> CMPM0;
   hr::hardware_register<0x4009413c> CMPMUPD0;
   hr::hardware_register<0x40094140> CMPV1;
   hr::hardware_register<0x40094144> CMPVUPD1;
   hr::hardware_register<0x40094148> CMPM1;
   hr::hardware_register<0x4009414c> CMPMUPD1;
   hr::hardware_register<0x40094150> CMPV2;
   hr::hardware_register<0x40094154> CMPVUPD2;
   hr::hardware_register<0x40094158> CMPM2;
   hr::hardware_register<0x4009415c> CMPMUPD2;
   hr::hardware_register<0x40094160> CMPV3;
   hr::hardware_register<0x40094164> CMPVUPD3;
   hr::hardware_register<0x40094168> CMPM3;
   hr::hardware_register<0x4009416c> CMPMUPD3;
   hr::hardware_register<0x40094170> CMPV4;
   hr::hardware_register<0x40094174> CMPVUPD4;
   hr::hardware_register<0x40094178> CMPM4;
   hr::hardware_register<0x4009417c> CMPMUPD4;
   hr::hardware_register<0x40094180> CMPV5;
   hr::hardware_register<0x40094184> CMPVUPD5;
   hr::hardware_register<0x40094188> CMPM5;
   hr::hardware_register<0x4009418c> CMPMUPD5;
   hr::hardware_register<0x40094190> CMPV6;
   hr::hardware_register<0x40094194> CMPVUPD6;
   hr::hardware_register<0x40094198> CMPM6;
   hr::hardware_register<0x4009419c> CMPMUPD6;
   hr::hardware_register<0x400941a0> CMPV7;
   hr::hardware_register<0x400941a4> CMPVUPD7;
   hr::hardware_register<0x400941a8> CMPM7;
   hr::hardware_register<0x400941ac> CMPMUPD7;
   hr::reserved< 0x1B0, 20 > _reserved_at_0x1B0;
   hr::hardware_register<0x40094200> CMR0;
   hr::hardware_register<0x40094204> CDTY0;
   hr::hardware_register<0x40094208> CDTYUPD0;
   hr::hardware_register<0x4009420c> CPRD0;
   hr::hardware_register<0x40094210> CPRDUPD0;
   hr::hardware_register<0x40094214> CCNT0;
   hr::hardware_register<0x40094218> DT0;
   hr::hardware_register<0x4009421c> DTUPD0;
   hr::hardware_register<0x40094220> CMR1;
   hr::hardware_register<0x40094224> CDTY1;
   hr::hardware_register<0x40094228> CDTYUPD1;
   hr::hardware_register<0x4009422c> CPRD1;
   hr::hardware_register<0x40094230> CPRDUPD1;
   hr::hardware_register<0x40094234> CCNT1;
   hr::hardware_register<0x40094238> DT1;
   hr::hardware_register<0x4009423c> DTUPD1;
   hr::hardware_register<0x40094240> CMR2;
   hr::hardware_register<0x40094244> CDTY2;
   hr::hardware_register<0x40094248> CDTYUPD2;
   hr::hardware_register<0x4009424c> CPRD2;
   hr::hardware_register<0x40094250> CPRDUPD2;
   hr::hardware_register<0x40094254> CCNT2;
   hr::hardware_register<0x40094258> DT2;
   hr::hardware_register<0x4009425c> DTUPD2;
   hr::hardware_register<0x40094260> CMR3;
   hr::hardware_register<0x40094264> CDTY3;
   hr::hardware_register<0x40094268> CDTYUPD3;
   hr::hardware_register<0x4009426c> CPRD3;
   hr::hardware_register<0x40094270> CPRDUPD3;
   hr::hardware_register<0x40094274> CCNT3;
   hr::hardware_register<0x40094278> DT3;
   hr::hardware_register<0x4009427c> DTUPD3;
   hr::hardware_register<0x40094280> CMR4;
   hr::hardware_register<0x40094284> CDTY4;
   hr::hardware_register<0x40094288> CDTYUPD4;
   hr::hardware_register<0x4009428c> CPRD4;
   hr::hardware_register<0x40094290> CPRDUPD4;
   hr::hardware_register<0x40094294> CCNT4;
   hr::hardware_register<0x40094298> DT4;
   hr::hardware_register<0x4009429c> DTUPD4;
   hr::hardware_register<0x400942a0> CMR5;
   hr::hardware_register<0x400942a4> CDTY5;
   hr::hardware_register<0x400942a8> CDTYUPD5;
   hr::hardware_register<0x400942ac> CPRD5;
   hr::hardware_register<0x400942b0> CPRDUPD5;
   hr::hardware_register<0x400942b4> CCNT5;
   hr::hardware_register<0x400942b8> DT5;
   hr::hardware_register<0x400942bc> DTUPD5;
   hr::hardware_register<0x400942c0> CMR6;
   hr::hardware_register<0x400942c4> CDTY6;
   hr::hardware_register<0x400942c8> CDTYUPD6;
   hr::hardware_register<0x400942cc> CPRD6;
   hr::hardware_register<0x400942d0> CPRDUPD6;
   hr::hardware_register<0x400942d4> CCNT6;
   hr::hardware_register<0x400942d8> DT6;
   hr::hardware_register<0x400942dc> DTUPD6;
   hr::hardware_register<0x400942e0> CMR7;
   hr::hardware_register<0x400942e4> CDTY7;
   hr::hardware_register<0x400942e8> CDTYUPD7;
   hr::hardware_register<0x400942ec> CPRD7;
   hr::hardware_register<0x400942f0> CPRDUPD7;
   hr::hardware_register<0x400942f4> CCNT7;
   hr::hardware_register<0x400942f8> DT7;
   hr::hardware_register<0x400942fc> DTUPD7;
};

#define PWM ( ( Pwm * ) 0x40094000 )

// CLK
   // CLKA, CLKB Divide Factor
   constexpr auto PWM_CLK_DIVA_Msk = hr::field_mask_literal< 0x40094000, 0, 8 >();
   // CLKA, CLKB Source Clock Selection
   constexpr auto PWM_CLK_PREA_Msk = hr::field_mask_literal< 0x40094000, 8, 4 >();
   // CLKA, CLKB Divide Factor
   constexpr auto PWM_CLK_DIVB_Msk = hr::field_mask_literal< 0x40094000, 16, 8 >();
   // CLKA, CLKB Source Clock Selection
   constexpr auto PWM_CLK_PREB_Msk = hr::field_mask_literal< 0x40094000, 24, 4 >();

// ENA
   // Channel ID
   constexpr auto PWM_ENA_CHID0 = hr::field_mask_literal< 0x40094004, 0, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID1 = hr::field_mask_literal< 0x40094004, 1, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID2 = hr::field_mask_literal< 0x40094004, 2, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID3 = hr::field_mask_literal< 0x40094004, 3, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID4 = hr::field_mask_literal< 0x40094004, 4, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID5 = hr::field_mask_literal< 0x40094004, 5, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID6 = hr::field_mask_literal< 0x40094004, 6, 1 >();
   // Channel ID
   constexpr auto PWM_ENA_CHID7 = hr::field_mask_literal< 0x40094004, 7, 1 >();

// DIS
   // Channel ID
   constexpr auto PWM_DIS_CHID0 = hr::field_mask_literal< 0x40094008, 0, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID1 = hr::field_mask_literal< 0x40094008, 1, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID2 = hr::field_mask_literal< 0x40094008, 2, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID3 = hr::field_mask_literal< 0x40094008, 3, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID4 = hr::field_mask_literal< 0x40094008, 4, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID5 = hr::field_mask_literal< 0x40094008, 5, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID6 = hr::field_mask_literal< 0x40094008, 6, 1 >();
   // Channel ID
   constexpr auto PWM_DIS_CHID7 = hr::field_mask_literal< 0x40094008, 7, 1 >();

// SR
   // Channel ID
   constexpr auto PWM_SR_CHID0 = hr::field_mask_literal< 0x4009400c, 0, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID1 = hr::field_mask_literal< 0x4009400c, 1, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID2 = hr::field_mask_literal< 0x4009400c, 2, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID3 = hr::field_mask_literal< 0x4009400c, 3, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID4 = hr::field_mask_literal< 0x4009400c, 4, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID5 = hr::field_mask_literal< 0x4009400c, 5, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID6 = hr::field_mask_literal< 0x4009400c, 6, 1 >();
   // Channel ID
   constexpr auto PWM_SR_CHID7 = hr::field_mask_literal< 0x4009400c, 7, 1 >();

// IER1
   // Counter Event on Channel 0 Interrupt Enable
   constexpr auto PWM_IER1_CHID0 = hr::field_mask_literal< 0x40094010, 0, 1 >();
   // Counter Event on Channel 1 Interrupt Enable
   constexpr auto PWM_IER1_CHID1 = hr::field_mask_literal< 0x40094010, 1, 1 >();
   // Counter Event on Channel 2 Interrupt Enable
   constexpr auto PWM_IER1_CHID2 = hr::field_mask_literal< 0x40094010, 2, 1 >();
   // Counter Event on Channel 3 Interrupt Enable
   constexpr auto PWM_IER1_CHID3 = hr::field_mask_literal< 0x40094010, 3, 1 >();
   // Counter Event on Channel 4 Interrupt Enable
   constexpr auto PWM_IER1_CHID4 = hr::field_mask_literal< 0x40094010, 4, 1 >();
   // Counter Event on Channel 5 Interrupt Enable
   constexpr auto PWM_IER1_CHID5 = hr::field_mask_literal< 0x40094010, 5, 1 >();
   // Counter Event on Channel 6 Interrupt Enable
   constexpr auto PWM_IER1_CHID6 = hr::field_mask_literal< 0x40094010, 6, 1 >();
   // Counter Event on Channel 7 Interrupt Enable
   constexpr auto PWM_IER1_CHID7 = hr::field_mask_literal< 0x40094010, 7, 1 >();
   // Fault Protection Trigger on Channel 0 Interrupt Enable
   constexpr auto PWM_IER1_FCHID0 = hr::field_mask_literal< 0x40094010, 16, 1 >();
   // Fault Protection Trigger on Channel 1 Interrupt Enable
   constexpr auto PWM_IER1_FCHID1 = hr::field_mask_literal< 0x40094010, 17, 1 >();
   // Fault Protection Trigger on Channel 2 Interrupt Enable
   constexpr auto PWM_IER1_FCHID2 = hr::field_mask_literal< 0x40094010, 18, 1 >();
   // Fault Protection Trigger on Channel 3 Interrupt Enable
   constexpr auto PWM_IER1_FCHID3 = hr::field_mask_literal< 0x40094010, 19, 1 >();
   // Fault Protection Trigger on Channel 4 Interrupt Enable
   constexpr auto PWM_IER1_FCHID4 = hr::field_mask_literal< 0x40094010, 20, 1 >();
   // Fault Protection Trigger on Channel 5 Interrupt Enable
   constexpr auto PWM_IER1_FCHID5 = hr::field_mask_literal< 0x40094010, 21, 1 >();
   // Fault Protection Trigger on Channel 6 Interrupt Enable
   constexpr auto PWM_IER1_FCHID6 = hr::field_mask_literal< 0x40094010, 22, 1 >();
   // Fault Protection Trigger on Channel 7 Interrupt Enable
   constexpr auto PWM_IER1_FCHID7 = hr::field_mask_literal< 0x40094010, 23, 1 >();

// IDR1
   // Counter Event on Channel 0 Interrupt Disable
   constexpr auto PWM_IDR1_CHID0 = hr::field_mask_literal< 0x40094014, 0, 1 >();
   // Counter Event on Channel 1 Interrupt Disable
   constexpr auto PWM_IDR1_CHID1 = hr::field_mask_literal< 0x40094014, 1, 1 >();
   // Counter Event on Channel 2 Interrupt Disable
   constexpr auto PWM_IDR1_CHID2 = hr::field_mask_literal< 0x40094014, 2, 1 >();
   // Counter Event on Channel 3 Interrupt Disable
   constexpr auto PWM_IDR1_CHID3 = hr::field_mask_literal< 0x40094014, 3, 1 >();
   // Counter Event on Channel 4 Interrupt Disable
   constexpr auto PWM_IDR1_CHID4 = hr::field_mask_literal< 0x40094014, 4, 1 >();
   // Counter Event on Channel 5 Interrupt Disable
   constexpr auto PWM_IDR1_CHID5 = hr::field_mask_literal< 0x40094014, 5, 1 >();
   // Counter Event on Channel 6 Interrupt Disable
   constexpr auto PWM_IDR1_CHID6 = hr::field_mask_literal< 0x40094014, 6, 1 >();
   // Counter Event on Channel 7 Interrupt Disable
   constexpr auto PWM_IDR1_CHID7 = hr::field_mask_literal< 0x40094014, 7, 1 >();
   // Fault Protection Trigger on Channel 0 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID0 = hr::field_mask_literal< 0x40094014, 16, 1 >();
   // Fault Protection Trigger on Channel 1 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID1 = hr::field_mask_literal< 0x40094014, 17, 1 >();
   // Fault Protection Trigger on Channel 2 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID2 = hr::field_mask_literal< 0x40094014, 18, 1 >();
   // Fault Protection Trigger on Channel 3 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID3 = hr::field_mask_literal< 0x40094014, 19, 1 >();
   // Fault Protection Trigger on Channel 4 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID4 = hr::field_mask_literal< 0x40094014, 20, 1 >();
   // Fault Protection Trigger on Channel 5 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID5 = hr::field_mask_literal< 0x40094014, 21, 1 >();
   // Fault Protection Trigger on Channel 6 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID6 = hr::field_mask_literal< 0x40094014, 22, 1 >();
   // Fault Protection Trigger on Channel 7 Interrupt Disable
   constexpr auto PWM_IDR1_FCHID7 = hr::field_mask_literal< 0x40094014, 23, 1 >();

// IMR1
   // Counter Event on Channel 0 Interrupt Mask
   constexpr auto PWM_IMR1_CHID0 = hr::field_mask_literal< 0x40094018, 0, 1 >();
   // Counter Event on Channel 1 Interrupt Mask
   constexpr auto PWM_IMR1_CHID1 = hr::field_mask_literal< 0x40094018, 1, 1 >();
   // Counter Event on Channel 2 Interrupt Mask
   constexpr auto PWM_IMR1_CHID2 = hr::field_mask_literal< 0x40094018, 2, 1 >();
   // Counter Event on Channel 3 Interrupt Mask
   constexpr auto PWM_IMR1_CHID3 = hr::field_mask_literal< 0x40094018, 3, 1 >();
   // Counter Event on Channel 4 Interrupt Mask
   constexpr auto PWM_IMR1_CHID4 = hr::field_mask_literal< 0x40094018, 4, 1 >();
   // Counter Event on Channel 5 Interrupt Mask
   constexpr auto PWM_IMR1_CHID5 = hr::field_mask_literal< 0x40094018, 5, 1 >();
   // Counter Event on Channel 6 Interrupt Mask
   constexpr auto PWM_IMR1_CHID6 = hr::field_mask_literal< 0x40094018, 6, 1 >();
   // Counter Event on Channel 7 Interrupt Mask
   constexpr auto PWM_IMR1_CHID7 = hr::field_mask_literal< 0x40094018, 7, 1 >();
   // Fault Protection Trigger on Channel 0 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID0 = hr::field_mask_literal< 0x40094018, 16, 1 >();
   // Fault Protection Trigger on Channel 1 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID1 = hr::field_mask_literal< 0x40094018, 17, 1 >();
   // Fault Protection Trigger on Channel 2 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID2 = hr::field_mask_literal< 0x40094018, 18, 1 >();
   // Fault Protection Trigger on Channel 3 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID3 = hr::field_mask_literal< 0x40094018, 19, 1 >();
   // Fault Protection Trigger on Channel 4 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID4 = hr::field_mask_literal< 0x40094018, 20, 1 >();
   // Fault Protection Trigger on Channel 5 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID5 = hr::field_mask_literal< 0x40094018, 21, 1 >();
   // Fault Protection Trigger on Channel 6 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID6 = hr::field_mask_literal< 0x40094018, 22, 1 >();
   // Fault Protection Trigger on Channel 7 Interrupt Mask
   constexpr auto PWM_IMR1_FCHID7 = hr::field_mask_literal< 0x40094018, 23, 1 >();

// ISR1
   // Counter Event on Channel 0
   constexpr auto PWM_ISR1_CHID0 = hr::field_mask_literal< 0x4009401c, 0, 1 >();
   // Counter Event on Channel 1
   constexpr auto PWM_ISR1_CHID1 = hr::field_mask_literal< 0x4009401c, 1, 1 >();
   // Counter Event on Channel 2
   constexpr auto PWM_ISR1_CHID2 = hr::field_mask_literal< 0x4009401c, 2, 1 >();
   // Counter Event on Channel 3
   constexpr auto PWM_ISR1_CHID3 = hr::field_mask_literal< 0x4009401c, 3, 1 >();
   // Counter Event on Channel 4
   constexpr auto PWM_ISR1_CHID4 = hr::field_mask_literal< 0x4009401c, 4, 1 >();
   // Counter Event on Channel 5
   constexpr auto PWM_ISR1_CHID5 = hr::field_mask_literal< 0x4009401c, 5, 1 >();
   // Counter Event on Channel 6
   constexpr auto PWM_ISR1_CHID6 = hr::field_mask_literal< 0x4009401c, 6, 1 >();
   // Counter Event on Channel 7
   constexpr auto PWM_ISR1_CHID7 = hr::field_mask_literal< 0x4009401c, 7, 1 >();
   // Fault Protection Trigger on Channel 0
   constexpr auto PWM_ISR1_FCHID0 = hr::field_mask_literal< 0x4009401c, 16, 1 >();
   // Fault Protection Trigger on Channel 1
   constexpr auto PWM_ISR1_FCHID1 = hr::field_mask_literal< 0x4009401c, 17, 1 >();
   // Fault Protection Trigger on Channel 2
   constexpr auto PWM_ISR1_FCHID2 = hr::field_mask_literal< 0x4009401c, 18, 1 >();
   // Fault Protection Trigger on Channel 3
   constexpr auto PWM_ISR1_FCHID3 = hr::field_mask_literal< 0x4009401c, 19, 1 >();
   // Fault Protection Trigger on Channel 4
   constexpr auto PWM_ISR1_FCHID4 = hr::field_mask_literal< 0x4009401c, 20, 1 >();
   // Fault Protection Trigger on Channel 5
   constexpr auto PWM_ISR1_FCHID5 = hr::field_mask_literal< 0x4009401c, 21, 1 >();
   // Fault Protection Trigger on Channel 6
   constexpr auto PWM_ISR1_FCHID6 = hr::field_mask_literal< 0x4009401c, 22, 1 >();
   // Fault Protection Trigger on Channel 7
   constexpr auto PWM_ISR1_FCHID7 = hr::field_mask_literal< 0x4009401c, 23, 1 >();

// SCM
   // Synchronous Channel 0
   constexpr auto PWM_SCM_SYNC0 = hr::field_mask_literal< 0x40094020, 0, 1 >();
   // Synchronous Channel 1
   constexpr auto PWM_SCM_SYNC1 = hr::field_mask_literal< 0x40094020, 1, 1 >();
   // Synchronous Channel 2
   constexpr auto PWM_SCM_SYNC2 = hr::field_mask_literal< 0x40094020, 2, 1 >();
   // Synchronous Channel 3
   constexpr auto PWM_SCM_SYNC3 = hr::field_mask_literal< 0x40094020, 3, 1 >();
   // Synchronous Channel 4
   constexpr auto PWM_SCM_SYNC4 = hr::field_mask_literal< 0x40094020, 4, 1 >();
   // Synchronous Channel 5
   constexpr auto PWM_SCM_SYNC5 = hr::field_mask_literal< 0x40094020, 5, 1 >();
   // Synchronous Channel 6
   constexpr auto PWM_SCM_SYNC6 = hr::field_mask_literal< 0x40094020, 6, 1 >();
   // Synchronous Channel 7
   constexpr auto PWM_SCM_SYNC7 = hr::field_mask_literal< 0x40094020, 7, 1 >();
   // Synchronous Channels Update Mode
   constexpr auto PWM_SCM_UPDM_Msk = hr::field_mask_literal< 0x40094020, 16, 2 >();
      // Manual write of double buffer registers and manual update of synchronous channels
      constexpr auto PWM_SCM_UPDM_MODE0 = hr::field_value_literal< 0x40094020, 16, 2 >( 0 );
      // Manual write of double buffer registers and automatic update of synchronous channels
      constexpr auto PWM_SCM_UPDM_MODE1 = hr::field_value_literal< 0x40094020, 16, 2 >( 1 );
      // Automatic write of duty-cycle update registers by the PDC and automatic update of synchronous channels
      constexpr auto PWM_SCM_UPDM_MODE2 = hr::field_value_literal< 0x40094020, 16, 2 >( 2 );
   // PDC Transfer Request Mode
   constexpr auto PWM_SCM_PTRM = hr::field_mask_literal< 0x40094020, 20, 1 >();
   // PDC Transfer Request Comparison Selection
   constexpr auto PWM_SCM_PTRCS_Msk = hr::field_mask_literal< 0x40094020, 21, 3 >();

// SCUC
   // Synchronous Channels Update Unlock
   constexpr auto PWM_SCUC_UPDULOCK = hr::field_mask_literal< 0x40094028, 0, 1 >();

// SCUP
   // Update Period
   constexpr auto PWM_SCUP_UPR_Msk = hr::field_mask_literal< 0x4009402c, 0, 4 >();
   // Update Period Counter
   constexpr auto PWM_SCUP_UPRCNT_Msk = hr::field_mask_literal< 0x4009402c, 4, 4 >();

// SCUPUPD
   // Update Period Update
   constexpr auto PWM_SCUPUPD_UPRUPD_Msk = hr::field_mask_literal< 0x40094030, 0, 4 >();

// IER2
   // Write Ready for Synchronous Channels Update Interrupt Enable
   constexpr auto PWM_IER2_WRDY = hr::field_mask_literal< 0x40094034, 0, 1 >();
   // PDC End of TX Buffer Interrupt Enable
   constexpr auto PWM_IER2_ENDTX = hr::field_mask_literal< 0x40094034, 1, 1 >();
   // PDC TX Buffer Empty Interrupt Enable
   constexpr auto PWM_IER2_TXBUFE = hr::field_mask_literal< 0x40094034, 2, 1 >();
   // Synchronous Channels Update Underrun Error Interrupt Enable
   constexpr auto PWM_IER2_UNRE = hr::field_mask_literal< 0x40094034, 3, 1 >();
   // Comparison 0 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM0 = hr::field_mask_literal< 0x40094034, 8, 1 >();
   // Comparison 1 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM1 = hr::field_mask_literal< 0x40094034, 9, 1 >();
   // Comparison 2 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM2 = hr::field_mask_literal< 0x40094034, 10, 1 >();
   // Comparison 3 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM3 = hr::field_mask_literal< 0x40094034, 11, 1 >();
   // Comparison 4 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM4 = hr::field_mask_literal< 0x40094034, 12, 1 >();
   // Comparison 5 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM5 = hr::field_mask_literal< 0x40094034, 13, 1 >();
   // Comparison 6 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM6 = hr::field_mask_literal< 0x40094034, 14, 1 >();
   // Comparison 7 Match Interrupt Enable
   constexpr auto PWM_IER2_CMPM7 = hr::field_mask_literal< 0x40094034, 15, 1 >();
   // Comparison 0 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU0 = hr::field_mask_literal< 0x40094034, 16, 1 >();
   // Comparison 1 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU1 = hr::field_mask_literal< 0x40094034, 17, 1 >();
   // Comparison 2 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU2 = hr::field_mask_literal< 0x40094034, 18, 1 >();
   // Comparison 3 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU3 = hr::field_mask_literal< 0x40094034, 19, 1 >();
   // Comparison 4 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU4 = hr::field_mask_literal< 0x40094034, 20, 1 >();
   // Comparison 5 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU5 = hr::field_mask_literal< 0x40094034, 21, 1 >();
   // Comparison 6 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU6 = hr::field_mask_literal< 0x40094034, 22, 1 >();
   // Comparison 7 Update Interrupt Enable
   constexpr auto PWM_IER2_CMPU7 = hr::field_mask_literal< 0x40094034, 23, 1 >();

// IDR2
   // Write Ready for Synchronous Channels Update Interrupt Disable
   constexpr auto PWM_IDR2_WRDY = hr::field_mask_literal< 0x40094038, 0, 1 >();
   // PDC End of TX Buffer Interrupt Disable
   constexpr auto PWM_IDR2_ENDTX = hr::field_mask_literal< 0x40094038, 1, 1 >();
   // PDC TX Buffer Empty Interrupt Disable
   constexpr auto PWM_IDR2_TXBUFE = hr::field_mask_literal< 0x40094038, 2, 1 >();
   // Synchronous Channels Update Underrun Error Interrupt Disable
   constexpr auto PWM_IDR2_UNRE = hr::field_mask_literal< 0x40094038, 3, 1 >();
   // Comparison 0 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM0 = hr::field_mask_literal< 0x40094038, 8, 1 >();
   // Comparison 1 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM1 = hr::field_mask_literal< 0x40094038, 9, 1 >();
   // Comparison 2 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM2 = hr::field_mask_literal< 0x40094038, 10, 1 >();
   // Comparison 3 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM3 = hr::field_mask_literal< 0x40094038, 11, 1 >();
   // Comparison 4 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM4 = hr::field_mask_literal< 0x40094038, 12, 1 >();
   // Comparison 5 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM5 = hr::field_mask_literal< 0x40094038, 13, 1 >();
   // Comparison 6 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM6 = hr::field_mask_literal< 0x40094038, 14, 1 >();
   // Comparison 7 Match Interrupt Disable
   constexpr auto PWM_IDR2_CMPM7 = hr::field_mask_literal< 0x40094038, 15, 1 >();
   // Comparison 0 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU0 = hr::field_mask_literal< 0x40094038, 16, 1 >();
   // Comparison 1 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU1 = hr::field_mask_literal< 0x40094038, 17, 1 >();
   // Comparison 2 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU2 = hr::field_mask_literal< 0x40094038, 18, 1 >();
   // Comparison 3 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU3 = hr::field_mask_literal< 0x40094038, 19, 1 >();
   // Comparison 4 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU4 = hr::field_mask_literal< 0x40094038, 20, 1 >();
   // Comparison 5 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU5 = hr::field_mask_literal< 0x40094038, 21, 1 >();
   // Comparison 6 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU6 = hr::field_mask_literal< 0x40094038, 22, 1 >();
   // Comparison 7 Update Interrupt Disable
   constexpr auto PWM_IDR2_CMPU7 = hr::field_mask_literal< 0x40094038, 23, 1 >();

// IMR2
   // Write Ready for Synchronous Channels Update Interrupt Mask
   constexpr auto PWM_IMR2_WRDY = hr::field_mask_literal< 0x4009403c, 0, 1 >();
   // PDC End of TX Buffer Interrupt Mask
   constexpr auto PWM_IMR2_ENDTX = hr::field_mask_literal< 0x4009403c, 1, 1 >();
   // PDC TX Buffer Empty Interrupt Mask
   constexpr auto PWM_IMR2_TXBUFE = hr::field_mask_literal< 0x4009403c, 2, 1 >();
   // Synchronous Channels Update Underrun Error Interrupt Mask
   constexpr auto PWM_IMR2_UNRE = hr::field_mask_literal< 0x4009403c, 3, 1 >();
   // Comparison 0 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM0 = hr::field_mask_literal< 0x4009403c, 8, 1 >();
   // Comparison 1 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM1 = hr::field_mask_literal< 0x4009403c, 9, 1 >();
   // Comparison 2 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM2 = hr::field_mask_literal< 0x4009403c, 10, 1 >();
   // Comparison 3 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM3 = hr::field_mask_literal< 0x4009403c, 11, 1 >();
   // Comparison 4 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM4 = hr::field_mask_literal< 0x4009403c, 12, 1 >();
   // Comparison 5 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM5 = hr::field_mask_literal< 0x4009403c, 13, 1 >();
   // Comparison 6 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM6 = hr::field_mask_literal< 0x4009403c, 14, 1 >();
   // Comparison 7 Match Interrupt Mask
   constexpr auto PWM_IMR2_CMPM7 = hr::field_mask_literal< 0x4009403c, 15, 1 >();
   // Comparison 0 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU0 = hr::field_mask_literal< 0x4009403c, 16, 1 >();
   // Comparison 1 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU1 = hr::field_mask_literal< 0x4009403c, 17, 1 >();
   // Comparison 2 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU2 = hr::field_mask_literal< 0x4009403c, 18, 1 >();
   // Comparison 3 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU3 = hr::field_mask_literal< 0x4009403c, 19, 1 >();
   // Comparison 4 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU4 = hr::field_mask_literal< 0x4009403c, 20, 1 >();
   // Comparison 5 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU5 = hr::field_mask_literal< 0x4009403c, 21, 1 >();
   // Comparison 6 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU6 = hr::field_mask_literal< 0x4009403c, 22, 1 >();
   // Comparison 7 Update Interrupt Mask
   constexpr auto PWM_IMR2_CMPU7 = hr::field_mask_literal< 0x4009403c, 23, 1 >();

// ISR2
   // Write Ready for Synchronous Channels Update
   constexpr auto PWM_ISR2_WRDY = hr::field_mask_literal< 0x40094040, 0, 1 >();
   // PDC End of TX Buffer
   constexpr auto PWM_ISR2_ENDTX = hr::field_mask_literal< 0x40094040, 1, 1 >();
   // PDC TX Buffer Empty
   constexpr auto PWM_ISR2_TXBUFE = hr::field_mask_literal< 0x40094040, 2, 1 >();
   // Synchronous Channels Update Underrun Error
   constexpr auto PWM_ISR2_UNRE = hr::field_mask_literal< 0x40094040, 3, 1 >();
   // Comparison 0 Match
   constexpr auto PWM_ISR2_CMPM0 = hr::field_mask_literal< 0x40094040, 8, 1 >();
   // Comparison 1 Match
   constexpr auto PWM_ISR2_CMPM1 = hr::field_mask_literal< 0x40094040, 9, 1 >();
   // Comparison 2 Match
   constexpr auto PWM_ISR2_CMPM2 = hr::field_mask_literal< 0x40094040, 10, 1 >();
   // Comparison 3 Match
   constexpr auto PWM_ISR2_CMPM3 = hr::field_mask_literal< 0x40094040, 11, 1 >();
   // Comparison 4 Match
   constexpr auto PWM_ISR2_CMPM4 = hr::field_mask_literal< 0x40094040, 12, 1 >();
   // Comparison 5 Match
   constexpr auto PWM_ISR2_CMPM5 = hr::field_mask_literal< 0x40094040, 13, 1 >();
   // Comparison 6 Match
   constexpr auto PWM_ISR2_CMPM6 = hr::field_mask_literal< 0x40094040, 14, 1 >();
   // Comparison 7 Match
   constexpr auto PWM_ISR2_CMPM7 = hr::field_mask_literal< 0x40094040, 15, 1 >();
   // Comparison 0 Update
   constexpr auto PWM_ISR2_CMPU0 = hr::field_mask_literal< 0x40094040, 16, 1 >();
   // Comparison 1 Update
   constexpr auto PWM_ISR2_CMPU1 = hr::field_mask_literal< 0x40094040, 17, 1 >();
   // Comparison 2 Update
   constexpr auto PWM_ISR2_CMPU2 = hr::field_mask_literal< 0x40094040, 18, 1 >();
   // Comparison 3 Update
   constexpr auto PWM_ISR2_CMPU3 = hr::field_mask_literal< 0x40094040, 19, 1 >();
   // Comparison 4 Update
   constexpr auto PWM_ISR2_CMPU4 = hr::field_mask_literal< 0x40094040, 20, 1 >();
   // Comparison 5 Update
   constexpr auto PWM_ISR2_CMPU5 = hr::field_mask_literal< 0x40094040, 21, 1 >();
   // Comparison 6 Update
   constexpr auto PWM_ISR2_CMPU6 = hr::field_mask_literal< 0x40094040, 22, 1 >();
   // Comparison 7 Update
   constexpr auto PWM_ISR2_CMPU7 = hr::field_mask_literal< 0x40094040, 23, 1 >();

// OOV
   // Output Override Value for PWMH output of the channel 0
   constexpr auto PWM_OOV_OOVH0 = hr::field_mask_literal< 0x40094044, 0, 1 >();
   // Output Override Value for PWMH output of the channel 1
   constexpr auto PWM_OOV_OOVH1 = hr::field_mask_literal< 0x40094044, 1, 1 >();
   // Output Override Value for PWMH output of the channel 2
   constexpr auto PWM_OOV_OOVH2 = hr::field_mask_literal< 0x40094044, 2, 1 >();
   // Output Override Value for PWMH output of the channel 3
   constexpr auto PWM_OOV_OOVH3 = hr::field_mask_literal< 0x40094044, 3, 1 >();
   // Output Override Value for PWMH output of the channel 4
   constexpr auto PWM_OOV_OOVH4 = hr::field_mask_literal< 0x40094044, 4, 1 >();
   // Output Override Value for PWMH output of the channel 5
   constexpr auto PWM_OOV_OOVH5 = hr::field_mask_literal< 0x40094044, 5, 1 >();
   // Output Override Value for PWMH output of the channel 6
   constexpr auto PWM_OOV_OOVH6 = hr::field_mask_literal< 0x40094044, 6, 1 >();
   // Output Override Value for PWMH output of the channel 7
   constexpr auto PWM_OOV_OOVH7 = hr::field_mask_literal< 0x40094044, 7, 1 >();
   // Output Override Value for PWML output of the channel 0
   constexpr auto PWM_OOV_OOVL0 = hr::field_mask_literal< 0x40094044, 16, 1 >();
   // Output Override Value for PWML output of the channel 1
   constexpr auto PWM_OOV_OOVL1 = hr::field_mask_literal< 0x40094044, 17, 1 >();
   // Output Override Value for PWML output of the channel 2
   constexpr auto PWM_OOV_OOVL2 = hr::field_mask_literal< 0x40094044, 18, 1 >();
   // Output Override Value for PWML output of the channel 3
   constexpr auto PWM_OOV_OOVL3 = hr::field_mask_literal< 0x40094044, 19, 1 >();
   // Output Override Value for PWML output of the channel 4
   constexpr auto PWM_OOV_OOVL4 = hr::field_mask_literal< 0x40094044, 20, 1 >();
   // Output Override Value for PWML output of the channel 5
   constexpr auto PWM_OOV_OOVL5 = hr::field_mask_literal< 0x40094044, 21, 1 >();
   // Output Override Value for PWML output of the channel 6
   constexpr auto PWM_OOV_OOVL6 = hr::field_mask_literal< 0x40094044, 22, 1 >();
   // Output Override Value for PWML output of the channel 7
   constexpr auto PWM_OOV_OOVL7 = hr::field_mask_literal< 0x40094044, 23, 1 >();

// OS
   // Output Selection for PWMH output of the channel 0
   constexpr auto PWM_OS_OSH0 = hr::field_mask_literal< 0x40094048, 0, 1 >();
   // Output Selection for PWMH output of the channel 1
   constexpr auto PWM_OS_OSH1 = hr::field_mask_literal< 0x40094048, 1, 1 >();
   // Output Selection for PWMH output of the channel 2
   constexpr auto PWM_OS_OSH2 = hr::field_mask_literal< 0x40094048, 2, 1 >();
   // Output Selection for PWMH output of the channel 3
   constexpr auto PWM_OS_OSH3 = hr::field_mask_literal< 0x40094048, 3, 1 >();
   // Output Selection for PWMH output of the channel 4
   constexpr auto PWM_OS_OSH4 = hr::field_mask_literal< 0x40094048, 4, 1 >();
   // Output Selection for PWMH output of the channel 5
   constexpr auto PWM_OS_OSH5 = hr::field_mask_literal< 0x40094048, 5, 1 >();
   // Output Selection for PWMH output of the channel 6
   constexpr auto PWM_OS_OSH6 = hr::field_mask_literal< 0x40094048, 6, 1 >();
   // Output Selection for PWMH output of the channel 7
   constexpr auto PWM_OS_OSH7 = hr::field_mask_literal< 0x40094048, 7, 1 >();
   // Output Selection for PWML output of the channel 0
   constexpr auto PWM_OS_OSL0 = hr::field_mask_literal< 0x40094048, 16, 1 >();
   // Output Selection for PWML output of the channel 1
   constexpr auto PWM_OS_OSL1 = hr::field_mask_literal< 0x40094048, 17, 1 >();
   // Output Selection for PWML output of the channel 2
   constexpr auto PWM_OS_OSL2 = hr::field_mask_literal< 0x40094048, 18, 1 >();
   // Output Selection for PWML output of the channel 3
   constexpr auto PWM_OS_OSL3 = hr::field_mask_literal< 0x40094048, 19, 1 >();
   // Output Selection for PWML output of the channel 4
   constexpr auto PWM_OS_OSL4 = hr::field_mask_literal< 0x40094048, 20, 1 >();
   // Output Selection for PWML output of the channel 5
   constexpr auto PWM_OS_OSL5 = hr::field_mask_literal< 0x40094048, 21, 1 >();
   // Output Selection for PWML output of the channel 6
   constexpr auto PWM_OS_OSL6 = hr::field_mask_literal< 0x40094048, 22, 1 >();
   // Output Selection for PWML output of the channel 7
   constexpr auto PWM_OS_OSL7 = hr::field_mask_literal< 0x40094048, 23, 1 >();

// OSS
   // Output Selection Set for PWMH output of the channel 0
   constexpr auto PWM_OSS_OSSH0 = hr::field_mask_literal< 0x4009404c, 0, 1 >();
   // Output Selection Set for PWMH output of the channel 1
   constexpr auto PWM_OSS_OSSH1 = hr::field_mask_literal< 0x4009404c, 1, 1 >();
   // Output Selection Set for PWMH output of the channel 2
   constexpr auto PWM_OSS_OSSH2 = hr::field_mask_literal< 0x4009404c, 2, 1 >();
   // Output Selection Set for PWMH output of the channel 3
   constexpr auto PWM_OSS_OSSH3 = hr::field_mask_literal< 0x4009404c, 3, 1 >();
   // Output Selection Set for PWMH output of the channel 4
   constexpr auto PWM_OSS_OSSH4 = hr::field_mask_literal< 0x4009404c, 4, 1 >();
   // Output Selection Set for PWMH output of the channel 5
   constexpr auto PWM_OSS_OSSH5 = hr::field_mask_literal< 0x4009404c, 5, 1 >();
   // Output Selection Set for PWMH output of the channel 6
   constexpr auto PWM_OSS_OSSH6 = hr::field_mask_literal< 0x4009404c, 6, 1 >();
   // Output Selection Set for PWMH output of the channel 7
   constexpr auto PWM_OSS_OSSH7 = hr::field_mask_literal< 0x4009404c, 7, 1 >();
   // Output Selection Set for PWML output of the channel 0
   constexpr auto PWM_OSS_OSSL0 = hr::field_mask_literal< 0x4009404c, 16, 1 >();
   // Output Selection Set for PWML output of the channel 1
   constexpr auto PWM_OSS_OSSL1 = hr::field_mask_literal< 0x4009404c, 17, 1 >();
   // Output Selection Set for PWML output of the channel 2
   constexpr auto PWM_OSS_OSSL2 = hr::field_mask_literal< 0x4009404c, 18, 1 >();
   // Output Selection Set for PWML output of the channel 3
   constexpr auto PWM_OSS_OSSL3 = hr::field_mask_literal< 0x4009404c, 19, 1 >();
   // Output Selection Set for PWML output of the channel 4
   constexpr auto PWM_OSS_OSSL4 = hr::field_mask_literal< 0x4009404c, 20, 1 >();
   // Output Selection Set for PWML output of the channel 5
   constexpr auto PWM_OSS_OSSL5 = hr::field_mask_literal< 0x4009404c, 21, 1 >();
   // Output Selection Set for PWML output of the channel 6
   constexpr auto PWM_OSS_OSSL6 = hr::field_mask_literal< 0x4009404c, 22, 1 >();
   // Output Selection Set for PWML output of the channel 7
   constexpr auto PWM_OSS_OSSL7 = hr::field_mask_literal< 0x4009404c, 23, 1 >();

// OSC
   // Output Selection Clear for PWMH output of the channel 0
   constexpr auto PWM_OSC_OSCH0 = hr::field_mask_literal< 0x40094050, 0, 1 >();
   // Output Selection Clear for PWMH output of the channel 1
   constexpr auto PWM_OSC_OSCH1 = hr::field_mask_literal< 0x40094050, 1, 1 >();
   // Output Selection Clear for PWMH output of the channel 2
   constexpr auto PWM_OSC_OSCH2 = hr::field_mask_literal< 0x40094050, 2, 1 >();
   // Output Selection Clear for PWMH output of the channel 3
   constexpr auto PWM_OSC_OSCH3 = hr::field_mask_literal< 0x40094050, 3, 1 >();
   // Output Selection Clear for PWMH output of the channel 4
   constexpr auto PWM_OSC_OSCH4 = hr::field_mask_literal< 0x40094050, 4, 1 >();
   // Output Selection Clear for PWMH output of the channel 5
   constexpr auto PWM_OSC_OSCH5 = hr::field_mask_literal< 0x40094050, 5, 1 >();
   // Output Selection Clear for PWMH output of the channel 6
   constexpr auto PWM_OSC_OSCH6 = hr::field_mask_literal< 0x40094050, 6, 1 >();
   // Output Selection Clear for PWMH output of the channel 7
   constexpr auto PWM_OSC_OSCH7 = hr::field_mask_literal< 0x40094050, 7, 1 >();
   // Output Selection Clear for PWML output of the channel 0
   constexpr auto PWM_OSC_OSCL0 = hr::field_mask_literal< 0x40094050, 16, 1 >();
   // Output Selection Clear for PWML output of the channel 1
   constexpr auto PWM_OSC_OSCL1 = hr::field_mask_literal< 0x40094050, 17, 1 >();
   // Output Selection Clear for PWML output of the channel 2
   constexpr auto PWM_OSC_OSCL2 = hr::field_mask_literal< 0x40094050, 18, 1 >();
   // Output Selection Clear for PWML output of the channel 3
   constexpr auto PWM_OSC_OSCL3 = hr::field_mask_literal< 0x40094050, 19, 1 >();
   // Output Selection Clear for PWML output of the channel 4
   constexpr auto PWM_OSC_OSCL4 = hr::field_mask_literal< 0x40094050, 20, 1 >();
   // Output Selection Clear for PWML output of the channel 5
   constexpr auto PWM_OSC_OSCL5 = hr::field_mask_literal< 0x40094050, 21, 1 >();
   // Output Selection Clear for PWML output of the channel 6
   constexpr auto PWM_OSC_OSCL6 = hr::field_mask_literal< 0x40094050, 22, 1 >();
   // Output Selection Clear for PWML output of the channel 7
   constexpr auto PWM_OSC_OSCL7 = hr::field_mask_literal< 0x40094050, 23, 1 >();

// OSSUPD
   // Output Selection Set for PWMH output of the channel 0
   constexpr auto PWM_OSSUPD_OSSUPH0 = hr::field_mask_literal< 0x40094054, 0, 1 >();
   // Output Selection Set for PWMH output of the channel 1
   constexpr auto PWM_OSSUPD_OSSUPH1 = hr::field_mask_literal< 0x40094054, 1, 1 >();
   // Output Selection Set for PWMH output of the channel 2
   constexpr auto PWM_OSSUPD_OSSUPH2 = hr::field_mask_literal< 0x40094054, 2, 1 >();
   // Output Selection Set for PWMH output of the channel 3
   constexpr auto PWM_OSSUPD_OSSUPH3 = hr::field_mask_literal< 0x40094054, 3, 1 >();
   // Output Selection Set for PWMH output of the channel 4
   constexpr auto PWM_OSSUPD_OSSUPH4 = hr::field_mask_literal< 0x40094054, 4, 1 >();
   // Output Selection Set for PWMH output of the channel 5
   constexpr auto PWM_OSSUPD_OSSUPH5 = hr::field_mask_literal< 0x40094054, 5, 1 >();
   // Output Selection Set for PWMH output of the channel 6
   constexpr auto PWM_OSSUPD_OSSUPH6 = hr::field_mask_literal< 0x40094054, 6, 1 >();
   // Output Selection Set for PWMH output of the channel 7
   constexpr auto PWM_OSSUPD_OSSUPH7 = hr::field_mask_literal< 0x40094054, 7, 1 >();
   // Output Selection Set for PWML output of the channel 0
   constexpr auto PWM_OSSUPD_OSSUPL0 = hr::field_mask_literal< 0x40094054, 16, 1 >();
   // Output Selection Set for PWML output of the channel 1
   constexpr auto PWM_OSSUPD_OSSUPL1 = hr::field_mask_literal< 0x40094054, 17, 1 >();
   // Output Selection Set for PWML output of the channel 2
   constexpr auto PWM_OSSUPD_OSSUPL2 = hr::field_mask_literal< 0x40094054, 18, 1 >();
   // Output Selection Set for PWML output of the channel 3
   constexpr auto PWM_OSSUPD_OSSUPL3 = hr::field_mask_literal< 0x40094054, 19, 1 >();
   // Output Selection Set for PWML output of the channel 4
   constexpr auto PWM_OSSUPD_OSSUPL4 = hr::field_mask_literal< 0x40094054, 20, 1 >();
   // Output Selection Set for PWML output of the channel 5
   constexpr auto PWM_OSSUPD_OSSUPL5 = hr::field_mask_literal< 0x40094054, 21, 1 >();
   // Output Selection Set for PWML output of the channel 6
   constexpr auto PWM_OSSUPD_OSSUPL6 = hr::field_mask_literal< 0x40094054, 22, 1 >();
   // Output Selection Set for PWML output of the channel 7
   constexpr auto PWM_OSSUPD_OSSUPL7 = hr::field_mask_literal< 0x40094054, 23, 1 >();

// OSCUPD
   // Output Selection Clear for PWMH output of the channel 0
   constexpr auto PWM_OSCUPD_OSCUPH0 = hr::field_mask_literal< 0x40094058, 0, 1 >();
   // Output Selection Clear for PWMH output of the channel 1
   constexpr auto PWM_OSCUPD_OSCUPH1 = hr::field_mask_literal< 0x40094058, 1, 1 >();
   // Output Selection Clear for PWMH output of the channel 2
   constexpr auto PWM_OSCUPD_OSCUPH2 = hr::field_mask_literal< 0x40094058, 2, 1 >();
   // Output Selection Clear for PWMH output of the channel 3
   constexpr auto PWM_OSCUPD_OSCUPH3 = hr::field_mask_literal< 0x40094058, 3, 1 >();
   // Output Selection Clear for PWMH output of the channel 4
   constexpr auto PWM_OSCUPD_OSCUPH4 = hr::field_mask_literal< 0x40094058, 4, 1 >();
   // Output Selection Clear for PWMH output of the channel 5
   constexpr auto PWM_OSCUPD_OSCUPH5 = hr::field_mask_literal< 0x40094058, 5, 1 >();
   // Output Selection Clear for PWMH output of the channel 6
   constexpr auto PWM_OSCUPD_OSCUPH6 = hr::field_mask_literal< 0x40094058, 6, 1 >();
   // Output Selection Clear for PWMH output of the channel 7
   constexpr auto PWM_OSCUPD_OSCUPH7 = hr::field_mask_literal< 0x40094058, 7, 1 >();
   // Output Selection Clear for PWML output of the channel 0
   constexpr auto PWM_OSCUPD_OSCUPL0 = hr::field_mask_literal< 0x40094058, 16, 1 >();
   // Output Selection Clear for PWML output of the channel 1
   constexpr auto PWM_OSCUPD_OSCUPL1 = hr::field_mask_literal< 0x40094058, 17, 1 >();
   // Output Selection Clear for PWML output of the channel 2
   constexpr auto PWM_OSCUPD_OSCUPL2 = hr::field_mask_literal< 0x40094058, 18, 1 >();
   // Output Selection Clear for PWML output of the channel 3
   constexpr auto PWM_OSCUPD_OSCUPL3 = hr::field_mask_literal< 0x40094058, 19, 1 >();
   // Output Selection Clear for PWML output of the channel 4
   constexpr auto PWM_OSCUPD_OSCUPL4 = hr::field_mask_literal< 0x40094058, 20, 1 >();
   // Output Selection Clear for PWML output of the channel 5
   constexpr auto PWM_OSCUPD_OSCUPL5 = hr::field_mask_literal< 0x40094058, 21, 1 >();
   // None
   constexpr auto PWM_OSCUPD_OSCUPDL6 = hr::field_mask_literal< 0x40094058, 22, 1 >();
   // Output Selection Clear for PWML output of the channel 7
   constexpr auto PWM_OSCUPD_OSCUPL7 = hr::field_mask_literal< 0x40094058, 23, 1 >();

// FMR
   // Fault Polarity (fault input bit varies from 0 to 5)
   constexpr auto PWM_FMR_FPOL_Msk = hr::field_mask_literal< 0x4009405c, 0, 8 >();
   // Fault Activation Mode (fault input bit varies from 0 to 5)
   constexpr auto PWM_FMR_FMOD_Msk = hr::field_mask_literal< 0x4009405c, 8, 8 >();
   // Fault Filtering (fault input bit varies from 0 to 5)
   constexpr auto PWM_FMR_FFIL_Msk = hr::field_mask_literal< 0x4009405c, 16, 8 >();

// FSR
   // Fault Input Value (fault input bit varies from 0 to 5)
   constexpr auto PWM_FSR_FIV_Msk = hr::field_mask_literal< 0x40094060, 0, 8 >();
   // Fault Status (fault input bit varies from 0 to 5)
   constexpr auto PWM_FSR_FS_Msk = hr::field_mask_literal< 0x40094060, 8, 8 >();

// FCR
   // Fault Clear (fault input bit varies from 0 to 5)
   constexpr auto PWM_FCR_FCLR_Msk = hr::field_mask_literal< 0x40094064, 0, 8 >();

// FPV
   // Fault Protection Value for PWMH output on channel 0
   constexpr auto PWM_FPV_FPVH0 = hr::field_mask_literal< 0x40094068, 0, 1 >();
   // Fault Protection Value for PWMH output on channel 1
   constexpr auto PWM_FPV_FPVH1 = hr::field_mask_literal< 0x40094068, 1, 1 >();
   // Fault Protection Value for PWMH output on channel 2
   constexpr auto PWM_FPV_FPVH2 = hr::field_mask_literal< 0x40094068, 2, 1 >();
   // Fault Protection Value for PWMH output on channel 3
   constexpr auto PWM_FPV_FPVH3 = hr::field_mask_literal< 0x40094068, 3, 1 >();
   // Fault Protection Value for PWMH output on channel 4
   constexpr auto PWM_FPV_FPVH4 = hr::field_mask_literal< 0x40094068, 4, 1 >();
   // Fault Protection Value for PWMH output on channel 5
   constexpr auto PWM_FPV_FPVH5 = hr::field_mask_literal< 0x40094068, 5, 1 >();
   // Fault Protection Value for PWMH output on channel 6
   constexpr auto PWM_FPV_FPVH6 = hr::field_mask_literal< 0x40094068, 6, 1 >();
   // Fault Protection Value for PWMH output on channel 7
   constexpr auto PWM_FPV_FPVH7 = hr::field_mask_literal< 0x40094068, 7, 1 >();
   // Fault Protection Value for PWML output on channel 0
   constexpr auto PWM_FPV_FPVL0 = hr::field_mask_literal< 0x40094068, 16, 1 >();
   // Fault Protection Value for PWML output on channel 1
   constexpr auto PWM_FPV_FPVL1 = hr::field_mask_literal< 0x40094068, 17, 1 >();
   // Fault Protection Value for PWML output on channel 2
   constexpr auto PWM_FPV_FPVL2 = hr::field_mask_literal< 0x40094068, 18, 1 >();
   // Fault Protection Value for PWML output on channel 3
   constexpr auto PWM_FPV_FPVL3 = hr::field_mask_literal< 0x40094068, 19, 1 >();
   // Fault Protection Value for PWML output on channel 4
   constexpr auto PWM_FPV_FPVL4 = hr::field_mask_literal< 0x40094068, 20, 1 >();
   // Fault Protection Value for PWML output on channel 5
   constexpr auto PWM_FPV_FPVL5 = hr::field_mask_literal< 0x40094068, 21, 1 >();
   // Fault Protection Value for PWML output on channel 6
   constexpr auto PWM_FPV_FPVL6 = hr::field_mask_literal< 0x40094068, 22, 1 >();
   // Fault Protection Value for PWML output on channel 7
   constexpr auto PWM_FPV_FPVL7 = hr::field_mask_literal< 0x40094068, 23, 1 >();

// FPE1
   // Fault Protection Enable for channel 0 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE1_FPE0_Msk = hr::field_mask_literal< 0x4009406c, 0, 8 >();
   // Fault Protection Enable for channel 1 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE1_FPE1_Msk = hr::field_mask_literal< 0x4009406c, 8, 8 >();
   // Fault Protection Enable for channel 2 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE1_FPE2_Msk = hr::field_mask_literal< 0x4009406c, 16, 8 >();
   // Fault Protection Enable for channel 3 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE1_FPE3_Msk = hr::field_mask_literal< 0x4009406c, 24, 8 >();

// FPE2
   // Fault Protection Enable for channel 4 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE2_FPE4_Msk = hr::field_mask_literal< 0x40094070, 0, 8 >();
   // Fault Protection Enable for channel 5 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE2_FPE5_Msk = hr::field_mask_literal< 0x40094070, 8, 8 >();
   // Fault Protection Enable for channel 6 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE2_FPE6_Msk = hr::field_mask_literal< 0x40094070, 16, 8 >();
   // Fault Protection Enable for channel 7 (fault input bit varies from 0 to 5)
   constexpr auto PWM_FPE2_FPE7_Msk = hr::field_mask_literal< 0x40094070, 24, 8 >();

// ELMR[0]
   // Comparison 0 Selection
   constexpr auto PWM_ELMR_CSEL0 = hr::field_mask_literal< 0x4009407c, 0, 1 >();
   // Comparison 1 Selection
   constexpr auto PWM_ELMR_CSEL1 = hr::field_mask_literal< 0x4009407c, 1, 1 >();
   // Comparison 2 Selection
   constexpr auto PWM_ELMR_CSEL2 = hr::field_mask_literal< 0x4009407c, 2, 1 >();
   // Comparison 3 Selection
   constexpr auto PWM_ELMR_CSEL3 = hr::field_mask_literal< 0x4009407c, 3, 1 >();
   // Comparison 4 Selection
   constexpr auto PWM_ELMR_CSEL4 = hr::field_mask_literal< 0x4009407c, 4, 1 >();
   // Comparison 5 Selection
   constexpr auto PWM_ELMR_CSEL5 = hr::field_mask_literal< 0x4009407c, 5, 1 >();
   // Comparison 6 Selection
   constexpr auto PWM_ELMR_CSEL6 = hr::field_mask_literal< 0x4009407c, 6, 1 >();
   // Comparison 7 Selection
   constexpr auto PWM_ELMR_CSEL7 = hr::field_mask_literal< 0x4009407c, 7, 1 >();

// SMMR
   // Gray Count ENable
   constexpr auto PWM_SMMR_GCEN0 = hr::field_mask_literal< 0x400940b0, 0, 1 >();
   // Gray Count ENable
   constexpr auto PWM_SMMR_GCEN1 = hr::field_mask_literal< 0x400940b0, 1, 1 >();
   // Gray Count ENable
   constexpr auto PWM_SMMR_GCEN2 = hr::field_mask_literal< 0x400940b0, 2, 1 >();
   // Gray Count ENable
   constexpr auto PWM_SMMR_GCEN3 = hr::field_mask_literal< 0x400940b0, 3, 1 >();
   // DOWN Count
   constexpr auto PWM_SMMR_DOWN0 = hr::field_mask_literal< 0x400940b0, 16, 1 >();
   // DOWN Count
   constexpr auto PWM_SMMR_DOWN1 = hr::field_mask_literal< 0x400940b0, 17, 1 >();
   // DOWN Count
   constexpr auto PWM_SMMR_DOWN2 = hr::field_mask_literal< 0x400940b0, 18, 1 >();
   // DOWN Count
   constexpr auto PWM_SMMR_DOWN3 = hr::field_mask_literal< 0x400940b0, 19, 1 >();

// WPCR
   // Write Protect Command
   constexpr auto PWM_WPCR_WPCMD_Msk = hr::field_mask_literal< 0x400940e4, 0, 2 >();
   // Write Protect Register Group 0
   constexpr auto PWM_WPCR_WPRG0 = hr::field_mask_literal< 0x400940e4, 2, 1 >();
   // Write Protect Register Group 1
   constexpr auto PWM_WPCR_WPRG1 = hr::field_mask_literal< 0x400940e4, 3, 1 >();
   // Write Protect Register Group 2
   constexpr auto PWM_WPCR_WPRG2 = hr::field_mask_literal< 0x400940e4, 4, 1 >();
   // Write Protect Register Group 3
   constexpr auto PWM_WPCR_WPRG3 = hr::field_mask_literal< 0x400940e4, 5, 1 >();
   // Write Protect Register Group 4
   constexpr auto PWM_WPCR_WPRG4 = hr::field_mask_literal< 0x400940e4, 6, 1 >();
   // Write Protect Register Group 5
   constexpr auto PWM_WPCR_WPRG5 = hr::field_mask_literal< 0x400940e4, 7, 1 >();
   // Write Protect Key
   constexpr auto PWM_WPCR_WPKEY_Msk = hr::field_mask_literal< 0x400940e4, 8, 24 >();

// WPSR
   // Write Protect SW Status
   constexpr auto PWM_WPSR_WPSWS0 = hr::field_mask_literal< 0x400940e8, 0, 1 >();
   // Write Protect SW Status
   constexpr auto PWM_WPSR_WPSWS1 = hr::field_mask_literal< 0x400940e8, 1, 1 >();
   // Write Protect SW Status
   constexpr auto PWM_WPSR_WPSWS2 = hr::field_mask_literal< 0x400940e8, 2, 1 >();
   // Write Protect SW Status
   constexpr auto PWM_WPSR_WPSWS3 = hr::field_mask_literal< 0x400940e8, 3, 1 >();
   // Write Protect SW Status
   constexpr auto PWM_WPSR_WPSWS4 = hr::field_mask_literal< 0x400940e8, 4, 1 >();
   // Write Protect SW Status
   constexpr auto PWM_WPSR_WPSWS5 = hr::field_mask_literal< 0x400940e8, 5, 1 >();
   // Write Protect Violation Status
   constexpr auto PWM_WPSR_WPVS = hr::field_mask_literal< 0x400940e8, 7, 1 >();
   // Write Protect HW Status
   constexpr auto PWM_WPSR_WPHWS0 = hr::field_mask_literal< 0x400940e8, 8, 1 >();
   // Write Protect HW Status
   constexpr auto PWM_WPSR_WPHWS1 = hr::field_mask_literal< 0x400940e8, 9, 1 >();
   // Write Protect HW Status
   constexpr auto PWM_WPSR_WPHWS2 = hr::field_mask_literal< 0x400940e8, 10, 1 >();
   // Write Protect HW Status
   constexpr auto PWM_WPSR_WPHWS3 = hr::field_mask_literal< 0x400940e8, 11, 1 >();
   // Write Protect HW Status
   constexpr auto PWM_WPSR_WPHWS4 = hr::field_mask_literal< 0x400940e8, 12, 1 >();
   // Write Protect HW Status
   constexpr auto PWM_WPSR_WPHWS5 = hr::field_mask_literal< 0x400940e8, 13, 1 >();
   // Write Protect Violation Source
   constexpr auto PWM_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400940e8, 16, 16 >();

// TPR
   // Transmit Counter Register
   constexpr auto PWM_TPR_TXPTR_Msk = hr::field_mask_literal< 0x40094108, 0, 32 >();

// TCR
   // Transmit Counter Register
   constexpr auto PWM_TCR_TXCTR_Msk = hr::field_mask_literal< 0x4009410c, 0, 16 >();

// TNPR
   // Transmit Next Pointer
   constexpr auto PWM_TNPR_TXNPTR_Msk = hr::field_mask_literal< 0x40094118, 0, 32 >();

// TNCR
   // Transmit Counter Next
   constexpr auto PWM_TNCR_TXNCTR_Msk = hr::field_mask_literal< 0x4009411c, 0, 16 >();

// PTCR
   // Receiver Transfer Enable
   constexpr auto PWM_PTCR_RXTEN = hr::field_mask_literal< 0x40094120, 0, 1 >();
   // Receiver Transfer Disable
   constexpr auto PWM_PTCR_RXTDIS = hr::field_mask_literal< 0x40094120, 1, 1 >();
   // Transmitter Transfer Enable
   constexpr auto PWM_PTCR_TXTEN = hr::field_mask_literal< 0x40094120, 8, 1 >();
   // Transmitter Transfer Disable
   constexpr auto PWM_PTCR_TXTDIS = hr::field_mask_literal< 0x40094120, 9, 1 >();

// PTSR
   // Receiver Transfer Enable
   constexpr auto PWM_PTSR_RXTEN = hr::field_mask_literal< 0x40094124, 0, 1 >();
   // Transmitter Transfer Enable
   constexpr auto PWM_PTSR_TXTEN = hr::field_mask_literal< 0x40094124, 8, 1 >();

// CMPV0
   // Comparison x Value
   constexpr auto PWM_CMPV0_CV_Msk = hr::field_mask_literal< 0x40094130, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV0_CVM = hr::field_mask_literal< 0x40094130, 24, 1 >();

// CMPVUPD0
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD0_CVUPD_Msk = hr::field_mask_literal< 0x40094134, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD0_CVMUPD = hr::field_mask_literal< 0x40094134, 24, 1 >();

// CMPM0
   // Comparison x Enable
   constexpr auto PWM_CMPM0_CEN = hr::field_mask_literal< 0x40094138, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM0_CTR_Msk = hr::field_mask_literal< 0x40094138, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM0_CPR_Msk = hr::field_mask_literal< 0x40094138, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM0_CPRCNT_Msk = hr::field_mask_literal< 0x40094138, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM0_CUPR_Msk = hr::field_mask_literal< 0x40094138, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM0_CUPRCNT_Msk = hr::field_mask_literal< 0x40094138, 20, 4 >();

// CMPMUPD0
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD0_CENUPD = hr::field_mask_literal< 0x4009413c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD0_CTRUPD_Msk = hr::field_mask_literal< 0x4009413c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD0_CPRUPD_Msk = hr::field_mask_literal< 0x4009413c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD0_CUPRUPD_Msk = hr::field_mask_literal< 0x4009413c, 16, 4 >();

// CMPV1
   // Comparison x Value
   constexpr auto PWM_CMPV1_CV_Msk = hr::field_mask_literal< 0x40094140, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV1_CVM = hr::field_mask_literal< 0x40094140, 24, 1 >();

// CMPVUPD1
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD1_CVUPD_Msk = hr::field_mask_literal< 0x40094144, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD1_CVMUPD = hr::field_mask_literal< 0x40094144, 24, 1 >();

// CMPM1
   // Comparison x Enable
   constexpr auto PWM_CMPM1_CEN = hr::field_mask_literal< 0x40094148, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM1_CTR_Msk = hr::field_mask_literal< 0x40094148, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM1_CPR_Msk = hr::field_mask_literal< 0x40094148, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM1_CPRCNT_Msk = hr::field_mask_literal< 0x40094148, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM1_CUPR_Msk = hr::field_mask_literal< 0x40094148, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM1_CUPRCNT_Msk = hr::field_mask_literal< 0x40094148, 20, 4 >();

// CMPMUPD1
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD1_CENUPD = hr::field_mask_literal< 0x4009414c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD1_CTRUPD_Msk = hr::field_mask_literal< 0x4009414c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD1_CPRUPD_Msk = hr::field_mask_literal< 0x4009414c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD1_CUPRUPD_Msk = hr::field_mask_literal< 0x4009414c, 16, 4 >();

// CMPV2
   // Comparison x Value
   constexpr auto PWM_CMPV2_CV_Msk = hr::field_mask_literal< 0x40094150, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV2_CVM = hr::field_mask_literal< 0x40094150, 24, 1 >();

// CMPVUPD2
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD2_CVUPD_Msk = hr::field_mask_literal< 0x40094154, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD2_CVMUPD = hr::field_mask_literal< 0x40094154, 24, 1 >();

// CMPM2
   // Comparison x Enable
   constexpr auto PWM_CMPM2_CEN = hr::field_mask_literal< 0x40094158, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM2_CTR_Msk = hr::field_mask_literal< 0x40094158, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM2_CPR_Msk = hr::field_mask_literal< 0x40094158, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM2_CPRCNT_Msk = hr::field_mask_literal< 0x40094158, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM2_CUPR_Msk = hr::field_mask_literal< 0x40094158, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM2_CUPRCNT_Msk = hr::field_mask_literal< 0x40094158, 20, 4 >();

// CMPMUPD2
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD2_CENUPD = hr::field_mask_literal< 0x4009415c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD2_CTRUPD_Msk = hr::field_mask_literal< 0x4009415c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD2_CPRUPD_Msk = hr::field_mask_literal< 0x4009415c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD2_CUPRUPD_Msk = hr::field_mask_literal< 0x4009415c, 16, 4 >();

// CMPV3
   // Comparison x Value
   constexpr auto PWM_CMPV3_CV_Msk = hr::field_mask_literal< 0x40094160, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV3_CVM = hr::field_mask_literal< 0x40094160, 24, 1 >();

// CMPVUPD3
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD3_CVUPD_Msk = hr::field_mask_literal< 0x40094164, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD3_CVMUPD = hr::field_mask_literal< 0x40094164, 24, 1 >();

// CMPM3
   // Comparison x Enable
   constexpr auto PWM_CMPM3_CEN = hr::field_mask_literal< 0x40094168, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM3_CTR_Msk = hr::field_mask_literal< 0x40094168, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM3_CPR_Msk = hr::field_mask_literal< 0x40094168, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM3_CPRCNT_Msk = hr::field_mask_literal< 0x40094168, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM3_CUPR_Msk = hr::field_mask_literal< 0x40094168, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM3_CUPRCNT_Msk = hr::field_mask_literal< 0x40094168, 20, 4 >();

// CMPMUPD3
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD3_CENUPD = hr::field_mask_literal< 0x4009416c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD3_CTRUPD_Msk = hr::field_mask_literal< 0x4009416c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD3_CPRUPD_Msk = hr::field_mask_literal< 0x4009416c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD3_CUPRUPD_Msk = hr::field_mask_literal< 0x4009416c, 16, 4 >();

// CMPV4
   // Comparison x Value
   constexpr auto PWM_CMPV4_CV_Msk = hr::field_mask_literal< 0x40094170, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV4_CVM = hr::field_mask_literal< 0x40094170, 24, 1 >();

// CMPVUPD4
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD4_CVUPD_Msk = hr::field_mask_literal< 0x40094174, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD4_CVMUPD = hr::field_mask_literal< 0x40094174, 24, 1 >();

// CMPM4
   // Comparison x Enable
   constexpr auto PWM_CMPM4_CEN = hr::field_mask_literal< 0x40094178, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM4_CTR_Msk = hr::field_mask_literal< 0x40094178, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM4_CPR_Msk = hr::field_mask_literal< 0x40094178, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM4_CPRCNT_Msk = hr::field_mask_literal< 0x40094178, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM4_CUPR_Msk = hr::field_mask_literal< 0x40094178, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM4_CUPRCNT_Msk = hr::field_mask_literal< 0x40094178, 20, 4 >();

// CMPMUPD4
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD4_CENUPD = hr::field_mask_literal< 0x4009417c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD4_CTRUPD_Msk = hr::field_mask_literal< 0x4009417c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD4_CPRUPD_Msk = hr::field_mask_literal< 0x4009417c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD4_CUPRUPD_Msk = hr::field_mask_literal< 0x4009417c, 16, 4 >();

// CMPV5
   // Comparison x Value
   constexpr auto PWM_CMPV5_CV_Msk = hr::field_mask_literal< 0x40094180, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV5_CVM = hr::field_mask_literal< 0x40094180, 24, 1 >();

// CMPVUPD5
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD5_CVUPD_Msk = hr::field_mask_literal< 0x40094184, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD5_CVMUPD = hr::field_mask_literal< 0x40094184, 24, 1 >();

// CMPM5
   // Comparison x Enable
   constexpr auto PWM_CMPM5_CEN = hr::field_mask_literal< 0x40094188, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM5_CTR_Msk = hr::field_mask_literal< 0x40094188, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM5_CPR_Msk = hr::field_mask_literal< 0x40094188, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM5_CPRCNT_Msk = hr::field_mask_literal< 0x40094188, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM5_CUPR_Msk = hr::field_mask_literal< 0x40094188, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM5_CUPRCNT_Msk = hr::field_mask_literal< 0x40094188, 20, 4 >();

// CMPMUPD5
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD5_CENUPD = hr::field_mask_literal< 0x4009418c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD5_CTRUPD_Msk = hr::field_mask_literal< 0x4009418c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD5_CPRUPD_Msk = hr::field_mask_literal< 0x4009418c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD5_CUPRUPD_Msk = hr::field_mask_literal< 0x4009418c, 16, 4 >();

// CMPV6
   // Comparison x Value
   constexpr auto PWM_CMPV6_CV_Msk = hr::field_mask_literal< 0x40094190, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV6_CVM = hr::field_mask_literal< 0x40094190, 24, 1 >();

// CMPVUPD6
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD6_CVUPD_Msk = hr::field_mask_literal< 0x40094194, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD6_CVMUPD = hr::field_mask_literal< 0x40094194, 24, 1 >();

// CMPM6
   // Comparison x Enable
   constexpr auto PWM_CMPM6_CEN = hr::field_mask_literal< 0x40094198, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM6_CTR_Msk = hr::field_mask_literal< 0x40094198, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM6_CPR_Msk = hr::field_mask_literal< 0x40094198, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM6_CPRCNT_Msk = hr::field_mask_literal< 0x40094198, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM6_CUPR_Msk = hr::field_mask_literal< 0x40094198, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM6_CUPRCNT_Msk = hr::field_mask_literal< 0x40094198, 20, 4 >();

// CMPMUPD6
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD6_CENUPD = hr::field_mask_literal< 0x4009419c, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD6_CTRUPD_Msk = hr::field_mask_literal< 0x4009419c, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD6_CPRUPD_Msk = hr::field_mask_literal< 0x4009419c, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD6_CUPRUPD_Msk = hr::field_mask_literal< 0x4009419c, 16, 4 >();

// CMPV7
   // Comparison x Value
   constexpr auto PWM_CMPV7_CV_Msk = hr::field_mask_literal< 0x400941a0, 0, 24 >();
   // Comparison x Value Mode
   constexpr auto PWM_CMPV7_CVM = hr::field_mask_literal< 0x400941a0, 24, 1 >();

// CMPVUPD7
   // Comparison x Value Update
   constexpr auto PWM_CMPVUPD7_CVUPD_Msk = hr::field_mask_literal< 0x400941a4, 0, 24 >();
   // Comparison x Value Mode Update
   constexpr auto PWM_CMPVUPD7_CVMUPD = hr::field_mask_literal< 0x400941a4, 24, 1 >();

// CMPM7
   // Comparison x Enable
   constexpr auto PWM_CMPM7_CEN = hr::field_mask_literal< 0x400941a8, 0, 1 >();
   // Comparison x Trigger
   constexpr auto PWM_CMPM7_CTR_Msk = hr::field_mask_literal< 0x400941a8, 4, 4 >();
   // Comparison x Period
   constexpr auto PWM_CMPM7_CPR_Msk = hr::field_mask_literal< 0x400941a8, 8, 4 >();
   // Comparison x Period Counter
   constexpr auto PWM_CMPM7_CPRCNT_Msk = hr::field_mask_literal< 0x400941a8, 12, 4 >();
   // Comparison x Update Period
   constexpr auto PWM_CMPM7_CUPR_Msk = hr::field_mask_literal< 0x400941a8, 16, 4 >();
   // Comparison x Update Period Counter
   constexpr auto PWM_CMPM7_CUPRCNT_Msk = hr::field_mask_literal< 0x400941a8, 20, 4 >();

// CMPMUPD7
   // Comparison x Enable Update
   constexpr auto PWM_CMPMUPD7_CENUPD = hr::field_mask_literal< 0x400941ac, 0, 1 >();
   // Comparison x Trigger Update
   constexpr auto PWM_CMPMUPD7_CTRUPD_Msk = hr::field_mask_literal< 0x400941ac, 4, 4 >();
   // Comparison x Period Update
   constexpr auto PWM_CMPMUPD7_CPRUPD_Msk = hr::field_mask_literal< 0x400941ac, 8, 4 >();
   // Comparison x Update Period Update
   constexpr auto PWM_CMPMUPD7_CUPRUPD_Msk = hr::field_mask_literal< 0x400941ac, 16, 4 >();

// CMR0
   // Channel Pre-scaler
   constexpr auto PWM_CMR0_CPRE_Msk = hr::field_mask_literal< 0x40094200, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR0_CPRE_MCK = hr::field_value_literal< 0x40094200, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x40094200, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x40094200, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x40094200, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x40094200, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x40094200, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x40094200, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x40094200, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x40094200, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x40094200, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR0_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x40094200, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR0_CPRE_CLKA = hr::field_value_literal< 0x40094200, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR0_CPRE_CLKB = hr::field_value_literal< 0x40094200, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR0_CALG = hr::field_mask_literal< 0x40094200, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR0_CPOL = hr::field_mask_literal< 0x40094200, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR0_CES = hr::field_mask_literal< 0x40094200, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR0_DTE = hr::field_mask_literal< 0x40094200, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR0_DTHI = hr::field_mask_literal< 0x40094200, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR0_DTLI = hr::field_mask_literal< 0x40094200, 18, 1 >();

// CDTY0
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY0_CDTY_Msk = hr::field_mask_literal< 0x40094204, 0, 24 >();

// CDTYUPD0
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD0_CDTYUPD_Msk = hr::field_mask_literal< 0x40094208, 0, 24 >();

// CPRD0
   // Channel Period
   constexpr auto PWM_CPRD0_CPRD_Msk = hr::field_mask_literal< 0x4009420c, 0, 24 >();

// CPRDUPD0
   // Channel Period Update
   constexpr auto PWM_CPRDUPD0_CPRDUPD_Msk = hr::field_mask_literal< 0x40094210, 0, 24 >();

// CCNT0
   // Channel Counter Register
   constexpr auto PWM_CCNT0_CNT_Msk = hr::field_mask_literal< 0x40094214, 0, 24 >();

// DT0
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT0_DTH_Msk = hr::field_mask_literal< 0x40094218, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT0_DTL_Msk = hr::field_mask_literal< 0x40094218, 16, 16 >();

// DTUPD0
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD0_DTHUPD_Msk = hr::field_mask_literal< 0x4009421c, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD0_DTLUPD_Msk = hr::field_mask_literal< 0x4009421c, 16, 16 >();

// CMR1
   // Channel Pre-scaler
   constexpr auto PWM_CMR1_CPRE_Msk = hr::field_mask_literal< 0x40094220, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR1_CPRE_MCK = hr::field_value_literal< 0x40094220, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x40094220, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x40094220, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x40094220, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x40094220, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x40094220, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x40094220, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x40094220, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x40094220, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x40094220, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR1_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x40094220, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR1_CPRE_CLKA = hr::field_value_literal< 0x40094220, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR1_CPRE_CLKB = hr::field_value_literal< 0x40094220, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR1_CALG = hr::field_mask_literal< 0x40094220, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR1_CPOL = hr::field_mask_literal< 0x40094220, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR1_CES = hr::field_mask_literal< 0x40094220, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR1_DTE = hr::field_mask_literal< 0x40094220, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR1_DTHI = hr::field_mask_literal< 0x40094220, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR1_DTLI = hr::field_mask_literal< 0x40094220, 18, 1 >();

// CDTY1
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY1_CDTY_Msk = hr::field_mask_literal< 0x40094224, 0, 24 >();

// CDTYUPD1
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD1_CDTYUPD_Msk = hr::field_mask_literal< 0x40094228, 0, 24 >();

// CPRD1
   // Channel Period
   constexpr auto PWM_CPRD1_CPRD_Msk = hr::field_mask_literal< 0x4009422c, 0, 24 >();

// CPRDUPD1
   // Channel Period Update
   constexpr auto PWM_CPRDUPD1_CPRDUPD_Msk = hr::field_mask_literal< 0x40094230, 0, 24 >();

// CCNT1
   // Channel Counter Register
   constexpr auto PWM_CCNT1_CNT_Msk = hr::field_mask_literal< 0x40094234, 0, 24 >();

// DT1
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT1_DTH_Msk = hr::field_mask_literal< 0x40094238, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT1_DTL_Msk = hr::field_mask_literal< 0x40094238, 16, 16 >();

// DTUPD1
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD1_DTHUPD_Msk = hr::field_mask_literal< 0x4009423c, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD1_DTLUPD_Msk = hr::field_mask_literal< 0x4009423c, 16, 16 >();

// CMR2
   // Channel Pre-scaler
   constexpr auto PWM_CMR2_CPRE_Msk = hr::field_mask_literal< 0x40094240, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR2_CPRE_MCK = hr::field_value_literal< 0x40094240, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x40094240, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x40094240, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x40094240, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x40094240, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x40094240, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x40094240, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x40094240, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x40094240, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x40094240, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR2_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x40094240, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR2_CPRE_CLKA = hr::field_value_literal< 0x40094240, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR2_CPRE_CLKB = hr::field_value_literal< 0x40094240, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR2_CALG = hr::field_mask_literal< 0x40094240, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR2_CPOL = hr::field_mask_literal< 0x40094240, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR2_CES = hr::field_mask_literal< 0x40094240, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR2_DTE = hr::field_mask_literal< 0x40094240, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR2_DTHI = hr::field_mask_literal< 0x40094240, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR2_DTLI = hr::field_mask_literal< 0x40094240, 18, 1 >();

// CDTY2
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY2_CDTY_Msk = hr::field_mask_literal< 0x40094244, 0, 24 >();

// CDTYUPD2
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD2_CDTYUPD_Msk = hr::field_mask_literal< 0x40094248, 0, 24 >();

// CPRD2
   // Channel Period
   constexpr auto PWM_CPRD2_CPRD_Msk = hr::field_mask_literal< 0x4009424c, 0, 24 >();

// CPRDUPD2
   // Channel Period Update
   constexpr auto PWM_CPRDUPD2_CPRDUPD_Msk = hr::field_mask_literal< 0x40094250, 0, 24 >();

// CCNT2
   // Channel Counter Register
   constexpr auto PWM_CCNT2_CNT_Msk = hr::field_mask_literal< 0x40094254, 0, 24 >();

// DT2
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT2_DTH_Msk = hr::field_mask_literal< 0x40094258, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT2_DTL_Msk = hr::field_mask_literal< 0x40094258, 16, 16 >();

// DTUPD2
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD2_DTHUPD_Msk = hr::field_mask_literal< 0x4009425c, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD2_DTLUPD_Msk = hr::field_mask_literal< 0x4009425c, 16, 16 >();

// CMR3
   // Channel Pre-scaler
   constexpr auto PWM_CMR3_CPRE_Msk = hr::field_mask_literal< 0x40094260, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR3_CPRE_MCK = hr::field_value_literal< 0x40094260, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x40094260, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x40094260, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x40094260, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x40094260, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x40094260, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x40094260, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x40094260, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x40094260, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x40094260, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR3_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x40094260, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR3_CPRE_CLKA = hr::field_value_literal< 0x40094260, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR3_CPRE_CLKB = hr::field_value_literal< 0x40094260, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR3_CALG = hr::field_mask_literal< 0x40094260, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR3_CPOL = hr::field_mask_literal< 0x40094260, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR3_CES = hr::field_mask_literal< 0x40094260, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR3_DTE = hr::field_mask_literal< 0x40094260, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR3_DTHI = hr::field_mask_literal< 0x40094260, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR3_DTLI = hr::field_mask_literal< 0x40094260, 18, 1 >();

// CDTY3
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY3_CDTY_Msk = hr::field_mask_literal< 0x40094264, 0, 24 >();

// CDTYUPD3
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD3_CDTYUPD_Msk = hr::field_mask_literal< 0x40094268, 0, 24 >();

// CPRD3
   // Channel Period
   constexpr auto PWM_CPRD3_CPRD_Msk = hr::field_mask_literal< 0x4009426c, 0, 24 >();

// CPRDUPD3
   // Channel Period Update
   constexpr auto PWM_CPRDUPD3_CPRDUPD_Msk = hr::field_mask_literal< 0x40094270, 0, 24 >();

// CCNT3
   // Channel Counter Register
   constexpr auto PWM_CCNT3_CNT_Msk = hr::field_mask_literal< 0x40094274, 0, 24 >();

// DT3
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT3_DTH_Msk = hr::field_mask_literal< 0x40094278, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT3_DTL_Msk = hr::field_mask_literal< 0x40094278, 16, 16 >();

// DTUPD3
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD3_DTHUPD_Msk = hr::field_mask_literal< 0x4009427c, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD3_DTLUPD_Msk = hr::field_mask_literal< 0x4009427c, 16, 16 >();

// CMR4
   // Channel Pre-scaler
   constexpr auto PWM_CMR4_CPRE_Msk = hr::field_mask_literal< 0x40094280, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR4_CPRE_MCK = hr::field_value_literal< 0x40094280, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x40094280, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x40094280, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x40094280, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x40094280, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x40094280, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x40094280, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x40094280, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x40094280, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x40094280, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR4_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x40094280, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR4_CPRE_CLKA = hr::field_value_literal< 0x40094280, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR4_CPRE_CLKB = hr::field_value_literal< 0x40094280, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR4_CALG = hr::field_mask_literal< 0x40094280, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR4_CPOL = hr::field_mask_literal< 0x40094280, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR4_CES = hr::field_mask_literal< 0x40094280, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR4_DTE = hr::field_mask_literal< 0x40094280, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR4_DTHI = hr::field_mask_literal< 0x40094280, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR4_DTLI = hr::field_mask_literal< 0x40094280, 18, 1 >();

// CDTY4
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY4_CDTY_Msk = hr::field_mask_literal< 0x40094284, 0, 24 >();

// CDTYUPD4
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD4_CDTYUPD_Msk = hr::field_mask_literal< 0x40094288, 0, 24 >();

// CPRD4
   // Channel Period
   constexpr auto PWM_CPRD4_CPRD_Msk = hr::field_mask_literal< 0x4009428c, 0, 24 >();

// CPRDUPD4
   // Channel Period Update
   constexpr auto PWM_CPRDUPD4_CPRDUPD_Msk = hr::field_mask_literal< 0x40094290, 0, 24 >();

// CCNT4
   // Channel Counter Register
   constexpr auto PWM_CCNT4_CNT_Msk = hr::field_mask_literal< 0x40094294, 0, 24 >();

// DT4
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT4_DTH_Msk = hr::field_mask_literal< 0x40094298, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT4_DTL_Msk = hr::field_mask_literal< 0x40094298, 16, 16 >();

// DTUPD4
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD4_DTHUPD_Msk = hr::field_mask_literal< 0x4009429c, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD4_DTLUPD_Msk = hr::field_mask_literal< 0x4009429c, 16, 16 >();

// CMR5
   // Channel Pre-scaler
   constexpr auto PWM_CMR5_CPRE_Msk = hr::field_mask_literal< 0x400942a0, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR5_CPRE_MCK = hr::field_value_literal< 0x400942a0, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x400942a0, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x400942a0, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x400942a0, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x400942a0, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x400942a0, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x400942a0, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x400942a0, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x400942a0, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x400942a0, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR5_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x400942a0, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR5_CPRE_CLKA = hr::field_value_literal< 0x400942a0, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR5_CPRE_CLKB = hr::field_value_literal< 0x400942a0, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR5_CALG = hr::field_mask_literal< 0x400942a0, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR5_CPOL = hr::field_mask_literal< 0x400942a0, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR5_CES = hr::field_mask_literal< 0x400942a0, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR5_DTE = hr::field_mask_literal< 0x400942a0, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR5_DTHI = hr::field_mask_literal< 0x400942a0, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR5_DTLI = hr::field_mask_literal< 0x400942a0, 18, 1 >();

// CDTY5
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY5_CDTY_Msk = hr::field_mask_literal< 0x400942a4, 0, 24 >();

// CDTYUPD5
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD5_CDTYUPD_Msk = hr::field_mask_literal< 0x400942a8, 0, 24 >();

// CPRD5
   // Channel Period
   constexpr auto PWM_CPRD5_CPRD_Msk = hr::field_mask_literal< 0x400942ac, 0, 24 >();

// CPRDUPD5
   // Channel Period Update
   constexpr auto PWM_CPRDUPD5_CPRDUPD_Msk = hr::field_mask_literal< 0x400942b0, 0, 24 >();

// CCNT5
   // Channel Counter Register
   constexpr auto PWM_CCNT5_CNT_Msk = hr::field_mask_literal< 0x400942b4, 0, 24 >();

// DT5
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT5_DTH_Msk = hr::field_mask_literal< 0x400942b8, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT5_DTL_Msk = hr::field_mask_literal< 0x400942b8, 16, 16 >();

// DTUPD5
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD5_DTHUPD_Msk = hr::field_mask_literal< 0x400942bc, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD5_DTLUPD_Msk = hr::field_mask_literal< 0x400942bc, 16, 16 >();

// CMR6
   // Channel Pre-scaler
   constexpr auto PWM_CMR6_CPRE_Msk = hr::field_mask_literal< 0x400942c0, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR6_CPRE_MCK = hr::field_value_literal< 0x400942c0, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x400942c0, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x400942c0, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x400942c0, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x400942c0, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x400942c0, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x400942c0, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x400942c0, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x400942c0, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x400942c0, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR6_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x400942c0, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR6_CPRE_CLKA = hr::field_value_literal< 0x400942c0, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR6_CPRE_CLKB = hr::field_value_literal< 0x400942c0, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR6_CALG = hr::field_mask_literal< 0x400942c0, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR6_CPOL = hr::field_mask_literal< 0x400942c0, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR6_CES = hr::field_mask_literal< 0x400942c0, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR6_DTE = hr::field_mask_literal< 0x400942c0, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR6_DTHI = hr::field_mask_literal< 0x400942c0, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR6_DTLI = hr::field_mask_literal< 0x400942c0, 18, 1 >();

// CDTY6
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY6_CDTY_Msk = hr::field_mask_literal< 0x400942c4, 0, 24 >();

// CDTYUPD6
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD6_CDTYUPD_Msk = hr::field_mask_literal< 0x400942c8, 0, 24 >();

// CPRD6
   // Channel Period
   constexpr auto PWM_CPRD6_CPRD_Msk = hr::field_mask_literal< 0x400942cc, 0, 24 >();

// CPRDUPD6
   // Channel Period Update
   constexpr auto PWM_CPRDUPD6_CPRDUPD_Msk = hr::field_mask_literal< 0x400942d0, 0, 24 >();

// CCNT6
   // Channel Counter Register
   constexpr auto PWM_CCNT6_CNT_Msk = hr::field_mask_literal< 0x400942d4, 0, 24 >();

// DT6
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT6_DTH_Msk = hr::field_mask_literal< 0x400942d8, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT6_DTL_Msk = hr::field_mask_literal< 0x400942d8, 16, 16 >();

// DTUPD6
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD6_DTHUPD_Msk = hr::field_mask_literal< 0x400942dc, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD6_DTLUPD_Msk = hr::field_mask_literal< 0x400942dc, 16, 16 >();

// CMR7
   // Channel Pre-scaler
   constexpr auto PWM_CMR7_CPRE_Msk = hr::field_mask_literal< 0x400942e0, 0, 4 >();
      // Master clock
      constexpr auto PWM_CMR7_CPRE_MCK = hr::field_value_literal< 0x400942e0, 0, 4 >( 0 );
      // Master clock/2
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_2 = hr::field_value_literal< 0x400942e0, 0, 4 >( 1 );
      // Master clock/4
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_4 = hr::field_value_literal< 0x400942e0, 0, 4 >( 2 );
      // Master clock/8
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_8 = hr::field_value_literal< 0x400942e0, 0, 4 >( 3 );
      // Master clock/16
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_16 = hr::field_value_literal< 0x400942e0, 0, 4 >( 4 );
      // Master clock/32
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_32 = hr::field_value_literal< 0x400942e0, 0, 4 >( 5 );
      // Master clock/64
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_64 = hr::field_value_literal< 0x400942e0, 0, 4 >( 6 );
      // Master clock/128
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_128 = hr::field_value_literal< 0x400942e0, 0, 4 >( 7 );
      // Master clock/256
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_256 = hr::field_value_literal< 0x400942e0, 0, 4 >( 8 );
      // Master clock/512
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_512 = hr::field_value_literal< 0x400942e0, 0, 4 >( 9 );
      // Master clock/1024
      constexpr auto PWM_CMR7_CPRE_MCK_DIV_1024 = hr::field_value_literal< 0x400942e0, 0, 4 >( 10 );
      // Clock A
      constexpr auto PWM_CMR7_CPRE_CLKA = hr::field_value_literal< 0x400942e0, 0, 4 >( 11 );
      // Clock B
      constexpr auto PWM_CMR7_CPRE_CLKB = hr::field_value_literal< 0x400942e0, 0, 4 >( 12 );
   // Channel Alignment
   constexpr auto PWM_CMR7_CALG = hr::field_mask_literal< 0x400942e0, 8, 1 >();
   // Channel Polarity
   constexpr auto PWM_CMR7_CPOL = hr::field_mask_literal< 0x400942e0, 9, 1 >();
   // Counter Event Selection
   constexpr auto PWM_CMR7_CES = hr::field_mask_literal< 0x400942e0, 10, 1 >();
   // Dead-Time Generator Enable
   constexpr auto PWM_CMR7_DTE = hr::field_mask_literal< 0x400942e0, 16, 1 >();
   // Dead-Time PWMHx Output Inverted
   constexpr auto PWM_CMR7_DTHI = hr::field_mask_literal< 0x400942e0, 17, 1 >();
   // Dead-Time PWMLx Output Inverted
   constexpr auto PWM_CMR7_DTLI = hr::field_mask_literal< 0x400942e0, 18, 1 >();

// CDTY7
   // Channel Duty-Cycle
   constexpr auto PWM_CDTY7_CDTY_Msk = hr::field_mask_literal< 0x400942e4, 0, 24 >();

// CDTYUPD7
   // Channel Duty-Cycle Update
   constexpr auto PWM_CDTYUPD7_CDTYUPD_Msk = hr::field_mask_literal< 0x400942e8, 0, 24 >();

// CPRD7
   // Channel Period
   constexpr auto PWM_CPRD7_CPRD_Msk = hr::field_mask_literal< 0x400942ec, 0, 24 >();

// CPRDUPD7
   // Channel Period Update
   constexpr auto PWM_CPRDUPD7_CPRDUPD_Msk = hr::field_mask_literal< 0x400942f0, 0, 24 >();

// CCNT7
   // Channel Counter Register
   constexpr auto PWM_CCNT7_CNT_Msk = hr::field_mask_literal< 0x400942f4, 0, 24 >();

// DT7
   // Dead-Time Value for PWMHx Output
   constexpr auto PWM_DT7_DTH_Msk = hr::field_mask_literal< 0x400942f8, 0, 16 >();
   // Dead-Time Value for PWMLx Output
   constexpr auto PWM_DT7_DTL_Msk = hr::field_mask_literal< 0x400942f8, 16, 16 >();

// DTUPD7
   // Dead-Time Value Update for PWMHx Output
   constexpr auto PWM_DTUPD7_DTHUPD_Msk = hr::field_mask_literal< 0x400942fc, 0, 16 >();
   // Dead-Time Value Update for PWMLx Output
   constexpr auto PWM_DTUPD7_DTLUPD_Msk = hr::field_mask_literal< 0x400942fc, 16, 16 >();

// =============================================================================
//
// USART0
// base address = 0x40098000
// Universal Synchronous Asynchronous Receiver Transmitter 0
//
// =============================================================================

struct Usart0 {
   hr::hardware_register<0x40098000> CR;
   hr::hardware_register<0x40098004> MR;
   hr::hardware_register<0x40098008> IER;
   hr::hardware_register<0x4009800c> IDR;
   hr::hardware_register<0x40098010> IMR;
   hr::hardware_register<0x40098014> CSR;
   hr::hardware_register<0x40098018> RHR;
   hr::hardware_register<0x4009801c> THR;
   hr::hardware_register<0x40098020> BRGR;
   hr::hardware_register<0x40098024> RTOR;
   hr::hardware_register<0x40098028> TTGR;
   hr::reserved< 0x2C, 5 > _reserved_at_0x2C;
   hr::hardware_register<0x40098040> FIDI;
   hr::hardware_register<0x40098044> NER;
   hr::reserved< 0x48, 1 > _reserved_at_0x48;
   hr::hardware_register<0x4009804c> IF;
   hr::hardware_register<0x40098050> MAN;
   hr::hardware_register<0x40098054> LINMR;
   hr::hardware_register<0x40098058> LINIR;
   hr::reserved< 0x5C, 34 > _reserved_at_0x5C;
   hr::hardware_register<0x400980e4> WPMR;
   hr::hardware_register<0x400980e8> WPSR;
   hr::reserved< 0xEC, 5 > _reserved_at_0xEC;
   hr::hardware_register<0x40098100> RPR;
   hr::hardware_register<0x40098104> RCR;
   hr::hardware_register<0x40098108> TPR;
   hr::hardware_register<0x4009810c> TCR;
   hr::hardware_register<0x40098110> RNPR;
   hr::hardware_register<0x40098114> RNCR;
   hr::hardware_register<0x40098118> TNPR;
   hr::hardware_register<0x4009811c> TNCR;
   hr::hardware_register<0x40098120> PTCR;
   hr::hardware_register<0x40098124> PTSR;
};

#define USART0 ( ( Usart0 * ) 0x40098000 )

// CR
   // Reset Receiver
   constexpr auto USART0_CR_RSTRX = hr::field_mask_literal< 0x40098000, 2, 1 >();
   // Reset Transmitter
   constexpr auto USART0_CR_RSTTX = hr::field_mask_literal< 0x40098000, 3, 1 >();
   // Receiver Enable
   constexpr auto USART0_CR_RXEN = hr::field_mask_literal< 0x40098000, 4, 1 >();
   // Receiver Disable
   constexpr auto USART0_CR_RXDIS = hr::field_mask_literal< 0x40098000, 5, 1 >();
   // Transmitter Enable
   constexpr auto USART0_CR_TXEN = hr::field_mask_literal< 0x40098000, 6, 1 >();
   // Transmitter Disable
   constexpr auto USART0_CR_TXDIS = hr::field_mask_literal< 0x40098000, 7, 1 >();
   // Reset Status Bits
   constexpr auto USART0_CR_RSTSTA = hr::field_mask_literal< 0x40098000, 8, 1 >();
   // Start Break
   constexpr auto USART0_CR_STTBRK = hr::field_mask_literal< 0x40098000, 9, 1 >();
   // Stop Break
   constexpr auto USART0_CR_STPBRK = hr::field_mask_literal< 0x40098000, 10, 1 >();
   // Start Time-out
   constexpr auto USART0_CR_STTTO = hr::field_mask_literal< 0x40098000, 11, 1 >();
   // Send Address
   constexpr auto USART0_CR_SENDA = hr::field_mask_literal< 0x40098000, 12, 1 >();
   // Reset Iterations
   constexpr auto USART0_CR_RSTIT = hr::field_mask_literal< 0x40098000, 13, 1 >();
   // Reset Non Acknowledge
   constexpr auto USART0_CR_RSTNACK = hr::field_mask_literal< 0x40098000, 14, 1 >();
   // Rearm Time-out
   constexpr auto USART0_CR_RETTO = hr::field_mask_literal< 0x40098000, 15, 1 >();
   // Request to Send Enable
   constexpr auto USART0_CR_RTSEN = hr::field_mask_literal< 0x40098000, 18, 1 >();
   // Request to Send Disable
   constexpr auto USART0_CR_RTSDIS = hr::field_mask_literal< 0x40098000, 19, 1 >();
   // Abort LIN Transmission
   constexpr auto USART0_CR_LINABT = hr::field_mask_literal< 0x40098000, 20, 1 >();
   // Send LIN Wakeup Signal
   constexpr auto USART0_CR_LINWKUP = hr::field_mask_literal< 0x40098000, 21, 1 >();

// CR_SPI_MODE
   // Reset Receiver
   constexpr auto USART0_CR_SPI_MODE_RSTRX = hr::field_mask_literal< 0x40098000, 2, 1 >();
   // Reset Transmitter
   constexpr auto USART0_CR_SPI_MODE_RSTTX = hr::field_mask_literal< 0x40098000, 3, 1 >();
   // Receiver Enable
   constexpr auto USART0_CR_SPI_MODE_RXEN = hr::field_mask_literal< 0x40098000, 4, 1 >();
   // Receiver Disable
   constexpr auto USART0_CR_SPI_MODE_RXDIS = hr::field_mask_literal< 0x40098000, 5, 1 >();
   // Transmitter Enable
   constexpr auto USART0_CR_SPI_MODE_TXEN = hr::field_mask_literal< 0x40098000, 6, 1 >();
   // Transmitter Disable
   constexpr auto USART0_CR_SPI_MODE_TXDIS = hr::field_mask_literal< 0x40098000, 7, 1 >();
   // Reset Status Bits
   constexpr auto USART0_CR_SPI_MODE_RSTSTA = hr::field_mask_literal< 0x40098000, 8, 1 >();
   // Force SPI Chip Select
   constexpr auto USART0_CR_SPI_MODE_FCS = hr::field_mask_literal< 0x40098000, 18, 1 >();
   // Release SPI Chip Select
   constexpr auto USART0_CR_SPI_MODE_RCS = hr::field_mask_literal< 0x40098000, 19, 1 >();

// MR
   // USART Mode of Operation
   constexpr auto USART0_MR_USART_MODE_Msk = hr::field_mask_literal< 0x40098004, 0, 4 >();
      // Normal mode
      constexpr auto USART0_MR_USART_MODE_NORMAL = hr::field_value_literal< 0x40098004, 0, 4 >( 0 );
      // RS485
      constexpr auto USART0_MR_USART_MODE_RS485 = hr::field_value_literal< 0x40098004, 0, 4 >( 1 );
      // Hardware Handshaking
      constexpr auto USART0_MR_USART_MODE_HW_HANDSHAKING = hr::field_value_literal< 0x40098004, 0, 4 >( 2 );
      // IS07816 Protocol: T = 0
      constexpr auto USART0_MR_USART_MODE_IS07816_T_0 = hr::field_value_literal< 0x40098004, 0, 4 >( 4 );
      // IS07816 Protocol: T = 1
      constexpr auto USART0_MR_USART_MODE_IS07816_T_1 = hr::field_value_literal< 0x40098004, 0, 4 >( 6 );
      // IrDA
      constexpr auto USART0_MR_USART_MODE_IRDA = hr::field_value_literal< 0x40098004, 0, 4 >( 8 );
      // LIN Master
      constexpr auto USART0_MR_USART_MODE_LIN_MASTER = hr::field_value_literal< 0x40098004, 0, 4 >( 10 );
      // LIN Slave
      constexpr auto USART0_MR_USART_MODE_LIN_SLAVE = hr::field_value_literal< 0x40098004, 0, 4 >( 11 );
      // SPI Master
      constexpr auto USART0_MR_USART_MODE_SPI_MASTER = hr::field_value_literal< 0x40098004, 0, 4 >( 14 );
      // SPI Slave
      constexpr auto USART0_MR_USART_MODE_SPI_SLAVE = hr::field_value_literal< 0x40098004, 0, 4 >( 15 );
   // Clock Selection
   constexpr auto USART0_MR_USCLKS_Msk = hr::field_mask_literal< 0x40098004, 4, 2 >();
      // Master Clock MCK is selected
      constexpr auto USART0_MR_USCLKS_MCK = hr::field_value_literal< 0x40098004, 4, 2 >( 0 );
      // Internal Clock Divided MCK/DIV (DIV=8) is selected
      constexpr auto USART0_MR_USCLKS_DIV = hr::field_value_literal< 0x40098004, 4, 2 >( 1 );
      // Serial Clock SLK is selected
      constexpr auto USART0_MR_USCLKS_SCK = hr::field_value_literal< 0x40098004, 4, 2 >( 3 );
   // Character Length.
   constexpr auto USART0_MR_CHRL_Msk = hr::field_mask_literal< 0x40098004, 6, 2 >();
      // Character length is 5 bits
      constexpr auto USART0_MR_CHRL_5_BIT = hr::field_value_literal< 0x40098004, 6, 2 >( 0 );
      // Character length is 6 bits
      constexpr auto USART0_MR_CHRL_6_BIT = hr::field_value_literal< 0x40098004, 6, 2 >( 1 );
      // Character length is 7 bits
      constexpr auto USART0_MR_CHRL_7_BIT = hr::field_value_literal< 0x40098004, 6, 2 >( 2 );
      // Character length is 8 bits
      constexpr auto USART0_MR_CHRL_8_BIT = hr::field_value_literal< 0x40098004, 6, 2 >( 3 );
   // Synchronous Mode Select
   constexpr auto USART0_MR_SYNC = hr::field_mask_literal< 0x40098004, 8, 1 >();
   // Parity Type
   constexpr auto USART0_MR_PAR_Msk = hr::field_mask_literal< 0x40098004, 9, 3 >();
      // Even parity
      constexpr auto USART0_MR_PAR_EVEN = hr::field_value_literal< 0x40098004, 9, 3 >( 0 );
      // Odd parity
      constexpr auto USART0_MR_PAR_ODD = hr::field_value_literal< 0x40098004, 9, 3 >( 1 );
      // Parity forced to 0 (Space)
      constexpr auto USART0_MR_PAR_SPACE = hr::field_value_literal< 0x40098004, 9, 3 >( 2 );
      // Parity forced to 1 (Mark)
      constexpr auto USART0_MR_PAR_MARK = hr::field_value_literal< 0x40098004, 9, 3 >( 3 );
      // No parity
      constexpr auto USART0_MR_PAR_NO = hr::field_value_literal< 0x40098004, 9, 3 >( 4 );
      // Multidrop mode
      constexpr auto USART0_MR_PAR_MULTIDROP = hr::field_value_literal< 0x40098004, 9, 3 >( 6 );
   // Number of Stop Bits
   constexpr auto USART0_MR_NBSTOP_Msk = hr::field_mask_literal< 0x40098004, 12, 2 >();
      // 1 stop bit
      constexpr auto USART0_MR_NBSTOP_1_BIT = hr::field_value_literal< 0x40098004, 12, 2 >( 0 );
      // 1.5 stop bit (SYNC = 0) or reserved (SYNC = 1)
      constexpr auto USART0_MR_NBSTOP_1_5_BIT = hr::field_value_literal< 0x40098004, 12, 2 >( 1 );
      // 2 stop bits
      constexpr auto USART0_MR_NBSTOP_2_BIT = hr::field_value_literal< 0x40098004, 12, 2 >( 2 );
   // Channel Mode
   constexpr auto USART0_MR_CHMODE_Msk = hr::field_mask_literal< 0x40098004, 14, 2 >();
      // Normal Mode
      constexpr auto USART0_MR_CHMODE_NORMAL = hr::field_value_literal< 0x40098004, 14, 2 >( 0 );
      // Automatic Echo. Receiver input is connected to the TXD pin.
      constexpr auto USART0_MR_CHMODE_AUTOMATIC = hr::field_value_literal< 0x40098004, 14, 2 >( 1 );
      // Local Loopback. Transmitter output is connected to the Receiver Input.
      constexpr auto USART0_MR_CHMODE_LOCAL_LOOPBACK = hr::field_value_literal< 0x40098004, 14, 2 >( 2 );
      // Remote Loopback. RXD pin is internally connected to the TXD pin.
      constexpr auto USART0_MR_CHMODE_REMOTE_LOOPBACK = hr::field_value_literal< 0x40098004, 14, 2 >( 3 );
   // Bit Order
   constexpr auto USART0_MR_MSBF = hr::field_mask_literal< 0x40098004, 16, 1 >();
   // 9-bit Character Length
   constexpr auto USART0_MR_MODE9 = hr::field_mask_literal< 0x40098004, 17, 1 >();
   // Clock Output Select
   constexpr auto USART0_MR_CLKO = hr::field_mask_literal< 0x40098004, 18, 1 >();
   // Oversampling Mode
   constexpr auto USART0_MR_OVER = hr::field_mask_literal< 0x40098004, 19, 1 >();
   // Inhibit Non Acknowledge
   constexpr auto USART0_MR_INACK = hr::field_mask_literal< 0x40098004, 20, 1 >();
   // Disable Successive NACK
   constexpr auto USART0_MR_DSNACK = hr::field_mask_literal< 0x40098004, 21, 1 >();
   // Variable Synchronization of Command/Data Sync Start Frame Delimiter
   constexpr auto USART0_MR_VAR_SYNC = hr::field_mask_literal< 0x40098004, 22, 1 >();
   // INverted Data
   constexpr auto USART0_MR_INVDATA = hr::field_mask_literal< 0x40098004, 23, 1 >();
   // Maximum Number of Automatic Iteration
   constexpr auto USART0_MR_MAX_ITERATION_Msk = hr::field_mask_literal< 0x40098004, 24, 3 >();
   // Infrared Receive Line Filter
   constexpr auto USART0_MR_FILTER = hr::field_mask_literal< 0x40098004, 28, 1 >();
   // Manchester Encoder/Decoder Enable
   constexpr auto USART0_MR_MAN = hr::field_mask_literal< 0x40098004, 29, 1 >();
   // Manchester Synchronization Mode
   constexpr auto USART0_MR_MODSYNC = hr::field_mask_literal< 0x40098004, 30, 1 >();
   // Start Frame Delimiter Selector
   constexpr auto USART0_MR_ONEBIT = hr::field_mask_literal< 0x40098004, 31, 1 >();

// MR_SPI_MODE
   // USART Mode of Operation
   constexpr auto USART0_MR_SPI_MODE_USART_MODE_Msk = hr::field_mask_literal< 0x40098004, 0, 4 >();
      // SPI Master
      constexpr auto USART0_MR_SPI_MODE_USART_MODE_SPI_MASTER = hr::field_value_literal< 0x40098004, 0, 4 >( 14 );
      // SPI Slave
      constexpr auto USART0_MR_SPI_MODE_USART_MODE_SPI_SLAVE = hr::field_value_literal< 0x40098004, 0, 4 >( 15 );
   // Clock Selection
   constexpr auto USART0_MR_SPI_MODE_USCLKS_Msk = hr::field_mask_literal< 0x40098004, 4, 2 >();
      // Master Clock MCK is selected
      constexpr auto USART0_MR_SPI_MODE_USCLKS_MCK = hr::field_value_literal< 0x40098004, 4, 2 >( 0 );
      // Internal Clock Divided MCK/DIV (DIV=8) is selected
      constexpr auto USART0_MR_SPI_MODE_USCLKS_DIV = hr::field_value_literal< 0x40098004, 4, 2 >( 1 );
      // Serial Clock SLK is selected
      constexpr auto USART0_MR_SPI_MODE_USCLKS_SCK = hr::field_value_literal< 0x40098004, 4, 2 >( 3 );
   // Character Length.
   constexpr auto USART0_MR_SPI_MODE_CHRL_Msk = hr::field_mask_literal< 0x40098004, 6, 2 >();
      // Character length is 8 bits
      constexpr auto USART0_MR_SPI_MODE_CHRL_8_BIT = hr::field_value_literal< 0x40098004, 6, 2 >( 3 );
   // SPI Clock Phase
   constexpr auto USART0_MR_SPI_MODE_CPHA = hr::field_mask_literal< 0x40098004, 8, 1 >();
   // SPI Clock Polarity
   constexpr auto USART0_MR_SPI_MODE_CPOL = hr::field_mask_literal< 0x40098004, 16, 1 >();
   // Wait Read Data Before Transfer
   constexpr auto USART0_MR_SPI_MODE_WRDBT = hr::field_mask_literal< 0x40098004, 20, 1 >();

// IER
   // RXRDY Interrupt Enable
   constexpr auto USART0_IER_RXRDY = hr::field_mask_literal< 0x40098008, 0, 1 >();
   // TXRDY Interrupt Enable
   constexpr auto USART0_IER_TXRDY = hr::field_mask_literal< 0x40098008, 1, 1 >();
   // Receiver Break Interrupt Enable
   constexpr auto USART0_IER_RXBRK = hr::field_mask_literal< 0x40098008, 2, 1 >();
   // End of Receive Transfer Interrupt Enable (available in all USART modes of operation)
   constexpr auto USART0_IER_ENDRX = hr::field_mask_literal< 0x40098008, 3, 1 >();
   // End of Transmit Interrupt Enable (available in all USART modes of operation)
   constexpr auto USART0_IER_ENDTX = hr::field_mask_literal< 0x40098008, 4, 1 >();
   // Overrun Error Interrupt Enable
   constexpr auto USART0_IER_OVRE = hr::field_mask_literal< 0x40098008, 5, 1 >();
   // Framing Error Interrupt Enable
   constexpr auto USART0_IER_FRAME = hr::field_mask_literal< 0x40098008, 6, 1 >();
   // Parity Error Interrupt Enable
   constexpr auto USART0_IER_PARE = hr::field_mask_literal< 0x40098008, 7, 1 >();
   // Time-out Interrupt Enable
   constexpr auto USART0_IER_TIMEOUT = hr::field_mask_literal< 0x40098008, 8, 1 >();
   // TXEMPTY Interrupt Enable
   constexpr auto USART0_IER_TXEMPTY = hr::field_mask_literal< 0x40098008, 9, 1 >();
   // Max number of Repetitions Reached Interrupt Enable
   constexpr auto USART0_IER_ITER = hr::field_mask_literal< 0x40098008, 10, 1 >();
   // Buffer Empty Interrupt Enable (available in all USART modes of operation)
   constexpr auto USART0_IER_TXBUFE = hr::field_mask_literal< 0x40098008, 11, 1 >();
   // Buffer Full Interrupt Enable (available in all USART modes of operation)
   constexpr auto USART0_IER_RXBUFF = hr::field_mask_literal< 0x40098008, 12, 1 >();
   // Non Acknowledge Interrupt Enable
   constexpr auto USART0_IER_NACK = hr::field_mask_literal< 0x40098008, 13, 1 >();
   // Clear to Send Input Change Interrupt Enable
   constexpr auto USART0_IER_CTSIC = hr::field_mask_literal< 0x40098008, 19, 1 >();
   // Manchester Error Interrupt Enable
   constexpr auto USART0_IER_MANE = hr::field_mask_literal< 0x40098008, 24, 1 >();

// IER_SPI_MODE
   // RXRDY Interrupt Enable
   constexpr auto USART0_IER_SPI_MODE_RXRDY = hr::field_mask_literal< 0x40098008, 0, 1 >();
   // TXRDY Interrupt Enable
   constexpr auto USART0_IER_SPI_MODE_TXRDY = hr::field_mask_literal< 0x40098008, 1, 1 >();
   // Overrun Error Interrupt Enable
   constexpr auto USART0_IER_SPI_MODE_OVRE = hr::field_mask_literal< 0x40098008, 5, 1 >();
   // TXEMPTY Interrupt Enable
   constexpr auto USART0_IER_SPI_MODE_TXEMPTY = hr::field_mask_literal< 0x40098008, 9, 1 >();
   // SPI Underrun Error Interrupt Enable
   constexpr auto USART0_IER_SPI_MODE_UNRE = hr::field_mask_literal< 0x40098008, 10, 1 >();

// IER_LIN_MODE
   // RXRDY Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_RXRDY = hr::field_mask_literal< 0x40098008, 0, 1 >();
   // TXRDY Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_TXRDY = hr::field_mask_literal< 0x40098008, 1, 1 >();
   // Overrun Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_OVRE = hr::field_mask_literal< 0x40098008, 5, 1 >();
   // Framing Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_FRAME = hr::field_mask_literal< 0x40098008, 6, 1 >();
   // Parity Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_PARE = hr::field_mask_literal< 0x40098008, 7, 1 >();
   // Time-out Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_TIMEOUT = hr::field_mask_literal< 0x40098008, 8, 1 >();
   // TXEMPTY Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_TXEMPTY = hr::field_mask_literal< 0x40098008, 9, 1 >();
   // LIN Break Sent or LIN Break Received Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINBK = hr::field_mask_literal< 0x40098008, 13, 1 >();
   // LIN Identifier Sent or LIN Identifier Received Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINID = hr::field_mask_literal< 0x40098008, 14, 1 >();
   // LIN Transfer Completed Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINTC = hr::field_mask_literal< 0x40098008, 15, 1 >();
   // LIN Bus Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINBE = hr::field_mask_literal< 0x40098008, 25, 1 >();
   // LIN Inconsistent Synch Field Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINISFE = hr::field_mask_literal< 0x40098008, 26, 1 >();
   // LIN Identifier Parity Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINIPE = hr::field_mask_literal< 0x40098008, 27, 1 >();
   // LIN Checksum Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINCE = hr::field_mask_literal< 0x40098008, 28, 1 >();
   // LIN Slave Not Responding Error Interrupt Enable
   constexpr auto USART0_IER_LIN_MODE_LINSNRE = hr::field_mask_literal< 0x40098008, 29, 1 >();

// IDR
   // RXRDY Interrupt Disable
   constexpr auto USART0_IDR_RXRDY = hr::field_mask_literal< 0x4009800c, 0, 1 >();
   // TXRDY Interrupt Disable
   constexpr auto USART0_IDR_TXRDY = hr::field_mask_literal< 0x4009800c, 1, 1 >();
   // Receiver Break Interrupt Disable
   constexpr auto USART0_IDR_RXBRK = hr::field_mask_literal< 0x4009800c, 2, 1 >();
   // End of Receive Transfer Interrupt Disable (available in all USART modes of operation)
   constexpr auto USART0_IDR_ENDRX = hr::field_mask_literal< 0x4009800c, 3, 1 >();
   // End of Transmit Interrupt Disable (available in all USART modes of operation)
   constexpr auto USART0_IDR_ENDTX = hr::field_mask_literal< 0x4009800c, 4, 1 >();
   // Overrun Error Interrupt Enable
   constexpr auto USART0_IDR_OVRE = hr::field_mask_literal< 0x4009800c, 5, 1 >();
   // Framing Error Interrupt Disable
   constexpr auto USART0_IDR_FRAME = hr::field_mask_literal< 0x4009800c, 6, 1 >();
   // Parity Error Interrupt Disable
   constexpr auto USART0_IDR_PARE = hr::field_mask_literal< 0x4009800c, 7, 1 >();
   // Time-out Interrupt Disable
   constexpr auto USART0_IDR_TIMEOUT = hr::field_mask_literal< 0x4009800c, 8, 1 >();
   // TXEMPTY Interrupt Disable
   constexpr auto USART0_IDR_TXEMPTY = hr::field_mask_literal< 0x4009800c, 9, 1 >();
   // Max number of Repetitions Reached Interrupt Disable
   constexpr auto USART0_IDR_ITER = hr::field_mask_literal< 0x4009800c, 10, 1 >();
   // Buffer Empty Interrupt Disable (available in all USART modes of operation)
   constexpr auto USART0_IDR_TXBUFE = hr::field_mask_literal< 0x4009800c, 11, 1 >();
   // Buffer Full Interrupt Disable (available in all USART modes of operation)
   constexpr auto USART0_IDR_RXBUFF = hr::field_mask_literal< 0x4009800c, 12, 1 >();
   // Non Acknowledge Interrupt Disable
   constexpr auto USART0_IDR_NACK = hr::field_mask_literal< 0x4009800c, 13, 1 >();
   // Clear to Send Input Change Interrupt Disable
   constexpr auto USART0_IDR_CTSIC = hr::field_mask_literal< 0x4009800c, 19, 1 >();
   // Manchester Error Interrupt Disable
   constexpr auto USART0_IDR_MANE = hr::field_mask_literal< 0x4009800c, 24, 1 >();

// IDR_SPI_MODE
   // RXRDY Interrupt Disable
   constexpr auto USART0_IDR_SPI_MODE_RXRDY = hr::field_mask_literal< 0x4009800c, 0, 1 >();
   // TXRDY Interrupt Disable
   constexpr auto USART0_IDR_SPI_MODE_TXRDY = hr::field_mask_literal< 0x4009800c, 1, 1 >();
   // Overrun Error Interrupt Disable
   constexpr auto USART0_IDR_SPI_MODE_OVRE = hr::field_mask_literal< 0x4009800c, 5, 1 >();
   // TXEMPTY Interrupt Disable
   constexpr auto USART0_IDR_SPI_MODE_TXEMPTY = hr::field_mask_literal< 0x4009800c, 9, 1 >();
   // SPI Underrun Error Interrupt Disable
   constexpr auto USART0_IDR_SPI_MODE_UNRE = hr::field_mask_literal< 0x4009800c, 10, 1 >();

// IDR_LIN_MODE
   // RXRDY Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_RXRDY = hr::field_mask_literal< 0x4009800c, 0, 1 >();
   // TXRDY Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_TXRDY = hr::field_mask_literal< 0x4009800c, 1, 1 >();
   // Overrun Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_OVRE = hr::field_mask_literal< 0x4009800c, 5, 1 >();
   // Framing Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_FRAME = hr::field_mask_literal< 0x4009800c, 6, 1 >();
   // Parity Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_PARE = hr::field_mask_literal< 0x4009800c, 7, 1 >();
   // Time-out Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_TIMEOUT = hr::field_mask_literal< 0x4009800c, 8, 1 >();
   // TXEMPTY Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_TXEMPTY = hr::field_mask_literal< 0x4009800c, 9, 1 >();
   // LIN Break Sent or LIN Break Received Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINBK = hr::field_mask_literal< 0x4009800c, 13, 1 >();
   // LIN Identifier Sent or LIN Identifier Received Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINID = hr::field_mask_literal< 0x4009800c, 14, 1 >();
   // LIN Transfer Completed Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINTC = hr::field_mask_literal< 0x4009800c, 15, 1 >();
   // LIN Bus Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINBE = hr::field_mask_literal< 0x4009800c, 25, 1 >();
   // LIN Inconsistent Synch Field Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINISFE = hr::field_mask_literal< 0x4009800c, 26, 1 >();
   // LIN Identifier Parity Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINIPE = hr::field_mask_literal< 0x4009800c, 27, 1 >();
   // LIN Checksum Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINCE = hr::field_mask_literal< 0x4009800c, 28, 1 >();
   // LIN Slave Not Responding Error Interrupt Disable
   constexpr auto USART0_IDR_LIN_MODE_LINSNRE = hr::field_mask_literal< 0x4009800c, 29, 1 >();

// IMR
   // RXRDY Interrupt Mask
   constexpr auto USART0_IMR_RXRDY = hr::field_mask_literal< 0x40098010, 0, 1 >();
   // TXRDY Interrupt Mask
   constexpr auto USART0_IMR_TXRDY = hr::field_mask_literal< 0x40098010, 1, 1 >();
   // Receiver Break Interrupt Mask
   constexpr auto USART0_IMR_RXBRK = hr::field_mask_literal< 0x40098010, 2, 1 >();
   // End of Receive Transfer Interrupt Mask (available in all USART modes of operation)
   constexpr auto USART0_IMR_ENDRX = hr::field_mask_literal< 0x40098010, 3, 1 >();
   // End of Transmit Interrupt Mask (available in all USART modes of operation)
   constexpr auto USART0_IMR_ENDTX = hr::field_mask_literal< 0x40098010, 4, 1 >();
   // Overrun Error Interrupt Mask
   constexpr auto USART0_IMR_OVRE = hr::field_mask_literal< 0x40098010, 5, 1 >();
   // Framing Error Interrupt Mask
   constexpr auto USART0_IMR_FRAME = hr::field_mask_literal< 0x40098010, 6, 1 >();
   // Parity Error Interrupt Mask
   constexpr auto USART0_IMR_PARE = hr::field_mask_literal< 0x40098010, 7, 1 >();
   // Time-out Interrupt Mask
   constexpr auto USART0_IMR_TIMEOUT = hr::field_mask_literal< 0x40098010, 8, 1 >();
   // TXEMPTY Interrupt Mask
   constexpr auto USART0_IMR_TXEMPTY = hr::field_mask_literal< 0x40098010, 9, 1 >();
   // Max number of Repetitions Reached Interrupt Mask
   constexpr auto USART0_IMR_ITER = hr::field_mask_literal< 0x40098010, 10, 1 >();
   // Buffer Empty Interrupt Mask (available in all USART modes of operation)
   constexpr auto USART0_IMR_TXBUFE = hr::field_mask_literal< 0x40098010, 11, 1 >();
   // Buffer Full Interrupt Mask (available in all USART modes of operation)
   constexpr auto USART0_IMR_RXBUFF = hr::field_mask_literal< 0x40098010, 12, 1 >();
   // Non Acknowledge Interrupt Mask
   constexpr auto USART0_IMR_NACK = hr::field_mask_literal< 0x40098010, 13, 1 >();
   // Clear to Send Input Change Interrupt Mask
   constexpr auto USART0_IMR_CTSIC = hr::field_mask_literal< 0x40098010, 19, 1 >();
   // Manchester Error Interrupt Mask
   constexpr auto USART0_IMR_MANE = hr::field_mask_literal< 0x40098010, 24, 1 >();

// IMR_SPI_MODE
   // RXRDY Interrupt Mask
   constexpr auto USART0_IMR_SPI_MODE_RXRDY = hr::field_mask_literal< 0x40098010, 0, 1 >();
   // TXRDY Interrupt Mask
   constexpr auto USART0_IMR_SPI_MODE_TXRDY = hr::field_mask_literal< 0x40098010, 1, 1 >();
   // Overrun Error Interrupt Mask
   constexpr auto USART0_IMR_SPI_MODE_OVRE = hr::field_mask_literal< 0x40098010, 5, 1 >();
   // TXEMPTY Interrupt Mask
   constexpr auto USART0_IMR_SPI_MODE_TXEMPTY = hr::field_mask_literal< 0x40098010, 9, 1 >();
   // SPI Underrun Error Interrupt Mask
   constexpr auto USART0_IMR_SPI_MODE_UNRE = hr::field_mask_literal< 0x40098010, 10, 1 >();

// IMR_LIN_MODE
   // RXRDY Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_RXRDY = hr::field_mask_literal< 0x40098010, 0, 1 >();
   // TXRDY Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_TXRDY = hr::field_mask_literal< 0x40098010, 1, 1 >();
   // Overrun Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_OVRE = hr::field_mask_literal< 0x40098010, 5, 1 >();
   // Framing Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_FRAME = hr::field_mask_literal< 0x40098010, 6, 1 >();
   // Parity Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_PARE = hr::field_mask_literal< 0x40098010, 7, 1 >();
   // Time-out Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_TIMEOUT = hr::field_mask_literal< 0x40098010, 8, 1 >();
   // TXEMPTY Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_TXEMPTY = hr::field_mask_literal< 0x40098010, 9, 1 >();
   // LIN Break Sent or LIN Break Received Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINBK = hr::field_mask_literal< 0x40098010, 13, 1 >();
   // LIN Identifier Sent or LIN Identifier Received Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINID = hr::field_mask_literal< 0x40098010, 14, 1 >();
   // LIN Transfer Completed Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINTC = hr::field_mask_literal< 0x40098010, 15, 1 >();
   // LIN Bus Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINBE = hr::field_mask_literal< 0x40098010, 25, 1 >();
   // LIN Inconsistent Synch Field Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINISFE = hr::field_mask_literal< 0x40098010, 26, 1 >();
   // LIN Identifier Parity Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINIPE = hr::field_mask_literal< 0x40098010, 27, 1 >();
   // LIN Checksum Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINCE = hr::field_mask_literal< 0x40098010, 28, 1 >();
   // LIN Slave Not Responding Error Interrupt Mask
   constexpr auto USART0_IMR_LIN_MODE_LINSNRE = hr::field_mask_literal< 0x40098010, 29, 1 >();

// CSR
   // Receiver Ready
   constexpr auto USART0_CSR_RXRDY = hr::field_mask_literal< 0x40098014, 0, 1 >();
   // Transmitter Ready
   constexpr auto USART0_CSR_TXRDY = hr::field_mask_literal< 0x40098014, 1, 1 >();
   // Break Received/End of Break
   constexpr auto USART0_CSR_RXBRK = hr::field_mask_literal< 0x40098014, 2, 1 >();
   // End of Receiver Transfer
   constexpr auto USART0_CSR_ENDRX = hr::field_mask_literal< 0x40098014, 3, 1 >();
   // End of Transmitter Transfer
   constexpr auto USART0_CSR_ENDTX = hr::field_mask_literal< 0x40098014, 4, 1 >();
   // Overrun Error
   constexpr auto USART0_CSR_OVRE = hr::field_mask_literal< 0x40098014, 5, 1 >();
   // Framing Error
   constexpr auto USART0_CSR_FRAME = hr::field_mask_literal< 0x40098014, 6, 1 >();
   // Parity Error
   constexpr auto USART0_CSR_PARE = hr::field_mask_literal< 0x40098014, 7, 1 >();
   // Receiver Time-out
   constexpr auto USART0_CSR_TIMEOUT = hr::field_mask_literal< 0x40098014, 8, 1 >();
   // Transmitter Empty
   constexpr auto USART0_CSR_TXEMPTY = hr::field_mask_literal< 0x40098014, 9, 1 >();
   // Max number of Repetitions Reached
   constexpr auto USART0_CSR_ITER = hr::field_mask_literal< 0x40098014, 10, 1 >();
   // Transmission Buffer Empty
   constexpr auto USART0_CSR_TXBUFE = hr::field_mask_literal< 0x40098014, 11, 1 >();
   // Reception Buffer Full
   constexpr auto USART0_CSR_RXBUFF = hr::field_mask_literal< 0x40098014, 12, 1 >();
   // Non Acknowledge Interrupt
   constexpr auto USART0_CSR_NACK = hr::field_mask_literal< 0x40098014, 13, 1 >();
   // Clear to Send Input Change Flag
   constexpr auto USART0_CSR_CTSIC = hr::field_mask_literal< 0x40098014, 19, 1 >();
   // Image of CTS Input
   constexpr auto USART0_CSR_CTS = hr::field_mask_literal< 0x40098014, 23, 1 >();
   // Manchester Error
   constexpr auto USART0_CSR_MANERR = hr::field_mask_literal< 0x40098014, 24, 1 >();

// CSR_SPI_MODE
   // Receiver Ready
   constexpr auto USART0_CSR_SPI_MODE_RXRDY = hr::field_mask_literal< 0x40098014, 0, 1 >();
   // Transmitter Ready
   constexpr auto USART0_CSR_SPI_MODE_TXRDY = hr::field_mask_literal< 0x40098014, 1, 1 >();
   // Overrun Error
   constexpr auto USART0_CSR_SPI_MODE_OVRE = hr::field_mask_literal< 0x40098014, 5, 1 >();
   // Transmitter Empty
   constexpr auto USART0_CSR_SPI_MODE_TXEMPTY = hr::field_mask_literal< 0x40098014, 9, 1 >();
   // Underrun Error
   constexpr auto USART0_CSR_SPI_MODE_UNRE = hr::field_mask_literal< 0x40098014, 10, 1 >();

// CSR_LIN_MODE
   // Receiver Ready
   constexpr auto USART0_CSR_LIN_MODE_RXRDY = hr::field_mask_literal< 0x40098014, 0, 1 >();
   // Transmitter Ready
   constexpr auto USART0_CSR_LIN_MODE_TXRDY = hr::field_mask_literal< 0x40098014, 1, 1 >();
   // Overrun Error
   constexpr auto USART0_CSR_LIN_MODE_OVRE = hr::field_mask_literal< 0x40098014, 5, 1 >();
   // Framing Error
   constexpr auto USART0_CSR_LIN_MODE_FRAME = hr::field_mask_literal< 0x40098014, 6, 1 >();
   // Parity Error
   constexpr auto USART0_CSR_LIN_MODE_PARE = hr::field_mask_literal< 0x40098014, 7, 1 >();
   // Receiver Time-out
   constexpr auto USART0_CSR_LIN_MODE_TIMEOUT = hr::field_mask_literal< 0x40098014, 8, 1 >();
   // Transmitter Empty
   constexpr auto USART0_CSR_LIN_MODE_TXEMPTY = hr::field_mask_literal< 0x40098014, 9, 1 >();
   // LIN Break Sent or LIN Break Received
   constexpr auto USART0_CSR_LIN_MODE_LINBK = hr::field_mask_literal< 0x40098014, 13, 1 >();
   // LIN Identifier Sent or LIN Identifier Received
   constexpr auto USART0_CSR_LIN_MODE_LINID = hr::field_mask_literal< 0x40098014, 14, 1 >();
   // LIN Transfer Completed
   constexpr auto USART0_CSR_LIN_MODE_LINTC = hr::field_mask_literal< 0x40098014, 15, 1 >();
   // LIN Bus Line Status
   constexpr auto USART0_CSR_LIN_MODE_LINBLS = hr::field_mask_literal< 0x40098014, 23, 1 >();
   // LIN Bit Error
   constexpr auto USART0_CSR_LIN_MODE_LINBE = hr::field_mask_literal< 0x40098014, 25, 1 >();
   // LIN Inconsistent Synch Field Error
   constexpr auto USART0_CSR_LIN_MODE_LINISFE = hr::field_mask_literal< 0x40098014, 26, 1 >();
   // LIN Identifier Parity Error
   constexpr auto USART0_CSR_LIN_MODE_LINIPE = hr::field_mask_literal< 0x40098014, 27, 1 >();
   // LIN Checksum Error
   constexpr auto USART0_CSR_LIN_MODE_LINCE = hr::field_mask_literal< 0x40098014, 28, 1 >();
   // LIN Slave Not Responding Error
   constexpr auto USART0_CSR_LIN_MODE_LINSNRE = hr::field_mask_literal< 0x40098014, 29, 1 >();

// RHR
   // Received Character
   constexpr auto USART0_RHR_RXCHR_Msk = hr::field_mask_literal< 0x40098018, 0, 9 >();
   // Received Sync
   constexpr auto USART0_RHR_RXSYNH = hr::field_mask_literal< 0x40098018, 15, 1 >();

// THR
   // Character to be Transmitted
   constexpr auto USART0_THR_TXCHR_Msk = hr::field_mask_literal< 0x4009801c, 0, 9 >();
   // Sync Field to be transmitted
   constexpr auto USART0_THR_TXSYNH = hr::field_mask_literal< 0x4009801c, 15, 1 >();

// BRGR
   // Clock Divider
   constexpr auto USART0_BRGR_CD_Msk = hr::field_mask_literal< 0x40098020, 0, 16 >();
   // Fractional Part
   constexpr auto USART0_BRGR_FP_Msk = hr::field_mask_literal< 0x40098020, 16, 3 >();

// RTOR
   // Time-out Value
   constexpr auto USART0_RTOR_TO_Msk = hr::field_mask_literal< 0x40098024, 0, 17 >();

// TTGR
   // Timeguard Value
   constexpr auto USART0_TTGR_TG_Msk = hr::field_mask_literal< 0x40098028, 0, 8 >();

// FIDI
   // FI Over DI Ratio Value
   constexpr auto USART0_FIDI_FI_DI_RATIO_Msk = hr::field_mask_literal< 0x40098040, 0, 11 >();

// NER
   // Number of Errors
   constexpr auto USART0_NER_NB_ERRORS_Msk = hr::field_mask_literal< 0x40098044, 0, 8 >();

// IF
   // IrDA Filter
   constexpr auto USART0_IF_IRDA_FILTER_Msk = hr::field_mask_literal< 0x4009804c, 0, 8 >();

// MAN
   // Transmitter Preamble Length
   constexpr auto USART0_MAN_TX_PL_Msk = hr::field_mask_literal< 0x40098050, 0, 4 >();
   // Transmitter Preamble Pattern
   constexpr auto USART0_MAN_TX_PP_Msk = hr::field_mask_literal< 0x40098050, 8, 2 >();
      // The preamble is composed of '1's
      constexpr auto USART0_MAN_TX_PP_ALL_ONE = hr::field_value_literal< 0x40098050, 8, 2 >( 0 );
      // The preamble is composed of '0's
      constexpr auto USART0_MAN_TX_PP_ALL_ZERO = hr::field_value_literal< 0x40098050, 8, 2 >( 1 );
      // The preamble is composed of '01's
      constexpr auto USART0_MAN_TX_PP_ZERO_ONE = hr::field_value_literal< 0x40098050, 8, 2 >( 2 );
      // The preamble is composed of '10's
      constexpr auto USART0_MAN_TX_PP_ONE_ZERO = hr::field_value_literal< 0x40098050, 8, 2 >( 3 );
   // Transmitter Manchester Polarity
   constexpr auto USART0_MAN_TX_MPOL = hr::field_mask_literal< 0x40098050, 12, 1 >();
   // Receiver Preamble Length
   constexpr auto USART0_MAN_RX_PL_Msk = hr::field_mask_literal< 0x40098050, 16, 4 >();
   // Receiver Preamble Pattern detected
   constexpr auto USART0_MAN_RX_PP_Msk = hr::field_mask_literal< 0x40098050, 24, 2 >();
      // The preamble is composed of '1's
      constexpr auto USART0_MAN_RX_PP_ALL_ONE = hr::field_value_literal< 0x40098050, 24, 2 >( 0 );
      // The preamble is composed of '0's
      constexpr auto USART0_MAN_RX_PP_ALL_ZERO = hr::field_value_literal< 0x40098050, 24, 2 >( 1 );
      // The preamble is composed of '01's
      constexpr auto USART0_MAN_RX_PP_ZERO_ONE = hr::field_value_literal< 0x40098050, 24, 2 >( 2 );
      // The preamble is composed of '10's
      constexpr auto USART0_MAN_RX_PP_ONE_ZERO = hr::field_value_literal< 0x40098050, 24, 2 >( 3 );
   // Receiver Manchester Polarity
   constexpr auto USART0_MAN_RX_MPOL = hr::field_mask_literal< 0x40098050, 28, 1 >();
   // Must Be Set to 1
   constexpr auto USART0_MAN_ONE = hr::field_mask_literal< 0x40098050, 29, 1 >();
   // Drift compensation
   constexpr auto USART0_MAN_DRIFT = hr::field_mask_literal< 0x40098050, 30, 1 >();

// LINMR
   // LIN Node Action
   constexpr auto USART0_LINMR_NACT_Msk = hr::field_mask_literal< 0x40098054, 0, 2 >();
      // The USART transmits the response.
      constexpr auto USART0_LINMR_NACT_PUBLISH = hr::field_value_literal< 0x40098054, 0, 2 >( 0 );
      // The USART receives the response.
      constexpr auto USART0_LINMR_NACT_SUBSCRIBE = hr::field_value_literal< 0x40098054, 0, 2 >( 1 );
      // The USART does not transmit and does not receive the response.
      constexpr auto USART0_LINMR_NACT_IGNORE = hr::field_value_literal< 0x40098054, 0, 2 >( 2 );
   // Parity Disable
   constexpr auto USART0_LINMR_PARDIS = hr::field_mask_literal< 0x40098054, 2, 1 >();
   // Checksum Disable
   constexpr auto USART0_LINMR_CHKDIS = hr::field_mask_literal< 0x40098054, 3, 1 >();
   // Checksum Type
   constexpr auto USART0_LINMR_CHKTYP = hr::field_mask_literal< 0x40098054, 4, 1 >();
   // Data Length Mode
   constexpr auto USART0_LINMR_DLM = hr::field_mask_literal< 0x40098054, 5, 1 >();
   // Frame Slot Mode Disable
   constexpr auto USART0_LINMR_FSDIS = hr::field_mask_literal< 0x40098054, 6, 1 >();
   // Wakeup Signal Type
   constexpr auto USART0_LINMR_WKUPTYP = hr::field_mask_literal< 0x40098054, 7, 1 >();
   // Data Length Control
   constexpr auto USART0_LINMR_DLC_Msk = hr::field_mask_literal< 0x40098054, 8, 8 >();
   // PDC Mode
   constexpr auto USART0_LINMR_PDCM = hr::field_mask_literal< 0x40098054, 16, 1 >();

// LINIR
   // Identifier Character
   constexpr auto USART0_LINIR_IDCHR_Msk = hr::field_mask_literal< 0x40098058, 0, 8 >();

// WPMR
   // Write Protect Enable
   constexpr auto USART0_WPMR_WPEN = hr::field_mask_literal< 0x400980e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto USART0_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400980e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto USART0_WPSR_WPVS = hr::field_mask_literal< 0x400980e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto USART0_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400980e8, 8, 16 >();

// RPR
   // Receive Pointer Register
   constexpr auto USART0_RPR_RXPTR_Msk = hr::field_mask_literal< 0x40098100, 0, 32 >();

// RCR
   // Receive Counter Register
   constexpr auto USART0_RCR_RXCTR_Msk = hr::field_mask_literal< 0x40098104, 0, 16 >();

// TPR
   // Transmit Counter Register
   constexpr auto USART0_TPR_TXPTR_Msk = hr::field_mask_literal< 0x40098108, 0, 32 >();

// TCR
   // Transmit Counter Register
   constexpr auto USART0_TCR_TXCTR_Msk = hr::field_mask_literal< 0x4009810c, 0, 16 >();

// RNPR
   // Receive Next Pointer
   constexpr auto USART0_RNPR_RXNPTR_Msk = hr::field_mask_literal< 0x40098110, 0, 32 >();

// RNCR
   // Receive Next Counter
   constexpr auto USART0_RNCR_RXNCTR_Msk = hr::field_mask_literal< 0x40098114, 0, 16 >();

// TNPR
   // Transmit Next Pointer
   constexpr auto USART0_TNPR_TXNPTR_Msk = hr::field_mask_literal< 0x40098118, 0, 32 >();

// TNCR
   // Transmit Counter Next
   constexpr auto USART0_TNCR_TXNCTR_Msk = hr::field_mask_literal< 0x4009811c, 0, 16 >();

// PTCR
   // Receiver Transfer Enable
   constexpr auto USART0_PTCR_RXTEN = hr::field_mask_literal< 0x40098120, 0, 1 >();
   // Receiver Transfer Disable
   constexpr auto USART0_PTCR_RXTDIS = hr::field_mask_literal< 0x40098120, 1, 1 >();
   // Transmitter Transfer Enable
   constexpr auto USART0_PTCR_TXTEN = hr::field_mask_literal< 0x40098120, 8, 1 >();
   // Transmitter Transfer Disable
   constexpr auto USART0_PTCR_TXTDIS = hr::field_mask_literal< 0x40098120, 9, 1 >();

// PTSR
   // Receiver Transfer Enable
   constexpr auto USART0_PTSR_RXTEN = hr::field_mask_literal< 0x40098124, 0, 1 >();
   // Transmitter Transfer Enable
   constexpr auto USART0_PTSR_TXTEN = hr::field_mask_literal< 0x40098124, 8, 1 >();

// =============================================================================
//
// USART1
// base address = 0x4009c000
// Universal Synchronous Asynchronous Receiver Transmitter 1
//
// =============================================================================

struct Usart1 {
   hr::hardware_register<0x4009c000> CR;
   hr::hardware_register<0x4009c004> MR;
   hr::hardware_register<0x4009c008> IER;
   hr::hardware_register<0x4009c00c> IDR;
   hr::hardware_register<0x4009c010> IMR;
   hr::hardware_register<0x4009c014> CSR;
   hr::hardware_register<0x4009c018> RHR;
   hr::hardware_register<0x4009c01c> THR;
   hr::hardware_register<0x4009c020> BRGR;
   hr::hardware_register<0x4009c024> RTOR;
   hr::hardware_register<0x4009c028> TTGR;
   hr::reserved< 0x2C, 5 > _reserved_at_0x2C;
   hr::hardware_register<0x4009c040> FIDI;
   hr::hardware_register<0x4009c044> NER;
   hr::reserved< 0x48, 1 > _reserved_at_0x48;
   hr::hardware_register<0x4009c04c> IF;
   hr::hardware_register<0x4009c050> MAN;
   hr::hardware_register<0x4009c054> LINMR;
   hr::hardware_register<0x4009c058> LINIR;
   hr::reserved< 0x5C, 34 > _reserved_at_0x5C;
   hr::hardware_register<0x4009c0e4> WPMR;
   hr::hardware_register<0x4009c0e8> WPSR;
   hr::reserved< 0xEC, 5 > _reserved_at_0xEC;
   hr::hardware_register<0x4009c100> RPR;
   hr::hardware_register<0x4009c104> RCR;
   hr::hardware_register<0x4009c108> TPR;
   hr::hardware_register<0x4009c10c> TCR;
   hr::hardware_register<0x4009c110> RNPR;
   hr::hardware_register<0x4009c114> RNCR;
   hr::hardware_register<0x4009c118> TNPR;
   hr::hardware_register<0x4009c11c> TNCR;
   hr::hardware_register<0x4009c120> PTCR;
   hr::hardware_register<0x4009c124> PTSR;
};

#define USART1 ( ( Usart1 * ) 0x4009c000 )

// =============================================================================
//
// USART2
// base address = 0x400a0000
// Universal Synchronous Asynchronous Receiver Transmitter 2
//
// =============================================================================

struct Usart2 {
   hr::hardware_register<0x400a0000> CR;
   hr::hardware_register<0x400a0004> MR;
   hr::hardware_register<0x400a0008> IER;
   hr::hardware_register<0x400a000c> IDR;
   hr::hardware_register<0x400a0010> IMR;
   hr::hardware_register<0x400a0014> CSR;
   hr::hardware_register<0x400a0018> RHR;
   hr::hardware_register<0x400a001c> THR;
   hr::hardware_register<0x400a0020> BRGR;
   hr::hardware_register<0x400a0024> RTOR;
   hr::hardware_register<0x400a0028> TTGR;
   hr::reserved< 0x2C, 5 > _reserved_at_0x2C;
   hr::hardware_register<0x400a0040> FIDI;
   hr::hardware_register<0x400a0044> NER;
   hr::reserved< 0x48, 1 > _reserved_at_0x48;
   hr::hardware_register<0x400a004c> IF;
   hr::hardware_register<0x400a0050> MAN;
   hr::hardware_register<0x400a0054> LINMR;
   hr::hardware_register<0x400a0058> LINIR;
   hr::reserved< 0x5C, 34 > _reserved_at_0x5C;
   hr::hardware_register<0x400a00e4> WPMR;
   hr::hardware_register<0x400a00e8> WPSR;
   hr::reserved< 0xEC, 5 > _reserved_at_0xEC;
   hr::hardware_register<0x400a0100> RPR;
   hr::hardware_register<0x400a0104> RCR;
   hr::hardware_register<0x400a0108> TPR;
   hr::hardware_register<0x400a010c> TCR;
   hr::hardware_register<0x400a0110> RNPR;
   hr::hardware_register<0x400a0114> RNCR;
   hr::hardware_register<0x400a0118> TNPR;
   hr::hardware_register<0x400a011c> TNCR;
   hr::hardware_register<0x400a0120> PTCR;
   hr::hardware_register<0x400a0124> PTSR;
};

#define USART2 ( ( Usart2 * ) 0x400a0000 )

// =============================================================================
//
// USART3
// base address = 0x400a4000
// Universal Synchronous Asynchronous Receiver Transmitter 3
//
// =============================================================================

struct Usart3 {
   hr::hardware_register<0x400a4000> CR;
   hr::hardware_register<0x400a4004> MR;
   hr::hardware_register<0x400a4008> IER;
   hr::hardware_register<0x400a400c> IDR;
   hr::hardware_register<0x400a4010> IMR;
   hr::hardware_register<0x400a4014> CSR;
   hr::hardware_register<0x400a4018> RHR;
   hr::hardware_register<0x400a401c> THR;
   hr::hardware_register<0x400a4020> BRGR;
   hr::hardware_register<0x400a4024> RTOR;
   hr::hardware_register<0x400a4028> TTGR;
   hr::reserved< 0x2C, 5 > _reserved_at_0x2C;
   hr::hardware_register<0x400a4040> FIDI;
   hr::hardware_register<0x400a4044> NER;
   hr::reserved< 0x48, 1 > _reserved_at_0x48;
   hr::hardware_register<0x400a404c> IF;
   hr::hardware_register<0x400a4050> MAN;
   hr::hardware_register<0x400a4054> LINMR;
   hr::hardware_register<0x400a4058> LINIR;
   hr::reserved< 0x5C, 34 > _reserved_at_0x5C;
   hr::hardware_register<0x400a40e4> WPMR;
   hr::hardware_register<0x400a40e8> WPSR;
   hr::reserved< 0xEC, 5 > _reserved_at_0xEC;
   hr::hardware_register<0x400a4100> RPR;
   hr::hardware_register<0x400a4104> RCR;
   hr::hardware_register<0x400a4108> TPR;
   hr::hardware_register<0x400a410c> TCR;
   hr::hardware_register<0x400a4110> RNPR;
   hr::hardware_register<0x400a4114> RNCR;
   hr::hardware_register<0x400a4118> TNPR;
   hr::hardware_register<0x400a411c> TNCR;
   hr::hardware_register<0x400a4120> PTCR;
   hr::hardware_register<0x400a4124> PTSR;
};

#define USART3 ( ( Usart3 * ) 0x400a4000 )

// =============================================================================
//
// UOTGHS
// base address = 0x400ac000
// USB On-The-Go Interface
//
// =============================================================================

struct Uotghs {
   hr::hardware_register<0x400ac000> DEVCTRL;
   hr::hardware_register<0x400ac004> DEVISR;
   hr::hardware_register<0x400ac008> DEVICR;
   hr::hardware_register<0x400ac00c> DEVIFR;
   hr::hardware_register<0x400ac010> DEVIMR;
   hr::hardware_register<0x400ac014> DEVIDR;
   hr::hardware_register<0x400ac018> DEVIER;
   hr::hardware_register<0x400ac01c> DEVEPT;
   hr::hardware_register<0x400ac020> DEVFNUM;
   hr::reserved< 0x24, 55 > _reserved_at_0x24;
   hr::hardware_register<0x400ac100> DEVEPTCFG[10];
   hr::reserved< 0x128, 2 > _reserved_at_0x128;
   hr::hardware_register<0x400ac130> DEVEPTISR[10];
   hr::reserved< 0x158, 2 > _reserved_at_0x158;
   hr::hardware_register<0x400ac160> DEVEPTICR[10];
   hr::reserved< 0x188, 2 > _reserved_at_0x188;
   hr::hardware_register<0x400ac190> DEVEPTIFR[10];
   hr::reserved< 0x1B8, 2 > _reserved_at_0x1B8;
   hr::hardware_register<0x400ac1c0> DEVEPTIMR[10];
   hr::reserved< 0x1E8, 2 > _reserved_at_0x1E8;
   hr::hardware_register<0x400ac1f0> DEVEPTIER[10];
   hr::reserved< 0x218, 2 > _reserved_at_0x218;
   hr::hardware_register<0x400ac220> DEVEPTIDR[10];
   hr::reserved< 0x248, 50 > _reserved_at_0x248;
   hr::hardware_register<0x400ac310> DEVDMANXTDSC1;
   hr::hardware_register<0x400ac314> DEVDMAADDRESS1;
   hr::hardware_register<0x400ac318> DEVDMACONTROL1;
   hr::hardware_register<0x400ac31c> DEVDMASTATUS1;
   hr::hardware_register<0x400ac320> DEVDMANXTDSC2;
   hr::hardware_register<0x400ac324> DEVDMAADDRESS2;
   hr::hardware_register<0x400ac328> DEVDMACONTROL2;
   hr::hardware_register<0x400ac32c> DEVDMASTATUS2;
   hr::hardware_register<0x400ac330> DEVDMANXTDSC3;
   hr::hardware_register<0x400ac334> DEVDMAADDRESS3;
   hr::hardware_register<0x400ac338> DEVDMACONTROL3;
   hr::hardware_register<0x400ac33c> DEVDMASTATUS3;
   hr::hardware_register<0x400ac340> DEVDMANXTDSC4;
   hr::hardware_register<0x400ac344> DEVDMAADDRESS4;
   hr::hardware_register<0x400ac348> DEVDMACONTROL4;
   hr::hardware_register<0x400ac34c> DEVDMASTATUS4;
   hr::hardware_register<0x400ac350> DEVDMANXTDSC5;
   hr::hardware_register<0x400ac354> DEVDMAADDRESS5;
   hr::hardware_register<0x400ac358> DEVDMACONTROL5;
   hr::hardware_register<0x400ac35c> DEVDMASTATUS5;
   hr::hardware_register<0x400ac360> DEVDMANXTDSC6;
   hr::hardware_register<0x400ac364> DEVDMAADDRESS6;
   hr::hardware_register<0x400ac368> DEVDMACONTROL6;
   hr::hardware_register<0x400ac36c> DEVDMASTATUS6;
   hr::hardware_register<0x400ac370> DEVDMANXTDSC7;
   hr::hardware_register<0x400ac374> DEVDMAADDRESS7;
   hr::hardware_register<0x400ac378> DEVDMACONTROL7;
   hr::hardware_register<0x400ac37c> DEVDMASTATUS7;
   hr::reserved< 0x380, 32 > _reserved_at_0x380;
   hr::hardware_register<0x400ac400> HSTCTRL;
   hr::hardware_register<0x400ac404> HSTISR;
   hr::hardware_register<0x400ac408> HSTICR;
   hr::hardware_register<0x400ac40c> HSTIFR;
   hr::hardware_register<0x400ac410> HSTIMR;
   hr::hardware_register<0x400ac414> HSTIDR;
   hr::hardware_register<0x400ac418> HSTIER;
   hr::hardware_register<0x400ac41c> HSTPIP;
   hr::hardware_register<0x400ac420> HSTFNUM;
   hr::hardware_register<0x400ac424> HSTADDR1;
   hr::hardware_register<0x400ac428> HSTADDR2;
   hr::hardware_register<0x400ac42c> HSTADDR3;
   hr::reserved< 0x430, 52 > _reserved_at_0x430;
   hr::hardware_register<0x400ac500> HSTPIPCFG[10];
   hr::reserved< 0x528, 2 > _reserved_at_0x528;
   hr::hardware_register<0x400ac530> HSTPIPISR[10];
   hr::reserved< 0x558, 2 > _reserved_at_0x558;
   hr::hardware_register<0x400ac560> HSTPIPICR[10];
   hr::reserved< 0x588, 2 > _reserved_at_0x588;
   hr::hardware_register<0x400ac590> HSTPIPIFR[10];
   hr::reserved< 0x5B8, 2 > _reserved_at_0x5B8;
   hr::hardware_register<0x400ac5c0> HSTPIPIMR[10];
   hr::reserved< 0x5E8, 2 > _reserved_at_0x5E8;
   hr::hardware_register<0x400ac5f0> HSTPIPIER[10];
   hr::reserved< 0x618, 2 > _reserved_at_0x618;
   hr::hardware_register<0x400ac620> HSTPIPIDR[10];
   hr::reserved< 0x648, 2 > _reserved_at_0x648;
   hr::hardware_register<0x400ac650> HSTPIPINRQ[10];
   hr::reserved< 0x678, 2 > _reserved_at_0x678;
   hr::hardware_register<0x400ac680> HSTPIPERR[10];
   hr::reserved< 0x6A8, 26 > _reserved_at_0x6A8;
   hr::hardware_register<0x400ac710> HSTDMANXTDSC1;
   hr::hardware_register<0x400ac714> HSTDMAADDRESS1;
   hr::hardware_register<0x400ac718> HSTDMACONTROL1;
   hr::hardware_register<0x400ac71c> HSTDMASTATUS1;
   hr::hardware_register<0x400ac720> HSTDMANXTDSC2;
   hr::hardware_register<0x400ac724> HSTDMAADDRESS2;
   hr::hardware_register<0x400ac728> HSTDMACONTROL2;
   hr::hardware_register<0x400ac72c> HSTDMASTATUS2;
   hr::hardware_register<0x400ac730> HSTDMANXTDSC3;
   hr::hardware_register<0x400ac734> HSTDMAADDRESS3;
   hr::hardware_register<0x400ac738> HSTDMACONTROL3;
   hr::hardware_register<0x400ac73c> HSTDMASTATUS3;
   hr::hardware_register<0x400ac740> HSTDMANXTDSC4;
   hr::hardware_register<0x400ac744> HSTDMAADDRESS4;
   hr::hardware_register<0x400ac748> HSTDMACONTROL4;
   hr::hardware_register<0x400ac74c> HSTDMASTATUS4;
   hr::hardware_register<0x400ac750> HSTDMANXTDSC5;
   hr::hardware_register<0x400ac754> HSTDMAADDRESS5;
   hr::hardware_register<0x400ac758> HSTDMACONTROL5;
   hr::hardware_register<0x400ac75c> HSTDMASTATUS5;
   hr::hardware_register<0x400ac760> HSTDMANXTDSC6;
   hr::hardware_register<0x400ac764> HSTDMAADDRESS6;
   hr::hardware_register<0x400ac768> HSTDMACONTROL6;
   hr::hardware_register<0x400ac76c> HSTDMASTATUS6;
   hr::hardware_register<0x400ac770> HSTDMANXTDSC7;
   hr::hardware_register<0x400ac774> HSTDMAADDRESS7;
   hr::hardware_register<0x400ac778> HSTDMACONTROL7;
   hr::hardware_register<0x400ac77c> HSTDMASTATUS7;
   hr::reserved< 0x780, 32 > _reserved_at_0x780;
   hr::hardware_register<0x400ac800> CTRL;
   hr::hardware_register<0x400ac804> SR;
   hr::hardware_register<0x400ac808> SCR;
   hr::hardware_register<0x400ac80c> SFR;
   hr::reserved< 0x810, 7 > _reserved_at_0x810;
   hr::hardware_register<0x400ac82c> FSM;
};

#define UOTGHS ( ( Uotghs * ) 0x400ac000 )

// DEVCTRL
   // USB Address
   constexpr auto UOTGHS_DEVCTRL_UADD_Msk = hr::field_mask_literal< 0x400ac000, 0, 7 >();
   // Address Enable
   constexpr auto UOTGHS_DEVCTRL_ADDEN = hr::field_mask_literal< 0x400ac000, 7, 1 >();
   // Detach
   constexpr auto UOTGHS_DEVCTRL_DETACH = hr::field_mask_literal< 0x400ac000, 8, 1 >();
   // Remote Wake-Up
   constexpr auto UOTGHS_DEVCTRL_RMWKUP = hr::field_mask_literal< 0x400ac000, 9, 1 >();
   // Mode Configuration
   constexpr auto UOTGHS_DEVCTRL_SPDCONF_Msk = hr::field_mask_literal< 0x400ac000, 10, 2 >();
      // The peripheral starts in full-speed mode and performs a high-speed reset to switch to the high-speed mode if the host is high-speed capable.
      constexpr auto UOTGHS_DEVCTRL_SPDCONF_NORMAL = hr::field_value_literal< 0x400ac000, 10, 2 >( 0 );
      // For a better consumption, if high-speed is not needed.
      constexpr auto UOTGHS_DEVCTRL_SPDCONF_LOW_POWER = hr::field_value_literal< 0x400ac000, 10, 2 >( 1 );
      // Forced high speed.
      constexpr auto UOTGHS_DEVCTRL_SPDCONF_HIGH_SPEED = hr::field_value_literal< 0x400ac000, 10, 2 >( 2 );
      // The peripheral remains in full-speed mode whatever the host speed capability.
      constexpr auto UOTGHS_DEVCTRL_SPDCONF_FORCED_FS = hr::field_value_literal< 0x400ac000, 10, 2 >( 3 );
   // Low-Speed Mode Force
   constexpr auto UOTGHS_DEVCTRL_LS = hr::field_mask_literal< 0x400ac000, 12, 1 >();
   // Test mode J
   constexpr auto UOTGHS_DEVCTRL_TSTJ = hr::field_mask_literal< 0x400ac000, 13, 1 >();
   // Test mode K
   constexpr auto UOTGHS_DEVCTRL_TSTK = hr::field_mask_literal< 0x400ac000, 14, 1 >();
   // Test packet mode
   constexpr auto UOTGHS_DEVCTRL_TSTPCKT = hr::field_mask_literal< 0x400ac000, 15, 1 >();
   // Specific Operational mode
   constexpr auto UOTGHS_DEVCTRL_OPMODE2 = hr::field_mask_literal< 0x400ac000, 16, 1 >();

// DEVISR
   // Suspend Interrupt
   constexpr auto UOTGHS_DEVISR_SUSP = hr::field_mask_literal< 0x400ac004, 0, 1 >();
   // Micro Start of Frame Interrupt
   constexpr auto UOTGHS_DEVISR_MSOF = hr::field_mask_literal< 0x400ac004, 1, 1 >();
   // Start of Frame Interrupt
   constexpr auto UOTGHS_DEVISR_SOF = hr::field_mask_literal< 0x400ac004, 2, 1 >();
   // End of Reset Interrupt
   constexpr auto UOTGHS_DEVISR_EORST = hr::field_mask_literal< 0x400ac004, 3, 1 >();
   // Wake-Up Interrupt
   constexpr auto UOTGHS_DEVISR_WAKEUP = hr::field_mask_literal< 0x400ac004, 4, 1 >();
   // End of Resume Interrupt
   constexpr auto UOTGHS_DEVISR_EORSM = hr::field_mask_literal< 0x400ac004, 5, 1 >();
   // Upstream Resume Interrupt
   constexpr auto UOTGHS_DEVISR_UPRSM = hr::field_mask_literal< 0x400ac004, 6, 1 >();
   // Endpoint 0 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_0 = hr::field_mask_literal< 0x400ac004, 12, 1 >();
   // Endpoint 1 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_1 = hr::field_mask_literal< 0x400ac004, 13, 1 >();
   // Endpoint 2 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_2 = hr::field_mask_literal< 0x400ac004, 14, 1 >();
   // Endpoint 3 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_3 = hr::field_mask_literal< 0x400ac004, 15, 1 >();
   // Endpoint 4 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_4 = hr::field_mask_literal< 0x400ac004, 16, 1 >();
   // Endpoint 5 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_5 = hr::field_mask_literal< 0x400ac004, 17, 1 >();
   // Endpoint 6 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_6 = hr::field_mask_literal< 0x400ac004, 18, 1 >();
   // Endpoint 7 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_7 = hr::field_mask_literal< 0x400ac004, 19, 1 >();
   // Endpoint 8 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_8 = hr::field_mask_literal< 0x400ac004, 20, 1 >();
   // Endpoint 9 Interrupt
   constexpr auto UOTGHS_DEVISR_PEP_9 = hr::field_mask_literal< 0x400ac004, 21, 1 >();
   // DMA Channel 1 Interrupt
   constexpr auto UOTGHS_DEVISR_DMA_1 = hr::field_mask_literal< 0x400ac004, 25, 1 >();
   // DMA Channel 2 Interrupt
   constexpr auto UOTGHS_DEVISR_DMA_2 = hr::field_mask_literal< 0x400ac004, 26, 1 >();
   // DMA Channel 3 Interrupt
   constexpr auto UOTGHS_DEVISR_DMA_3 = hr::field_mask_literal< 0x400ac004, 27, 1 >();
   // DMA Channel 4 Interrupt
   constexpr auto UOTGHS_DEVISR_DMA_4 = hr::field_mask_literal< 0x400ac004, 28, 1 >();
   // DMA Channel 5 Interrupt
   constexpr auto UOTGHS_DEVISR_DMA_5 = hr::field_mask_literal< 0x400ac004, 29, 1 >();
   // DMA Channel 6 Interrupt
   constexpr auto UOTGHS_DEVISR_DMA_6 = hr::field_mask_literal< 0x400ac004, 30, 1 >();

// DEVICR
   // Suspend Interrupt Clear
   constexpr auto UOTGHS_DEVICR_SUSPC = hr::field_mask_literal< 0x400ac008, 0, 1 >();
   // Micro Start of Frame Interrupt Clear
   constexpr auto UOTGHS_DEVICR_MSOFC = hr::field_mask_literal< 0x400ac008, 1, 1 >();
   // Start of Frame Interrupt Clear
   constexpr auto UOTGHS_DEVICR_SOFC = hr::field_mask_literal< 0x400ac008, 2, 1 >();
   // End of Reset Interrupt Clear
   constexpr auto UOTGHS_DEVICR_EORSTC = hr::field_mask_literal< 0x400ac008, 3, 1 >();
   // Wake-Up Interrupt Clear
   constexpr auto UOTGHS_DEVICR_WAKEUPC = hr::field_mask_literal< 0x400ac008, 4, 1 >();
   // End of Resume Interrupt Clear
   constexpr auto UOTGHS_DEVICR_EORSMC = hr::field_mask_literal< 0x400ac008, 5, 1 >();
   // Upstream Resume Interrupt Clear
   constexpr auto UOTGHS_DEVICR_UPRSMC = hr::field_mask_literal< 0x400ac008, 6, 1 >();

// DEVIFR
   // Suspend Interrupt Set
   constexpr auto UOTGHS_DEVIFR_SUSPS = hr::field_mask_literal< 0x400ac00c, 0, 1 >();
   // Micro Start of Frame Interrupt Set
   constexpr auto UOTGHS_DEVIFR_MSOFS = hr::field_mask_literal< 0x400ac00c, 1, 1 >();
   // Start of Frame Interrupt Set
   constexpr auto UOTGHS_DEVIFR_SOFS = hr::field_mask_literal< 0x400ac00c, 2, 1 >();
   // End of Reset Interrupt Set
   constexpr auto UOTGHS_DEVIFR_EORSTS = hr::field_mask_literal< 0x400ac00c, 3, 1 >();
   // Wake-Up Interrupt Set
   constexpr auto UOTGHS_DEVIFR_WAKEUPS = hr::field_mask_literal< 0x400ac00c, 4, 1 >();
   // End of Resume Interrupt Set
   constexpr auto UOTGHS_DEVIFR_EORSMS = hr::field_mask_literal< 0x400ac00c, 5, 1 >();
   // Upstream Resume Interrupt Set
   constexpr auto UOTGHS_DEVIFR_UPRSMS = hr::field_mask_literal< 0x400ac00c, 6, 1 >();
   // DMA Channel 1 Interrupt Set
   constexpr auto UOTGHS_DEVIFR_DMA_1 = hr::field_mask_literal< 0x400ac00c, 25, 1 >();
   // DMA Channel 2 Interrupt Set
   constexpr auto UOTGHS_DEVIFR_DMA_2 = hr::field_mask_literal< 0x400ac00c, 26, 1 >();
   // DMA Channel 3 Interrupt Set
   constexpr auto UOTGHS_DEVIFR_DMA_3 = hr::field_mask_literal< 0x400ac00c, 27, 1 >();
   // DMA Channel 4 Interrupt Set
   constexpr auto UOTGHS_DEVIFR_DMA_4 = hr::field_mask_literal< 0x400ac00c, 28, 1 >();
   // DMA Channel 5 Interrupt Set
   constexpr auto UOTGHS_DEVIFR_DMA_5 = hr::field_mask_literal< 0x400ac00c, 29, 1 >();
   // DMA Channel 6 Interrupt Set
   constexpr auto UOTGHS_DEVIFR_DMA_6 = hr::field_mask_literal< 0x400ac00c, 30, 1 >();

// DEVIMR
   // Suspend Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_SUSPE = hr::field_mask_literal< 0x400ac010, 0, 1 >();
   // Micro Start of Frame Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_MSOFE = hr::field_mask_literal< 0x400ac010, 1, 1 >();
   // Start of Frame Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_SOFE = hr::field_mask_literal< 0x400ac010, 2, 1 >();
   // End of Reset Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_EORSTE = hr::field_mask_literal< 0x400ac010, 3, 1 >();
   // Wake-Up Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_WAKEUPE = hr::field_mask_literal< 0x400ac010, 4, 1 >();
   // End of Resume Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_EORSME = hr::field_mask_literal< 0x400ac010, 5, 1 >();
   // Upstream Resume Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_UPRSME = hr::field_mask_literal< 0x400ac010, 6, 1 >();
   // Endpoint 0 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_0 = hr::field_mask_literal< 0x400ac010, 12, 1 >();
   // Endpoint 1 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_1 = hr::field_mask_literal< 0x400ac010, 13, 1 >();
   // Endpoint 2 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_2 = hr::field_mask_literal< 0x400ac010, 14, 1 >();
   // Endpoint 3 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_3 = hr::field_mask_literal< 0x400ac010, 15, 1 >();
   // Endpoint 4 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_4 = hr::field_mask_literal< 0x400ac010, 16, 1 >();
   // Endpoint 5 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_5 = hr::field_mask_literal< 0x400ac010, 17, 1 >();
   // Endpoint 6 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_6 = hr::field_mask_literal< 0x400ac010, 18, 1 >();
   // Endpoint 7 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_7 = hr::field_mask_literal< 0x400ac010, 19, 1 >();
   // Endpoint 8 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_8 = hr::field_mask_literal< 0x400ac010, 20, 1 >();
   // Endpoint 9 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_PEP_9 = hr::field_mask_literal< 0x400ac010, 21, 1 >();
   // DMA Channel 1 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_DMA_1 = hr::field_mask_literal< 0x400ac010, 25, 1 >();
   // DMA Channel 2 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_DMA_2 = hr::field_mask_literal< 0x400ac010, 26, 1 >();
   // DMA Channel 3 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_DMA_3 = hr::field_mask_literal< 0x400ac010, 27, 1 >();
   // DMA Channel 4 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_DMA_4 = hr::field_mask_literal< 0x400ac010, 28, 1 >();
   // DMA Channel 5 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_DMA_5 = hr::field_mask_literal< 0x400ac010, 29, 1 >();
   // DMA Channel 6 Interrupt Mask
   constexpr auto UOTGHS_DEVIMR_DMA_6 = hr::field_mask_literal< 0x400ac010, 30, 1 >();

// DEVIDR
   // Suspend Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_SUSPEC = hr::field_mask_literal< 0x400ac014, 0, 1 >();
   // Micro Start of Frame Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_MSOFEC = hr::field_mask_literal< 0x400ac014, 1, 1 >();
   // Start of Frame Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_SOFEC = hr::field_mask_literal< 0x400ac014, 2, 1 >();
   // End of Reset Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_EORSTEC = hr::field_mask_literal< 0x400ac014, 3, 1 >();
   // Wake-Up Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_WAKEUPEC = hr::field_mask_literal< 0x400ac014, 4, 1 >();
   // End of Resume Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_EORSMEC = hr::field_mask_literal< 0x400ac014, 5, 1 >();
   // Upstream Resume Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_UPRSMEC = hr::field_mask_literal< 0x400ac014, 6, 1 >();
   // Endpoint 0 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_0 = hr::field_mask_literal< 0x400ac014, 12, 1 >();
   // Endpoint 1 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_1 = hr::field_mask_literal< 0x400ac014, 13, 1 >();
   // Endpoint 2 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_2 = hr::field_mask_literal< 0x400ac014, 14, 1 >();
   // Endpoint 3 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_3 = hr::field_mask_literal< 0x400ac014, 15, 1 >();
   // Endpoint 4 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_4 = hr::field_mask_literal< 0x400ac014, 16, 1 >();
   // Endpoint 5 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_5 = hr::field_mask_literal< 0x400ac014, 17, 1 >();
   // Endpoint 6 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_6 = hr::field_mask_literal< 0x400ac014, 18, 1 >();
   // Endpoint 7 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_7 = hr::field_mask_literal< 0x400ac014, 19, 1 >();
   // Endpoint 8 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_8 = hr::field_mask_literal< 0x400ac014, 20, 1 >();
   // Endpoint 9 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_PEP_9 = hr::field_mask_literal< 0x400ac014, 21, 1 >();
   // DMA Channel 1 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_DMA_1 = hr::field_mask_literal< 0x400ac014, 25, 1 >();
   // DMA Channel 2 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_DMA_2 = hr::field_mask_literal< 0x400ac014, 26, 1 >();
   // DMA Channel 3 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_DMA_3 = hr::field_mask_literal< 0x400ac014, 27, 1 >();
   // DMA Channel 4 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_DMA_4 = hr::field_mask_literal< 0x400ac014, 28, 1 >();
   // DMA Channel 5 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_DMA_5 = hr::field_mask_literal< 0x400ac014, 29, 1 >();
   // DMA Channel 6 Interrupt Disable
   constexpr auto UOTGHS_DEVIDR_DMA_6 = hr::field_mask_literal< 0x400ac014, 30, 1 >();

// DEVIER
   // Suspend Interrupt Enable
   constexpr auto UOTGHS_DEVIER_SUSPES = hr::field_mask_literal< 0x400ac018, 0, 1 >();
   // Micro Start of Frame Interrupt Enable
   constexpr auto UOTGHS_DEVIER_MSOFES = hr::field_mask_literal< 0x400ac018, 1, 1 >();
   // Start of Frame Interrupt Enable
   constexpr auto UOTGHS_DEVIER_SOFES = hr::field_mask_literal< 0x400ac018, 2, 1 >();
   // End of Reset Interrupt Enable
   constexpr auto UOTGHS_DEVIER_EORSTES = hr::field_mask_literal< 0x400ac018, 3, 1 >();
   // Wake-Up Interrupt Enable
   constexpr auto UOTGHS_DEVIER_WAKEUPES = hr::field_mask_literal< 0x400ac018, 4, 1 >();
   // End of Resume Interrupt Enable
   constexpr auto UOTGHS_DEVIER_EORSMES = hr::field_mask_literal< 0x400ac018, 5, 1 >();
   // Upstream Resume Interrupt Enable
   constexpr auto UOTGHS_DEVIER_UPRSMES = hr::field_mask_literal< 0x400ac018, 6, 1 >();
   // Endpoint 0 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_0 = hr::field_mask_literal< 0x400ac018, 12, 1 >();
   // Endpoint 1 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_1 = hr::field_mask_literal< 0x400ac018, 13, 1 >();
   // Endpoint 2 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_2 = hr::field_mask_literal< 0x400ac018, 14, 1 >();
   // Endpoint 3 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_3 = hr::field_mask_literal< 0x400ac018, 15, 1 >();
   // Endpoint 4 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_4 = hr::field_mask_literal< 0x400ac018, 16, 1 >();
   // Endpoint 5 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_5 = hr::field_mask_literal< 0x400ac018, 17, 1 >();
   // Endpoint 6 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_6 = hr::field_mask_literal< 0x400ac018, 18, 1 >();
   // Endpoint 7 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_7 = hr::field_mask_literal< 0x400ac018, 19, 1 >();
   // Endpoint 8 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_8 = hr::field_mask_literal< 0x400ac018, 20, 1 >();
   // Endpoint 9 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_PEP_9 = hr::field_mask_literal< 0x400ac018, 21, 1 >();
   // DMA Channel 1 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_DMA_1 = hr::field_mask_literal< 0x400ac018, 25, 1 >();
   // DMA Channel 2 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_DMA_2 = hr::field_mask_literal< 0x400ac018, 26, 1 >();
   // DMA Channel 3 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_DMA_3 = hr::field_mask_literal< 0x400ac018, 27, 1 >();
   // DMA Channel 4 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_DMA_4 = hr::field_mask_literal< 0x400ac018, 28, 1 >();
   // DMA Channel 5 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_DMA_5 = hr::field_mask_literal< 0x400ac018, 29, 1 >();
   // DMA Channel 6 Interrupt Enable
   constexpr auto UOTGHS_DEVIER_DMA_6 = hr::field_mask_literal< 0x400ac018, 30, 1 >();

// DEVEPT
   // Endpoint 0 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN0 = hr::field_mask_literal< 0x400ac01c, 0, 1 >();
   // Endpoint 1 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN1 = hr::field_mask_literal< 0x400ac01c, 1, 1 >();
   // Endpoint 2 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN2 = hr::field_mask_literal< 0x400ac01c, 2, 1 >();
   // Endpoint 3 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN3 = hr::field_mask_literal< 0x400ac01c, 3, 1 >();
   // Endpoint 4 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN4 = hr::field_mask_literal< 0x400ac01c, 4, 1 >();
   // Endpoint 5 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN5 = hr::field_mask_literal< 0x400ac01c, 5, 1 >();
   // Endpoint 6 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN6 = hr::field_mask_literal< 0x400ac01c, 6, 1 >();
   // Endpoint 7 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN7 = hr::field_mask_literal< 0x400ac01c, 7, 1 >();
   // Endpoint 8 Enable
   constexpr auto UOTGHS_DEVEPT_EPEN8 = hr::field_mask_literal< 0x400ac01c, 8, 1 >();
   // Endpoint 0 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST0 = hr::field_mask_literal< 0x400ac01c, 16, 1 >();
   // Endpoint 1 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST1 = hr::field_mask_literal< 0x400ac01c, 17, 1 >();
   // Endpoint 2 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST2 = hr::field_mask_literal< 0x400ac01c, 18, 1 >();
   // Endpoint 3 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST3 = hr::field_mask_literal< 0x400ac01c, 19, 1 >();
   // Endpoint 4 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST4 = hr::field_mask_literal< 0x400ac01c, 20, 1 >();
   // Endpoint 5 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST5 = hr::field_mask_literal< 0x400ac01c, 21, 1 >();
   // Endpoint 6 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST6 = hr::field_mask_literal< 0x400ac01c, 22, 1 >();
   // Endpoint 7 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST7 = hr::field_mask_literal< 0x400ac01c, 23, 1 >();
   // Endpoint 8 Reset
   constexpr auto UOTGHS_DEVEPT_EPRST8 = hr::field_mask_literal< 0x400ac01c, 24, 1 >();

// DEVFNUM
   // Micro Frame Number
   constexpr auto UOTGHS_DEVFNUM_MFNUM_Msk = hr::field_mask_literal< 0x400ac020, 0, 3 >();
   // Frame Number
   constexpr auto UOTGHS_DEVFNUM_FNUM_Msk = hr::field_mask_literal< 0x400ac020, 3, 11 >();
   // Frame Number CRC Error
   constexpr auto UOTGHS_DEVFNUM_FNCERR = hr::field_mask_literal< 0x400ac020, 15, 1 >();

// DEVEPTCFG[0]
   // Endpoint Memory Allocate
   constexpr auto UOTGHS_DEVEPTCFG_ALLOC = hr::field_mask_literal< 0x400ac100, 1, 1 >();
   // Endpoint Banks
   constexpr auto UOTGHS_DEVEPTCFG_EPBK_Msk = hr::field_mask_literal< 0x400ac100, 2, 2 >();
      // Single-bank endpoint
      constexpr auto UOTGHS_DEVEPTCFG_EPBK_1_BANK = hr::field_value_literal< 0x400ac100, 2, 2 >( 0 );
      // Double-bank endpoint
      constexpr auto UOTGHS_DEVEPTCFG_EPBK_2_BANK = hr::field_value_literal< 0x400ac100, 2, 2 >( 1 );
      // Triple-bank endpoint
      constexpr auto UOTGHS_DEVEPTCFG_EPBK_3_BANK = hr::field_value_literal< 0x400ac100, 2, 2 >( 2 );
   // Endpoint Size
   constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_Msk = hr::field_mask_literal< 0x400ac100, 4, 3 >();
      // 8 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_8_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 0 );
      // 16 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_16_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 1 );
      // 32 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_32_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 2 );
      // 64 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_64_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 3 );
      // 128 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_128_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 4 );
      // 256 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_256_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 5 );
      // 512 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_512_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 6 );
      // 1024 bytes
      constexpr auto UOTGHS_DEVEPTCFG_EPSIZE_1024_BYTE = hr::field_value_literal< 0x400ac100, 4, 3 >( 7 );
   // Endpoint Direction
   constexpr auto UOTGHS_DEVEPTCFG_EPDIR = hr::field_mask_literal< 0x400ac100, 8, 1 >();
      // The endpoint direction is OUT.
      constexpr auto UOTGHS_DEVEPTCFG_EPDIR_OUT = hr::field_value_literal< 0x400ac100, 8, 1 >( 0 );
      // The endpoint direction is IN (nor for control endpoints).
      constexpr auto UOTGHS_DEVEPTCFG_EPDIR_IN = hr::field_value_literal< 0x400ac100, 8, 1 >( 1 );
   // Automatic Switch
   constexpr auto UOTGHS_DEVEPTCFG_AUTOSW = hr::field_mask_literal< 0x400ac100, 9, 1 >();
   // Endpoint Type
   constexpr auto UOTGHS_DEVEPTCFG_EPTYPE_Msk = hr::field_mask_literal< 0x400ac100, 11, 2 >();
      // Control
      constexpr auto UOTGHS_DEVEPTCFG_EPTYPE_CTRL = hr::field_value_literal< 0x400ac100, 11, 2 >( 0 );
      // Isochronous
      constexpr auto UOTGHS_DEVEPTCFG_EPTYPE_ISO = hr::field_value_literal< 0x400ac100, 11, 2 >( 1 );
      // Bulk
      constexpr auto UOTGHS_DEVEPTCFG_EPTYPE_BLK = hr::field_value_literal< 0x400ac100, 11, 2 >( 2 );
      // Interrupt
      constexpr auto UOTGHS_DEVEPTCFG_EPTYPE_INTRPT = hr::field_value_literal< 0x400ac100, 11, 2 >( 3 );
   // Number of transaction per microframe for isochronous endpoint
   constexpr auto UOTGHS_DEVEPTCFG_NBTRANS_Msk = hr::field_mask_literal< 0x400ac100, 13, 2 >();
      // reserved to endpoint that does not have the high-bandwidth isochronous capability.
      constexpr auto UOTGHS_DEVEPTCFG_NBTRANS_0_TRANS = hr::field_value_literal< 0x400ac100, 13, 2 >( 0 );
      // default value: one transaction per micro-frame.
      constexpr auto UOTGHS_DEVEPTCFG_NBTRANS_1_TRANS = hr::field_value_literal< 0x400ac100, 13, 2 >( 1 );
      // 2 transactions per micro-frame. This endpoint should be configured as double-bank.
      constexpr auto UOTGHS_DEVEPTCFG_NBTRANS_2_TRANS = hr::field_value_literal< 0x400ac100, 13, 2 >( 2 );
      // 3 transactions per micro-frame. This endpoint should be configured as triple-bank.
      constexpr auto UOTGHS_DEVEPTCFG_NBTRANS_3_TRANS = hr::field_value_literal< 0x400ac100, 13, 2 >( 3 );

// DEVEPTISR0_ISOENPT
   // Transmitted IN Data Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_TXINI = hr::field_mask_literal< 0x400ac130, 0, 1 >();
   // Received OUT Data Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_RXOUTI = hr::field_mask_literal< 0x400ac130, 1, 1 >();
   // Underflow Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_UNDERFI = hr::field_mask_literal< 0x400ac130, 2, 1 >();
   // High bandwidth isochronous IN Underflow Error Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_HBISOINERRI = hr::field_mask_literal< 0x400ac130, 3, 1 >();
   // High Bandwidth Isochronous IN Flush Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_HBISOFLUSHI = hr::field_mask_literal< 0x400ac130, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_OVERFI = hr::field_mask_literal< 0x400ac130, 5, 1 >();
   // CRC Error Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_CRCERRI = hr::field_mask_literal< 0x400ac130, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_SHORTPACKET = hr::field_mask_literal< 0x400ac130, 7, 1 >();
   // Data Toggle Sequence
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_DTSEQ_Msk = hr::field_mask_literal< 0x400ac130, 8, 2 >();
      // Data0 toggle sequence
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_DTSEQ_DATA0 = hr::field_value_literal< 0x400ac130, 8, 2 >( 0 );
      // Data1 toggle sequence
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_DTSEQ_DATA1 = hr::field_value_literal< 0x400ac130, 8, 2 >( 1 );
      // Data2 toggle sequence (for high-bandwidth isochronous endpoint)
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_DTSEQ_DATA2 = hr::field_value_literal< 0x400ac130, 8, 2 >( 2 );
      // MData toggle sequence (for high-bandwidth isochronous endpoint)
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_DTSEQ_MDATA = hr::field_value_literal< 0x400ac130, 8, 2 >( 3 );
   // High-bandwidth isochronous OUT endpoint transaction error Interrupt
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_ERRORTRANS = hr::field_mask_literal< 0x400ac130, 10, 1 >();
   // Number of Busy Banks
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_NBUSYBK_Msk = hr::field_mask_literal< 0x400ac130, 12, 2 >();
      // 0 busy bank (all banks free)
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_NBUSYBK_0_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 0 );
      // 1 busy bank
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_NBUSYBK_1_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 1 );
      // 2 busy banks
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_NBUSYBK_2_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 2 );
      // 3 busy banks
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_NBUSYBK_3_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 3 );
   // Current Bank
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_CURRBK_Msk = hr::field_mask_literal< 0x400ac130, 14, 2 >();
      // Current bank is bank0
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_CURRBK_BANK0 = hr::field_value_literal< 0x400ac130, 14, 2 >( 0 );
      // Current bank is bank1
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_CURRBK_BANK1 = hr::field_value_literal< 0x400ac130, 14, 2 >( 1 );
      // Current bank is bank2
      constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_CURRBK_BANK2 = hr::field_value_literal< 0x400ac130, 14, 2 >( 2 );
   // Read-write Allowed
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_RWALL = hr::field_mask_literal< 0x400ac130, 16, 1 >();
   // Configuration OK Status
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_CFGOK = hr::field_mask_literal< 0x400ac130, 18, 1 >();
   // Byte Count
   constexpr auto UOTGHS_DEVEPTISR0_ISOENPT_BYCT_Msk = hr::field_mask_literal< 0x400ac130, 20, 11 >();

// DEVEPTISR[0]
   // Transmitted IN Data Interrupt
   constexpr auto UOTGHS_DEVEPTISR_TXINI = hr::field_mask_literal< 0x400ac130, 0, 1 >();
   // Received OUT Data Interrupt
   constexpr auto UOTGHS_DEVEPTISR_RXOUTI = hr::field_mask_literal< 0x400ac130, 1, 1 >();
   // Received SETUP Interrupt
   constexpr auto UOTGHS_DEVEPTISR_RXSTPI = hr::field_mask_literal< 0x400ac130, 2, 1 >();
   // NAKed OUT Interrupt
   constexpr auto UOTGHS_DEVEPTISR_NAKOUTI = hr::field_mask_literal< 0x400ac130, 3, 1 >();
   // NAKed IN Interrupt
   constexpr auto UOTGHS_DEVEPTISR_NAKINI = hr::field_mask_literal< 0x400ac130, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_DEVEPTISR_OVERFI = hr::field_mask_literal< 0x400ac130, 5, 1 >();
   // STALLed Interrupt
   constexpr auto UOTGHS_DEVEPTISR_STALLEDI = hr::field_mask_literal< 0x400ac130, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_DEVEPTISR_SHORTPACKET = hr::field_mask_literal< 0x400ac130, 7, 1 >();
   // Data Toggle Sequence
   constexpr auto UOTGHS_DEVEPTISR_DTSEQ_Msk = hr::field_mask_literal< 0x400ac130, 8, 2 >();
      // Data0 toggle sequence
      constexpr auto UOTGHS_DEVEPTISR_DTSEQ_DATA0 = hr::field_value_literal< 0x400ac130, 8, 2 >( 0 );
      // Data1 toggle sequence
      constexpr auto UOTGHS_DEVEPTISR_DTSEQ_DATA1 = hr::field_value_literal< 0x400ac130, 8, 2 >( 1 );
      // Reserved for high-bandwidth isochronous endpoint
      constexpr auto UOTGHS_DEVEPTISR_DTSEQ_DATA2 = hr::field_value_literal< 0x400ac130, 8, 2 >( 2 );
      // Reserved for high-bandwidth isochronous endpoint
      constexpr auto UOTGHS_DEVEPTISR_DTSEQ_MDATA = hr::field_value_literal< 0x400ac130, 8, 2 >( 3 );
   // Number of Busy Banks
   constexpr auto UOTGHS_DEVEPTISR_NBUSYBK_Msk = hr::field_mask_literal< 0x400ac130, 12, 2 >();
      // 0 busy bank (all banks free)
      constexpr auto UOTGHS_DEVEPTISR_NBUSYBK_0_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 0 );
      // 1 busy bank
      constexpr auto UOTGHS_DEVEPTISR_NBUSYBK_1_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 1 );
      // 2 busy banks
      constexpr auto UOTGHS_DEVEPTISR_NBUSYBK_2_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 2 );
      // 3 busy banks
      constexpr auto UOTGHS_DEVEPTISR_NBUSYBK_3_BUSY = hr::field_value_literal< 0x400ac130, 12, 2 >( 3 );
   // Current Bank
   constexpr auto UOTGHS_DEVEPTISR_CURRBK_Msk = hr::field_mask_literal< 0x400ac130, 14, 2 >();
      // Current bank is bank0
      constexpr auto UOTGHS_DEVEPTISR_CURRBK_BANK0 = hr::field_value_literal< 0x400ac130, 14, 2 >( 0 );
      // Current bank is bank1
      constexpr auto UOTGHS_DEVEPTISR_CURRBK_BANK1 = hr::field_value_literal< 0x400ac130, 14, 2 >( 1 );
      // Current bank is bank2
      constexpr auto UOTGHS_DEVEPTISR_CURRBK_BANK2 = hr::field_value_literal< 0x400ac130, 14, 2 >( 2 );
   // Read-write Allowed
   constexpr auto UOTGHS_DEVEPTISR_RWALL = hr::field_mask_literal< 0x400ac130, 16, 1 >();
   // Control Direction
   constexpr auto UOTGHS_DEVEPTISR_CTRLDIR = hr::field_mask_literal< 0x400ac130, 17, 1 >();
   // Configuration OK Status
   constexpr auto UOTGHS_DEVEPTISR_CFGOK = hr::field_mask_literal< 0x400ac130, 18, 1 >();
   // Byte Count
   constexpr auto UOTGHS_DEVEPTISR_BYCT_Msk = hr::field_mask_literal< 0x400ac130, 20, 11 >();

// DEVEPTICR0_ISOENPT
   // Transmitted IN Data Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_TXINIC = hr::field_mask_literal< 0x400ac160, 0, 1 >();
   // Received OUT Data Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_RXOUTIC = hr::field_mask_literal< 0x400ac160, 1, 1 >();
   // Underflow Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_UNDERFIC = hr::field_mask_literal< 0x400ac160, 2, 1 >();
   // High bandwidth isochronous IN Underflow Error Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_HBISOINERRIC = hr::field_mask_literal< 0x400ac160, 3, 1 >();
   // High Bandwidth Isochronous IN Flush Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_HBISOFLUSHIC = hr::field_mask_literal< 0x400ac160, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_OVERFIC = hr::field_mask_literal< 0x400ac160, 5, 1 >();
   // CRC Error Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_CRCERRIC = hr::field_mask_literal< 0x400ac160, 6, 1 >();
   // Short Packet Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR0_ISOENPT_SHORTPACKETC = hr::field_mask_literal< 0x400ac160, 7, 1 >();

// DEVEPTICR[0]
   // Transmitted IN Data Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_TXINIC = hr::field_mask_literal< 0x400ac160, 0, 1 >();
   // Received OUT Data Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_RXOUTIC = hr::field_mask_literal< 0x400ac160, 1, 1 >();
   // Received SETUP Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_RXSTPIC = hr::field_mask_literal< 0x400ac160, 2, 1 >();
   // NAKed OUT Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_NAKOUTIC = hr::field_mask_literal< 0x400ac160, 3, 1 >();
   // NAKed IN Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_NAKINIC = hr::field_mask_literal< 0x400ac160, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_OVERFIC = hr::field_mask_literal< 0x400ac160, 5, 1 >();
   // STALLed Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_STALLEDIC = hr::field_mask_literal< 0x400ac160, 6, 1 >();
   // Short Packet Interrupt Clear
   constexpr auto UOTGHS_DEVEPTICR_SHORTPACKETC = hr::field_mask_literal< 0x400ac160, 7, 1 >();

// DEVEPTIFR0_ISOENPT
   // Transmitted IN Data Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_TXINIS = hr::field_mask_literal< 0x400ac190, 0, 1 >();
   // Received OUT Data Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_RXOUTIS = hr::field_mask_literal< 0x400ac190, 1, 1 >();
   // Underflow Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_UNDERFIS = hr::field_mask_literal< 0x400ac190, 2, 1 >();
   // High bandwidth isochronous IN Underflow Error Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_HBISOINERRIS = hr::field_mask_literal< 0x400ac190, 3, 1 >();
   // High Bandwidth Isochronous IN Flush Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_HBISOFLUSHIS = hr::field_mask_literal< 0x400ac190, 4, 1 >();
   // Overflow Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_OVERFIS = hr::field_mask_literal< 0x400ac190, 5, 1 >();
   // CRC Error Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_CRCERRIS = hr::field_mask_literal< 0x400ac190, 6, 1 >();
   // Short Packet Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_SHORTPACKETS = hr::field_mask_literal< 0x400ac190, 7, 1 >();
   // Number of Busy Banks Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR0_ISOENPT_NBUSYBKS = hr::field_mask_literal< 0x400ac190, 12, 1 >();

// DEVEPTIFR[0]
   // Transmitted IN Data Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_TXINIS = hr::field_mask_literal< 0x400ac190, 0, 1 >();
   // Received OUT Data Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_RXOUTIS = hr::field_mask_literal< 0x400ac190, 1, 1 >();
   // Received SETUP Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_RXSTPIS = hr::field_mask_literal< 0x400ac190, 2, 1 >();
   // NAKed OUT Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_NAKOUTIS = hr::field_mask_literal< 0x400ac190, 3, 1 >();
   // NAKed IN Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_NAKINIS = hr::field_mask_literal< 0x400ac190, 4, 1 >();
   // Overflow Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_OVERFIS = hr::field_mask_literal< 0x400ac190, 5, 1 >();
   // STALLed Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_STALLEDIS = hr::field_mask_literal< 0x400ac190, 6, 1 >();
   // Short Packet Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_SHORTPACKETS = hr::field_mask_literal< 0x400ac190, 7, 1 >();
   // Number of Busy Banks Interrupt Set
   constexpr auto UOTGHS_DEVEPTIFR_NBUSYBKS = hr::field_mask_literal< 0x400ac190, 12, 1 >();

// DEVEPTIMR0_ISOENPT
   // Transmitted IN Data Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_TXINE = hr::field_mask_literal< 0x400ac1c0, 0, 1 >();
   // Received OUT Data Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_RXOUTE = hr::field_mask_literal< 0x400ac1c0, 1, 1 >();
   // Underflow Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_UNDERFE = hr::field_mask_literal< 0x400ac1c0, 2, 1 >();
   // High Bandwidth Isochronous IN Error Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_HBISOINERRE = hr::field_mask_literal< 0x400ac1c0, 3, 1 >();
   // High Bandwidth Isochronous IN Flush Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_HBISOFLUSHE = hr::field_mask_literal< 0x400ac1c0, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_OVERFE = hr::field_mask_literal< 0x400ac1c0, 5, 1 >();
   // CRC Error Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_CRCERRE = hr::field_mask_literal< 0x400ac1c0, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_SHORTPACKETE = hr::field_mask_literal< 0x400ac1c0, 7, 1 >();
   // MData Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_MDATAE = hr::field_mask_literal< 0x400ac1c0, 8, 1 >();
   // DataX Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_DATAXE = hr::field_mask_literal< 0x400ac1c0, 9, 1 >();
   // Transaction Error Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_ERRORTRANSE = hr::field_mask_literal< 0x400ac1c0, 10, 1 >();
   // Number of Busy Banks Interrupt
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_NBUSYBKE = hr::field_mask_literal< 0x400ac1c0, 12, 1 >();
   // Kill IN Bank
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_KILLBK = hr::field_mask_literal< 0x400ac1c0, 13, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_FIFOCON = hr::field_mask_literal< 0x400ac1c0, 14, 1 >();
   // Endpoint Interrupts Disable HDMA Request
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_EPDISHDMA = hr::field_mask_literal< 0x400ac1c0, 16, 1 >();
   // Reset Data Toggle
   constexpr auto UOTGHS_DEVEPTIMR0_ISOENPT_RSTDT = hr::field_mask_literal< 0x400ac1c0, 18, 1 >();

// DEVEPTIMR[0]
   // Transmitted IN Data Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_TXINE = hr::field_mask_literal< 0x400ac1c0, 0, 1 >();
   // Received OUT Data Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_RXOUTE = hr::field_mask_literal< 0x400ac1c0, 1, 1 >();
   // Received SETUP Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_RXSTPE = hr::field_mask_literal< 0x400ac1c0, 2, 1 >();
   // NAKed OUT Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_NAKOUTE = hr::field_mask_literal< 0x400ac1c0, 3, 1 >();
   // NAKed IN Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_NAKINE = hr::field_mask_literal< 0x400ac1c0, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_OVERFE = hr::field_mask_literal< 0x400ac1c0, 5, 1 >();
   // STALLed Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_STALLEDE = hr::field_mask_literal< 0x400ac1c0, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_SHORTPACKETE = hr::field_mask_literal< 0x400ac1c0, 7, 1 >();
   // Number of Busy Banks Interrupt
   constexpr auto UOTGHS_DEVEPTIMR_NBUSYBKE = hr::field_mask_literal< 0x400ac1c0, 12, 1 >();
   // Kill IN Bank
   constexpr auto UOTGHS_DEVEPTIMR_KILLBK = hr::field_mask_literal< 0x400ac1c0, 13, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_DEVEPTIMR_FIFOCON = hr::field_mask_literal< 0x400ac1c0, 14, 1 >();
   // Endpoint Interrupts Disable HDMA Request
   constexpr auto UOTGHS_DEVEPTIMR_EPDISHDMA = hr::field_mask_literal< 0x400ac1c0, 16, 1 >();
   // NYET Token Disable
   constexpr auto UOTGHS_DEVEPTIMR_NYETDIS = hr::field_mask_literal< 0x400ac1c0, 17, 1 >();
   // Reset Data Toggle
   constexpr auto UOTGHS_DEVEPTIMR_RSTDT = hr::field_mask_literal< 0x400ac1c0, 18, 1 >();
   // STALL Request
   constexpr auto UOTGHS_DEVEPTIMR_STALLRQ = hr::field_mask_literal< 0x400ac1c0, 19, 1 >();

// DEVEPTIER0_ISOENPT
   // Transmitted IN Data Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_TXINES = hr::field_mask_literal< 0x400ac1f0, 0, 1 >();
   // Received OUT Data Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_RXOUTES = hr::field_mask_literal< 0x400ac1f0, 1, 1 >();
   // Underflow Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_UNDERFES = hr::field_mask_literal< 0x400ac1f0, 2, 1 >();
   // High Bandwidth Isochronous IN Error Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_HBISOINERRES = hr::field_mask_literal< 0x400ac1f0, 3, 1 >();
   // High Bandwidth Isochronous IN Flush Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_HBISOFLUSHES = hr::field_mask_literal< 0x400ac1f0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_OVERFES = hr::field_mask_literal< 0x400ac1f0, 5, 1 >();
   // CRC Error Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_CRCERRES = hr::field_mask_literal< 0x400ac1f0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_SHORTPACKETES = hr::field_mask_literal< 0x400ac1f0, 7, 1 >();
   // MData Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_MDATAES = hr::field_mask_literal< 0x400ac1f0, 8, 1 >();
   // DataX Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_DATAXES = hr::field_mask_literal< 0x400ac1f0, 9, 1 >();
   // Transaction Error Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_ERRORTRANSES = hr::field_mask_literal< 0x400ac1f0, 10, 1 >();
   // Number of Busy Banks Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_NBUSYBKES = hr::field_mask_literal< 0x400ac1f0, 12, 1 >();
   // Kill IN Bank
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_KILLBKS = hr::field_mask_literal< 0x400ac1f0, 13, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_FIFOCONS = hr::field_mask_literal< 0x400ac1f0, 14, 1 >();
   // Endpoint Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_EPDISHDMAS = hr::field_mask_literal< 0x400ac1f0, 16, 1 >();
   // Reset Data Toggle Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_RSTDTS = hr::field_mask_literal< 0x400ac1f0, 18, 1 >();
   // STALL Request Enable
   constexpr auto UOTGHS_DEVEPTIER0_ISOENPT_STALLRQS = hr::field_mask_literal< 0x400ac1f0, 19, 1 >();

// DEVEPTIER[0]
   // Transmitted IN Data Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_TXINES = hr::field_mask_literal< 0x400ac1f0, 0, 1 >();
   // Received OUT Data Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_RXOUTES = hr::field_mask_literal< 0x400ac1f0, 1, 1 >();
   // Received SETUP Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_RXSTPES = hr::field_mask_literal< 0x400ac1f0, 2, 1 >();
   // NAKed OUT Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_NAKOUTES = hr::field_mask_literal< 0x400ac1f0, 3, 1 >();
   // NAKed IN Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_NAKINES = hr::field_mask_literal< 0x400ac1f0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_OVERFES = hr::field_mask_literal< 0x400ac1f0, 5, 1 >();
   // STALLed Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_STALLEDES = hr::field_mask_literal< 0x400ac1f0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_SHORTPACKETES = hr::field_mask_literal< 0x400ac1f0, 7, 1 >();
   // Number of Busy Banks Interrupt Enable
   constexpr auto UOTGHS_DEVEPTIER_NBUSYBKES = hr::field_mask_literal< 0x400ac1f0, 12, 1 >();
   // Kill IN Bank
   constexpr auto UOTGHS_DEVEPTIER_KILLBKS = hr::field_mask_literal< 0x400ac1f0, 13, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_DEVEPTIER_FIFOCONS = hr::field_mask_literal< 0x400ac1f0, 14, 1 >();
   // Endpoint Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_DEVEPTIER_EPDISHDMAS = hr::field_mask_literal< 0x400ac1f0, 16, 1 >();
   // NYET Token Disable Enable
   constexpr auto UOTGHS_DEVEPTIER_NYETDISS = hr::field_mask_literal< 0x400ac1f0, 17, 1 >();
   // Reset Data Toggle Enable
   constexpr auto UOTGHS_DEVEPTIER_RSTDTS = hr::field_mask_literal< 0x400ac1f0, 18, 1 >();
   // STALL Request Enable
   constexpr auto UOTGHS_DEVEPTIER_STALLRQS = hr::field_mask_literal< 0x400ac1f0, 19, 1 >();

// DEVEPTIDR0_ISOENPT
   // Transmitted IN Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_TXINEC = hr::field_mask_literal< 0x400ac220, 0, 1 >();
   // Received OUT Data Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_RXOUTEC = hr::field_mask_literal< 0x400ac220, 1, 1 >();
   // Underflow Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_UNDERFEC = hr::field_mask_literal< 0x400ac220, 2, 1 >();
   // High Bandwidth Isochronous IN Error Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_HBISOINERREC = hr::field_mask_literal< 0x400ac220, 3, 1 >();
   // High Bandwidth Isochronous IN Flush Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_HBISOFLUSHEC = hr::field_mask_literal< 0x400ac220, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_OVERFEC = hr::field_mask_literal< 0x400ac220, 5, 1 >();
   // CRC Error Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_CRCERREC = hr::field_mask_literal< 0x400ac220, 6, 1 >();
   // Shortpacket Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_SHORTPACKETEC = hr::field_mask_literal< 0x400ac220, 7, 1 >();
   // MData Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_MDATEC = hr::field_mask_literal< 0x400ac220, 8, 1 >();
   // DataX Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_DATAXEC = hr::field_mask_literal< 0x400ac220, 9, 1 >();
   // Transaction Error Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_ERRORTRANSEC = hr::field_mask_literal< 0x400ac220, 10, 1 >();
   // Number of Busy Banks Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_NBUSYBKEC = hr::field_mask_literal< 0x400ac220, 12, 1 >();
   // FIFO Control Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_FIFOCONC = hr::field_mask_literal< 0x400ac220, 14, 1 >();
   // Endpoint Interrupts Disable HDMA Request Clear
   constexpr auto UOTGHS_DEVEPTIDR0_ISOENPT_EPDISHDMAC = hr::field_mask_literal< 0x400ac220, 16, 1 >();

// DEVEPTIDR[0]
   // Transmitted IN Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_TXINEC = hr::field_mask_literal< 0x400ac220, 0, 1 >();
   // Received OUT Data Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_RXOUTEC = hr::field_mask_literal< 0x400ac220, 1, 1 >();
   // Received SETUP Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_RXSTPEC = hr::field_mask_literal< 0x400ac220, 2, 1 >();
   // NAKed OUT Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_NAKOUTEC = hr::field_mask_literal< 0x400ac220, 3, 1 >();
   // NAKed IN Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_NAKINEC = hr::field_mask_literal< 0x400ac220, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_OVERFEC = hr::field_mask_literal< 0x400ac220, 5, 1 >();
   // STALLed Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_STALLEDEC = hr::field_mask_literal< 0x400ac220, 6, 1 >();
   // Shortpacket Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_SHORTPACKETEC = hr::field_mask_literal< 0x400ac220, 7, 1 >();
   // Number of Busy Banks Interrupt Clear
   constexpr auto UOTGHS_DEVEPTIDR_NBUSYBKEC = hr::field_mask_literal< 0x400ac220, 12, 1 >();
   // FIFO Control Clear
   constexpr auto UOTGHS_DEVEPTIDR_FIFOCONC = hr::field_mask_literal< 0x400ac220, 14, 1 >();
   // Endpoint Interrupts Disable HDMA Request Clear
   constexpr auto UOTGHS_DEVEPTIDR_EPDISHDMAC = hr::field_mask_literal< 0x400ac220, 16, 1 >();
   // NYET Token Disable Clear
   constexpr auto UOTGHS_DEVEPTIDR_NYETDISC = hr::field_mask_literal< 0x400ac220, 17, 1 >();
   // STALL Request Clear
   constexpr auto UOTGHS_DEVEPTIDR_STALLRQC = hr::field_mask_literal< 0x400ac220, 19, 1 >();

// DEVDMANXTDSC1
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC1_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac310, 0, 32 >();

// DEVDMAADDRESS1
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS1_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac314, 0, 32 >();

// DEVDMACONTROL1
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL1_CHANN_ENB = hr::field_mask_literal< 0x400ac318, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL1_LDNXT_DSC = hr::field_mask_literal< 0x400ac318, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL1_END_TR_EN = hr::field_mask_literal< 0x400ac318, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL1_END_B_EN = hr::field_mask_literal< 0x400ac318, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL1_END_TR_IT = hr::field_mask_literal< 0x400ac318, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL1_END_BUFFIT = hr::field_mask_literal< 0x400ac318, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL1_DESC_LD_IT = hr::field_mask_literal< 0x400ac318, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL1_BURST_LCK = hr::field_mask_literal< 0x400ac318, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL1_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac318, 16, 16 >();

// DEVDMASTATUS1
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS1_CHANN_ENB = hr::field_mask_literal< 0x400ac31c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS1_CHANN_ACT = hr::field_mask_literal< 0x400ac31c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS1_END_TR_ST = hr::field_mask_literal< 0x400ac31c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS1_END_BF_ST = hr::field_mask_literal< 0x400ac31c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS1_DESC_LDST = hr::field_mask_literal< 0x400ac31c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS1_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac31c, 16, 16 >();

// DEVDMANXTDSC2
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC2_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac320, 0, 32 >();

// DEVDMAADDRESS2
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS2_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac324, 0, 32 >();

// DEVDMACONTROL2
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL2_CHANN_ENB = hr::field_mask_literal< 0x400ac328, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL2_LDNXT_DSC = hr::field_mask_literal< 0x400ac328, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL2_END_TR_EN = hr::field_mask_literal< 0x400ac328, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL2_END_B_EN = hr::field_mask_literal< 0x400ac328, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL2_END_TR_IT = hr::field_mask_literal< 0x400ac328, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL2_END_BUFFIT = hr::field_mask_literal< 0x400ac328, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL2_DESC_LD_IT = hr::field_mask_literal< 0x400ac328, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL2_BURST_LCK = hr::field_mask_literal< 0x400ac328, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL2_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac328, 16, 16 >();

// DEVDMASTATUS2
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS2_CHANN_ENB = hr::field_mask_literal< 0x400ac32c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS2_CHANN_ACT = hr::field_mask_literal< 0x400ac32c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS2_END_TR_ST = hr::field_mask_literal< 0x400ac32c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS2_END_BF_ST = hr::field_mask_literal< 0x400ac32c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS2_DESC_LDST = hr::field_mask_literal< 0x400ac32c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS2_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac32c, 16, 16 >();

// DEVDMANXTDSC3
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC3_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac330, 0, 32 >();

// DEVDMAADDRESS3
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS3_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac334, 0, 32 >();

// DEVDMACONTROL3
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL3_CHANN_ENB = hr::field_mask_literal< 0x400ac338, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL3_LDNXT_DSC = hr::field_mask_literal< 0x400ac338, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL3_END_TR_EN = hr::field_mask_literal< 0x400ac338, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL3_END_B_EN = hr::field_mask_literal< 0x400ac338, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL3_END_TR_IT = hr::field_mask_literal< 0x400ac338, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL3_END_BUFFIT = hr::field_mask_literal< 0x400ac338, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL3_DESC_LD_IT = hr::field_mask_literal< 0x400ac338, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL3_BURST_LCK = hr::field_mask_literal< 0x400ac338, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL3_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac338, 16, 16 >();

// DEVDMASTATUS3
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS3_CHANN_ENB = hr::field_mask_literal< 0x400ac33c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS3_CHANN_ACT = hr::field_mask_literal< 0x400ac33c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS3_END_TR_ST = hr::field_mask_literal< 0x400ac33c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS3_END_BF_ST = hr::field_mask_literal< 0x400ac33c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS3_DESC_LDST = hr::field_mask_literal< 0x400ac33c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS3_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac33c, 16, 16 >();

// DEVDMANXTDSC4
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC4_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac340, 0, 32 >();

// DEVDMAADDRESS4
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS4_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac344, 0, 32 >();

// DEVDMACONTROL4
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL4_CHANN_ENB = hr::field_mask_literal< 0x400ac348, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL4_LDNXT_DSC = hr::field_mask_literal< 0x400ac348, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL4_END_TR_EN = hr::field_mask_literal< 0x400ac348, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL4_END_B_EN = hr::field_mask_literal< 0x400ac348, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL4_END_TR_IT = hr::field_mask_literal< 0x400ac348, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL4_END_BUFFIT = hr::field_mask_literal< 0x400ac348, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL4_DESC_LD_IT = hr::field_mask_literal< 0x400ac348, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL4_BURST_LCK = hr::field_mask_literal< 0x400ac348, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL4_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac348, 16, 16 >();

// DEVDMASTATUS4
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS4_CHANN_ENB = hr::field_mask_literal< 0x400ac34c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS4_CHANN_ACT = hr::field_mask_literal< 0x400ac34c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS4_END_TR_ST = hr::field_mask_literal< 0x400ac34c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS4_END_BF_ST = hr::field_mask_literal< 0x400ac34c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS4_DESC_LDST = hr::field_mask_literal< 0x400ac34c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS4_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac34c, 16, 16 >();

// DEVDMANXTDSC5
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC5_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac350, 0, 32 >();

// DEVDMAADDRESS5
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS5_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac354, 0, 32 >();

// DEVDMACONTROL5
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL5_CHANN_ENB = hr::field_mask_literal< 0x400ac358, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL5_LDNXT_DSC = hr::field_mask_literal< 0x400ac358, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL5_END_TR_EN = hr::field_mask_literal< 0x400ac358, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL5_END_B_EN = hr::field_mask_literal< 0x400ac358, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL5_END_TR_IT = hr::field_mask_literal< 0x400ac358, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL5_END_BUFFIT = hr::field_mask_literal< 0x400ac358, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL5_DESC_LD_IT = hr::field_mask_literal< 0x400ac358, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL5_BURST_LCK = hr::field_mask_literal< 0x400ac358, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL5_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac358, 16, 16 >();

// DEVDMASTATUS5
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS5_CHANN_ENB = hr::field_mask_literal< 0x400ac35c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS5_CHANN_ACT = hr::field_mask_literal< 0x400ac35c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS5_END_TR_ST = hr::field_mask_literal< 0x400ac35c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS5_END_BF_ST = hr::field_mask_literal< 0x400ac35c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS5_DESC_LDST = hr::field_mask_literal< 0x400ac35c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS5_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac35c, 16, 16 >();

// DEVDMANXTDSC6
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC6_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac360, 0, 32 >();

// DEVDMAADDRESS6
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS6_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac364, 0, 32 >();

// DEVDMACONTROL6
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL6_CHANN_ENB = hr::field_mask_literal< 0x400ac368, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL6_LDNXT_DSC = hr::field_mask_literal< 0x400ac368, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL6_END_TR_EN = hr::field_mask_literal< 0x400ac368, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL6_END_B_EN = hr::field_mask_literal< 0x400ac368, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL6_END_TR_IT = hr::field_mask_literal< 0x400ac368, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL6_END_BUFFIT = hr::field_mask_literal< 0x400ac368, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL6_DESC_LD_IT = hr::field_mask_literal< 0x400ac368, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL6_BURST_LCK = hr::field_mask_literal< 0x400ac368, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL6_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac368, 16, 16 >();

// DEVDMASTATUS6
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS6_CHANN_ENB = hr::field_mask_literal< 0x400ac36c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS6_CHANN_ACT = hr::field_mask_literal< 0x400ac36c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS6_END_TR_ST = hr::field_mask_literal< 0x400ac36c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS6_END_BF_ST = hr::field_mask_literal< 0x400ac36c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS6_DESC_LDST = hr::field_mask_literal< 0x400ac36c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS6_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac36c, 16, 16 >();

// DEVDMANXTDSC7
   // Next Descriptor Address
   constexpr auto UOTGHS_DEVDMANXTDSC7_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac370, 0, 32 >();

// DEVDMAADDRESS7
   // Buffer Address
   constexpr auto UOTGHS_DEVDMAADDRESS7_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac374, 0, 32 >();

// DEVDMACONTROL7
   // Channel Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL7_CHANN_ENB = hr::field_mask_literal< 0x400ac378, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_DEVDMACONTROL7_LDNXT_DSC = hr::field_mask_literal< 0x400ac378, 1, 1 >();
   // End of Transfer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL7_END_TR_EN = hr::field_mask_literal< 0x400ac378, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_DEVDMACONTROL7_END_B_EN = hr::field_mask_literal< 0x400ac378, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL7_END_TR_IT = hr::field_mask_literal< 0x400ac378, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL7_END_BUFFIT = hr::field_mask_literal< 0x400ac378, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_DEVDMACONTROL7_DESC_LD_IT = hr::field_mask_literal< 0x400ac378, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_DEVDMACONTROL7_BURST_LCK = hr::field_mask_literal< 0x400ac378, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_DEVDMACONTROL7_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac378, 16, 16 >();

// DEVDMASTATUS7
   // Channel Enable Status
   constexpr auto UOTGHS_DEVDMASTATUS7_CHANN_ENB = hr::field_mask_literal< 0x400ac37c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_DEVDMASTATUS7_CHANN_ACT = hr::field_mask_literal< 0x400ac37c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_DEVDMASTATUS7_END_TR_ST = hr::field_mask_literal< 0x400ac37c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_DEVDMASTATUS7_END_BF_ST = hr::field_mask_literal< 0x400ac37c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_DEVDMASTATUS7_DESC_LDST = hr::field_mask_literal< 0x400ac37c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_DEVDMASTATUS7_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac37c, 16, 16 >();

// HSTCTRL
   // Start of Frame Generation Enable
   constexpr auto UOTGHS_HSTCTRL_SOFE = hr::field_mask_literal< 0x400ac400, 8, 1 >();
   // Send USB Reset
   constexpr auto UOTGHS_HSTCTRL_RESET = hr::field_mask_literal< 0x400ac400, 9, 1 >();
   // Send USB Resume
   constexpr auto UOTGHS_HSTCTRL_RESUME = hr::field_mask_literal< 0x400ac400, 10, 1 >();
   // Mode Configuration
   constexpr auto UOTGHS_HSTCTRL_SPDCONF_Msk = hr::field_mask_literal< 0x400ac400, 12, 2 >();
      // The host starts in full-speed mode and performs a high-speed reset to switch to the high-speed mode if the downstream peripheral is high-speed capable.
      constexpr auto UOTGHS_HSTCTRL_SPDCONF_NORMAL = hr::field_value_literal< 0x400ac400, 12, 2 >( 0 );
      // For a better consumption, if high-speed is not needed.
      constexpr auto UOTGHS_HSTCTRL_SPDCONF_LOW_POWER = hr::field_value_literal< 0x400ac400, 12, 2 >( 1 );
      // Forced high speed.
      constexpr auto UOTGHS_HSTCTRL_SPDCONF_HIGH_SPEED = hr::field_value_literal< 0x400ac400, 12, 2 >( 2 );
      // The host remains to full-speed mode whatever the peripheral speed capability.
      constexpr auto UOTGHS_HSTCTRL_SPDCONF_FORCED_FS = hr::field_value_literal< 0x400ac400, 12, 2 >( 3 );

// HSTISR
   // Device Connection Interrupt
   constexpr auto UOTGHS_HSTISR_DCONNI = hr::field_mask_literal< 0x400ac404, 0, 1 >();
   // Device Disconnection Interrupt
   constexpr auto UOTGHS_HSTISR_DDISCI = hr::field_mask_literal< 0x400ac404, 1, 1 >();
   // USB Reset Sent Interrupt
   constexpr auto UOTGHS_HSTISR_RSTI = hr::field_mask_literal< 0x400ac404, 2, 1 >();
   // Downstream Resume Sent Interrupt
   constexpr auto UOTGHS_HSTISR_RSMEDI = hr::field_mask_literal< 0x400ac404, 3, 1 >();
   // Upstream Resume Received Interrupt
   constexpr auto UOTGHS_HSTISR_RXRSMI = hr::field_mask_literal< 0x400ac404, 4, 1 >();
   // Host Start of Frame Interrupt
   constexpr auto UOTGHS_HSTISR_HSOFI = hr::field_mask_literal< 0x400ac404, 5, 1 >();
   // Host Wake-Up Interrupt
   constexpr auto UOTGHS_HSTISR_HWUPI = hr::field_mask_literal< 0x400ac404, 6, 1 >();
   // Pipe 0 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_0 = hr::field_mask_literal< 0x400ac404, 8, 1 >();
   // Pipe 1 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_1 = hr::field_mask_literal< 0x400ac404, 9, 1 >();
   // Pipe 2 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_2 = hr::field_mask_literal< 0x400ac404, 10, 1 >();
   // Pipe 3 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_3 = hr::field_mask_literal< 0x400ac404, 11, 1 >();
   // Pipe 4 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_4 = hr::field_mask_literal< 0x400ac404, 12, 1 >();
   // Pipe 5 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_5 = hr::field_mask_literal< 0x400ac404, 13, 1 >();
   // Pipe 6 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_6 = hr::field_mask_literal< 0x400ac404, 14, 1 >();
   // Pipe 7 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_7 = hr::field_mask_literal< 0x400ac404, 15, 1 >();
   // Pipe 8 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_8 = hr::field_mask_literal< 0x400ac404, 16, 1 >();
   // Pipe 9 Interrupt
   constexpr auto UOTGHS_HSTISR_PEP_9 = hr::field_mask_literal< 0x400ac404, 17, 1 >();
   // DMA Channel 1 Interrupt
   constexpr auto UOTGHS_HSTISR_DMA_1 = hr::field_mask_literal< 0x400ac404, 25, 1 >();
   // DMA Channel 2 Interrupt
   constexpr auto UOTGHS_HSTISR_DMA_2 = hr::field_mask_literal< 0x400ac404, 26, 1 >();
   // DMA Channel 3 Interrupt
   constexpr auto UOTGHS_HSTISR_DMA_3 = hr::field_mask_literal< 0x400ac404, 27, 1 >();
   // DMA Channel 4 Interrupt
   constexpr auto UOTGHS_HSTISR_DMA_4 = hr::field_mask_literal< 0x400ac404, 28, 1 >();
   // DMA Channel 5 Interrupt
   constexpr auto UOTGHS_HSTISR_DMA_5 = hr::field_mask_literal< 0x400ac404, 29, 1 >();
   // DMA Channel 6 Interrupt
   constexpr auto UOTGHS_HSTISR_DMA_6 = hr::field_mask_literal< 0x400ac404, 30, 1 >();

// HSTICR
   // Device Connection Interrupt Clear
   constexpr auto UOTGHS_HSTICR_DCONNIC = hr::field_mask_literal< 0x400ac408, 0, 1 >();
   // Device Disconnection Interrupt Clear
   constexpr auto UOTGHS_HSTICR_DDISCIC = hr::field_mask_literal< 0x400ac408, 1, 1 >();
   // USB Reset Sent Interrupt Clear
   constexpr auto UOTGHS_HSTICR_RSTIC = hr::field_mask_literal< 0x400ac408, 2, 1 >();
   // Downstream Resume Sent Interrupt Clear
   constexpr auto UOTGHS_HSTICR_RSMEDIC = hr::field_mask_literal< 0x400ac408, 3, 1 >();
   // Upstream Resume Received Interrupt Clear
   constexpr auto UOTGHS_HSTICR_RXRSMIC = hr::field_mask_literal< 0x400ac408, 4, 1 >();
   // Host Start of Frame Interrupt Clear
   constexpr auto UOTGHS_HSTICR_HSOFIC = hr::field_mask_literal< 0x400ac408, 5, 1 >();
   // Host Wake-Up Interrupt Clear
   constexpr auto UOTGHS_HSTICR_HWUPIC = hr::field_mask_literal< 0x400ac408, 6, 1 >();

// HSTIFR
   // Device Connection Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DCONNIS = hr::field_mask_literal< 0x400ac40c, 0, 1 >();
   // Device Disconnection Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DDISCIS = hr::field_mask_literal< 0x400ac40c, 1, 1 >();
   // USB Reset Sent Interrupt Set
   constexpr auto UOTGHS_HSTIFR_RSTIS = hr::field_mask_literal< 0x400ac40c, 2, 1 >();
   // Downstream Resume Sent Interrupt Set
   constexpr auto UOTGHS_HSTIFR_RSMEDIS = hr::field_mask_literal< 0x400ac40c, 3, 1 >();
   // Upstream Resume Received Interrupt Set
   constexpr auto UOTGHS_HSTIFR_RXRSMIS = hr::field_mask_literal< 0x400ac40c, 4, 1 >();
   // Host Start of Frame Interrupt Set
   constexpr auto UOTGHS_HSTIFR_HSOFIS = hr::field_mask_literal< 0x400ac40c, 5, 1 >();
   // Host Wake-Up Interrupt Set
   constexpr auto UOTGHS_HSTIFR_HWUPIS = hr::field_mask_literal< 0x400ac40c, 6, 1 >();
   // DMA Channel 1 Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DMA_1 = hr::field_mask_literal< 0x400ac40c, 25, 1 >();
   // DMA Channel 2 Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DMA_2 = hr::field_mask_literal< 0x400ac40c, 26, 1 >();
   // DMA Channel 3 Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DMA_3 = hr::field_mask_literal< 0x400ac40c, 27, 1 >();
   // DMA Channel 4 Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DMA_4 = hr::field_mask_literal< 0x400ac40c, 28, 1 >();
   // DMA Channel 5 Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DMA_5 = hr::field_mask_literal< 0x400ac40c, 29, 1 >();
   // DMA Channel 6 Interrupt Set
   constexpr auto UOTGHS_HSTIFR_DMA_6 = hr::field_mask_literal< 0x400ac40c, 30, 1 >();

// HSTIMR
   // Device Connection Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DCONNIE = hr::field_mask_literal< 0x400ac410, 0, 1 >();
   // Device Disconnection Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DDISCIE = hr::field_mask_literal< 0x400ac410, 1, 1 >();
   // USB Reset Sent Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_RSTIE = hr::field_mask_literal< 0x400ac410, 2, 1 >();
   // Downstream Resume Sent Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_RSMEDIE = hr::field_mask_literal< 0x400ac410, 3, 1 >();
   // Upstream Resume Received Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_RXRSMIE = hr::field_mask_literal< 0x400ac410, 4, 1 >();
   // Host Start of Frame Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_HSOFIE = hr::field_mask_literal< 0x400ac410, 5, 1 >();
   // Host Wake-Up Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_HWUPIE = hr::field_mask_literal< 0x400ac410, 6, 1 >();
   // Pipe 0 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_0 = hr::field_mask_literal< 0x400ac410, 8, 1 >();
   // Pipe 1 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_1 = hr::field_mask_literal< 0x400ac410, 9, 1 >();
   // Pipe 2 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_2 = hr::field_mask_literal< 0x400ac410, 10, 1 >();
   // Pipe 3 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_3 = hr::field_mask_literal< 0x400ac410, 11, 1 >();
   // Pipe 4 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_4 = hr::field_mask_literal< 0x400ac410, 12, 1 >();
   // Pipe 5 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_5 = hr::field_mask_literal< 0x400ac410, 13, 1 >();
   // Pipe 6 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_6 = hr::field_mask_literal< 0x400ac410, 14, 1 >();
   // Pipe 7 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_7 = hr::field_mask_literal< 0x400ac410, 15, 1 >();
   // Pipe 8 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_8 = hr::field_mask_literal< 0x400ac410, 16, 1 >();
   // Pipe 9 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_PEP_9 = hr::field_mask_literal< 0x400ac410, 17, 1 >();
   // DMA Channel 1 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DMA_1 = hr::field_mask_literal< 0x400ac410, 25, 1 >();
   // DMA Channel 2 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DMA_2 = hr::field_mask_literal< 0x400ac410, 26, 1 >();
   // DMA Channel 3 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DMA_3 = hr::field_mask_literal< 0x400ac410, 27, 1 >();
   // DMA Channel 4 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DMA_4 = hr::field_mask_literal< 0x400ac410, 28, 1 >();
   // DMA Channel 5 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DMA_5 = hr::field_mask_literal< 0x400ac410, 29, 1 >();
   // DMA Channel 6 Interrupt Enable
   constexpr auto UOTGHS_HSTIMR_DMA_6 = hr::field_mask_literal< 0x400ac410, 30, 1 >();

// HSTIDR
   // Device Connection Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DCONNIEC = hr::field_mask_literal< 0x400ac414, 0, 1 >();
   // Device Disconnection Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DDISCIEC = hr::field_mask_literal< 0x400ac414, 1, 1 >();
   // USB Reset Sent Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_RSTIEC = hr::field_mask_literal< 0x400ac414, 2, 1 >();
   // Downstream Resume Sent Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_RSMEDIEC = hr::field_mask_literal< 0x400ac414, 3, 1 >();
   // Upstream Resume Received Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_RXRSMIEC = hr::field_mask_literal< 0x400ac414, 4, 1 >();
   // Host Start of Frame Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_HSOFIEC = hr::field_mask_literal< 0x400ac414, 5, 1 >();
   // Host Wake-Up Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_HWUPIEC = hr::field_mask_literal< 0x400ac414, 6, 1 >();
   // Pipe 0 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_0 = hr::field_mask_literal< 0x400ac414, 8, 1 >();
   // Pipe 1 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_1 = hr::field_mask_literal< 0x400ac414, 9, 1 >();
   // Pipe 2 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_2 = hr::field_mask_literal< 0x400ac414, 10, 1 >();
   // Pipe 3 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_3 = hr::field_mask_literal< 0x400ac414, 11, 1 >();
   // Pipe 4 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_4 = hr::field_mask_literal< 0x400ac414, 12, 1 >();
   // Pipe 5 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_5 = hr::field_mask_literal< 0x400ac414, 13, 1 >();
   // Pipe 6 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_6 = hr::field_mask_literal< 0x400ac414, 14, 1 >();
   // Pipe 7 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_7 = hr::field_mask_literal< 0x400ac414, 15, 1 >();
   // Pipe 8 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_8 = hr::field_mask_literal< 0x400ac414, 16, 1 >();
   // Pipe 9 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_PEP_9 = hr::field_mask_literal< 0x400ac414, 17, 1 >();
   // DMA Channel 1 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DMA_1 = hr::field_mask_literal< 0x400ac414, 25, 1 >();
   // DMA Channel 2 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DMA_2 = hr::field_mask_literal< 0x400ac414, 26, 1 >();
   // DMA Channel 3 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DMA_3 = hr::field_mask_literal< 0x400ac414, 27, 1 >();
   // DMA Channel 4 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DMA_4 = hr::field_mask_literal< 0x400ac414, 28, 1 >();
   // DMA Channel 5 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DMA_5 = hr::field_mask_literal< 0x400ac414, 29, 1 >();
   // DMA Channel 6 Interrupt Disable
   constexpr auto UOTGHS_HSTIDR_DMA_6 = hr::field_mask_literal< 0x400ac414, 30, 1 >();

// HSTIER
   // Device Connection Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DCONNIES = hr::field_mask_literal< 0x400ac418, 0, 1 >();
   // Device Disconnection Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DDISCIES = hr::field_mask_literal< 0x400ac418, 1, 1 >();
   // USB Reset Sent Interrupt Enable
   constexpr auto UOTGHS_HSTIER_RSTIES = hr::field_mask_literal< 0x400ac418, 2, 1 >();
   // Downstream Resume Sent Interrupt Enable
   constexpr auto UOTGHS_HSTIER_RSMEDIES = hr::field_mask_literal< 0x400ac418, 3, 1 >();
   // Upstream Resume Received Interrupt Enable
   constexpr auto UOTGHS_HSTIER_RXRSMIES = hr::field_mask_literal< 0x400ac418, 4, 1 >();
   // Host Start of Frame Interrupt Enable
   constexpr auto UOTGHS_HSTIER_HSOFIES = hr::field_mask_literal< 0x400ac418, 5, 1 >();
   // Host Wake-Up Interrupt Enable
   constexpr auto UOTGHS_HSTIER_HWUPIES = hr::field_mask_literal< 0x400ac418, 6, 1 >();
   // Pipe 0 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_0 = hr::field_mask_literal< 0x400ac418, 8, 1 >();
   // Pipe 1 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_1 = hr::field_mask_literal< 0x400ac418, 9, 1 >();
   // Pipe 2 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_2 = hr::field_mask_literal< 0x400ac418, 10, 1 >();
   // Pipe 3 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_3 = hr::field_mask_literal< 0x400ac418, 11, 1 >();
   // Pipe 4 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_4 = hr::field_mask_literal< 0x400ac418, 12, 1 >();
   // Pipe 5 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_5 = hr::field_mask_literal< 0x400ac418, 13, 1 >();
   // Pipe 6 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_6 = hr::field_mask_literal< 0x400ac418, 14, 1 >();
   // Pipe 7 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_7 = hr::field_mask_literal< 0x400ac418, 15, 1 >();
   // Pipe 8 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_8 = hr::field_mask_literal< 0x400ac418, 16, 1 >();
   // Pipe 9 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_PEP_9 = hr::field_mask_literal< 0x400ac418, 17, 1 >();
   // DMA Channel 1 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DMA_1 = hr::field_mask_literal< 0x400ac418, 25, 1 >();
   // DMA Channel 2 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DMA_2 = hr::field_mask_literal< 0x400ac418, 26, 1 >();
   // DMA Channel 3 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DMA_3 = hr::field_mask_literal< 0x400ac418, 27, 1 >();
   // DMA Channel 4 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DMA_4 = hr::field_mask_literal< 0x400ac418, 28, 1 >();
   // DMA Channel 5 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DMA_5 = hr::field_mask_literal< 0x400ac418, 29, 1 >();
   // DMA Channel 6 Interrupt Enable
   constexpr auto UOTGHS_HSTIER_DMA_6 = hr::field_mask_literal< 0x400ac418, 30, 1 >();

// HSTPIP
   // Pipe 0 Enable
   constexpr auto UOTGHS_HSTPIP_PEN0 = hr::field_mask_literal< 0x400ac41c, 0, 1 >();
   // Pipe 1 Enable
   constexpr auto UOTGHS_HSTPIP_PEN1 = hr::field_mask_literal< 0x400ac41c, 1, 1 >();
   // Pipe 2 Enable
   constexpr auto UOTGHS_HSTPIP_PEN2 = hr::field_mask_literal< 0x400ac41c, 2, 1 >();
   // Pipe 3 Enable
   constexpr auto UOTGHS_HSTPIP_PEN3 = hr::field_mask_literal< 0x400ac41c, 3, 1 >();
   // Pipe 4 Enable
   constexpr auto UOTGHS_HSTPIP_PEN4 = hr::field_mask_literal< 0x400ac41c, 4, 1 >();
   // Pipe 5 Enable
   constexpr auto UOTGHS_HSTPIP_PEN5 = hr::field_mask_literal< 0x400ac41c, 5, 1 >();
   // Pipe 6 Enable
   constexpr auto UOTGHS_HSTPIP_PEN6 = hr::field_mask_literal< 0x400ac41c, 6, 1 >();
   // Pipe 7 Enable
   constexpr auto UOTGHS_HSTPIP_PEN7 = hr::field_mask_literal< 0x400ac41c, 7, 1 >();
   // Pipe 8 Enable
   constexpr auto UOTGHS_HSTPIP_PEN8 = hr::field_mask_literal< 0x400ac41c, 8, 1 >();
   // Pipe 0 Reset
   constexpr auto UOTGHS_HSTPIP_PRST0 = hr::field_mask_literal< 0x400ac41c, 16, 1 >();
   // Pipe 1 Reset
   constexpr auto UOTGHS_HSTPIP_PRST1 = hr::field_mask_literal< 0x400ac41c, 17, 1 >();
   // Pipe 2 Reset
   constexpr auto UOTGHS_HSTPIP_PRST2 = hr::field_mask_literal< 0x400ac41c, 18, 1 >();
   // Pipe 3 Reset
   constexpr auto UOTGHS_HSTPIP_PRST3 = hr::field_mask_literal< 0x400ac41c, 19, 1 >();
   // Pipe 4 Reset
   constexpr auto UOTGHS_HSTPIP_PRST4 = hr::field_mask_literal< 0x400ac41c, 20, 1 >();
   // Pipe 5 Reset
   constexpr auto UOTGHS_HSTPIP_PRST5 = hr::field_mask_literal< 0x400ac41c, 21, 1 >();
   // Pipe 6 Reset
   constexpr auto UOTGHS_HSTPIP_PRST6 = hr::field_mask_literal< 0x400ac41c, 22, 1 >();
   // Pipe 7 Reset
   constexpr auto UOTGHS_HSTPIP_PRST7 = hr::field_mask_literal< 0x400ac41c, 23, 1 >();
   // Pipe 8 Reset
   constexpr auto UOTGHS_HSTPIP_PRST8 = hr::field_mask_literal< 0x400ac41c, 24, 1 >();

// HSTFNUM
   // Micro Frame Number
   constexpr auto UOTGHS_HSTFNUM_MFNUM_Msk = hr::field_mask_literal< 0x400ac420, 0, 3 >();
   // Frame Number
   constexpr auto UOTGHS_HSTFNUM_FNUM_Msk = hr::field_mask_literal< 0x400ac420, 3, 11 >();
   // Frame Length
   constexpr auto UOTGHS_HSTFNUM_FLENHIGH_Msk = hr::field_mask_literal< 0x400ac420, 16, 8 >();

// HSTADDR1
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR1_HSTADDRP0_Msk = hr::field_mask_literal< 0x400ac424, 0, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR1_HSTADDRP1_Msk = hr::field_mask_literal< 0x400ac424, 8, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR1_HSTADDRP2_Msk = hr::field_mask_literal< 0x400ac424, 16, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR1_HSTADDRP3_Msk = hr::field_mask_literal< 0x400ac424, 24, 7 >();

// HSTADDR2
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR2_HSTADDRP4_Msk = hr::field_mask_literal< 0x400ac428, 0, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR2_HSTADDRP5_Msk = hr::field_mask_literal< 0x400ac428, 8, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR2_HSTADDRP6_Msk = hr::field_mask_literal< 0x400ac428, 16, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR2_HSTADDRP7_Msk = hr::field_mask_literal< 0x400ac428, 24, 7 >();

// HSTADDR3
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR3_HSTADDRP8_Msk = hr::field_mask_literal< 0x400ac42c, 0, 7 >();
   // USB Host Address
   constexpr auto UOTGHS_HSTADDR3_HSTADDRP9_Msk = hr::field_mask_literal< 0x400ac42c, 8, 7 >();

// HSTPIPCFG0_HSBOHSCP
   // Pipe Memory Allocate
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_ALLOC = hr::field_mask_literal< 0x400ac500, 1, 1 >();
   // Pipe Banks
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PBK_Msk = hr::field_mask_literal< 0x400ac500, 2, 2 >();
      // Single-bank pipe
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PBK_1_BANK = hr::field_value_literal< 0x400ac500, 2, 2 >( 0 );
      // Double-bank pipe
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PBK_2_BANK = hr::field_value_literal< 0x400ac500, 2, 2 >( 1 );
      // Triple-bank pipe
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PBK_3_BANK = hr::field_value_literal< 0x400ac500, 2, 2 >( 2 );
   // Pipe Size
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_Msk = hr::field_mask_literal< 0x400ac500, 4, 3 >();
      // 8 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_8_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 0 );
      // 16 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_16_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 1 );
      // 32 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_32_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 2 );
      // 64 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_64_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 3 );
      // 128 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_128_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 4 );
      // 256 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_256_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 5 );
      // 512 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_512_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 6 );
      // 1024 bytes
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PSIZE_1024_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 7 );
   // Pipe Token
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTOKEN_Msk = hr::field_mask_literal< 0x400ac500, 8, 2 >();
      // SETUP
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTOKEN_SETUP = hr::field_value_literal< 0x400ac500, 8, 2 >( 0 );
      // IN
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTOKEN_IN = hr::field_value_literal< 0x400ac500, 8, 2 >( 1 );
      // OUT
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTOKEN_OUT = hr::field_value_literal< 0x400ac500, 8, 2 >( 2 );
   // Automatic Switch
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_AUTOSW = hr::field_mask_literal< 0x400ac500, 10, 1 >();
   // Pipe Type
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTYPE_Msk = hr::field_mask_literal< 0x400ac500, 12, 2 >();
      // Control
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTYPE_CTRL = hr::field_value_literal< 0x400ac500, 12, 2 >( 0 );
      // Bulk
      constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PTYPE_BLK = hr::field_value_literal< 0x400ac500, 12, 2 >( 2 );
   // Pipe Endpoint Number
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PEPNUM_Msk = hr::field_mask_literal< 0x400ac500, 16, 4 >();
   // Ping Enable
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_PINGEN = hr::field_mask_literal< 0x400ac500, 20, 1 >();
   // bInterval parameter for the Bulk-Out/Ping transaction
   constexpr auto UOTGHS_HSTPIPCFG0_HSBOHSCP_BINTERVAL_Msk = hr::field_mask_literal< 0x400ac500, 24, 8 >();

// HSTPIPCFG[0]
   // Pipe Memory Allocate
   constexpr auto UOTGHS_HSTPIPCFG_ALLOC = hr::field_mask_literal< 0x400ac500, 1, 1 >();
   // Pipe Banks
   constexpr auto UOTGHS_HSTPIPCFG_PBK_Msk = hr::field_mask_literal< 0x400ac500, 2, 2 >();
      // Single-bank pipe
      constexpr auto UOTGHS_HSTPIPCFG_PBK_1_BANK = hr::field_value_literal< 0x400ac500, 2, 2 >( 0 );
      // Double-bank pipe
      constexpr auto UOTGHS_HSTPIPCFG_PBK_2_BANK = hr::field_value_literal< 0x400ac500, 2, 2 >( 1 );
      // Triple-bank pipe
      constexpr auto UOTGHS_HSTPIPCFG_PBK_3_BANK = hr::field_value_literal< 0x400ac500, 2, 2 >( 2 );
   // Pipe Size
   constexpr auto UOTGHS_HSTPIPCFG_PSIZE_Msk = hr::field_mask_literal< 0x400ac500, 4, 3 >();
      // 8 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_8_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 0 );
      // 16 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_16_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 1 );
      // 32 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_32_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 2 );
      // 64 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_64_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 3 );
      // 128 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_128_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 4 );
      // 256 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_256_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 5 );
      // 512 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_512_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 6 );
      // 1024 bytes
      constexpr auto UOTGHS_HSTPIPCFG_PSIZE_1024_BYTE = hr::field_value_literal< 0x400ac500, 4, 3 >( 7 );
   // Pipe Token
   constexpr auto UOTGHS_HSTPIPCFG_PTOKEN_Msk = hr::field_mask_literal< 0x400ac500, 8, 2 >();
      // SETUP
      constexpr auto UOTGHS_HSTPIPCFG_PTOKEN_SETUP = hr::field_value_literal< 0x400ac500, 8, 2 >( 0 );
      // IN
      constexpr auto UOTGHS_HSTPIPCFG_PTOKEN_IN = hr::field_value_literal< 0x400ac500, 8, 2 >( 1 );
      // OUT
      constexpr auto UOTGHS_HSTPIPCFG_PTOKEN_OUT = hr::field_value_literal< 0x400ac500, 8, 2 >( 2 );
   // Automatic Switch
   constexpr auto UOTGHS_HSTPIPCFG_AUTOSW = hr::field_mask_literal< 0x400ac500, 10, 1 >();
   // Pipe Type
   constexpr auto UOTGHS_HSTPIPCFG_PTYPE_Msk = hr::field_mask_literal< 0x400ac500, 12, 2 >();
      // Control
      constexpr auto UOTGHS_HSTPIPCFG_PTYPE_CTRL = hr::field_value_literal< 0x400ac500, 12, 2 >( 0 );
      // Isochronous
      constexpr auto UOTGHS_HSTPIPCFG_PTYPE_ISO = hr::field_value_literal< 0x400ac500, 12, 2 >( 1 );
      // Bulk
      constexpr auto UOTGHS_HSTPIPCFG_PTYPE_BLK = hr::field_value_literal< 0x400ac500, 12, 2 >( 2 );
      // Interrupt
      constexpr auto UOTGHS_HSTPIPCFG_PTYPE_INTRPT = hr::field_value_literal< 0x400ac500, 12, 2 >( 3 );
   // Pipe Endpoint Number
   constexpr auto UOTGHS_HSTPIPCFG_PEPNUM_Msk = hr::field_mask_literal< 0x400ac500, 16, 4 >();
   // Pipe Interrupt Request Frequency
   constexpr auto UOTGHS_HSTPIPCFG_INTFRQ_Msk = hr::field_mask_literal< 0x400ac500, 24, 8 >();

// HSTPIPISR0_INTPIPES
   // Received IN Data Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_RXINI = hr::field_mask_literal< 0x400ac530, 0, 1 >();
   // Transmitted OUT Data Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_TXOUTI = hr::field_mask_literal< 0x400ac530, 1, 1 >();
   // Underflow Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_UNDERFI = hr::field_mask_literal< 0x400ac530, 2, 1 >();
   // Pipe Error Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_PERRI = hr::field_mask_literal< 0x400ac530, 3, 1 >();
   // NAKed Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_NAKEDI = hr::field_mask_literal< 0x400ac530, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_OVERFI = hr::field_mask_literal< 0x400ac530, 5, 1 >();
   // Received STALLed Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_RXSTALLDI = hr::field_mask_literal< 0x400ac530, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_SHORTPACKETI = hr::field_mask_literal< 0x400ac530, 7, 1 >();
   // Data Toggle Sequence
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_DTSEQ_Msk = hr::field_mask_literal< 0x400ac530, 8, 2 >();
      // Data0 toggle sequence
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_DTSEQ_DATA0 = hr::field_value_literal< 0x400ac530, 8, 2 >( 0 );
      // Data1 toggle sequence
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_DTSEQ_DATA1 = hr::field_value_literal< 0x400ac530, 8, 2 >( 1 );
   // Number of Busy Banks
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_NBUSYBK_Msk = hr::field_mask_literal< 0x400ac530, 12, 2 >();
      // 0 busy bank (all banks free)
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_NBUSYBK_0_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 0 );
      // 1 busy bank
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_NBUSYBK_1_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 1 );
      // 2 busy banks
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_NBUSYBK_2_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 2 );
      // 3 busy banks
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_NBUSYBK_3_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 3 );
   // Current Bank
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_CURRBK_Msk = hr::field_mask_literal< 0x400ac530, 14, 2 >();
      // Current bank is bank0
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_CURRBK_BANK0 = hr::field_value_literal< 0x400ac530, 14, 2 >( 0 );
      // Current bank is bank1
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_CURRBK_BANK1 = hr::field_value_literal< 0x400ac530, 14, 2 >( 1 );
      // Current bank is bank2
      constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_CURRBK_BANK2 = hr::field_value_literal< 0x400ac530, 14, 2 >( 2 );
   // Read-write Allowed
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_RWALL = hr::field_mask_literal< 0x400ac530, 16, 1 >();
   // Configuration OK Status
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_CFGOK = hr::field_mask_literal< 0x400ac530, 18, 1 >();
   // Pipe Byte Count
   constexpr auto UOTGHS_HSTPIPISR0_INTPIPES_PBYCT_Msk = hr::field_mask_literal< 0x400ac530, 20, 11 >();

// HSTPIPISR0_ISOPIPES
   // Received IN Data Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_RXINI = hr::field_mask_literal< 0x400ac530, 0, 1 >();
   // Transmitted OUT Data Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_TXOUTI = hr::field_mask_literal< 0x400ac530, 1, 1 >();
   // Underflow Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_UNDERFI = hr::field_mask_literal< 0x400ac530, 2, 1 >();
   // Pipe Error Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_PERRI = hr::field_mask_literal< 0x400ac530, 3, 1 >();
   // NAKed Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_NAKEDI = hr::field_mask_literal< 0x400ac530, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_OVERFI = hr::field_mask_literal< 0x400ac530, 5, 1 >();
   // CRC Error Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_CRCERRI = hr::field_mask_literal< 0x400ac530, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_SHORTPACKETI = hr::field_mask_literal< 0x400ac530, 7, 1 >();
   // Data Toggle Sequence
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_DTSEQ_Msk = hr::field_mask_literal< 0x400ac530, 8, 2 >();
      // Data0 toggle sequence
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_DTSEQ_DATA0 = hr::field_value_literal< 0x400ac530, 8, 2 >( 0 );
      // Data1 toggle sequence
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_DTSEQ_DATA1 = hr::field_value_literal< 0x400ac530, 8, 2 >( 1 );
   // Number of Busy Banks
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_NBUSYBK_Msk = hr::field_mask_literal< 0x400ac530, 12, 2 >();
      // 0 busy bank (all banks free)
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_NBUSYBK_0_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 0 );
      // 1 busy bank
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_NBUSYBK_1_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 1 );
      // 2 busy banks
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_NBUSYBK_2_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 2 );
      // 3 busy banks
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_NBUSYBK_3_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 3 );
   // Current Bank
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_CURRBK_Msk = hr::field_mask_literal< 0x400ac530, 14, 2 >();
      // Current bank is bank0
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_CURRBK_BANK0 = hr::field_value_literal< 0x400ac530, 14, 2 >( 0 );
      // Current bank is bank1
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_CURRBK_BANK1 = hr::field_value_literal< 0x400ac530, 14, 2 >( 1 );
      // Current bank is bank2
      constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_CURRBK_BANK2 = hr::field_value_literal< 0x400ac530, 14, 2 >( 2 );
   // Read-write Allowed
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_RWALL = hr::field_mask_literal< 0x400ac530, 16, 1 >();
   // Configuration OK Status
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_CFGOK = hr::field_mask_literal< 0x400ac530, 18, 1 >();
   // Pipe Byte Count
   constexpr auto UOTGHS_HSTPIPISR0_ISOPIPES_PBYCT_Msk = hr::field_mask_literal< 0x400ac530, 20, 11 >();

// HSTPIPISR[0]
   // Received IN Data Interrupt
   constexpr auto UOTGHS_HSTPIPISR_RXINI = hr::field_mask_literal< 0x400ac530, 0, 1 >();
   // Transmitted OUT Data Interrupt
   constexpr auto UOTGHS_HSTPIPISR_TXOUTI = hr::field_mask_literal< 0x400ac530, 1, 1 >();
   // Transmitted SETUP Interrupt
   constexpr auto UOTGHS_HSTPIPISR_TXSTPI = hr::field_mask_literal< 0x400ac530, 2, 1 >();
   // Pipe Error Interrupt
   constexpr auto UOTGHS_HSTPIPISR_PERRI = hr::field_mask_literal< 0x400ac530, 3, 1 >();
   // NAKed Interrupt
   constexpr auto UOTGHS_HSTPIPISR_NAKEDI = hr::field_mask_literal< 0x400ac530, 4, 1 >();
   // Overflow Interrupt
   constexpr auto UOTGHS_HSTPIPISR_OVERFI = hr::field_mask_literal< 0x400ac530, 5, 1 >();
   // Received STALLed Interrupt
   constexpr auto UOTGHS_HSTPIPISR_RXSTALLDI = hr::field_mask_literal< 0x400ac530, 6, 1 >();
   // Short Packet Interrupt
   constexpr auto UOTGHS_HSTPIPISR_SHORTPACKETI = hr::field_mask_literal< 0x400ac530, 7, 1 >();
   // Data Toggle Sequence
   constexpr auto UOTGHS_HSTPIPISR_DTSEQ_Msk = hr::field_mask_literal< 0x400ac530, 8, 2 >();
      // Data0 toggle sequence
      constexpr auto UOTGHS_HSTPIPISR_DTSEQ_DATA0 = hr::field_value_literal< 0x400ac530, 8, 2 >( 0 );
      // Data1 toggle sequence
      constexpr auto UOTGHS_HSTPIPISR_DTSEQ_DATA1 = hr::field_value_literal< 0x400ac530, 8, 2 >( 1 );
   // Number of Busy Banks
   constexpr auto UOTGHS_HSTPIPISR_NBUSYBK_Msk = hr::field_mask_literal< 0x400ac530, 12, 2 >();
      // 0 busy bank (all banks free)
      constexpr auto UOTGHS_HSTPIPISR_NBUSYBK_0_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 0 );
      // 1 busy bank
      constexpr auto UOTGHS_HSTPIPISR_NBUSYBK_1_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 1 );
      // 2 busy banks
      constexpr auto UOTGHS_HSTPIPISR_NBUSYBK_2_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 2 );
      // 3 busy banks
      constexpr auto UOTGHS_HSTPIPISR_NBUSYBK_3_BUSY = hr::field_value_literal< 0x400ac530, 12, 2 >( 3 );
   // Current Bank
   constexpr auto UOTGHS_HSTPIPISR_CURRBK_Msk = hr::field_mask_literal< 0x400ac530, 14, 2 >();
      // Current bank is bank0
      constexpr auto UOTGHS_HSTPIPISR_CURRBK_BANK0 = hr::field_value_literal< 0x400ac530, 14, 2 >( 0 );
      // Current bank is bank1
      constexpr auto UOTGHS_HSTPIPISR_CURRBK_BANK1 = hr::field_value_literal< 0x400ac530, 14, 2 >( 1 );
      // Current bank is bank2
      constexpr auto UOTGHS_HSTPIPISR_CURRBK_BANK2 = hr::field_value_literal< 0x400ac530, 14, 2 >( 2 );
   // Read-write Allowed
   constexpr auto UOTGHS_HSTPIPISR_RWALL = hr::field_mask_literal< 0x400ac530, 16, 1 >();
   // Configuration OK Status
   constexpr auto UOTGHS_HSTPIPISR_CFGOK = hr::field_mask_literal< 0x400ac530, 18, 1 >();
   // Pipe Byte Count
   constexpr auto UOTGHS_HSTPIPISR_PBYCT_Msk = hr::field_mask_literal< 0x400ac530, 20, 11 >();

// HSTPIPICR0_INTPIPES
   // Received IN Data Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_RXINIC = hr::field_mask_literal< 0x400ac560, 0, 1 >();
   // Transmitted OUT Data Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_TXOUTIC = hr::field_mask_literal< 0x400ac560, 1, 1 >();
   // Underflow Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_UNDERFIC = hr::field_mask_literal< 0x400ac560, 2, 1 >();
   // NAKed Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_NAKEDIC = hr::field_mask_literal< 0x400ac560, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_OVERFIC = hr::field_mask_literal< 0x400ac560, 5, 1 >();
   // Received STALLed Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_RXSTALLDIC = hr::field_mask_literal< 0x400ac560, 6, 1 >();
   // Short Packet Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_INTPIPES_SHORTPACKETIC = hr::field_mask_literal< 0x400ac560, 7, 1 >();

// HSTPIPICR0_ISOPIPES
   // Received IN Data Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_RXINIC = hr::field_mask_literal< 0x400ac560, 0, 1 >();
   // Transmitted OUT Data Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_TXOUTIC = hr::field_mask_literal< 0x400ac560, 1, 1 >();
   // Underflow Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_UNDERFIC = hr::field_mask_literal< 0x400ac560, 2, 1 >();
   // NAKed Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_NAKEDIC = hr::field_mask_literal< 0x400ac560, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_OVERFIC = hr::field_mask_literal< 0x400ac560, 5, 1 >();
   // CRC Error Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_CRCERRIC = hr::field_mask_literal< 0x400ac560, 6, 1 >();
   // Short Packet Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR0_ISOPIPES_SHORTPACKETIC = hr::field_mask_literal< 0x400ac560, 7, 1 >();

// HSTPIPICR[0]
   // Received IN Data Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_RXINIC = hr::field_mask_literal< 0x400ac560, 0, 1 >();
   // Transmitted OUT Data Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_TXOUTIC = hr::field_mask_literal< 0x400ac560, 1, 1 >();
   // Transmitted SETUP Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_TXSTPIC = hr::field_mask_literal< 0x400ac560, 2, 1 >();
   // NAKed Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_NAKEDIC = hr::field_mask_literal< 0x400ac560, 4, 1 >();
   // Overflow Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_OVERFIC = hr::field_mask_literal< 0x400ac560, 5, 1 >();
   // Received STALLed Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_RXSTALLDIC = hr::field_mask_literal< 0x400ac560, 6, 1 >();
   // Short Packet Interrupt Clear
   constexpr auto UOTGHS_HSTPIPICR_SHORTPACKETIC = hr::field_mask_literal< 0x400ac560, 7, 1 >();

// HSTPIPIFR0_INTPIPES
   // Received IN Data Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_RXINIS = hr::field_mask_literal< 0x400ac590, 0, 1 >();
   // Transmitted OUT Data Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_TXOUTIS = hr::field_mask_literal< 0x400ac590, 1, 1 >();
   // Underflow Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_UNDERFIS = hr::field_mask_literal< 0x400ac590, 2, 1 >();
   // Pipe Error Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_PERRIS = hr::field_mask_literal< 0x400ac590, 3, 1 >();
   // NAKed Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_NAKEDIS = hr::field_mask_literal< 0x400ac590, 4, 1 >();
   // Overflow Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_OVERFIS = hr::field_mask_literal< 0x400ac590, 5, 1 >();
   // Received STALLed Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_RXSTALLDIS = hr::field_mask_literal< 0x400ac590, 6, 1 >();
   // Short Packet Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_SHORTPACKETIS = hr::field_mask_literal< 0x400ac590, 7, 1 >();
   // Number of Busy Banks Set
   constexpr auto UOTGHS_HSTPIPIFR0_INTPIPES_NBUSYBKS = hr::field_mask_literal< 0x400ac590, 12, 1 >();

// HSTPIPIFR0_ISOPIPES
   // Received IN Data Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_RXINIS = hr::field_mask_literal< 0x400ac590, 0, 1 >();
   // Transmitted OUT Data Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_TXOUTIS = hr::field_mask_literal< 0x400ac590, 1, 1 >();
   // Underflow Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_UNDERFIS = hr::field_mask_literal< 0x400ac590, 2, 1 >();
   // Pipe Error Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_PERRIS = hr::field_mask_literal< 0x400ac590, 3, 1 >();
   // NAKed Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_NAKEDIS = hr::field_mask_literal< 0x400ac590, 4, 1 >();
   // Overflow Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_OVERFIS = hr::field_mask_literal< 0x400ac590, 5, 1 >();
   // CRC Error Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_CRCERRIS = hr::field_mask_literal< 0x400ac590, 6, 1 >();
   // Short Packet Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_SHORTPACKETIS = hr::field_mask_literal< 0x400ac590, 7, 1 >();
   // Number of Busy Banks Set
   constexpr auto UOTGHS_HSTPIPIFR0_ISOPIPES_NBUSYBKS = hr::field_mask_literal< 0x400ac590, 12, 1 >();

// HSTPIPIFR[0]
   // Received IN Data Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_RXINIS = hr::field_mask_literal< 0x400ac590, 0, 1 >();
   // Transmitted OUT Data Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_TXOUTIS = hr::field_mask_literal< 0x400ac590, 1, 1 >();
   // Transmitted SETUP Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_TXSTPIS = hr::field_mask_literal< 0x400ac590, 2, 1 >();
   // Pipe Error Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_PERRIS = hr::field_mask_literal< 0x400ac590, 3, 1 >();
   // NAKed Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_NAKEDIS = hr::field_mask_literal< 0x400ac590, 4, 1 >();
   // Overflow Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_OVERFIS = hr::field_mask_literal< 0x400ac590, 5, 1 >();
   // Received STALLed Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_RXSTALLDIS = hr::field_mask_literal< 0x400ac590, 6, 1 >();
   // Short Packet Interrupt Set
   constexpr auto UOTGHS_HSTPIPIFR_SHORTPACKETIS = hr::field_mask_literal< 0x400ac590, 7, 1 >();
   // Number of Busy Banks Set
   constexpr auto UOTGHS_HSTPIPIFR_NBUSYBKS = hr::field_mask_literal< 0x400ac590, 12, 1 >();

// HSTPIPIMR0_INTPIPES
   // Received IN Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_RXINE = hr::field_mask_literal< 0x400ac5c0, 0, 1 >();
   // Transmitted OUT Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_TXOUTE = hr::field_mask_literal< 0x400ac5c0, 1, 1 >();
   // Underflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_UNDERFIE = hr::field_mask_literal< 0x400ac5c0, 2, 1 >();
   // Pipe Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_PERRE = hr::field_mask_literal< 0x400ac5c0, 3, 1 >();
   // NAKed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_NAKEDE = hr::field_mask_literal< 0x400ac5c0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_OVERFIE = hr::field_mask_literal< 0x400ac5c0, 5, 1 >();
   // Received STALLed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_RXSTALLDE = hr::field_mask_literal< 0x400ac5c0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_SHORTPACKETIE = hr::field_mask_literal< 0x400ac5c0, 7, 1 >();
   // Number of Busy Banks Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_NBUSYBKE = hr::field_mask_literal< 0x400ac5c0, 12, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_FIFOCON = hr::field_mask_literal< 0x400ac5c0, 14, 1 >();
   // Pipe Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_PDISHDMA = hr::field_mask_literal< 0x400ac5c0, 16, 1 >();
   // Pipe Freeze
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_PFREEZE = hr::field_mask_literal< 0x400ac5c0, 17, 1 >();
   // Reset Data Toggle
   constexpr auto UOTGHS_HSTPIPIMR0_INTPIPES_RSTDT = hr::field_mask_literal< 0x400ac5c0, 18, 1 >();

// HSTPIPIMR0_ISOPIPES
   // Received IN Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_RXINE = hr::field_mask_literal< 0x400ac5c0, 0, 1 >();
   // Transmitted OUT Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_TXOUTE = hr::field_mask_literal< 0x400ac5c0, 1, 1 >();
   // Underflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_UNDERFIE = hr::field_mask_literal< 0x400ac5c0, 2, 1 >();
   // Pipe Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_PERRE = hr::field_mask_literal< 0x400ac5c0, 3, 1 >();
   // NAKed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_NAKEDE = hr::field_mask_literal< 0x400ac5c0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_OVERFIE = hr::field_mask_literal< 0x400ac5c0, 5, 1 >();
   // CRC Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_CRCERRE = hr::field_mask_literal< 0x400ac5c0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_SHORTPACKETIE = hr::field_mask_literal< 0x400ac5c0, 7, 1 >();
   // Number of Busy Banks Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_NBUSYBKE = hr::field_mask_literal< 0x400ac5c0, 12, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_FIFOCON = hr::field_mask_literal< 0x400ac5c0, 14, 1 >();
   // Pipe Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_PDISHDMA = hr::field_mask_literal< 0x400ac5c0, 16, 1 >();
   // Pipe Freeze
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_PFREEZE = hr::field_mask_literal< 0x400ac5c0, 17, 1 >();
   // Reset Data Toggle
   constexpr auto UOTGHS_HSTPIPIMR0_ISOPIPES_RSTDT = hr::field_mask_literal< 0x400ac5c0, 18, 1 >();

// HSTPIPIMR[0]
   // Received IN Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_RXINE = hr::field_mask_literal< 0x400ac5c0, 0, 1 >();
   // Transmitted OUT Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_TXOUTE = hr::field_mask_literal< 0x400ac5c0, 1, 1 >();
   // Transmitted SETUP Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_TXSTPE = hr::field_mask_literal< 0x400ac5c0, 2, 1 >();
   // Pipe Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_PERRE = hr::field_mask_literal< 0x400ac5c0, 3, 1 >();
   // NAKed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_NAKEDE = hr::field_mask_literal< 0x400ac5c0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_OVERFIE = hr::field_mask_literal< 0x400ac5c0, 5, 1 >();
   // Received STALLed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_RXSTALLDE = hr::field_mask_literal< 0x400ac5c0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_SHORTPACKETIE = hr::field_mask_literal< 0x400ac5c0, 7, 1 >();
   // Number of Busy Banks Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIMR_NBUSYBKE = hr::field_mask_literal< 0x400ac5c0, 12, 1 >();
   // FIFO Control
   constexpr auto UOTGHS_HSTPIPIMR_FIFOCON = hr::field_mask_literal< 0x400ac5c0, 14, 1 >();
   // Pipe Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_HSTPIPIMR_PDISHDMA = hr::field_mask_literal< 0x400ac5c0, 16, 1 >();
   // Pipe Freeze
   constexpr auto UOTGHS_HSTPIPIMR_PFREEZE = hr::field_mask_literal< 0x400ac5c0, 17, 1 >();
   // Reset Data Toggle
   constexpr auto UOTGHS_HSTPIPIMR_RSTDT = hr::field_mask_literal< 0x400ac5c0, 18, 1 >();

// HSTPIPIER0_INTPIPES
   // Received IN Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_RXINES = hr::field_mask_literal< 0x400ac5f0, 0, 1 >();
   // Transmitted OUT Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_TXOUTES = hr::field_mask_literal< 0x400ac5f0, 1, 1 >();
   // Underflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_UNDERFIES = hr::field_mask_literal< 0x400ac5f0, 2, 1 >();
   // Pipe Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_PERRES = hr::field_mask_literal< 0x400ac5f0, 3, 1 >();
   // NAKed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_NAKEDES = hr::field_mask_literal< 0x400ac5f0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_OVERFIES = hr::field_mask_literal< 0x400ac5f0, 5, 1 >();
   // Received STALLed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_RXSTALLDES = hr::field_mask_literal< 0x400ac5f0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_SHORTPACKETIES = hr::field_mask_literal< 0x400ac5f0, 7, 1 >();
   // Number of Busy Banks Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_NBUSYBKES = hr::field_mask_literal< 0x400ac5f0, 12, 1 >();
   // Pipe Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_PDISHDMAS = hr::field_mask_literal< 0x400ac5f0, 16, 1 >();
   // Pipe Freeze Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_PFREEZES = hr::field_mask_literal< 0x400ac5f0, 17, 1 >();
   // Reset Data Toggle Enable
   constexpr auto UOTGHS_HSTPIPIER0_INTPIPES_RSTDTS = hr::field_mask_literal< 0x400ac5f0, 18, 1 >();

// HSTPIPIER0_ISOPIPES
   // Received IN Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_RXINES = hr::field_mask_literal< 0x400ac5f0, 0, 1 >();
   // Transmitted OUT Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_TXOUTES = hr::field_mask_literal< 0x400ac5f0, 1, 1 >();
   // Underflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_UNDERFIES = hr::field_mask_literal< 0x400ac5f0, 2, 1 >();
   // Pipe Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_PERRES = hr::field_mask_literal< 0x400ac5f0, 3, 1 >();
   // NAKed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_NAKEDES = hr::field_mask_literal< 0x400ac5f0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_OVERFIES = hr::field_mask_literal< 0x400ac5f0, 5, 1 >();
   // CRC Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_CRCERRES = hr::field_mask_literal< 0x400ac5f0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_SHORTPACKETIES = hr::field_mask_literal< 0x400ac5f0, 7, 1 >();
   // Number of Busy Banks Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_NBUSYBKES = hr::field_mask_literal< 0x400ac5f0, 12, 1 >();
   // Pipe Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_PDISHDMAS = hr::field_mask_literal< 0x400ac5f0, 16, 1 >();
   // Pipe Freeze Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_PFREEZES = hr::field_mask_literal< 0x400ac5f0, 17, 1 >();
   // Reset Data Toggle Enable
   constexpr auto UOTGHS_HSTPIPIER0_ISOPIPES_RSTDTS = hr::field_mask_literal< 0x400ac5f0, 18, 1 >();

// HSTPIPIER[0]
   // Received IN Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_RXINES = hr::field_mask_literal< 0x400ac5f0, 0, 1 >();
   // Transmitted OUT Data Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_TXOUTES = hr::field_mask_literal< 0x400ac5f0, 1, 1 >();
   // Transmitted SETUP Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_TXSTPES = hr::field_mask_literal< 0x400ac5f0, 2, 1 >();
   // Pipe Error Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_PERRES = hr::field_mask_literal< 0x400ac5f0, 3, 1 >();
   // NAKed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_NAKEDES = hr::field_mask_literal< 0x400ac5f0, 4, 1 >();
   // Overflow Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_OVERFIES = hr::field_mask_literal< 0x400ac5f0, 5, 1 >();
   // Received STALLed Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_RXSTALLDES = hr::field_mask_literal< 0x400ac5f0, 6, 1 >();
   // Short Packet Interrupt Enable
   constexpr auto UOTGHS_HSTPIPIER_SHORTPACKETIES = hr::field_mask_literal< 0x400ac5f0, 7, 1 >();
   // Number of Busy Banks Enable
   constexpr auto UOTGHS_HSTPIPIER_NBUSYBKES = hr::field_mask_literal< 0x400ac5f0, 12, 1 >();
   // Pipe Interrupts Disable HDMA Request Enable
   constexpr auto UOTGHS_HSTPIPIER_PDISHDMAS = hr::field_mask_literal< 0x400ac5f0, 16, 1 >();
   // Pipe Freeze Enable
   constexpr auto UOTGHS_HSTPIPIER_PFREEZES = hr::field_mask_literal< 0x400ac5f0, 17, 1 >();
   // Reset Data Toggle Enable
   constexpr auto UOTGHS_HSTPIPIER_RSTDTS = hr::field_mask_literal< 0x400ac5f0, 18, 1 >();

// HSTPIPIDR0_INTPIPES
   // Received IN Data Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_RXINEC = hr::field_mask_literal< 0x400ac620, 0, 1 >();
   // Transmitted OUT Data Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_TXOUTEC = hr::field_mask_literal< 0x400ac620, 1, 1 >();
   // Underflow Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_UNDERFIEC = hr::field_mask_literal< 0x400ac620, 2, 1 >();
   // Pipe Error Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_PERREC = hr::field_mask_literal< 0x400ac620, 3, 1 >();
   // NAKed Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_NAKEDEC = hr::field_mask_literal< 0x400ac620, 4, 1 >();
   // Overflow Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_OVERFIEC = hr::field_mask_literal< 0x400ac620, 5, 1 >();
   // Received STALLed Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_RXSTALLDEC = hr::field_mask_literal< 0x400ac620, 6, 1 >();
   // Short Packet Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_SHORTPACKETIEC = hr::field_mask_literal< 0x400ac620, 7, 1 >();
   // Number of Busy Banks Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_NBUSYBKEC = hr::field_mask_literal< 0x400ac620, 12, 1 >();
   // FIFO Control Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_FIFOCONC = hr::field_mask_literal< 0x400ac620, 14, 1 >();
   // Pipe Interrupts Disable HDMA Request Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_PDISHDMAC = hr::field_mask_literal< 0x400ac620, 16, 1 >();
   // Pipe Freeze Disable
   constexpr auto UOTGHS_HSTPIPIDR0_INTPIPES_PFREEZEC = hr::field_mask_literal< 0x400ac620, 17, 1 >();

// HSTPIPIDR0_ISOPIPES
   // Received IN Data Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_RXINEC = hr::field_mask_literal< 0x400ac620, 0, 1 >();
   // Transmitted OUT Data Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_TXOUTEC = hr::field_mask_literal< 0x400ac620, 1, 1 >();
   // Underflow Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_UNDERFIEC = hr::field_mask_literal< 0x400ac620, 2, 1 >();
   // Pipe Error Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_PERREC = hr::field_mask_literal< 0x400ac620, 3, 1 >();
   // NAKed Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_NAKEDEC = hr::field_mask_literal< 0x400ac620, 4, 1 >();
   // Overflow Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_OVERFIEC = hr::field_mask_literal< 0x400ac620, 5, 1 >();
   // CRC Error Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_CRCERREC = hr::field_mask_literal< 0x400ac620, 6, 1 >();
   // Short Packet Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_SHORTPACKETIEC = hr::field_mask_literal< 0x400ac620, 7, 1 >();
   // Number of Busy Banks Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_NBUSYBKEC = hr::field_mask_literal< 0x400ac620, 12, 1 >();
   // FIFO Control Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_FIFOCONC = hr::field_mask_literal< 0x400ac620, 14, 1 >();
   // Pipe Interrupts Disable HDMA Request Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_PDISHDMAC = hr::field_mask_literal< 0x400ac620, 16, 1 >();
   // Pipe Freeze Disable
   constexpr auto UOTGHS_HSTPIPIDR0_ISOPIPES_PFREEZEC = hr::field_mask_literal< 0x400ac620, 17, 1 >();

// HSTPIPIDR[0]
   // Received IN Data Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_RXINEC = hr::field_mask_literal< 0x400ac620, 0, 1 >();
   // Transmitted OUT Data Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_TXOUTEC = hr::field_mask_literal< 0x400ac620, 1, 1 >();
   // Transmitted SETUP Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_TXSTPEC = hr::field_mask_literal< 0x400ac620, 2, 1 >();
   // Pipe Error Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_PERREC = hr::field_mask_literal< 0x400ac620, 3, 1 >();
   // NAKed Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_NAKEDEC = hr::field_mask_literal< 0x400ac620, 4, 1 >();
   // Overflow Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_OVERFIEC = hr::field_mask_literal< 0x400ac620, 5, 1 >();
   // Received STALLed Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_RXSTALLDEC = hr::field_mask_literal< 0x400ac620, 6, 1 >();
   // Short Packet Interrupt Disable
   constexpr auto UOTGHS_HSTPIPIDR_SHORTPACKETIEC = hr::field_mask_literal< 0x400ac620, 7, 1 >();
   // Number of Busy Banks Disable
   constexpr auto UOTGHS_HSTPIPIDR_NBUSYBKEC = hr::field_mask_literal< 0x400ac620, 12, 1 >();
   // FIFO Control Disable
   constexpr auto UOTGHS_HSTPIPIDR_FIFOCONC = hr::field_mask_literal< 0x400ac620, 14, 1 >();
   // Pipe Interrupts Disable HDMA Request Disable
   constexpr auto UOTGHS_HSTPIPIDR_PDISHDMAC = hr::field_mask_literal< 0x400ac620, 16, 1 >();
   // Pipe Freeze Disable
   constexpr auto UOTGHS_HSTPIPIDR_PFREEZEC = hr::field_mask_literal< 0x400ac620, 17, 1 >();

// HSTPIPINRQ[0]
   // IN Request Number before Freeze
   constexpr auto UOTGHS_HSTPIPINRQ_INRQ_Msk = hr::field_mask_literal< 0x400ac650, 0, 8 >();
   // IN Request Mode
   constexpr auto UOTGHS_HSTPIPINRQ_INMODE = hr::field_mask_literal< 0x400ac650, 8, 1 >();

// HSTPIPERR[0]
   // Data Toggle Error
   constexpr auto UOTGHS_HSTPIPERR_DATATGL = hr::field_mask_literal< 0x400ac680, 0, 1 >();
   // Data PID Error
   constexpr auto UOTGHS_HSTPIPERR_DATAPID = hr::field_mask_literal< 0x400ac680, 1, 1 >();
   // PID Error
   constexpr auto UOTGHS_HSTPIPERR_PID = hr::field_mask_literal< 0x400ac680, 2, 1 >();
   // Time-Out Error
   constexpr auto UOTGHS_HSTPIPERR_TIMEOUT = hr::field_mask_literal< 0x400ac680, 3, 1 >();
   // CRC16 Error
   constexpr auto UOTGHS_HSTPIPERR_CRC16 = hr::field_mask_literal< 0x400ac680, 4, 1 >();
   // Error Counter
   constexpr auto UOTGHS_HSTPIPERR_COUNTER_Msk = hr::field_mask_literal< 0x400ac680, 5, 2 >();

// HSTDMANXTDSC1
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC1_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac710, 0, 32 >();

// HSTDMAADDRESS1
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS1_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac714, 0, 32 >();

// HSTDMACONTROL1
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL1_CHANN_ENB = hr::field_mask_literal< 0x400ac718, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL1_LDNXT_DSC = hr::field_mask_literal< 0x400ac718, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL1_END_TR_EN = hr::field_mask_literal< 0x400ac718, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL1_END_B_EN = hr::field_mask_literal< 0x400ac718, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL1_END_TR_IT = hr::field_mask_literal< 0x400ac718, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL1_END_BUFFIT = hr::field_mask_literal< 0x400ac718, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL1_DESC_LD_IT = hr::field_mask_literal< 0x400ac718, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL1_BURST_LCK = hr::field_mask_literal< 0x400ac718, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL1_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac718, 16, 16 >();

// HSTDMASTATUS1
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS1_CHANN_ENB = hr::field_mask_literal< 0x400ac71c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS1_CHANN_ACT = hr::field_mask_literal< 0x400ac71c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS1_END_TR_ST = hr::field_mask_literal< 0x400ac71c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS1_END_BF_ST = hr::field_mask_literal< 0x400ac71c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS1_DESC_LDST = hr::field_mask_literal< 0x400ac71c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS1_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac71c, 16, 16 >();

// HSTDMANXTDSC2
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC2_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac720, 0, 32 >();

// HSTDMAADDRESS2
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS2_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac724, 0, 32 >();

// HSTDMACONTROL2
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL2_CHANN_ENB = hr::field_mask_literal< 0x400ac728, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL2_LDNXT_DSC = hr::field_mask_literal< 0x400ac728, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL2_END_TR_EN = hr::field_mask_literal< 0x400ac728, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL2_END_B_EN = hr::field_mask_literal< 0x400ac728, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL2_END_TR_IT = hr::field_mask_literal< 0x400ac728, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL2_END_BUFFIT = hr::field_mask_literal< 0x400ac728, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL2_DESC_LD_IT = hr::field_mask_literal< 0x400ac728, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL2_BURST_LCK = hr::field_mask_literal< 0x400ac728, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL2_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac728, 16, 16 >();

// HSTDMASTATUS2
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS2_CHANN_ENB = hr::field_mask_literal< 0x400ac72c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS2_CHANN_ACT = hr::field_mask_literal< 0x400ac72c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS2_END_TR_ST = hr::field_mask_literal< 0x400ac72c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS2_END_BF_ST = hr::field_mask_literal< 0x400ac72c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS2_DESC_LDST = hr::field_mask_literal< 0x400ac72c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS2_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac72c, 16, 16 >();

// HSTDMANXTDSC3
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC3_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac730, 0, 32 >();

// HSTDMAADDRESS3
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS3_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac734, 0, 32 >();

// HSTDMACONTROL3
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL3_CHANN_ENB = hr::field_mask_literal< 0x400ac738, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL3_LDNXT_DSC = hr::field_mask_literal< 0x400ac738, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL3_END_TR_EN = hr::field_mask_literal< 0x400ac738, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL3_END_B_EN = hr::field_mask_literal< 0x400ac738, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL3_END_TR_IT = hr::field_mask_literal< 0x400ac738, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL3_END_BUFFIT = hr::field_mask_literal< 0x400ac738, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL3_DESC_LD_IT = hr::field_mask_literal< 0x400ac738, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL3_BURST_LCK = hr::field_mask_literal< 0x400ac738, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL3_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac738, 16, 16 >();

// HSTDMASTATUS3
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS3_CHANN_ENB = hr::field_mask_literal< 0x400ac73c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS3_CHANN_ACT = hr::field_mask_literal< 0x400ac73c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS3_END_TR_ST = hr::field_mask_literal< 0x400ac73c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS3_END_BF_ST = hr::field_mask_literal< 0x400ac73c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS3_DESC_LDST = hr::field_mask_literal< 0x400ac73c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS3_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac73c, 16, 16 >();

// HSTDMANXTDSC4
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC4_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac740, 0, 32 >();

// HSTDMAADDRESS4
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS4_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac744, 0, 32 >();

// HSTDMACONTROL4
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL4_CHANN_ENB = hr::field_mask_literal< 0x400ac748, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL4_LDNXT_DSC = hr::field_mask_literal< 0x400ac748, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL4_END_TR_EN = hr::field_mask_literal< 0x400ac748, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL4_END_B_EN = hr::field_mask_literal< 0x400ac748, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL4_END_TR_IT = hr::field_mask_literal< 0x400ac748, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL4_END_BUFFIT = hr::field_mask_literal< 0x400ac748, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL4_DESC_LD_IT = hr::field_mask_literal< 0x400ac748, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL4_BURST_LCK = hr::field_mask_literal< 0x400ac748, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL4_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac748, 16, 16 >();

// HSTDMASTATUS4
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS4_CHANN_ENB = hr::field_mask_literal< 0x400ac74c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS4_CHANN_ACT = hr::field_mask_literal< 0x400ac74c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS4_END_TR_ST = hr::field_mask_literal< 0x400ac74c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS4_END_BF_ST = hr::field_mask_literal< 0x400ac74c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS4_DESC_LDST = hr::field_mask_literal< 0x400ac74c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS4_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac74c, 16, 16 >();

// HSTDMANXTDSC5
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC5_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac750, 0, 32 >();

// HSTDMAADDRESS5
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS5_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac754, 0, 32 >();

// HSTDMACONTROL5
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL5_CHANN_ENB = hr::field_mask_literal< 0x400ac758, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL5_LDNXT_DSC = hr::field_mask_literal< 0x400ac758, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL5_END_TR_EN = hr::field_mask_literal< 0x400ac758, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL5_END_B_EN = hr::field_mask_literal< 0x400ac758, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL5_END_TR_IT = hr::field_mask_literal< 0x400ac758, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL5_END_BUFFIT = hr::field_mask_literal< 0x400ac758, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL5_DESC_LD_IT = hr::field_mask_literal< 0x400ac758, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL5_BURST_LCK = hr::field_mask_literal< 0x400ac758, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL5_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac758, 16, 16 >();

// HSTDMASTATUS5
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS5_CHANN_ENB = hr::field_mask_literal< 0x400ac75c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS5_CHANN_ACT = hr::field_mask_literal< 0x400ac75c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS5_END_TR_ST = hr::field_mask_literal< 0x400ac75c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS5_END_BF_ST = hr::field_mask_literal< 0x400ac75c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS5_DESC_LDST = hr::field_mask_literal< 0x400ac75c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS5_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac75c, 16, 16 >();

// HSTDMANXTDSC6
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC6_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac760, 0, 32 >();

// HSTDMAADDRESS6
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS6_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac764, 0, 32 >();

// HSTDMACONTROL6
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL6_CHANN_ENB = hr::field_mask_literal< 0x400ac768, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL6_LDNXT_DSC = hr::field_mask_literal< 0x400ac768, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL6_END_TR_EN = hr::field_mask_literal< 0x400ac768, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL6_END_B_EN = hr::field_mask_literal< 0x400ac768, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL6_END_TR_IT = hr::field_mask_literal< 0x400ac768, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL6_END_BUFFIT = hr::field_mask_literal< 0x400ac768, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL6_DESC_LD_IT = hr::field_mask_literal< 0x400ac768, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL6_BURST_LCK = hr::field_mask_literal< 0x400ac768, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL6_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac768, 16, 16 >();

// HSTDMASTATUS6
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS6_CHANN_ENB = hr::field_mask_literal< 0x400ac76c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS6_CHANN_ACT = hr::field_mask_literal< 0x400ac76c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS6_END_TR_ST = hr::field_mask_literal< 0x400ac76c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS6_END_BF_ST = hr::field_mask_literal< 0x400ac76c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS6_DESC_LDST = hr::field_mask_literal< 0x400ac76c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS6_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac76c, 16, 16 >();

// HSTDMANXTDSC7
   // Next Descriptor Address
   constexpr auto UOTGHS_HSTDMANXTDSC7_NXT_DSC_ADD_Msk = hr::field_mask_literal< 0x400ac770, 0, 32 >();

// HSTDMAADDRESS7
   // Buffer Address
   constexpr auto UOTGHS_HSTDMAADDRESS7_BUFF_ADD_Msk = hr::field_mask_literal< 0x400ac774, 0, 32 >();

// HSTDMACONTROL7
   // Channel Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL7_CHANN_ENB = hr::field_mask_literal< 0x400ac778, 0, 1 >();
   // Load Next Channel Transfer Descriptor Enable Command
   constexpr auto UOTGHS_HSTDMACONTROL7_LDNXT_DSC = hr::field_mask_literal< 0x400ac778, 1, 1 >();
   // End of Transfer Enable (Control)
   constexpr auto UOTGHS_HSTDMACONTROL7_END_TR_EN = hr::field_mask_literal< 0x400ac778, 2, 1 >();
   // End of Buffer Enable Control
   constexpr auto UOTGHS_HSTDMACONTROL7_END_B_EN = hr::field_mask_literal< 0x400ac778, 3, 1 >();
   // End of Transfer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL7_END_TR_IT = hr::field_mask_literal< 0x400ac778, 4, 1 >();
   // End of Buffer Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL7_END_BUFFIT = hr::field_mask_literal< 0x400ac778, 5, 1 >();
   // Descriptor Loaded Interrupt Enable
   constexpr auto UOTGHS_HSTDMACONTROL7_DESC_LD_IT = hr::field_mask_literal< 0x400ac778, 6, 1 >();
   // Burst Lock Enable
   constexpr auto UOTGHS_HSTDMACONTROL7_BURST_LCK = hr::field_mask_literal< 0x400ac778, 7, 1 >();
   // Buffer Byte Length (Write-only)
   constexpr auto UOTGHS_HSTDMACONTROL7_BUFF_LENGTH_Msk = hr::field_mask_literal< 0x400ac778, 16, 16 >();

// HSTDMASTATUS7
   // Channel Enable Status
   constexpr auto UOTGHS_HSTDMASTATUS7_CHANN_ENB = hr::field_mask_literal< 0x400ac77c, 0, 1 >();
   // Channel Active Status
   constexpr auto UOTGHS_HSTDMASTATUS7_CHANN_ACT = hr::field_mask_literal< 0x400ac77c, 1, 1 >();
   // End of Channel Transfer Status
   constexpr auto UOTGHS_HSTDMASTATUS7_END_TR_ST = hr::field_mask_literal< 0x400ac77c, 4, 1 >();
   // End of Channel Buffer Status
   constexpr auto UOTGHS_HSTDMASTATUS7_END_BF_ST = hr::field_mask_literal< 0x400ac77c, 5, 1 >();
   // Descriptor Loaded Status
   constexpr auto UOTGHS_HSTDMASTATUS7_DESC_LDST = hr::field_mask_literal< 0x400ac77c, 6, 1 >();
   // Buffer Byte Count
   constexpr auto UOTGHS_HSTDMASTATUS7_BUFF_COUNT_Msk = hr::field_mask_literal< 0x400ac77c, 16, 16 >();

// CTRL
   // ID Transition Interrupt Enable
   constexpr auto UOTGHS_CTRL_IDTE = hr::field_mask_literal< 0x400ac800, 0, 1 >();
   // VBus Transition Interrupt Enable
   constexpr auto UOTGHS_CTRL_VBUSTE = hr::field_mask_literal< 0x400ac800, 1, 1 >();
   // SRP Interrupt Enable
   constexpr auto UOTGHS_CTRL_SRPE = hr::field_mask_literal< 0x400ac800, 2, 1 >();
   // VBus Error Interrupt Enable
   constexpr auto UOTGHS_CTRL_VBERRE = hr::field_mask_literal< 0x400ac800, 3, 1 >();
   // B-Connection Error Interrupt Enable
   constexpr auto UOTGHS_CTRL_BCERRE = hr::field_mask_literal< 0x400ac800, 4, 1 >();
   // Role Exchange Interrupt Enable
   constexpr auto UOTGHS_CTRL_ROLEEXE = hr::field_mask_literal< 0x400ac800, 5, 1 >();
   // HNP Error Interrupt Enable
   constexpr auto UOTGHS_CTRL_HNPERRE = hr::field_mask_literal< 0x400ac800, 6, 1 >();
   // Suspend Time-Out Interrupt Enable
   constexpr auto UOTGHS_CTRL_STOE = hr::field_mask_literal< 0x400ac800, 7, 1 >();
   // VBus Hardware Control
   constexpr auto UOTGHS_CTRL_VBUSHWC = hr::field_mask_literal< 0x400ac800, 8, 1 >();
   // SRP Selection
   constexpr auto UOTGHS_CTRL_SRPSEL = hr::field_mask_literal< 0x400ac800, 9, 1 >();
   // SRP Request
   constexpr auto UOTGHS_CTRL_SRPREQ = hr::field_mask_literal< 0x400ac800, 10, 1 >();
   // HNP Request
   constexpr auto UOTGHS_CTRL_HNPREQ = hr::field_mask_literal< 0x400ac800, 11, 1 >();
   // OTG Pad Enable
   constexpr auto UOTGHS_CTRL_OTGPADE = hr::field_mask_literal< 0x400ac800, 12, 1 >();
   // VBus Polarity Off
   constexpr auto UOTGHS_CTRL_VBUSPO = hr::field_mask_literal< 0x400ac800, 13, 1 >();
   // Freeze USB Clock
   constexpr auto UOTGHS_CTRL_FRZCLK = hr::field_mask_literal< 0x400ac800, 14, 1 >();
   // UOTGHS Enable
   constexpr auto UOTGHS_CTRL_USBE = hr::field_mask_literal< 0x400ac800, 15, 1 >();
   // Timer Value
   constexpr auto UOTGHS_CTRL_TIMVALUE_Msk = hr::field_mask_literal< 0x400ac800, 16, 2 >();
   // Timer Page
   constexpr auto UOTGHS_CTRL_TIMPAGE_Msk = hr::field_mask_literal< 0x400ac800, 20, 2 >();
   // Timer Access Unlock
   constexpr auto UOTGHS_CTRL_UNLOCK = hr::field_mask_literal< 0x400ac800, 22, 1 >();
   // UOTGID Pin Enable
   constexpr auto UOTGHS_CTRL_UIDE = hr::field_mask_literal< 0x400ac800, 24, 1 >();
      // The USB mode (device/host) is selected from the UIMOD bit.
      constexpr auto UOTGHS_CTRL_UIDE_UIMOD = hr::field_value_literal< 0x400ac800, 24, 1 >( 0 );
      // The USB mode (device/host) is selected from the UOTGID input pin.
      constexpr auto UOTGHS_CTRL_UIDE_UOTGID = hr::field_value_literal< 0x400ac800, 24, 1 >( 1 );
   // UOTGHS Mode
   constexpr auto UOTGHS_CTRL_UIMOD = hr::field_mask_literal< 0x400ac800, 25, 1 >();
      // The module is in USB host mode.
      constexpr auto UOTGHS_CTRL_UIMOD_HOST = hr::field_value_literal< 0x400ac800, 25, 1 >( 0 );
      // The module is in USB device mode.
      constexpr auto UOTGHS_CTRL_UIMOD_DEVICE = hr::field_value_literal< 0x400ac800, 25, 1 >( 1 );

// SR
   // ID Transition Interrupt
   constexpr auto UOTGHS_SR_IDTI = hr::field_mask_literal< 0x400ac804, 0, 1 >();
   // VBus Transition Interrupt
   constexpr auto UOTGHS_SR_VBUSTI = hr::field_mask_literal< 0x400ac804, 1, 1 >();
   // SRP Interrupt
   constexpr auto UOTGHS_SR_SRPI = hr::field_mask_literal< 0x400ac804, 2, 1 >();
   // VBus Error Interrupt
   constexpr auto UOTGHS_SR_VBERRI = hr::field_mask_literal< 0x400ac804, 3, 1 >();
   // B-Connection Error Interrupt
   constexpr auto UOTGHS_SR_BCERRI = hr::field_mask_literal< 0x400ac804, 4, 1 >();
   // Role Exchange Interrupt
   constexpr auto UOTGHS_SR_ROLEEXI = hr::field_mask_literal< 0x400ac804, 5, 1 >();
   // HNP Error Interrupt
   constexpr auto UOTGHS_SR_HNPERRI = hr::field_mask_literal< 0x400ac804, 6, 1 >();
   // Suspend Time-Out Interrupt
   constexpr auto UOTGHS_SR_STOI = hr::field_mask_literal< 0x400ac804, 7, 1 >();
   // VBus Request
   constexpr auto UOTGHS_SR_VBUSRQ = hr::field_mask_literal< 0x400ac804, 9, 1 >();
   // UOTGID Pin State
   constexpr auto UOTGHS_SR_ID = hr::field_mask_literal< 0x400ac804, 10, 1 >();
   // VBus Level
   constexpr auto UOTGHS_SR_VBUS = hr::field_mask_literal< 0x400ac804, 11, 1 >();
   // Speed Status
   constexpr auto UOTGHS_SR_SPEED_Msk = hr::field_mask_literal< 0x400ac804, 12, 2 >();
      // Full-Speed mode
      constexpr auto UOTGHS_SR_SPEED_FULL_SPEED = hr::field_value_literal< 0x400ac804, 12, 2 >( 0 );
      // High-Speed mode
      constexpr auto UOTGHS_SR_SPEED_HIGH_SPEED = hr::field_value_literal< 0x400ac804, 12, 2 >( 1 );
      // Low-Speed mode
      constexpr auto UOTGHS_SR_SPEED_LOW_SPEED = hr::field_value_literal< 0x400ac804, 12, 2 >( 2 );
   // UTMI Clock Usable
   constexpr auto UOTGHS_SR_CLKUSABLE = hr::field_mask_literal< 0x400ac804, 14, 1 >();

// SCR
   // ID Transition Interrupt Clear
   constexpr auto UOTGHS_SCR_IDTIC = hr::field_mask_literal< 0x400ac808, 0, 1 >();
   // VBus Transition Interrupt Clear
   constexpr auto UOTGHS_SCR_VBUSTIC = hr::field_mask_literal< 0x400ac808, 1, 1 >();
   // SRP Interrupt Clear
   constexpr auto UOTGHS_SCR_SRPIC = hr::field_mask_literal< 0x400ac808, 2, 1 >();
   // VBus Error Interrupt Clear
   constexpr auto UOTGHS_SCR_VBERRIC = hr::field_mask_literal< 0x400ac808, 3, 1 >();
   // B-Connection Error Interrupt Clear
   constexpr auto UOTGHS_SCR_BCERRIC = hr::field_mask_literal< 0x400ac808, 4, 1 >();
   // Role Exchange Interrupt Clear
   constexpr auto UOTGHS_SCR_ROLEEXIC = hr::field_mask_literal< 0x400ac808, 5, 1 >();
   // HNP Error Interrupt Clear
   constexpr auto UOTGHS_SCR_HNPERRIC = hr::field_mask_literal< 0x400ac808, 6, 1 >();
   // Suspend Time-Out Interrupt Clear
   constexpr auto UOTGHS_SCR_STOIC = hr::field_mask_literal< 0x400ac808, 7, 1 >();
   // VBus Request Clear
   constexpr auto UOTGHS_SCR_VBUSRQC = hr::field_mask_literal< 0x400ac808, 9, 1 >();

// SFR
   // ID Transition Interrupt Set
   constexpr auto UOTGHS_SFR_IDTIS = hr::field_mask_literal< 0x400ac80c, 0, 1 >();
   // VBus Transition Interrupt Set
   constexpr auto UOTGHS_SFR_VBUSTIS = hr::field_mask_literal< 0x400ac80c, 1, 1 >();
   // SRP Interrupt Set
   constexpr auto UOTGHS_SFR_SRPIS = hr::field_mask_literal< 0x400ac80c, 2, 1 >();
   // VBus Error Interrupt Set
   constexpr auto UOTGHS_SFR_VBERRIS = hr::field_mask_literal< 0x400ac80c, 3, 1 >();
   // B-Connection Error Interrupt Set
   constexpr auto UOTGHS_SFR_BCERRIS = hr::field_mask_literal< 0x400ac80c, 4, 1 >();
   // Role Exchange Interrupt Set
   constexpr auto UOTGHS_SFR_ROLEEXIS = hr::field_mask_literal< 0x400ac80c, 5, 1 >();
   // HNP Error Interrupt Set
   constexpr auto UOTGHS_SFR_HNPERRIS = hr::field_mask_literal< 0x400ac80c, 6, 1 >();
   // Suspend Time-Out Interrupt Set
   constexpr auto UOTGHS_SFR_STOIS = hr::field_mask_literal< 0x400ac80c, 7, 1 >();
   // VBus Request Set
   constexpr auto UOTGHS_SFR_VBUSRQS = hr::field_mask_literal< 0x400ac80c, 9, 1 >();

// FSM
   // Dual Role Device State
   constexpr auto UOTGHS_FSM_DRDSTATE_Msk = hr::field_mask_literal< 0x400ac82c, 0, 4 >();
      // This is the start state for A-devices (when the ID pin is 0)
      constexpr auto UOTGHS_FSM_DRDSTATE_A_IDLESTATE = hr::field_value_literal< 0x400ac82c, 0, 4 >( 0 );
      // In this state, the A-device waits for the voltage on VBus to rise above the A-device VBus Valid threshold (4.4 V).
      constexpr auto UOTGHS_FSM_DRDSTATE_A_WAIT_VRISE = hr::field_value_literal< 0x400ac82c, 0, 4 >( 1 );
      // In this state, the A-device waits for the B-device to signal a connection.
      constexpr auto UOTGHS_FSM_DRDSTATE_A_WAIT_BCON = hr::field_value_literal< 0x400ac82c, 0, 4 >( 2 );
      // In this state, the A-device that operates in Host mode is operational.
      constexpr auto UOTGHS_FSM_DRDSTATE_A_HOST = hr::field_value_literal< 0x400ac82c, 0, 4 >( 3 );
      // The A-device operating as a host is in the suspend mode.
      constexpr auto UOTGHS_FSM_DRDSTATE_A_SUSPEND = hr::field_value_literal< 0x400ac82c, 0, 4 >( 4 );
      // The A-device operates as a peripheral.
      constexpr auto UOTGHS_FSM_DRDSTATE_A_PERIPHERAL = hr::field_value_literal< 0x400ac82c, 0, 4 >( 5 );
      // In this state, the A-device waits for the voltage on VBus to drop below the A-device Session Valid threshold (1.4 V).
      constexpr auto UOTGHS_FSM_DRDSTATE_A_WAIT_VFALL = hr::field_value_literal< 0x400ac82c, 0, 4 >( 6 );
      // In this state, the A-device waits for recovery of the over-current condition that caused it to enter this state.
      constexpr auto UOTGHS_FSM_DRDSTATE_A_VBUS_ERR = hr::field_value_literal< 0x400ac82c, 0, 4 >( 7 );
      // In this state, the A-device waits for the data USB line to discharge (100 us).
      constexpr auto UOTGHS_FSM_DRDSTATE_A_WAIT_DISCHARGE = hr::field_value_literal< 0x400ac82c, 0, 4 >( 8 );
      // This is the start state for B-device (when the ID pin is 1).
      constexpr auto UOTGHS_FSM_DRDSTATE_B_IDLE = hr::field_value_literal< 0x400ac82c, 0, 4 >( 9 );
      // In this state, the B-device acts as the peripheral.
      constexpr auto UOTGHS_FSM_DRDSTATE_B_PERIPHERAL = hr::field_value_literal< 0x400ac82c, 0, 4 >( 10 );
      // In this state, the B-device is in suspend mode and waits until 3 ms before initiating the HNP protocol if requested.
      constexpr auto UOTGHS_FSM_DRDSTATE_B_WAIT_BEGIN_HNP = hr::field_value_literal< 0x400ac82c, 0, 4 >( 11 );
      // In this state, the B-device waits for the data USB line to discharge (100 us) before becoming Host.
      constexpr auto UOTGHS_FSM_DRDSTATE_B_WAIT_DISCHARGE = hr::field_value_literal< 0x400ac82c, 0, 4 >( 12 );
      // In this state, the B-device waits for the A-device to signal a connect before becoming B-Host.
      constexpr auto UOTGHS_FSM_DRDSTATE_B_WAIT_ACON = hr::field_value_literal< 0x400ac82c, 0, 4 >( 13 );
      // In this state, the B-device acts as the Host.
      constexpr auto UOTGHS_FSM_DRDSTATE_B_HOST = hr::field_value_literal< 0x400ac82c, 0, 4 >( 14 );
      // In this state, the B-device attempts to start a session using the SRP protocol.
      constexpr auto UOTGHS_FSM_DRDSTATE_B_SRP_INIT = hr::field_value_literal< 0x400ac82c, 0, 4 >( 15 );

// =============================================================================
//
// EMAC
// base address = 0x400b0000
// Ethernet MAC 10/100
//
// =============================================================================

struct Emac {
   hr::hardware_register<0x400b0000> NCR;
   hr::hardware_register<0x400b0004> NCFGR;
   hr::hardware_register<0x400b0008> NSR;
   hr::reserved< 0xC, 2 > _reserved_at_0xC;
   hr::hardware_register<0x400b0014> TSR;
   hr::hardware_register<0x400b0018> RBQP;
   hr::hardware_register<0x400b001c> TBQP;
   hr::hardware_register<0x400b0020> RSR;
   hr::hardware_register<0x400b0024> ISR;
   hr::hardware_register<0x400b0028> IER;
   hr::hardware_register<0x400b002c> IDR;
   hr::hardware_register<0x400b0030> IMR;
   hr::hardware_register<0x400b0034> MAN;
   hr::hardware_register<0x400b0038> PTR;
   hr::hardware_register<0x400b003c> PFR;
   hr::hardware_register<0x400b0040> FTO;
   hr::hardware_register<0x400b0044> SCF;
   hr::hardware_register<0x400b0048> MCF;
   hr::hardware_register<0x400b004c> FRO;
   hr::hardware_register<0x400b0050> FCSE;
   hr::hardware_register<0x400b0054> ALE;
   hr::hardware_register<0x400b0058> DTF;
   hr::hardware_register<0x400b005c> LCOL;
   hr::hardware_register<0x400b0060> ECOL;
   hr::hardware_register<0x400b0064> TUND;
   hr::hardware_register<0x400b0068> CSE;
   hr::hardware_register<0x400b006c> RRE;
   hr::hardware_register<0x400b0070> ROV;
   hr::hardware_register<0x400b0074> RSE;
   hr::hardware_register<0x400b0078> ELE;
   hr::hardware_register<0x400b007c> RJA;
   hr::hardware_register<0x400b0080> USF;
   hr::hardware_register<0x400b0084> STE;
   hr::hardware_register<0x400b0088> RLE;
   hr::reserved< 0x8C, 1 > _reserved_at_0x8C;
   hr::hardware_register<0x400b0090> HRB;
   hr::hardware_register<0x400b0094> HRT;
   hr::hardware_register<0x400b0098> SA1B;
   hr::hardware_register<0x400b009c> SA1T;
   hr::hardware_register<0x400b00a0> SA2B;
   hr::hardware_register<0x400b00a4> SA2T;
   hr::hardware_register<0x400b00a8> SA3B;
   hr::hardware_register<0x400b00ac> SA3T;
   hr::hardware_register<0x400b00b0> SA4B;
   hr::hardware_register<0x400b00b4> SA4T;
   hr::hardware_register<0x400b00b8> TID;
   hr::reserved< 0xBC, 1 > _reserved_at_0xBC;
   hr::hardware_register<0x400b00c0> USRIO;
};

#define EMAC ( ( Emac * ) 0x400b0000 )

// NCR
   // LoopBack
   constexpr auto EMAC_NCR_LB = hr::field_mask_literal< 0x400b0000, 0, 1 >();
   // Loopback local
   constexpr auto EMAC_NCR_LLB = hr::field_mask_literal< 0x400b0000, 1, 1 >();
   // Receive enable
   constexpr auto EMAC_NCR_RE = hr::field_mask_literal< 0x400b0000, 2, 1 >();
   // Transmit enable
   constexpr auto EMAC_NCR_TE = hr::field_mask_literal< 0x400b0000, 3, 1 >();
   // Management port enable
   constexpr auto EMAC_NCR_MPE = hr::field_mask_literal< 0x400b0000, 4, 1 >();
   // Clear statistics registers
   constexpr auto EMAC_NCR_CLRSTAT = hr::field_mask_literal< 0x400b0000, 5, 1 >();
   // Increment statistics registers
   constexpr auto EMAC_NCR_INCSTAT = hr::field_mask_literal< 0x400b0000, 6, 1 >();
   // Write enable for statistics registers
   constexpr auto EMAC_NCR_WESTAT = hr::field_mask_literal< 0x400b0000, 7, 1 >();
   // Back pressure
   constexpr auto EMAC_NCR_BP = hr::field_mask_literal< 0x400b0000, 8, 1 >();
   // Start transmission
   constexpr auto EMAC_NCR_TSTART = hr::field_mask_literal< 0x400b0000, 9, 1 >();
   // Transmit halt
   constexpr auto EMAC_NCR_THALT = hr::field_mask_literal< 0x400b0000, 10, 1 >();

// NCFGR
   // Speed
   constexpr auto EMAC_NCFGR_SPD = hr::field_mask_literal< 0x400b0004, 0, 1 >();
   // Full Duplex
   constexpr auto EMAC_NCFGR_FD = hr::field_mask_literal< 0x400b0004, 1, 1 >();
   // Jumbo Frames
   constexpr auto EMAC_NCFGR_JFRAME = hr::field_mask_literal< 0x400b0004, 3, 1 >();
   // Copy All Frames
   constexpr auto EMAC_NCFGR_CAF = hr::field_mask_literal< 0x400b0004, 4, 1 >();
   // No Broadcast
   constexpr auto EMAC_NCFGR_NBC = hr::field_mask_literal< 0x400b0004, 5, 1 >();
   // Multicast Hash Enable
   constexpr auto EMAC_NCFGR_MTI = hr::field_mask_literal< 0x400b0004, 6, 1 >();
   // Unicast Hash Enable
   constexpr auto EMAC_NCFGR_UNI = hr::field_mask_literal< 0x400b0004, 7, 1 >();
   // Receive 1536 bytes frames
   constexpr auto EMAC_NCFGR_BIG = hr::field_mask_literal< 0x400b0004, 8, 1 >();
   // MDC clock divider
   constexpr auto EMAC_NCFGR_CLK_Msk = hr::field_mask_literal< 0x400b0004, 10, 2 >();
      // MCK divided by 8 (MCK up to 20 MHz).
      constexpr auto EMAC_NCFGR_CLK_MCK_8 = hr::field_value_literal< 0x400b0004, 10, 2 >( 0 );
      // MCK divided by 16 (MCK up to 40 MHz).
      constexpr auto EMAC_NCFGR_CLK_MCK_16 = hr::field_value_literal< 0x400b0004, 10, 2 >( 1 );
      // MCK divided by 32 (MCK up to 80 MHz).
      constexpr auto EMAC_NCFGR_CLK_MCK_32 = hr::field_value_literal< 0x400b0004, 10, 2 >( 2 );
      // MCK divided by 64 (MCK up to 160 MHz).
      constexpr auto EMAC_NCFGR_CLK_MCK_64 = hr::field_value_literal< 0x400b0004, 10, 2 >( 3 );
   // Retry test
   constexpr auto EMAC_NCFGR_RTY = hr::field_mask_literal< 0x400b0004, 12, 1 >();
   // Pause Enable
   constexpr auto EMAC_NCFGR_PAE = hr::field_mask_literal< 0x400b0004, 13, 1 >();
   // Receive Buffer Offset
   constexpr auto EMAC_NCFGR_RBOF_Msk = hr::field_mask_literal< 0x400b0004, 14, 2 >();
      // No offset from start of receive buffer.
      constexpr auto EMAC_NCFGR_RBOF_OFFSET_0 = hr::field_value_literal< 0x400b0004, 14, 2 >( 0 );
      // One-byte offset from start of receive buffer.
      constexpr auto EMAC_NCFGR_RBOF_OFFSET_1 = hr::field_value_literal< 0x400b0004, 14, 2 >( 1 );
      // Two-byte offset from start of receive buffer.
      constexpr auto EMAC_NCFGR_RBOF_OFFSET_2 = hr::field_value_literal< 0x400b0004, 14, 2 >( 2 );
      // Three-byte offset from start of receive buffer.
      constexpr auto EMAC_NCFGR_RBOF_OFFSET_3 = hr::field_value_literal< 0x400b0004, 14, 2 >( 3 );
   // Receive Length field Checking Enable
   constexpr auto EMAC_NCFGR_RLCE = hr::field_mask_literal< 0x400b0004, 16, 1 >();
   // Discard Receive FCS
   constexpr auto EMAC_NCFGR_DRFCS = hr::field_mask_literal< 0x400b0004, 17, 1 >();
   // None
   constexpr auto EMAC_NCFGR_EFRHD = hr::field_mask_literal< 0x400b0004, 18, 1 >();
   // Ignore RX FCS
   constexpr auto EMAC_NCFGR_IRXFCS = hr::field_mask_literal< 0x400b0004, 19, 1 >();

// NSR
   // None
   constexpr auto EMAC_NSR_MDIO = hr::field_mask_literal< 0x400b0008, 1, 1 >();
   // None
   constexpr auto EMAC_NSR_IDLE = hr::field_mask_literal< 0x400b0008, 2, 1 >();

// TSR
   // Used Bit Read
   constexpr auto EMAC_TSR_UBR = hr::field_mask_literal< 0x400b0014, 0, 1 >();
   // Collision Occurred
   constexpr auto EMAC_TSR_COL = hr::field_mask_literal< 0x400b0014, 1, 1 >();
   // Retry Limit exceeded
   constexpr auto EMAC_TSR_RLES = hr::field_mask_literal< 0x400b0014, 2, 1 >();
   // Transmit Go
   constexpr auto EMAC_TSR_TGO = hr::field_mask_literal< 0x400b0014, 3, 1 >();
   // Buffers exhausted mid frame
   constexpr auto EMAC_TSR_BEX = hr::field_mask_literal< 0x400b0014, 4, 1 >();
   // Transmit Complete
   constexpr auto EMAC_TSR_COMP = hr::field_mask_literal< 0x400b0014, 5, 1 >();
   // Transmit Underrun
   constexpr auto EMAC_TSR_UND = hr::field_mask_literal< 0x400b0014, 6, 1 >();

// RBQP
   // Receive buffer queue pointer address
   constexpr auto EMAC_RBQP_ADDR_Msk = hr::field_mask_literal< 0x400b0018, 2, 30 >();

// TBQP
   // Transmit buffer queue pointer address
   constexpr auto EMAC_TBQP_ADDR_Msk = hr::field_mask_literal< 0x400b001c, 2, 30 >();

// RSR
   // Buffer Not Available
   constexpr auto EMAC_RSR_BNA = hr::field_mask_literal< 0x400b0020, 0, 1 >();
   // Frame Received
   constexpr auto EMAC_RSR_REC = hr::field_mask_literal< 0x400b0020, 1, 1 >();
   // Receive Overrun
   constexpr auto EMAC_RSR_OVR = hr::field_mask_literal< 0x400b0020, 2, 1 >();

// ISR
   // Management Frame Done
   constexpr auto EMAC_ISR_MFD = hr::field_mask_literal< 0x400b0024, 0, 1 >();
   // Receive Complete
   constexpr auto EMAC_ISR_RCOMP = hr::field_mask_literal< 0x400b0024, 1, 1 >();
   // Receive Used Bit Read
   constexpr auto EMAC_ISR_RXUBR = hr::field_mask_literal< 0x400b0024, 2, 1 >();
   // Transmit Used Bit Read
   constexpr auto EMAC_ISR_TXUBR = hr::field_mask_literal< 0x400b0024, 3, 1 >();
   // Ethernet Transmit Buffer Underrun
   constexpr auto EMAC_ISR_TUND = hr::field_mask_literal< 0x400b0024, 4, 1 >();
   // Retry Limit Exceeded
   constexpr auto EMAC_ISR_RLEX = hr::field_mask_literal< 0x400b0024, 5, 1 >();
   // Transmit Error
   constexpr auto EMAC_ISR_TXERR = hr::field_mask_literal< 0x400b0024, 6, 1 >();
   // Transmit Complete
   constexpr auto EMAC_ISR_TCOMP = hr::field_mask_literal< 0x400b0024, 7, 1 >();
   // Receive Overrun
   constexpr auto EMAC_ISR_ROVR = hr::field_mask_literal< 0x400b0024, 10, 1 >();
   // Hresp not OK
   constexpr auto EMAC_ISR_HRESP = hr::field_mask_literal< 0x400b0024, 11, 1 >();
   // Pause Frame Received
   constexpr auto EMAC_ISR_PFRE = hr::field_mask_literal< 0x400b0024, 12, 1 >();
   // Pause Time Zero
   constexpr auto EMAC_ISR_PTZ = hr::field_mask_literal< 0x400b0024, 13, 1 >();

// IER
   // Management Frame sent
   constexpr auto EMAC_IER_MFD = hr::field_mask_literal< 0x400b0028, 0, 1 >();
   // Receive Complete
   constexpr auto EMAC_IER_RCOMP = hr::field_mask_literal< 0x400b0028, 1, 1 >();
   // Receive Used Bit Read
   constexpr auto EMAC_IER_RXUBR = hr::field_mask_literal< 0x400b0028, 2, 1 >();
   // Transmit Used Bit Read
   constexpr auto EMAC_IER_TXUBR = hr::field_mask_literal< 0x400b0028, 3, 1 >();
   // Ethernet Transmit Buffer Underrun
   constexpr auto EMAC_IER_TUND = hr::field_mask_literal< 0x400b0028, 4, 1 >();
   // Retry Limit Exceeded
   constexpr auto EMAC_IER_RLE = hr::field_mask_literal< 0x400b0028, 5, 1 >();
   // None
   constexpr auto EMAC_IER_TXERR = hr::field_mask_literal< 0x400b0028, 6, 1 >();
   // Transmit Complete
   constexpr auto EMAC_IER_TCOMP = hr::field_mask_literal< 0x400b0028, 7, 1 >();
   // Receive Overrun
   constexpr auto EMAC_IER_ROVR = hr::field_mask_literal< 0x400b0028, 10, 1 >();
   // Hresp not OK
   constexpr auto EMAC_IER_HRESP = hr::field_mask_literal< 0x400b0028, 11, 1 >();
   // Pause Frame Received
   constexpr auto EMAC_IER_PFR = hr::field_mask_literal< 0x400b0028, 12, 1 >();
   // Pause Time Zero
   constexpr auto EMAC_IER_PTZ = hr::field_mask_literal< 0x400b0028, 13, 1 >();

// IDR
   // Management Frame sent
   constexpr auto EMAC_IDR_MFD = hr::field_mask_literal< 0x400b002c, 0, 1 >();
   // Receive Complete
   constexpr auto EMAC_IDR_RCOMP = hr::field_mask_literal< 0x400b002c, 1, 1 >();
   // Receive Used Bit Read
   constexpr auto EMAC_IDR_RXUBR = hr::field_mask_literal< 0x400b002c, 2, 1 >();
   // Transmit Used Bit Read
   constexpr auto EMAC_IDR_TXUBR = hr::field_mask_literal< 0x400b002c, 3, 1 >();
   // Ethernet Transmit Buffer Underrun
   constexpr auto EMAC_IDR_TUND = hr::field_mask_literal< 0x400b002c, 4, 1 >();
   // Retry Limit Exceeded
   constexpr auto EMAC_IDR_RLE = hr::field_mask_literal< 0x400b002c, 5, 1 >();
   // None
   constexpr auto EMAC_IDR_TXERR = hr::field_mask_literal< 0x400b002c, 6, 1 >();
   // Transmit Complete
   constexpr auto EMAC_IDR_TCOMP = hr::field_mask_literal< 0x400b002c, 7, 1 >();
   // Receive Overrun
   constexpr auto EMAC_IDR_ROVR = hr::field_mask_literal< 0x400b002c, 10, 1 >();
   // Hresp not OK
   constexpr auto EMAC_IDR_HRESP = hr::field_mask_literal< 0x400b002c, 11, 1 >();
   // Pause Frame Received
   constexpr auto EMAC_IDR_PFR = hr::field_mask_literal< 0x400b002c, 12, 1 >();
   // Pause Time Zero
   constexpr auto EMAC_IDR_PTZ = hr::field_mask_literal< 0x400b002c, 13, 1 >();

// IMR
   // Management Frame sent
   constexpr auto EMAC_IMR_MFD = hr::field_mask_literal< 0x400b0030, 0, 1 >();
   // Receive Complete
   constexpr auto EMAC_IMR_RCOMP = hr::field_mask_literal< 0x400b0030, 1, 1 >();
   // Receive Used Bit Read
   constexpr auto EMAC_IMR_RXUBR = hr::field_mask_literal< 0x400b0030, 2, 1 >();
   // Transmit Used Bit Read
   constexpr auto EMAC_IMR_TXUBR = hr::field_mask_literal< 0x400b0030, 3, 1 >();
   // Ethernet Transmit Buffer Underrun
   constexpr auto EMAC_IMR_TUND = hr::field_mask_literal< 0x400b0030, 4, 1 >();
   // Retry Limit Exceeded
   constexpr auto EMAC_IMR_RLE = hr::field_mask_literal< 0x400b0030, 5, 1 >();
   // None
   constexpr auto EMAC_IMR_TXERR = hr::field_mask_literal< 0x400b0030, 6, 1 >();
   // Transmit Complete
   constexpr auto EMAC_IMR_TCOMP = hr::field_mask_literal< 0x400b0030, 7, 1 >();
   // Receive Overrun
   constexpr auto EMAC_IMR_ROVR = hr::field_mask_literal< 0x400b0030, 10, 1 >();
   // Hresp not OK
   constexpr auto EMAC_IMR_HRESP = hr::field_mask_literal< 0x400b0030, 11, 1 >();
   // Pause Frame Received
   constexpr auto EMAC_IMR_PFR = hr::field_mask_literal< 0x400b0030, 12, 1 >();
   // Pause Time Zero
   constexpr auto EMAC_IMR_PTZ = hr::field_mask_literal< 0x400b0030, 13, 1 >();

// MAN
   // None
   constexpr auto EMAC_MAN_DATA_Msk = hr::field_mask_literal< 0x400b0034, 0, 16 >();
   // None
   constexpr auto EMAC_MAN_CODE_Msk = hr::field_mask_literal< 0x400b0034, 16, 2 >();
   // Register Address
   constexpr auto EMAC_MAN_REGA_Msk = hr::field_mask_literal< 0x400b0034, 18, 5 >();
   // PHY Address
   constexpr auto EMAC_MAN_PHYA_Msk = hr::field_mask_literal< 0x400b0034, 23, 5 >();
   // Read-write
   constexpr auto EMAC_MAN_RW_Msk = hr::field_mask_literal< 0x400b0034, 28, 2 >();
   // Start of frame
   constexpr auto EMAC_MAN_SOF_Msk = hr::field_mask_literal< 0x400b0034, 30, 2 >();

// PTR
   // Pause Time
   constexpr auto EMAC_PTR_PTIME_Msk = hr::field_mask_literal< 0x400b0038, 0, 16 >();

// PFR
   // Pause Frames received OK
   constexpr auto EMAC_PFR_FROK_Msk = hr::field_mask_literal< 0x400b003c, 0, 16 >();

// FTO
   // Frames Transmitted OK
   constexpr auto EMAC_FTO_FTOK_Msk = hr::field_mask_literal< 0x400b0040, 0, 24 >();

// SCF
   // Single Collision Frames
   constexpr auto EMAC_SCF_SCF_Msk = hr::field_mask_literal< 0x400b0044, 0, 16 >();

// MCF
   // Multicollision Frames
   constexpr auto EMAC_MCF_MCF_Msk = hr::field_mask_literal< 0x400b0048, 0, 16 >();

// FRO
   // Frames Received OK
   constexpr auto EMAC_FRO_FROK_Msk = hr::field_mask_literal< 0x400b004c, 0, 24 >();

// FCSE
   // Frame Check Sequence Errors
   constexpr auto EMAC_FCSE_FCSE_Msk = hr::field_mask_literal< 0x400b0050, 0, 8 >();

// ALE
   // Alignment Errors
   constexpr auto EMAC_ALE_ALE_Msk = hr::field_mask_literal< 0x400b0054, 0, 8 >();

// DTF
   // Deferred Transmission Frames
   constexpr auto EMAC_DTF_DTF_Msk = hr::field_mask_literal< 0x400b0058, 0, 16 >();

// LCOL
   // Late Collisions
   constexpr auto EMAC_LCOL_LCOL_Msk = hr::field_mask_literal< 0x400b005c, 0, 8 >();

// ECOL
   // Excessive Collisions
   constexpr auto EMAC_ECOL_EXCOL_Msk = hr::field_mask_literal< 0x400b0060, 0, 8 >();

// TUND
   // Transmit Underruns
   constexpr auto EMAC_TUND_TUND_Msk = hr::field_mask_literal< 0x400b0064, 0, 8 >();

// CSE
   // Carrier Sense Errors
   constexpr auto EMAC_CSE_CSE_Msk = hr::field_mask_literal< 0x400b0068, 0, 8 >();

// RRE
   // Receive Resource Errors
   constexpr auto EMAC_RRE_RRE_Msk = hr::field_mask_literal< 0x400b006c, 0, 16 >();

// ROV
   // Receive Overrun
   constexpr auto EMAC_ROV_ROVR_Msk = hr::field_mask_literal< 0x400b0070, 0, 8 >();

// RSE
   // Receive Symbol Errors
   constexpr auto EMAC_RSE_RSE_Msk = hr::field_mask_literal< 0x400b0074, 0, 8 >();

// ELE
   // Excessive Length Errors
   constexpr auto EMAC_ELE_EXL_Msk = hr::field_mask_literal< 0x400b0078, 0, 8 >();

// RJA
   // Receive Jabbers
   constexpr auto EMAC_RJA_RJB_Msk = hr::field_mask_literal< 0x400b007c, 0, 8 >();

// USF
   // Undersize frames
   constexpr auto EMAC_USF_USF_Msk = hr::field_mask_literal< 0x400b0080, 0, 8 >();

// STE
   // SQE test errors
   constexpr auto EMAC_STE_SQER_Msk = hr::field_mask_literal< 0x400b0084, 0, 8 >();

// RLE
   // Receive Length Field Mismatch
   constexpr auto EMAC_RLE_RLFM_Msk = hr::field_mask_literal< 0x400b0088, 0, 8 >();

// HRB
   // None
   constexpr auto EMAC_HRB_ADDR_Msk = hr::field_mask_literal< 0x400b0090, 0, 32 >();

// HRT
   // None
   constexpr auto EMAC_HRT_ADDR_Msk = hr::field_mask_literal< 0x400b0094, 0, 32 >();

// SA1B
   // None
   constexpr auto EMAC_SA1B_ADDR_Msk = hr::field_mask_literal< 0x400b0098, 0, 32 >();

// SA1T
   // None
   constexpr auto EMAC_SA1T_ADDR_Msk = hr::field_mask_literal< 0x400b009c, 0, 16 >();

// SA2B
   // None
   constexpr auto EMAC_SA2B_ADDR_Msk = hr::field_mask_literal< 0x400b00a0, 0, 32 >();

// SA2T
   // None
   constexpr auto EMAC_SA2T_ADDR_Msk = hr::field_mask_literal< 0x400b00a4, 0, 16 >();

// SA3B
   // None
   constexpr auto EMAC_SA3B_ADDR_Msk = hr::field_mask_literal< 0x400b00a8, 0, 32 >();

// SA3T
   // None
   constexpr auto EMAC_SA3T_ADDR_Msk = hr::field_mask_literal< 0x400b00ac, 0, 16 >();

// SA4B
   // None
   constexpr auto EMAC_SA4B_ADDR_Msk = hr::field_mask_literal< 0x400b00b0, 0, 32 >();

// SA4T
   // None
   constexpr auto EMAC_SA4T_ADDR_Msk = hr::field_mask_literal< 0x400b00b4, 0, 16 >();

// TID
   // Type ID checking
   constexpr auto EMAC_TID_TID_Msk = hr::field_mask_literal< 0x400b00b8, 0, 16 >();

// USRIO
   // Reduce MII
   constexpr auto EMAC_USRIO_RMII = hr::field_mask_literal< 0x400b00c0, 0, 1 >();
   // Clock Enable
   constexpr auto EMAC_USRIO_CLKEN = hr::field_mask_literal< 0x400b00c0, 1, 1 >();

// =============================================================================
//
// CAN0
// base address = 0x400b4000
// Controller Area Network 0
//
// =============================================================================

struct Can0 {
   hr::hardware_register<0x400b4000> MR;
   hr::hardware_register<0x400b4004> IER;
   hr::hardware_register<0x400b4008> IDR;
   hr::hardware_register<0x400b400c> IMR;
   hr::hardware_register<0x400b4010> SR;
   hr::hardware_register<0x400b4014> BR;
   hr::hardware_register<0x400b4018> TIM;
   hr::hardware_register<0x400b401c> TIMESTP;
   hr::hardware_register<0x400b4020> ECR;
   hr::hardware_register<0x400b4024> TCR;
   hr::hardware_register<0x400b4028> ACR;
   hr::reserved< 0x2C, 46 > _reserved_at_0x2C;
   hr::hardware_register<0x400b40e4> WPMR;
   hr::hardware_register<0x400b40e8> WPSR;
   hr::reserved< 0xEC, 69 > _reserved_at_0xEC;
   hr::hardware_register<0x400b4200> MMR0;
   hr::hardware_register<0x400b4204> MAM0;
   hr::hardware_register<0x400b4208> MID0;
   hr::hardware_register<0x400b420c> MFID0;
   hr::hardware_register<0x400b4210> MSR0;
   hr::hardware_register<0x400b4214> MDL0;
   hr::hardware_register<0x400b4218> MDH0;
   hr::hardware_register<0x400b421c> MCR0;
   hr::hardware_register<0x400b4220> MMR1;
   hr::hardware_register<0x400b4224> MAM1;
   hr::hardware_register<0x400b4228> MID1;
   hr::hardware_register<0x400b422c> MFID1;
   hr::hardware_register<0x400b4230> MSR1;
   hr::hardware_register<0x400b4234> MDL1;
   hr::hardware_register<0x400b4238> MDH1;
   hr::hardware_register<0x400b423c> MCR1;
   hr::hardware_register<0x400b4240> MMR2;
   hr::hardware_register<0x400b4244> MAM2;
   hr::hardware_register<0x400b4248> MID2;
   hr::hardware_register<0x400b424c> MFID2;
   hr::hardware_register<0x400b4250> MSR2;
   hr::hardware_register<0x400b4254> MDL2;
   hr::hardware_register<0x400b4258> MDH2;
   hr::hardware_register<0x400b425c> MCR2;
   hr::hardware_register<0x400b4260> MMR3;
   hr::hardware_register<0x400b4264> MAM3;
   hr::hardware_register<0x400b4268> MID3;
   hr::hardware_register<0x400b426c> MFID3;
   hr::hardware_register<0x400b4270> MSR3;
   hr::hardware_register<0x400b4274> MDL3;
   hr::hardware_register<0x400b4278> MDH3;
   hr::hardware_register<0x400b427c> MCR3;
   hr::hardware_register<0x400b4280> MMR4;
   hr::hardware_register<0x400b4284> MAM4;
   hr::hardware_register<0x400b4288> MID4;
   hr::hardware_register<0x400b428c> MFID4;
   hr::hardware_register<0x400b4290> MSR4;
   hr::hardware_register<0x400b4294> MDL4;
   hr::hardware_register<0x400b4298> MDH4;
   hr::hardware_register<0x400b429c> MCR4;
   hr::hardware_register<0x400b42a0> MMR5;
   hr::hardware_register<0x400b42a4> MAM5;
   hr::hardware_register<0x400b42a8> MID5;
   hr::hardware_register<0x400b42ac> MFID5;
   hr::hardware_register<0x400b42b0> MSR5;
   hr::hardware_register<0x400b42b4> MDL5;
   hr::hardware_register<0x400b42b8> MDH5;
   hr::hardware_register<0x400b42bc> MCR5;
   hr::hardware_register<0x400b42c0> MMR6;
   hr::hardware_register<0x400b42c4> MAM6;
   hr::hardware_register<0x400b42c8> MID6;
   hr::hardware_register<0x400b42cc> MFID6;
   hr::hardware_register<0x400b42d0> MSR6;
   hr::hardware_register<0x400b42d4> MDL6;
   hr::hardware_register<0x400b42d8> MDH6;
   hr::hardware_register<0x400b42dc> MCR6;
   hr::hardware_register<0x400b42e0> MMR7;
   hr::hardware_register<0x400b42e4> MAM7;
   hr::hardware_register<0x400b42e8> MID7;
   hr::hardware_register<0x400b42ec> MFID7;
   hr::hardware_register<0x400b42f0> MSR7;
   hr::hardware_register<0x400b42f4> MDL7;
   hr::hardware_register<0x400b42f8> MDH7;
   hr::hardware_register<0x400b42fc> MCR7;
};

#define CAN0 ( ( Can0 * ) 0x400b4000 )

// MR
   // CAN Controller Enable
   constexpr auto CAN0_MR_CANEN = hr::field_mask_literal< 0x400b4000, 0, 1 >();
   // Disable/Enable Low Power Mode
   constexpr auto CAN0_MR_LPM = hr::field_mask_literal< 0x400b4000, 1, 1 >();
   // Disable/Enable Autobaud/Listen mode
   constexpr auto CAN0_MR_ABM = hr::field_mask_literal< 0x400b4000, 2, 1 >();
   // Disable/Enable Overload Frame
   constexpr auto CAN0_MR_OVL = hr::field_mask_literal< 0x400b4000, 3, 1 >();
   // Timestamp messages at each end of Frame
   constexpr auto CAN0_MR_TEOF = hr::field_mask_literal< 0x400b4000, 4, 1 >();
   // Disable/Enable Time Triggered Mode
   constexpr auto CAN0_MR_TTM = hr::field_mask_literal< 0x400b4000, 5, 1 >();
   // Enable Timer Freeze
   constexpr auto CAN0_MR_TIMFRZ = hr::field_mask_literal< 0x400b4000, 6, 1 >();
   // Disable Repeat
   constexpr auto CAN0_MR_DRPT = hr::field_mask_literal< 0x400b4000, 7, 1 >();
   // Reception Synchronization Stage (not readable)
   constexpr auto CAN0_MR_RXSYNC_Msk = hr::field_mask_literal< 0x400b4000, 24, 3 >();
      // Rx Signal with Double Synchro Stages (2 Positive Edges)
      constexpr auto CAN0_MR_RXSYNC_DOUBLE_PP = hr::field_value_literal< 0x400b4000, 24, 3 >( 0 );
      // Rx Signal with Double Synchro Stages (One Positive Edge and One Negative Edge)
      constexpr auto CAN0_MR_RXSYNC_DOUBLE_PN = hr::field_value_literal< 0x400b4000, 24, 3 >( 1 );
      // Rx Signal with Single Synchro Stage (Positive Edge)
      constexpr auto CAN0_MR_RXSYNC_SINGLE_P = hr::field_value_literal< 0x400b4000, 24, 3 >( 2 );
      // Rx Signal with No Synchro Stage
      constexpr auto CAN0_MR_RXSYNC_NONE = hr::field_value_literal< 0x400b4000, 24, 3 >( 3 );

// IER
   // Mailbox 0 Interrupt Enable
   constexpr auto CAN0_IER_MB0 = hr::field_mask_literal< 0x400b4004, 0, 1 >();
   // Mailbox 1 Interrupt Enable
   constexpr auto CAN0_IER_MB1 = hr::field_mask_literal< 0x400b4004, 1, 1 >();
   // Mailbox 2 Interrupt Enable
   constexpr auto CAN0_IER_MB2 = hr::field_mask_literal< 0x400b4004, 2, 1 >();
   // Mailbox 3 Interrupt Enable
   constexpr auto CAN0_IER_MB3 = hr::field_mask_literal< 0x400b4004, 3, 1 >();
   // Mailbox 4 Interrupt Enable
   constexpr auto CAN0_IER_MB4 = hr::field_mask_literal< 0x400b4004, 4, 1 >();
   // Mailbox 5 Interrupt Enable
   constexpr auto CAN0_IER_MB5 = hr::field_mask_literal< 0x400b4004, 5, 1 >();
   // Mailbox 6 Interrupt Enable
   constexpr auto CAN0_IER_MB6 = hr::field_mask_literal< 0x400b4004, 6, 1 >();
   // Mailbox 7 Interrupt Enable
   constexpr auto CAN0_IER_MB7 = hr::field_mask_literal< 0x400b4004, 7, 1 >();
   // Error Active Mode Interrupt Enable
   constexpr auto CAN0_IER_ERRA = hr::field_mask_literal< 0x400b4004, 16, 1 >();
   // Warning Limit Interrupt Enable
   constexpr auto CAN0_IER_WARN = hr::field_mask_literal< 0x400b4004, 17, 1 >();
   // Error Passive Mode Interrupt Enable
   constexpr auto CAN0_IER_ERRP = hr::field_mask_literal< 0x400b4004, 18, 1 >();
   // Bus Off Mode Interrupt Enable
   constexpr auto CAN0_IER_BOFF = hr::field_mask_literal< 0x400b4004, 19, 1 >();
   // Sleep Interrupt Enable
   constexpr auto CAN0_IER_SLEEP = hr::field_mask_literal< 0x400b4004, 20, 1 >();
   // Wakeup Interrupt Enable
   constexpr auto CAN0_IER_WAKEUP = hr::field_mask_literal< 0x400b4004, 21, 1 >();
   // Timer Overflow Interrupt Enable
   constexpr auto CAN0_IER_TOVF = hr::field_mask_literal< 0x400b4004, 22, 1 >();
   // TimeStamp Interrupt Enable
   constexpr auto CAN0_IER_TSTP = hr::field_mask_literal< 0x400b4004, 23, 1 >();
   // CRC Error Interrupt Enable
   constexpr auto CAN0_IER_CERR = hr::field_mask_literal< 0x400b4004, 24, 1 >();
   // Stuffing Error Interrupt Enable
   constexpr auto CAN0_IER_SERR = hr::field_mask_literal< 0x400b4004, 25, 1 >();
   // Acknowledgment Error Interrupt Enable
   constexpr auto CAN0_IER_AERR = hr::field_mask_literal< 0x400b4004, 26, 1 >();
   // Form Error Interrupt Enable
   constexpr auto CAN0_IER_FERR = hr::field_mask_literal< 0x400b4004, 27, 1 >();
   // Bit Error Interrupt Enable
   constexpr auto CAN0_IER_BERR = hr::field_mask_literal< 0x400b4004, 28, 1 >();

// IDR
   // Mailbox 0 Interrupt Disable
   constexpr auto CAN0_IDR_MB0 = hr::field_mask_literal< 0x400b4008, 0, 1 >();
   // Mailbox 1 Interrupt Disable
   constexpr auto CAN0_IDR_MB1 = hr::field_mask_literal< 0x400b4008, 1, 1 >();
   // Mailbox 2 Interrupt Disable
   constexpr auto CAN0_IDR_MB2 = hr::field_mask_literal< 0x400b4008, 2, 1 >();
   // Mailbox 3 Interrupt Disable
   constexpr auto CAN0_IDR_MB3 = hr::field_mask_literal< 0x400b4008, 3, 1 >();
   // Mailbox 4 Interrupt Disable
   constexpr auto CAN0_IDR_MB4 = hr::field_mask_literal< 0x400b4008, 4, 1 >();
   // Mailbox 5 Interrupt Disable
   constexpr auto CAN0_IDR_MB5 = hr::field_mask_literal< 0x400b4008, 5, 1 >();
   // Mailbox 6 Interrupt Disable
   constexpr auto CAN0_IDR_MB6 = hr::field_mask_literal< 0x400b4008, 6, 1 >();
   // Mailbox 7 Interrupt Disable
   constexpr auto CAN0_IDR_MB7 = hr::field_mask_literal< 0x400b4008, 7, 1 >();
   // Error Active Mode Interrupt Disable
   constexpr auto CAN0_IDR_ERRA = hr::field_mask_literal< 0x400b4008, 16, 1 >();
   // Warning Limit Interrupt Disable
   constexpr auto CAN0_IDR_WARN = hr::field_mask_literal< 0x400b4008, 17, 1 >();
   // Error Passive Mode Interrupt Disable
   constexpr auto CAN0_IDR_ERRP = hr::field_mask_literal< 0x400b4008, 18, 1 >();
   // Bus Off Mode Interrupt Disable
   constexpr auto CAN0_IDR_BOFF = hr::field_mask_literal< 0x400b4008, 19, 1 >();
   // Sleep Interrupt Disable
   constexpr auto CAN0_IDR_SLEEP = hr::field_mask_literal< 0x400b4008, 20, 1 >();
   // Wakeup Interrupt Disable
   constexpr auto CAN0_IDR_WAKEUP = hr::field_mask_literal< 0x400b4008, 21, 1 >();
   // Timer Overflow Interrupt
   constexpr auto CAN0_IDR_TOVF = hr::field_mask_literal< 0x400b4008, 22, 1 >();
   // TimeStamp Interrupt Disable
   constexpr auto CAN0_IDR_TSTP = hr::field_mask_literal< 0x400b4008, 23, 1 >();
   // CRC Error Interrupt Disable
   constexpr auto CAN0_IDR_CERR = hr::field_mask_literal< 0x400b4008, 24, 1 >();
   // Stuffing Error Interrupt Disable
   constexpr auto CAN0_IDR_SERR = hr::field_mask_literal< 0x400b4008, 25, 1 >();
   // Acknowledgment Error Interrupt Disable
   constexpr auto CAN0_IDR_AERR = hr::field_mask_literal< 0x400b4008, 26, 1 >();
   // Form Error Interrupt Disable
   constexpr auto CAN0_IDR_FERR = hr::field_mask_literal< 0x400b4008, 27, 1 >();
   // Bit Error Interrupt Disable
   constexpr auto CAN0_IDR_BERR = hr::field_mask_literal< 0x400b4008, 28, 1 >();

// IMR
   // Mailbox 0 Interrupt Mask
   constexpr auto CAN0_IMR_MB0 = hr::field_mask_literal< 0x400b400c, 0, 1 >();
   // Mailbox 1 Interrupt Mask
   constexpr auto CAN0_IMR_MB1 = hr::field_mask_literal< 0x400b400c, 1, 1 >();
   // Mailbox 2 Interrupt Mask
   constexpr auto CAN0_IMR_MB2 = hr::field_mask_literal< 0x400b400c, 2, 1 >();
   // Mailbox 3 Interrupt Mask
   constexpr auto CAN0_IMR_MB3 = hr::field_mask_literal< 0x400b400c, 3, 1 >();
   // Mailbox 4 Interrupt Mask
   constexpr auto CAN0_IMR_MB4 = hr::field_mask_literal< 0x400b400c, 4, 1 >();
   // Mailbox 5 Interrupt Mask
   constexpr auto CAN0_IMR_MB5 = hr::field_mask_literal< 0x400b400c, 5, 1 >();
   // Mailbox 6 Interrupt Mask
   constexpr auto CAN0_IMR_MB6 = hr::field_mask_literal< 0x400b400c, 6, 1 >();
   // Mailbox 7 Interrupt Mask
   constexpr auto CAN0_IMR_MB7 = hr::field_mask_literal< 0x400b400c, 7, 1 >();
   // Error Active Mode Interrupt Mask
   constexpr auto CAN0_IMR_ERRA = hr::field_mask_literal< 0x400b400c, 16, 1 >();
   // Warning Limit Interrupt Mask
   constexpr auto CAN0_IMR_WARN = hr::field_mask_literal< 0x400b400c, 17, 1 >();
   // Error Passive Mode Interrupt Mask
   constexpr auto CAN0_IMR_ERRP = hr::field_mask_literal< 0x400b400c, 18, 1 >();
   // Bus Off Mode Interrupt Mask
   constexpr auto CAN0_IMR_BOFF = hr::field_mask_literal< 0x400b400c, 19, 1 >();
   // Sleep Interrupt Mask
   constexpr auto CAN0_IMR_SLEEP = hr::field_mask_literal< 0x400b400c, 20, 1 >();
   // Wakeup Interrupt Mask
   constexpr auto CAN0_IMR_WAKEUP = hr::field_mask_literal< 0x400b400c, 21, 1 >();
   // Timer Overflow Interrupt Mask
   constexpr auto CAN0_IMR_TOVF = hr::field_mask_literal< 0x400b400c, 22, 1 >();
   // Timestamp Interrupt Mask
   constexpr auto CAN0_IMR_TSTP = hr::field_mask_literal< 0x400b400c, 23, 1 >();
   // CRC Error Interrupt Mask
   constexpr auto CAN0_IMR_CERR = hr::field_mask_literal< 0x400b400c, 24, 1 >();
   // Stuffing Error Interrupt Mask
   constexpr auto CAN0_IMR_SERR = hr::field_mask_literal< 0x400b400c, 25, 1 >();
   // Acknowledgment Error Interrupt Mask
   constexpr auto CAN0_IMR_AERR = hr::field_mask_literal< 0x400b400c, 26, 1 >();
   // Form Error Interrupt Mask
   constexpr auto CAN0_IMR_FERR = hr::field_mask_literal< 0x400b400c, 27, 1 >();
   // Bit Error Interrupt Mask
   constexpr auto CAN0_IMR_BERR = hr::field_mask_literal< 0x400b400c, 28, 1 >();

// SR
   // Mailbox 0 Event
   constexpr auto CAN0_SR_MB0 = hr::field_mask_literal< 0x400b4010, 0, 1 >();
   // Mailbox 1 Event
   constexpr auto CAN0_SR_MB1 = hr::field_mask_literal< 0x400b4010, 1, 1 >();
   // Mailbox 2 Event
   constexpr auto CAN0_SR_MB2 = hr::field_mask_literal< 0x400b4010, 2, 1 >();
   // Mailbox 3 Event
   constexpr auto CAN0_SR_MB3 = hr::field_mask_literal< 0x400b4010, 3, 1 >();
   // Mailbox 4 Event
   constexpr auto CAN0_SR_MB4 = hr::field_mask_literal< 0x400b4010, 4, 1 >();
   // Mailbox 5 Event
   constexpr auto CAN0_SR_MB5 = hr::field_mask_literal< 0x400b4010, 5, 1 >();
   // Mailbox 6 Event
   constexpr auto CAN0_SR_MB6 = hr::field_mask_literal< 0x400b4010, 6, 1 >();
   // Mailbox 7 Event
   constexpr auto CAN0_SR_MB7 = hr::field_mask_literal< 0x400b4010, 7, 1 >();
   // Error Active Mode
   constexpr auto CAN0_SR_ERRA = hr::field_mask_literal< 0x400b4010, 16, 1 >();
   // Warning Limit
   constexpr auto CAN0_SR_WARN = hr::field_mask_literal< 0x400b4010, 17, 1 >();
   // Error Passive Mode
   constexpr auto CAN0_SR_ERRP = hr::field_mask_literal< 0x400b4010, 18, 1 >();
   // Bus Off Mode
   constexpr auto CAN0_SR_BOFF = hr::field_mask_literal< 0x400b4010, 19, 1 >();
   // CAN controller in Low power Mode
   constexpr auto CAN0_SR_SLEEP = hr::field_mask_literal< 0x400b4010, 20, 1 >();
   // CAN controller is not in Low power Mode
   constexpr auto CAN0_SR_WAKEUP = hr::field_mask_literal< 0x400b4010, 21, 1 >();
   // Timer Overflow
   constexpr auto CAN0_SR_TOVF = hr::field_mask_literal< 0x400b4010, 22, 1 >();
   // None
   constexpr auto CAN0_SR_TSTP = hr::field_mask_literal< 0x400b4010, 23, 1 >();
   // Mailbox CRC Error
   constexpr auto CAN0_SR_CERR = hr::field_mask_literal< 0x400b4010, 24, 1 >();
   // Mailbox Stuffing Error
   constexpr auto CAN0_SR_SERR = hr::field_mask_literal< 0x400b4010, 25, 1 >();
   // Acknowledgment Error
   constexpr auto CAN0_SR_AERR = hr::field_mask_literal< 0x400b4010, 26, 1 >();
   // Form Error
   constexpr auto CAN0_SR_FERR = hr::field_mask_literal< 0x400b4010, 27, 1 >();
   // Bit Error
   constexpr auto CAN0_SR_BERR = hr::field_mask_literal< 0x400b4010, 28, 1 >();
   // Receiver busy
   constexpr auto CAN0_SR_RBSY = hr::field_mask_literal< 0x400b4010, 29, 1 >();
   // Transmitter busy
   constexpr auto CAN0_SR_TBSY = hr::field_mask_literal< 0x400b4010, 30, 1 >();
   // Overload busy
   constexpr auto CAN0_SR_OVLSY = hr::field_mask_literal< 0x400b4010, 31, 1 >();

// BR
   // Phase 2 segment
   constexpr auto CAN0_BR_PHASE2_Msk = hr::field_mask_literal< 0x400b4014, 0, 3 >();
   // Phase 1 segment
   constexpr auto CAN0_BR_PHASE1_Msk = hr::field_mask_literal< 0x400b4014, 4, 3 >();
   // Programming time segment
   constexpr auto CAN0_BR_PROPAG_Msk = hr::field_mask_literal< 0x400b4014, 8, 3 >();
   // Re-synchronization jump width
   constexpr auto CAN0_BR_SJW_Msk = hr::field_mask_literal< 0x400b4014, 12, 2 >();
   // Baudrate Prescaler.
   constexpr auto CAN0_BR_BRP_Msk = hr::field_mask_literal< 0x400b4014, 16, 7 >();
   // Sampling Mode
   constexpr auto CAN0_BR_SMP = hr::field_mask_literal< 0x400b4014, 24, 1 >();
      // The incoming bit stream is sampled once at sample point.
      constexpr auto CAN0_BR_SMP_ONCE = hr::field_value_literal< 0x400b4014, 24, 1 >( 0 );
      // The incoming bit stream is sampled three times with a period of a MCK clock period, centered on sample point.
      constexpr auto CAN0_BR_SMP_THREE = hr::field_value_literal< 0x400b4014, 24, 1 >( 1 );

// TIM
   // Timer
   constexpr auto CAN0_TIM_TIMER_Msk = hr::field_mask_literal< 0x400b4018, 0, 16 >();

// TIMESTP
   // Timestamp
   constexpr auto CAN0_TIMESTP_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b401c, 0, 16 >();

// ECR
   // Receive Error Counter
   constexpr auto CAN0_ECR_REC_Msk = hr::field_mask_literal< 0x400b4020, 0, 8 >();
   // Transmit Error Counter
   constexpr auto CAN0_ECR_TEC_Msk = hr::field_mask_literal< 0x400b4020, 16, 8 >();

// TCR
   // Transfer Request for Mailbox 0
   constexpr auto CAN0_TCR_MB0 = hr::field_mask_literal< 0x400b4024, 0, 1 >();
   // Transfer Request for Mailbox 1
   constexpr auto CAN0_TCR_MB1 = hr::field_mask_literal< 0x400b4024, 1, 1 >();
   // Transfer Request for Mailbox 2
   constexpr auto CAN0_TCR_MB2 = hr::field_mask_literal< 0x400b4024, 2, 1 >();
   // Transfer Request for Mailbox 3
   constexpr auto CAN0_TCR_MB3 = hr::field_mask_literal< 0x400b4024, 3, 1 >();
   // Transfer Request for Mailbox 4
   constexpr auto CAN0_TCR_MB4 = hr::field_mask_literal< 0x400b4024, 4, 1 >();
   // Transfer Request for Mailbox 5
   constexpr auto CAN0_TCR_MB5 = hr::field_mask_literal< 0x400b4024, 5, 1 >();
   // Transfer Request for Mailbox 6
   constexpr auto CAN0_TCR_MB6 = hr::field_mask_literal< 0x400b4024, 6, 1 >();
   // Transfer Request for Mailbox 7
   constexpr auto CAN0_TCR_MB7 = hr::field_mask_literal< 0x400b4024, 7, 1 >();
   // Timer Reset
   constexpr auto CAN0_TCR_TIMRST = hr::field_mask_literal< 0x400b4024, 31, 1 >();

// ACR
   // Abort Request for Mailbox 0
   constexpr auto CAN0_ACR_MB0 = hr::field_mask_literal< 0x400b4028, 0, 1 >();
   // Abort Request for Mailbox 1
   constexpr auto CAN0_ACR_MB1 = hr::field_mask_literal< 0x400b4028, 1, 1 >();
   // Abort Request for Mailbox 2
   constexpr auto CAN0_ACR_MB2 = hr::field_mask_literal< 0x400b4028, 2, 1 >();
   // Abort Request for Mailbox 3
   constexpr auto CAN0_ACR_MB3 = hr::field_mask_literal< 0x400b4028, 3, 1 >();
   // Abort Request for Mailbox 4
   constexpr auto CAN0_ACR_MB4 = hr::field_mask_literal< 0x400b4028, 4, 1 >();
   // Abort Request for Mailbox 5
   constexpr auto CAN0_ACR_MB5 = hr::field_mask_literal< 0x400b4028, 5, 1 >();
   // Abort Request for Mailbox 6
   constexpr auto CAN0_ACR_MB6 = hr::field_mask_literal< 0x400b4028, 6, 1 >();
   // Abort Request for Mailbox 7
   constexpr auto CAN0_ACR_MB7 = hr::field_mask_literal< 0x400b4028, 7, 1 >();

// WPMR
   // Write Protection Enable
   constexpr auto CAN0_WPMR_WPEN = hr::field_mask_literal< 0x400b40e4, 0, 1 >();
   // SPI Write Protection Key Password
   constexpr auto CAN0_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400b40e4, 8, 24 >();

// WPSR
   // Write Protection Violation Status
   constexpr auto CAN0_WPSR_WPVS = hr::field_mask_literal< 0x400b40e8, 0, 1 >();
   // Write Protection Violation Source
   constexpr auto CAN0_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400b40e8, 8, 8 >();

// MMR0
   // Mailbox Timemark
   constexpr auto CAN0_MMR0_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b4200, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR0_PRIOR_Msk = hr::field_mask_literal< 0x400b4200, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR0_MOT_Msk = hr::field_mask_literal< 0x400b4200, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR0_MOT_MB_DISABLED = hr::field_value_literal< 0x400b4200, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR0_MOT_MB_RX = hr::field_value_literal< 0x400b4200, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR0_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b4200, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR0_MOT_MB_TX = hr::field_value_literal< 0x400b4200, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR0_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b4200, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR0_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b4200, 24, 3 >( 5 );

// MAM0
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM0_MIDVB_Msk = hr::field_mask_literal< 0x400b4204, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM0_MIDVA_Msk = hr::field_mask_literal< 0x400b4204, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM0_MIDE = hr::field_mask_literal< 0x400b4204, 29, 1 >();

// MID0
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID0_MIDVB_Msk = hr::field_mask_literal< 0x400b4208, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID0_MIDVA_Msk = hr::field_mask_literal< 0x400b4208, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID0_MIDE = hr::field_mask_literal< 0x400b4208, 29, 1 >();

// MFID0
   // Family ID
   constexpr auto CAN0_MFID0_MFID_Msk = hr::field_mask_literal< 0x400b420c, 0, 29 >();

// MSR0
   // Timer value
   constexpr auto CAN0_MSR0_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b4210, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR0_MDLC_Msk = hr::field_mask_literal< 0x400b4210, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR0_MRTR = hr::field_mask_literal< 0x400b4210, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR0_MABT = hr::field_mask_literal< 0x400b4210, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR0_MRDY = hr::field_mask_literal< 0x400b4210, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR0_MMI = hr::field_mask_literal< 0x400b4210, 24, 1 >();

// MDL0
   // Message Data Low Value
   constexpr auto CAN0_MDL0_MDL_Msk = hr::field_mask_literal< 0x400b4214, 0, 32 >();

// MDH0
   // Message Data High Value
   constexpr auto CAN0_MDH0_MDH_Msk = hr::field_mask_literal< 0x400b4218, 0, 32 >();

// MCR0
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR0_MDLC_Msk = hr::field_mask_literal< 0x400b421c, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR0_MRTR = hr::field_mask_literal< 0x400b421c, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR0_MACR = hr::field_mask_literal< 0x400b421c, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR0_MTCR = hr::field_mask_literal< 0x400b421c, 23, 1 >();

// MMR1
   // Mailbox Timemark
   constexpr auto CAN0_MMR1_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b4220, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR1_PRIOR_Msk = hr::field_mask_literal< 0x400b4220, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR1_MOT_Msk = hr::field_mask_literal< 0x400b4220, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR1_MOT_MB_DISABLED = hr::field_value_literal< 0x400b4220, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR1_MOT_MB_RX = hr::field_value_literal< 0x400b4220, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR1_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b4220, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR1_MOT_MB_TX = hr::field_value_literal< 0x400b4220, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR1_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b4220, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR1_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b4220, 24, 3 >( 5 );

// MAM1
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM1_MIDVB_Msk = hr::field_mask_literal< 0x400b4224, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM1_MIDVA_Msk = hr::field_mask_literal< 0x400b4224, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM1_MIDE = hr::field_mask_literal< 0x400b4224, 29, 1 >();

// MID1
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID1_MIDVB_Msk = hr::field_mask_literal< 0x400b4228, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID1_MIDVA_Msk = hr::field_mask_literal< 0x400b4228, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID1_MIDE = hr::field_mask_literal< 0x400b4228, 29, 1 >();

// MFID1
   // Family ID
   constexpr auto CAN0_MFID1_MFID_Msk = hr::field_mask_literal< 0x400b422c, 0, 29 >();

// MSR1
   // Timer value
   constexpr auto CAN0_MSR1_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b4230, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR1_MDLC_Msk = hr::field_mask_literal< 0x400b4230, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR1_MRTR = hr::field_mask_literal< 0x400b4230, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR1_MABT = hr::field_mask_literal< 0x400b4230, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR1_MRDY = hr::field_mask_literal< 0x400b4230, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR1_MMI = hr::field_mask_literal< 0x400b4230, 24, 1 >();

// MDL1
   // Message Data Low Value
   constexpr auto CAN0_MDL1_MDL_Msk = hr::field_mask_literal< 0x400b4234, 0, 32 >();

// MDH1
   // Message Data High Value
   constexpr auto CAN0_MDH1_MDH_Msk = hr::field_mask_literal< 0x400b4238, 0, 32 >();

// MCR1
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR1_MDLC_Msk = hr::field_mask_literal< 0x400b423c, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR1_MRTR = hr::field_mask_literal< 0x400b423c, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR1_MACR = hr::field_mask_literal< 0x400b423c, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR1_MTCR = hr::field_mask_literal< 0x400b423c, 23, 1 >();

// MMR2
   // Mailbox Timemark
   constexpr auto CAN0_MMR2_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b4240, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR2_PRIOR_Msk = hr::field_mask_literal< 0x400b4240, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR2_MOT_Msk = hr::field_mask_literal< 0x400b4240, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR2_MOT_MB_DISABLED = hr::field_value_literal< 0x400b4240, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR2_MOT_MB_RX = hr::field_value_literal< 0x400b4240, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR2_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b4240, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR2_MOT_MB_TX = hr::field_value_literal< 0x400b4240, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR2_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b4240, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR2_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b4240, 24, 3 >( 5 );

// MAM2
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM2_MIDVB_Msk = hr::field_mask_literal< 0x400b4244, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM2_MIDVA_Msk = hr::field_mask_literal< 0x400b4244, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM2_MIDE = hr::field_mask_literal< 0x400b4244, 29, 1 >();

// MID2
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID2_MIDVB_Msk = hr::field_mask_literal< 0x400b4248, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID2_MIDVA_Msk = hr::field_mask_literal< 0x400b4248, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID2_MIDE = hr::field_mask_literal< 0x400b4248, 29, 1 >();

// MFID2
   // Family ID
   constexpr auto CAN0_MFID2_MFID_Msk = hr::field_mask_literal< 0x400b424c, 0, 29 >();

// MSR2
   // Timer value
   constexpr auto CAN0_MSR2_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b4250, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR2_MDLC_Msk = hr::field_mask_literal< 0x400b4250, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR2_MRTR = hr::field_mask_literal< 0x400b4250, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR2_MABT = hr::field_mask_literal< 0x400b4250, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR2_MRDY = hr::field_mask_literal< 0x400b4250, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR2_MMI = hr::field_mask_literal< 0x400b4250, 24, 1 >();

// MDL2
   // Message Data Low Value
   constexpr auto CAN0_MDL2_MDL_Msk = hr::field_mask_literal< 0x400b4254, 0, 32 >();

// MDH2
   // Message Data High Value
   constexpr auto CAN0_MDH2_MDH_Msk = hr::field_mask_literal< 0x400b4258, 0, 32 >();

// MCR2
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR2_MDLC_Msk = hr::field_mask_literal< 0x400b425c, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR2_MRTR = hr::field_mask_literal< 0x400b425c, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR2_MACR = hr::field_mask_literal< 0x400b425c, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR2_MTCR = hr::field_mask_literal< 0x400b425c, 23, 1 >();

// MMR3
   // Mailbox Timemark
   constexpr auto CAN0_MMR3_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b4260, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR3_PRIOR_Msk = hr::field_mask_literal< 0x400b4260, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR3_MOT_Msk = hr::field_mask_literal< 0x400b4260, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR3_MOT_MB_DISABLED = hr::field_value_literal< 0x400b4260, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR3_MOT_MB_RX = hr::field_value_literal< 0x400b4260, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR3_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b4260, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR3_MOT_MB_TX = hr::field_value_literal< 0x400b4260, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR3_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b4260, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR3_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b4260, 24, 3 >( 5 );

// MAM3
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM3_MIDVB_Msk = hr::field_mask_literal< 0x400b4264, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM3_MIDVA_Msk = hr::field_mask_literal< 0x400b4264, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM3_MIDE = hr::field_mask_literal< 0x400b4264, 29, 1 >();

// MID3
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID3_MIDVB_Msk = hr::field_mask_literal< 0x400b4268, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID3_MIDVA_Msk = hr::field_mask_literal< 0x400b4268, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID3_MIDE = hr::field_mask_literal< 0x400b4268, 29, 1 >();

// MFID3
   // Family ID
   constexpr auto CAN0_MFID3_MFID_Msk = hr::field_mask_literal< 0x400b426c, 0, 29 >();

// MSR3
   // Timer value
   constexpr auto CAN0_MSR3_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b4270, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR3_MDLC_Msk = hr::field_mask_literal< 0x400b4270, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR3_MRTR = hr::field_mask_literal< 0x400b4270, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR3_MABT = hr::field_mask_literal< 0x400b4270, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR3_MRDY = hr::field_mask_literal< 0x400b4270, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR3_MMI = hr::field_mask_literal< 0x400b4270, 24, 1 >();

// MDL3
   // Message Data Low Value
   constexpr auto CAN0_MDL3_MDL_Msk = hr::field_mask_literal< 0x400b4274, 0, 32 >();

// MDH3
   // Message Data High Value
   constexpr auto CAN0_MDH3_MDH_Msk = hr::field_mask_literal< 0x400b4278, 0, 32 >();

// MCR3
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR3_MDLC_Msk = hr::field_mask_literal< 0x400b427c, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR3_MRTR = hr::field_mask_literal< 0x400b427c, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR3_MACR = hr::field_mask_literal< 0x400b427c, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR3_MTCR = hr::field_mask_literal< 0x400b427c, 23, 1 >();

// MMR4
   // Mailbox Timemark
   constexpr auto CAN0_MMR4_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b4280, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR4_PRIOR_Msk = hr::field_mask_literal< 0x400b4280, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR4_MOT_Msk = hr::field_mask_literal< 0x400b4280, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR4_MOT_MB_DISABLED = hr::field_value_literal< 0x400b4280, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR4_MOT_MB_RX = hr::field_value_literal< 0x400b4280, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR4_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b4280, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR4_MOT_MB_TX = hr::field_value_literal< 0x400b4280, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR4_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b4280, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR4_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b4280, 24, 3 >( 5 );

// MAM4
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM4_MIDVB_Msk = hr::field_mask_literal< 0x400b4284, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM4_MIDVA_Msk = hr::field_mask_literal< 0x400b4284, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM4_MIDE = hr::field_mask_literal< 0x400b4284, 29, 1 >();

// MID4
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID4_MIDVB_Msk = hr::field_mask_literal< 0x400b4288, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID4_MIDVA_Msk = hr::field_mask_literal< 0x400b4288, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID4_MIDE = hr::field_mask_literal< 0x400b4288, 29, 1 >();

// MFID4
   // Family ID
   constexpr auto CAN0_MFID4_MFID_Msk = hr::field_mask_literal< 0x400b428c, 0, 29 >();

// MSR4
   // Timer value
   constexpr auto CAN0_MSR4_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b4290, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR4_MDLC_Msk = hr::field_mask_literal< 0x400b4290, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR4_MRTR = hr::field_mask_literal< 0x400b4290, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR4_MABT = hr::field_mask_literal< 0x400b4290, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR4_MRDY = hr::field_mask_literal< 0x400b4290, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR4_MMI = hr::field_mask_literal< 0x400b4290, 24, 1 >();

// MDL4
   // Message Data Low Value
   constexpr auto CAN0_MDL4_MDL_Msk = hr::field_mask_literal< 0x400b4294, 0, 32 >();

// MDH4
   // Message Data High Value
   constexpr auto CAN0_MDH4_MDH_Msk = hr::field_mask_literal< 0x400b4298, 0, 32 >();

// MCR4
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR4_MDLC_Msk = hr::field_mask_literal< 0x400b429c, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR4_MRTR = hr::field_mask_literal< 0x400b429c, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR4_MACR = hr::field_mask_literal< 0x400b429c, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR4_MTCR = hr::field_mask_literal< 0x400b429c, 23, 1 >();

// MMR5
   // Mailbox Timemark
   constexpr auto CAN0_MMR5_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b42a0, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR5_PRIOR_Msk = hr::field_mask_literal< 0x400b42a0, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR5_MOT_Msk = hr::field_mask_literal< 0x400b42a0, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR5_MOT_MB_DISABLED = hr::field_value_literal< 0x400b42a0, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR5_MOT_MB_RX = hr::field_value_literal< 0x400b42a0, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR5_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b42a0, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR5_MOT_MB_TX = hr::field_value_literal< 0x400b42a0, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR5_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b42a0, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR5_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b42a0, 24, 3 >( 5 );

// MAM5
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM5_MIDVB_Msk = hr::field_mask_literal< 0x400b42a4, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM5_MIDVA_Msk = hr::field_mask_literal< 0x400b42a4, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM5_MIDE = hr::field_mask_literal< 0x400b42a4, 29, 1 >();

// MID5
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID5_MIDVB_Msk = hr::field_mask_literal< 0x400b42a8, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID5_MIDVA_Msk = hr::field_mask_literal< 0x400b42a8, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID5_MIDE = hr::field_mask_literal< 0x400b42a8, 29, 1 >();

// MFID5
   // Family ID
   constexpr auto CAN0_MFID5_MFID_Msk = hr::field_mask_literal< 0x400b42ac, 0, 29 >();

// MSR5
   // Timer value
   constexpr auto CAN0_MSR5_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b42b0, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR5_MDLC_Msk = hr::field_mask_literal< 0x400b42b0, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR5_MRTR = hr::field_mask_literal< 0x400b42b0, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR5_MABT = hr::field_mask_literal< 0x400b42b0, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR5_MRDY = hr::field_mask_literal< 0x400b42b0, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR5_MMI = hr::field_mask_literal< 0x400b42b0, 24, 1 >();

// MDL5
   // Message Data Low Value
   constexpr auto CAN0_MDL5_MDL_Msk = hr::field_mask_literal< 0x400b42b4, 0, 32 >();

// MDH5
   // Message Data High Value
   constexpr auto CAN0_MDH5_MDH_Msk = hr::field_mask_literal< 0x400b42b8, 0, 32 >();

// MCR5
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR5_MDLC_Msk = hr::field_mask_literal< 0x400b42bc, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR5_MRTR = hr::field_mask_literal< 0x400b42bc, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR5_MACR = hr::field_mask_literal< 0x400b42bc, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR5_MTCR = hr::field_mask_literal< 0x400b42bc, 23, 1 >();

// MMR6
   // Mailbox Timemark
   constexpr auto CAN0_MMR6_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b42c0, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR6_PRIOR_Msk = hr::field_mask_literal< 0x400b42c0, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR6_MOT_Msk = hr::field_mask_literal< 0x400b42c0, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR6_MOT_MB_DISABLED = hr::field_value_literal< 0x400b42c0, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR6_MOT_MB_RX = hr::field_value_literal< 0x400b42c0, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR6_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b42c0, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR6_MOT_MB_TX = hr::field_value_literal< 0x400b42c0, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR6_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b42c0, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR6_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b42c0, 24, 3 >( 5 );

// MAM6
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM6_MIDVB_Msk = hr::field_mask_literal< 0x400b42c4, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM6_MIDVA_Msk = hr::field_mask_literal< 0x400b42c4, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM6_MIDE = hr::field_mask_literal< 0x400b42c4, 29, 1 >();

// MID6
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID6_MIDVB_Msk = hr::field_mask_literal< 0x400b42c8, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID6_MIDVA_Msk = hr::field_mask_literal< 0x400b42c8, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID6_MIDE = hr::field_mask_literal< 0x400b42c8, 29, 1 >();

// MFID6
   // Family ID
   constexpr auto CAN0_MFID6_MFID_Msk = hr::field_mask_literal< 0x400b42cc, 0, 29 >();

// MSR6
   // Timer value
   constexpr auto CAN0_MSR6_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b42d0, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR6_MDLC_Msk = hr::field_mask_literal< 0x400b42d0, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR6_MRTR = hr::field_mask_literal< 0x400b42d0, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR6_MABT = hr::field_mask_literal< 0x400b42d0, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR6_MRDY = hr::field_mask_literal< 0x400b42d0, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR6_MMI = hr::field_mask_literal< 0x400b42d0, 24, 1 >();

// MDL6
   // Message Data Low Value
   constexpr auto CAN0_MDL6_MDL_Msk = hr::field_mask_literal< 0x400b42d4, 0, 32 >();

// MDH6
   // Message Data High Value
   constexpr auto CAN0_MDH6_MDH_Msk = hr::field_mask_literal< 0x400b42d8, 0, 32 >();

// MCR6
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR6_MDLC_Msk = hr::field_mask_literal< 0x400b42dc, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR6_MRTR = hr::field_mask_literal< 0x400b42dc, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR6_MACR = hr::field_mask_literal< 0x400b42dc, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR6_MTCR = hr::field_mask_literal< 0x400b42dc, 23, 1 >();

// MMR7
   // Mailbox Timemark
   constexpr auto CAN0_MMR7_MTIMEMARK_Msk = hr::field_mask_literal< 0x400b42e0, 0, 16 >();
   // Mailbox Priority
   constexpr auto CAN0_MMR7_PRIOR_Msk = hr::field_mask_literal< 0x400b42e0, 16, 4 >();
   // Mailbox Object Type
   constexpr auto CAN0_MMR7_MOT_Msk = hr::field_mask_literal< 0x400b42e0, 24, 3 >();
      // Mailbox is disabled. This prevents receiving or transmitting any messages with this mailbox.
      constexpr auto CAN0_MMR7_MOT_MB_DISABLED = hr::field_value_literal< 0x400b42e0, 24, 3 >( 0 );
      // Reception Mailbox. Mailbox is configured for reception. If a message is received while the mailbox data register is full, it is discarded.
      constexpr auto CAN0_MMR7_MOT_MB_RX = hr::field_value_literal< 0x400b42e0, 24, 3 >( 1 );
      // Reception mailbox with overwrite. Mailbox is configured for reception. If a message is received while the mailbox is full, it overwrites the previous message.
      constexpr auto CAN0_MMR7_MOT_MB_RX_OVERWRITE = hr::field_value_literal< 0x400b42e0, 24, 3 >( 2 );
      // Transmit mailbox. Mailbox is configured for transmission.
      constexpr auto CAN0_MMR7_MOT_MB_TX = hr::field_value_literal< 0x400b42e0, 24, 3 >( 3 );
      // Consumer Mailbox. Mailbox is configured in reception but behaves as a Transmit Mailbox, i.e., it sends a remote frame and waits for an answer.
      constexpr auto CAN0_MMR7_MOT_MB_CONSUMER = hr::field_value_literal< 0x400b42e0, 24, 3 >( 4 );
      // Producer Mailbox. Mailbox is configured in transmission but also behaves like a reception mailbox, i.e., it waits to receive a Remote Frame before sending its contents.
      constexpr auto CAN0_MMR7_MOT_MB_PRODUCER = hr::field_value_literal< 0x400b42e0, 24, 3 >( 5 );

// MAM7
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MAM7_MIDVB_Msk = hr::field_mask_literal< 0x400b42e4, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MAM7_MIDVA_Msk = hr::field_mask_literal< 0x400b42e4, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MAM7_MIDE = hr::field_mask_literal< 0x400b42e4, 29, 1 >();

// MID7
   // Complementary bits for identifier in extended frame mode
   constexpr auto CAN0_MID7_MIDVB_Msk = hr::field_mask_literal< 0x400b42e8, 0, 18 >();
   // Identifier for standard frame mode
   constexpr auto CAN0_MID7_MIDVA_Msk = hr::field_mask_literal< 0x400b42e8, 18, 11 >();
   // Identifier Version
   constexpr auto CAN0_MID7_MIDE = hr::field_mask_literal< 0x400b42e8, 29, 1 >();

// MFID7
   // Family ID
   constexpr auto CAN0_MFID7_MFID_Msk = hr::field_mask_literal< 0x400b42ec, 0, 29 >();

// MSR7
   // Timer value
   constexpr auto CAN0_MSR7_MTIMESTAMP_Msk = hr::field_mask_literal< 0x400b42f0, 0, 16 >();
   // Mailbox Data Length Code
   constexpr auto CAN0_MSR7_MDLC_Msk = hr::field_mask_literal< 0x400b42f0, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MSR7_MRTR = hr::field_mask_literal< 0x400b42f0, 20, 1 >();
   // Mailbox Message Abort
   constexpr auto CAN0_MSR7_MABT = hr::field_mask_literal< 0x400b42f0, 22, 1 >();
   // Mailbox Ready
   constexpr auto CAN0_MSR7_MRDY = hr::field_mask_literal< 0x400b42f0, 23, 1 >();
   // Mailbox Message Ignored
   constexpr auto CAN0_MSR7_MMI = hr::field_mask_literal< 0x400b42f0, 24, 1 >();

// MDL7
   // Message Data Low Value
   constexpr auto CAN0_MDL7_MDL_Msk = hr::field_mask_literal< 0x400b42f4, 0, 32 >();

// MDH7
   // Message Data High Value
   constexpr auto CAN0_MDH7_MDH_Msk = hr::field_mask_literal< 0x400b42f8, 0, 32 >();

// MCR7
   // Mailbox Data Length Code
   constexpr auto CAN0_MCR7_MDLC_Msk = hr::field_mask_literal< 0x400b42fc, 16, 4 >();
   // Mailbox Remote Transmission Request
   constexpr auto CAN0_MCR7_MRTR = hr::field_mask_literal< 0x400b42fc, 20, 1 >();
   // Abort Request for Mailbox x
   constexpr auto CAN0_MCR7_MACR = hr::field_mask_literal< 0x400b42fc, 22, 1 >();
   // Mailbox Transfer Command
   constexpr auto CAN0_MCR7_MTCR = hr::field_mask_literal< 0x400b42fc, 23, 1 >();

// =============================================================================
//
// CAN1
// base address = 0x400b8000
// Controller Area Network 1
//
// =============================================================================

struct Can1 {
   hr::hardware_register<0x400b8000> MR;
   hr::hardware_register<0x400b8004> IER;
   hr::hardware_register<0x400b8008> IDR;
   hr::hardware_register<0x400b800c> IMR;
   hr::hardware_register<0x400b8010> SR;
   hr::hardware_register<0x400b8014> BR;
   hr::hardware_register<0x400b8018> TIM;
   hr::hardware_register<0x400b801c> TIMESTP;
   hr::hardware_register<0x400b8020> ECR;
   hr::hardware_register<0x400b8024> TCR;
   hr::hardware_register<0x400b8028> ACR;
   hr::reserved< 0x2C, 46 > _reserved_at_0x2C;
   hr::hardware_register<0x400b80e4> WPMR;
   hr::hardware_register<0x400b80e8> WPSR;
   hr::reserved< 0xEC, 69 > _reserved_at_0xEC;
   hr::hardware_register<0x400b8200> MMR0;
   hr::hardware_register<0x400b8204> MAM0;
   hr::hardware_register<0x400b8208> MID0;
   hr::hardware_register<0x400b820c> MFID0;
   hr::hardware_register<0x400b8210> MSR0;
   hr::hardware_register<0x400b8214> MDL0;
   hr::hardware_register<0x400b8218> MDH0;
   hr::hardware_register<0x400b821c> MCR0;
   hr::hardware_register<0x400b8220> MMR1;
   hr::hardware_register<0x400b8224> MAM1;
   hr::hardware_register<0x400b8228> MID1;
   hr::hardware_register<0x400b822c> MFID1;
   hr::hardware_register<0x400b8230> MSR1;
   hr::hardware_register<0x400b8234> MDL1;
   hr::hardware_register<0x400b8238> MDH1;
   hr::hardware_register<0x400b823c> MCR1;
   hr::hardware_register<0x400b8240> MMR2;
   hr::hardware_register<0x400b8244> MAM2;
   hr::hardware_register<0x400b8248> MID2;
   hr::hardware_register<0x400b824c> MFID2;
   hr::hardware_register<0x400b8250> MSR2;
   hr::hardware_register<0x400b8254> MDL2;
   hr::hardware_register<0x400b8258> MDH2;
   hr::hardware_register<0x400b825c> MCR2;
   hr::hardware_register<0x400b8260> MMR3;
   hr::hardware_register<0x400b8264> MAM3;
   hr::hardware_register<0x400b8268> MID3;
   hr::hardware_register<0x400b826c> MFID3;
   hr::hardware_register<0x400b8270> MSR3;
   hr::hardware_register<0x400b8274> MDL3;
   hr::hardware_register<0x400b8278> MDH3;
   hr::hardware_register<0x400b827c> MCR3;
   hr::hardware_register<0x400b8280> MMR4;
   hr::hardware_register<0x400b8284> MAM4;
   hr::hardware_register<0x400b8288> MID4;
   hr::hardware_register<0x400b828c> MFID4;
   hr::hardware_register<0x400b8290> MSR4;
   hr::hardware_register<0x400b8294> MDL4;
   hr::hardware_register<0x400b8298> MDH4;
   hr::hardware_register<0x400b829c> MCR4;
   hr::hardware_register<0x400b82a0> MMR5;
   hr::hardware_register<0x400b82a4> MAM5;
   hr::hardware_register<0x400b82a8> MID5;
   hr::hardware_register<0x400b82ac> MFID5;
   hr::hardware_register<0x400b82b0> MSR5;
   hr::hardware_register<0x400b82b4> MDL5;
   hr::hardware_register<0x400b82b8> MDH5;
   hr::hardware_register<0x400b82bc> MCR5;
   hr::hardware_register<0x400b82c0> MMR6;
   hr::hardware_register<0x400b82c4> MAM6;
   hr::hardware_register<0x400b82c8> MID6;
   hr::hardware_register<0x400b82cc> MFID6;
   hr::hardware_register<0x400b82d0> MSR6;
   hr::hardware_register<0x400b82d4> MDL6;
   hr::hardware_register<0x400b82d8> MDH6;
   hr::hardware_register<0x400b82dc> MCR6;
   hr::hardware_register<0x400b82e0> MMR7;
   hr::hardware_register<0x400b82e4> MAM7;
   hr::hardware_register<0x400b82e8> MID7;
   hr::hardware_register<0x400b82ec> MFID7;
   hr::hardware_register<0x400b82f0> MSR7;
   hr::hardware_register<0x400b82f4> MDL7;
   hr::hardware_register<0x400b82f8> MDH7;
   hr::hardware_register<0x400b82fc> MCR7;
};

#define CAN1 ( ( Can1 * ) 0x400b8000 )

// =============================================================================
//
// TRNG
// base address = 0x400bc000
// True Random Number Generator
//
// =============================================================================

struct Trng {
   hr::hardware_register<0x400bc000> CR;
   hr::reserved< 0x4, 3 > _reserved_at_0x4;
   hr::hardware_register<0x400bc010> IER;
   hr::hardware_register<0x400bc014> IDR;
   hr::hardware_register<0x400bc018> IMR;
   hr::hardware_register<0x400bc01c> ISR;
   hr::reserved< 0x20, 12 > _reserved_at_0x20;
   hr::hardware_register<0x400bc050> ODATA;
};

#define TRNG ( ( Trng * ) 0x400bc000 )

// CR
   // Enables the TRNG to provide random values
   constexpr auto TRNG_CR_ENABLE = hr::field_mask_literal< 0x400bc000, 0, 1 >();
   // Security Key
   constexpr auto TRNG_CR_KEY_Msk = hr::field_mask_literal< 0x400bc000, 8, 24 >();

// IER
   // Data Ready Interrupt Enable
   constexpr auto TRNG_IER_DATRDY = hr::field_mask_literal< 0x400bc010, 0, 1 >();

// IDR
   // Data Ready Interrupt Disable
   constexpr auto TRNG_IDR_DATRDY = hr::field_mask_literal< 0x400bc014, 0, 1 >();

// IMR
   // Data Ready Interrupt Mask
   constexpr auto TRNG_IMR_DATRDY = hr::field_mask_literal< 0x400bc018, 0, 1 >();

// ISR
   // Data Ready
   constexpr auto TRNG_ISR_DATRDY = hr::field_mask_literal< 0x400bc01c, 0, 1 >();

// ODATA
   // Output Data
   constexpr auto TRNG_ODATA_ODATA_Msk = hr::field_mask_literal< 0x400bc050, 0, 32 >();

// =============================================================================
//
// ADC
// base address = 0x400c0000
// Analog-to-Digital Converter
//
// =============================================================================

struct Adc {
   hr::hardware_register<0x400c0000> CR;
   hr::hardware_register<0x400c0004> MR;
   hr::hardware_register<0x400c0008> SEQR1;
   hr::hardware_register<0x400c000c> SEQR2;
   hr::hardware_register<0x400c0010> CHER;
   hr::hardware_register<0x400c0014> CHDR;
   hr::hardware_register<0x400c0018> CHSR;
   hr::reserved< 0x1C, 1 > _reserved_at_0x1C;
   hr::hardware_register<0x400c0020> LCDR;
   hr::hardware_register<0x400c0024> IER;
   hr::hardware_register<0x400c0028> IDR;
   hr::hardware_register<0x400c002c> IMR;
   hr::hardware_register<0x400c0030> ISR;
   hr::reserved< 0x34, 2 > _reserved_at_0x34;
   hr::hardware_register<0x400c003c> OVER;
   hr::hardware_register<0x400c0040> EMR;
   hr::hardware_register<0x400c0044> CWR;
   hr::hardware_register<0x400c0048> CGR;
   hr::hardware_register<0x400c004c> COR;
   hr::hardware_register<0x400c0050> CDR[16];
   hr::reserved< 0x90, 1 > _reserved_at_0x90;
   hr::hardware_register<0x400c0094> ACR;
   hr::reserved< 0x98, 19 > _reserved_at_0x98;
   hr::hardware_register<0x400c00e4> WPMR;
   hr::hardware_register<0x400c00e8> WPSR;
   hr::reserved< 0xEC, 5 > _reserved_at_0xEC;
   hr::hardware_register<0x400c0100> RPR;
   hr::hardware_register<0x400c0104> RCR;
   hr::reserved< 0x108, 2 > _reserved_at_0x108;
   hr::hardware_register<0x400c0110> RNPR;
   hr::hardware_register<0x400c0114> RNCR;
   hr::reserved< 0x118, 2 > _reserved_at_0x118;
   hr::hardware_register<0x400c0120> PTCR;
   hr::hardware_register<0x400c0124> PTSR;
};

#define ADC ( ( Adc * ) 0x400c0000 )

// CR
   // Software Reset
   constexpr auto ADC_CR_SWRST = hr::field_mask_literal< 0x400c0000, 0, 1 >();
   // Start Conversion
   constexpr auto ADC_CR_START = hr::field_mask_literal< 0x400c0000, 1, 1 >();

// MR
   // Trigger Enable
   constexpr auto ADC_MR_TRGEN = hr::field_mask_literal< 0x400c0004, 0, 1 >();
      // Hardware triggers are disabled. Starting a conversion is only possible by software.
      constexpr auto ADC_MR_TRGEN_DIS = hr::field_value_literal< 0x400c0004, 0, 1 >( 0 );
      // Hardware trigger selected by TRGSEL field is enabled.
      constexpr auto ADC_MR_TRGEN_EN = hr::field_value_literal< 0x400c0004, 0, 1 >( 1 );
   // Trigger Selection
   constexpr auto ADC_MR_TRGSEL_Msk = hr::field_mask_literal< 0x400c0004, 1, 3 >();
      // External : ADCTRG
      constexpr auto ADC_MR_TRGSEL_ADC_TRIG0 = hr::field_value_literal< 0x400c0004, 1, 3 >( 0 );
      // TIOA Output of the Timer Counter Channel 0
      constexpr auto ADC_MR_TRGSEL_ADC_TRIG1 = hr::field_value_literal< 0x400c0004, 1, 3 >( 1 );
      // TIOA Output of the Timer Counter Channel 1
      constexpr auto ADC_MR_TRGSEL_ADC_TRIG2 = hr::field_value_literal< 0x400c0004, 1, 3 >( 2 );
      // TIOA Output of the Timer Counter Channel 2
      constexpr auto ADC_MR_TRGSEL_ADC_TRIG3 = hr::field_value_literal< 0x400c0004, 1, 3 >( 3 );
      // PWM Event Line 0
      constexpr auto ADC_MR_TRGSEL_ADC_TRIG4 = hr::field_value_literal< 0x400c0004, 1, 3 >( 4 );
      // PWM Event Line 0
      constexpr auto ADC_MR_TRGSEL_ADC_TRIG5 = hr::field_value_literal< 0x400c0004, 1, 3 >( 5 );
   // Resolution
   constexpr auto ADC_MR_LOWRES = hr::field_mask_literal< 0x400c0004, 4, 1 >();
      // 12-bit resolution
      constexpr auto ADC_MR_LOWRES_BITS_12 = hr::field_value_literal< 0x400c0004, 4, 1 >( 0 );
      // 10-bit resolution
      constexpr auto ADC_MR_LOWRES_BITS_10 = hr::field_value_literal< 0x400c0004, 4, 1 >( 1 );
   // Sleep Mode
   constexpr auto ADC_MR_SLEEP = hr::field_mask_literal< 0x400c0004, 5, 1 >();
      // Normal Mode: The ADC Core and reference voltage circuitry are kept ON between conversions
      constexpr auto ADC_MR_SLEEP_NORMAL = hr::field_value_literal< 0x400c0004, 5, 1 >( 0 );
      // Sleep Mode: The ADC Core and reference voltage circuitry are OFF between conversions
      constexpr auto ADC_MR_SLEEP_SLEEP = hr::field_value_literal< 0x400c0004, 5, 1 >( 1 );
   // Fast Wake Up
   constexpr auto ADC_MR_FWUP = hr::field_mask_literal< 0x400c0004, 6, 1 >();
      // Normal Sleep Mode: The sleep mode is defined by the SLEEP bit
      constexpr auto ADC_MR_FWUP_OFF = hr::field_value_literal< 0x400c0004, 6, 1 >( 0 );
      // Fast Wake Up Sleep Mode: The Voltage reference is ON between conversions and ADC Core is OFF
      constexpr auto ADC_MR_FWUP_ON = hr::field_value_literal< 0x400c0004, 6, 1 >( 1 );
   // Free Run Mode
   constexpr auto ADC_MR_FREERUN = hr::field_mask_literal< 0x400c0004, 7, 1 >();
      // Normal Mode
      constexpr auto ADC_MR_FREERUN_OFF = hr::field_value_literal< 0x400c0004, 7, 1 >( 0 );
      // Free Run Mode: Never wait for any trigger.
      constexpr auto ADC_MR_FREERUN_ON = hr::field_value_literal< 0x400c0004, 7, 1 >( 1 );
   // Prescaler Rate Selection
   constexpr auto ADC_MR_PRESCAL_Msk = hr::field_mask_literal< 0x400c0004, 8, 8 >();
   // Start Up Time
   constexpr auto ADC_MR_STARTUP_Msk = hr::field_mask_literal< 0x400c0004, 16, 4 >();
      // 0 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT0 = hr::field_value_literal< 0x400c0004, 16, 4 >( 0 );
      // 8 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT8 = hr::field_value_literal< 0x400c0004, 16, 4 >( 1 );
      // 16 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT16 = hr::field_value_literal< 0x400c0004, 16, 4 >( 2 );
      // 24 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT24 = hr::field_value_literal< 0x400c0004, 16, 4 >( 3 );
      // 64 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT64 = hr::field_value_literal< 0x400c0004, 16, 4 >( 4 );
      // 80 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT80 = hr::field_value_literal< 0x400c0004, 16, 4 >( 5 );
      // 96 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT96 = hr::field_value_literal< 0x400c0004, 16, 4 >( 6 );
      // 112 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT112 = hr::field_value_literal< 0x400c0004, 16, 4 >( 7 );
      // 512 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT512 = hr::field_value_literal< 0x400c0004, 16, 4 >( 8 );
      // 576 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT576 = hr::field_value_literal< 0x400c0004, 16, 4 >( 9 );
      // 640 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT640 = hr::field_value_literal< 0x400c0004, 16, 4 >( 10 );
      // 704 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT704 = hr::field_value_literal< 0x400c0004, 16, 4 >( 11 );
      // 768 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT768 = hr::field_value_literal< 0x400c0004, 16, 4 >( 12 );
      // 832 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT832 = hr::field_value_literal< 0x400c0004, 16, 4 >( 13 );
      // 896 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT896 = hr::field_value_literal< 0x400c0004, 16, 4 >( 14 );
      // 960 periods of ADCClock
      constexpr auto ADC_MR_STARTUP_SUT960 = hr::field_value_literal< 0x400c0004, 16, 4 >( 15 );
   // Analog Settling Time
   constexpr auto ADC_MR_SETTLING_Msk = hr::field_mask_literal< 0x400c0004, 20, 2 >();
      // 3 periods of ADCClock
      constexpr auto ADC_MR_SETTLING_AST3 = hr::field_value_literal< 0x400c0004, 20, 2 >( 0 );
      // 5 periods of ADCClock
      constexpr auto ADC_MR_SETTLING_AST5 = hr::field_value_literal< 0x400c0004, 20, 2 >( 1 );
      // 9 periods of ADCClock
      constexpr auto ADC_MR_SETTLING_AST9 = hr::field_value_literal< 0x400c0004, 20, 2 >( 2 );
      // 17 periods of ADCClock
      constexpr auto ADC_MR_SETTLING_AST17 = hr::field_value_literal< 0x400c0004, 20, 2 >( 3 );
   // Analog Change
   constexpr auto ADC_MR_ANACH = hr::field_mask_literal< 0x400c0004, 23, 1 >();
      // No analog change on channel switching: DIFF0, GAIN0 and OFF0 are used for all channels
      constexpr auto ADC_MR_ANACH_NONE = hr::field_value_literal< 0x400c0004, 23, 1 >( 0 );
      // Allows different analog settings for each channel. See ADC_CGR and ADC_COR Registers
      constexpr auto ADC_MR_ANACH_ALLOWED = hr::field_value_literal< 0x400c0004, 23, 1 >( 1 );
   // Tracking Time
   constexpr auto ADC_MR_TRACKTIM_Msk = hr::field_mask_literal< 0x400c0004, 24, 4 >();
   // Transfer Period
   constexpr auto ADC_MR_TRANSFER_Msk = hr::field_mask_literal< 0x400c0004, 28, 2 >();
   // Use Sequence Enable
   constexpr auto ADC_MR_USEQ = hr::field_mask_literal< 0x400c0004, 31, 1 >();
      // Normal Mode: The controller converts channels in a simple numeric order.
      constexpr auto ADC_MR_USEQ_NUM_ORDER = hr::field_value_literal< 0x400c0004, 31, 1 >( 0 );
      // User Sequence Mode: The sequence respects what is defined in ADC_SEQR1 and ADC_SEQR2 registers.
      constexpr auto ADC_MR_USEQ_REG_ORDER = hr::field_value_literal< 0x400c0004, 31, 1 >( 1 );

// SEQR1
   // User Sequence Number 1
   constexpr auto ADC_SEQR1_USCH1_Msk = hr::field_mask_literal< 0x400c0008, 0, 4 >();
   // User Sequence Number 2
   constexpr auto ADC_SEQR1_USCH2_Msk = hr::field_mask_literal< 0x400c0008, 4, 4 >();
   // User Sequence Number 3
   constexpr auto ADC_SEQR1_USCH3_Msk = hr::field_mask_literal< 0x400c0008, 8, 4 >();
   // User Sequence Number 4
   constexpr auto ADC_SEQR1_USCH4_Msk = hr::field_mask_literal< 0x400c0008, 12, 4 >();
   // User Sequence Number 5
   constexpr auto ADC_SEQR1_USCH5_Msk = hr::field_mask_literal< 0x400c0008, 16, 4 >();
   // User Sequence Number 6
   constexpr auto ADC_SEQR1_USCH6_Msk = hr::field_mask_literal< 0x400c0008, 20, 4 >();
   // User Sequence Number 7
   constexpr auto ADC_SEQR1_USCH7_Msk = hr::field_mask_literal< 0x400c0008, 24, 4 >();
   // User Sequence Number 8
   constexpr auto ADC_SEQR1_USCH8_Msk = hr::field_mask_literal< 0x400c0008, 28, 4 >();

// SEQR2
   // User Sequence Number 9
   constexpr auto ADC_SEQR2_USCH9_Msk = hr::field_mask_literal< 0x400c000c, 0, 4 >();
   // User Sequence Number 10
   constexpr auto ADC_SEQR2_USCH10_Msk = hr::field_mask_literal< 0x400c000c, 4, 4 >();
   // User Sequence Number 11
   constexpr auto ADC_SEQR2_USCH11_Msk = hr::field_mask_literal< 0x400c000c, 8, 4 >();
   // User Sequence Number 12
   constexpr auto ADC_SEQR2_USCH12_Msk = hr::field_mask_literal< 0x400c000c, 12, 4 >();
   // User Sequence Number 13
   constexpr auto ADC_SEQR2_USCH13_Msk = hr::field_mask_literal< 0x400c000c, 16, 4 >();
   // User Sequence Number 14
   constexpr auto ADC_SEQR2_USCH14_Msk = hr::field_mask_literal< 0x400c000c, 20, 4 >();
   // User Sequence Number 15
   constexpr auto ADC_SEQR2_USCH15_Msk = hr::field_mask_literal< 0x400c000c, 24, 4 >();
   // User Sequence Number 16
   constexpr auto ADC_SEQR2_USCH16_Msk = hr::field_mask_literal< 0x400c000c, 28, 4 >();

// CHER
   // Channel 0 Enable
   constexpr auto ADC_CHER_CH0 = hr::field_mask_literal< 0x400c0010, 0, 1 >();
   // Channel 1 Enable
   constexpr auto ADC_CHER_CH1 = hr::field_mask_literal< 0x400c0010, 1, 1 >();
   // Channel 2 Enable
   constexpr auto ADC_CHER_CH2 = hr::field_mask_literal< 0x400c0010, 2, 1 >();
   // Channel 3 Enable
   constexpr auto ADC_CHER_CH3 = hr::field_mask_literal< 0x400c0010, 3, 1 >();
   // Channel 4 Enable
   constexpr auto ADC_CHER_CH4 = hr::field_mask_literal< 0x400c0010, 4, 1 >();
   // Channel 5 Enable
   constexpr auto ADC_CHER_CH5 = hr::field_mask_literal< 0x400c0010, 5, 1 >();
   // Channel 6 Enable
   constexpr auto ADC_CHER_CH6 = hr::field_mask_literal< 0x400c0010, 6, 1 >();
   // Channel 7 Enable
   constexpr auto ADC_CHER_CH7 = hr::field_mask_literal< 0x400c0010, 7, 1 >();
   // Channel 8 Enable
   constexpr auto ADC_CHER_CH8 = hr::field_mask_literal< 0x400c0010, 8, 1 >();
   // Channel 9 Enable
   constexpr auto ADC_CHER_CH9 = hr::field_mask_literal< 0x400c0010, 9, 1 >();
   // Channel 10 Enable
   constexpr auto ADC_CHER_CH10 = hr::field_mask_literal< 0x400c0010, 10, 1 >();
   // Channel 11 Enable
   constexpr auto ADC_CHER_CH11 = hr::field_mask_literal< 0x400c0010, 11, 1 >();
   // Channel 12 Enable
   constexpr auto ADC_CHER_CH12 = hr::field_mask_literal< 0x400c0010, 12, 1 >();
   // Channel 13 Enable
   constexpr auto ADC_CHER_CH13 = hr::field_mask_literal< 0x400c0010, 13, 1 >();
   // Channel 14 Enable
   constexpr auto ADC_CHER_CH14 = hr::field_mask_literal< 0x400c0010, 14, 1 >();
   // Channel 15 Enable
   constexpr auto ADC_CHER_CH15 = hr::field_mask_literal< 0x400c0010, 15, 1 >();

// CHDR
   // Channel 0 Disable
   constexpr auto ADC_CHDR_CH0 = hr::field_mask_literal< 0x400c0014, 0, 1 >();
   // Channel 1 Disable
   constexpr auto ADC_CHDR_CH1 = hr::field_mask_literal< 0x400c0014, 1, 1 >();
   // Channel 2 Disable
   constexpr auto ADC_CHDR_CH2 = hr::field_mask_literal< 0x400c0014, 2, 1 >();
   // Channel 3 Disable
   constexpr auto ADC_CHDR_CH3 = hr::field_mask_literal< 0x400c0014, 3, 1 >();
   // Channel 4 Disable
   constexpr auto ADC_CHDR_CH4 = hr::field_mask_literal< 0x400c0014, 4, 1 >();
   // Channel 5 Disable
   constexpr auto ADC_CHDR_CH5 = hr::field_mask_literal< 0x400c0014, 5, 1 >();
   // Channel 6 Disable
   constexpr auto ADC_CHDR_CH6 = hr::field_mask_literal< 0x400c0014, 6, 1 >();
   // Channel 7 Disable
   constexpr auto ADC_CHDR_CH7 = hr::field_mask_literal< 0x400c0014, 7, 1 >();
   // Channel 8 Disable
   constexpr auto ADC_CHDR_CH8 = hr::field_mask_literal< 0x400c0014, 8, 1 >();
   // Channel 9 Disable
   constexpr auto ADC_CHDR_CH9 = hr::field_mask_literal< 0x400c0014, 9, 1 >();
   // Channel 10 Disable
   constexpr auto ADC_CHDR_CH10 = hr::field_mask_literal< 0x400c0014, 10, 1 >();
   // Channel 11 Disable
   constexpr auto ADC_CHDR_CH11 = hr::field_mask_literal< 0x400c0014, 11, 1 >();
   // Channel 12 Disable
   constexpr auto ADC_CHDR_CH12 = hr::field_mask_literal< 0x400c0014, 12, 1 >();
   // Channel 13 Disable
   constexpr auto ADC_CHDR_CH13 = hr::field_mask_literal< 0x400c0014, 13, 1 >();
   // Channel 14 Disable
   constexpr auto ADC_CHDR_CH14 = hr::field_mask_literal< 0x400c0014, 14, 1 >();
   // Channel 15 Disable
   constexpr auto ADC_CHDR_CH15 = hr::field_mask_literal< 0x400c0014, 15, 1 >();

// CHSR
   // Channel 0 Status
   constexpr auto ADC_CHSR_CH0 = hr::field_mask_literal< 0x400c0018, 0, 1 >();
   // Channel 1 Status
   constexpr auto ADC_CHSR_CH1 = hr::field_mask_literal< 0x400c0018, 1, 1 >();
   // Channel 2 Status
   constexpr auto ADC_CHSR_CH2 = hr::field_mask_literal< 0x400c0018, 2, 1 >();
   // Channel 3 Status
   constexpr auto ADC_CHSR_CH3 = hr::field_mask_literal< 0x400c0018, 3, 1 >();
   // Channel 4 Status
   constexpr auto ADC_CHSR_CH4 = hr::field_mask_literal< 0x400c0018, 4, 1 >();
   // Channel 5 Status
   constexpr auto ADC_CHSR_CH5 = hr::field_mask_literal< 0x400c0018, 5, 1 >();
   // Channel 6 Status
   constexpr auto ADC_CHSR_CH6 = hr::field_mask_literal< 0x400c0018, 6, 1 >();
   // Channel 7 Status
   constexpr auto ADC_CHSR_CH7 = hr::field_mask_literal< 0x400c0018, 7, 1 >();
   // Channel 8 Status
   constexpr auto ADC_CHSR_CH8 = hr::field_mask_literal< 0x400c0018, 8, 1 >();
   // Channel 9 Status
   constexpr auto ADC_CHSR_CH9 = hr::field_mask_literal< 0x400c0018, 9, 1 >();
   // Channel 10 Status
   constexpr auto ADC_CHSR_CH10 = hr::field_mask_literal< 0x400c0018, 10, 1 >();
   // Channel 11 Status
   constexpr auto ADC_CHSR_CH11 = hr::field_mask_literal< 0x400c0018, 11, 1 >();
   // Channel 12 Status
   constexpr auto ADC_CHSR_CH12 = hr::field_mask_literal< 0x400c0018, 12, 1 >();
   // Channel 13 Status
   constexpr auto ADC_CHSR_CH13 = hr::field_mask_literal< 0x400c0018, 13, 1 >();
   // Channel 14 Status
   constexpr auto ADC_CHSR_CH14 = hr::field_mask_literal< 0x400c0018, 14, 1 >();
   // Channel 15 Status
   constexpr auto ADC_CHSR_CH15 = hr::field_mask_literal< 0x400c0018, 15, 1 >();

// LCDR
   // Last Data Converted
   constexpr auto ADC_LCDR_LDATA_Msk = hr::field_mask_literal< 0x400c0020, 0, 12 >();
   // Channel Number
   constexpr auto ADC_LCDR_CHNB_Msk = hr::field_mask_literal< 0x400c0020, 12, 4 >();

// IER
   // End of Conversion Interrupt Enable 0
   constexpr auto ADC_IER_EOC0 = hr::field_mask_literal< 0x400c0024, 0, 1 >();
   // End of Conversion Interrupt Enable 1
   constexpr auto ADC_IER_EOC1 = hr::field_mask_literal< 0x400c0024, 1, 1 >();
   // End of Conversion Interrupt Enable 2
   constexpr auto ADC_IER_EOC2 = hr::field_mask_literal< 0x400c0024, 2, 1 >();
   // End of Conversion Interrupt Enable 3
   constexpr auto ADC_IER_EOC3 = hr::field_mask_literal< 0x400c0024, 3, 1 >();
   // End of Conversion Interrupt Enable 4
   constexpr auto ADC_IER_EOC4 = hr::field_mask_literal< 0x400c0024, 4, 1 >();
   // End of Conversion Interrupt Enable 5
   constexpr auto ADC_IER_EOC5 = hr::field_mask_literal< 0x400c0024, 5, 1 >();
   // End of Conversion Interrupt Enable 6
   constexpr auto ADC_IER_EOC6 = hr::field_mask_literal< 0x400c0024, 6, 1 >();
   // End of Conversion Interrupt Enable 7
   constexpr auto ADC_IER_EOC7 = hr::field_mask_literal< 0x400c0024, 7, 1 >();
   // End of Conversion Interrupt Enable 8
   constexpr auto ADC_IER_EOC8 = hr::field_mask_literal< 0x400c0024, 8, 1 >();
   // End of Conversion Interrupt Enable 9
   constexpr auto ADC_IER_EOC9 = hr::field_mask_literal< 0x400c0024, 9, 1 >();
   // End of Conversion Interrupt Enable 10
   constexpr auto ADC_IER_EOC10 = hr::field_mask_literal< 0x400c0024, 10, 1 >();
   // End of Conversion Interrupt Enable 11
   constexpr auto ADC_IER_EOC11 = hr::field_mask_literal< 0x400c0024, 11, 1 >();
   // End of Conversion Interrupt Enable 12
   constexpr auto ADC_IER_EOC12 = hr::field_mask_literal< 0x400c0024, 12, 1 >();
   // End of Conversion Interrupt Enable 13
   constexpr auto ADC_IER_EOC13 = hr::field_mask_literal< 0x400c0024, 13, 1 >();
   // End of Conversion Interrupt Enable 14
   constexpr auto ADC_IER_EOC14 = hr::field_mask_literal< 0x400c0024, 14, 1 >();
   // End of Conversion Interrupt Enable 15
   constexpr auto ADC_IER_EOC15 = hr::field_mask_literal< 0x400c0024, 15, 1 >();
   // Data Ready Interrupt Enable
   constexpr auto ADC_IER_DRDY = hr::field_mask_literal< 0x400c0024, 24, 1 >();
   // General Overrun Error Interrupt Enable
   constexpr auto ADC_IER_GOVRE = hr::field_mask_literal< 0x400c0024, 25, 1 >();
   // Comparison Event Interrupt Enable
   constexpr auto ADC_IER_COMPE = hr::field_mask_literal< 0x400c0024, 26, 1 >();
   // End of Receive Buffer Interrupt Enable
   constexpr auto ADC_IER_ENDRX = hr::field_mask_literal< 0x400c0024, 27, 1 >();
   // Receive Buffer Full Interrupt Enable
   constexpr auto ADC_IER_RXBUFF = hr::field_mask_literal< 0x400c0024, 28, 1 >();

// IDR
   // End of Conversion Interrupt Disable 0
   constexpr auto ADC_IDR_EOC0 = hr::field_mask_literal< 0x400c0028, 0, 1 >();
   // End of Conversion Interrupt Disable 1
   constexpr auto ADC_IDR_EOC1 = hr::field_mask_literal< 0x400c0028, 1, 1 >();
   // End of Conversion Interrupt Disable 2
   constexpr auto ADC_IDR_EOC2 = hr::field_mask_literal< 0x400c0028, 2, 1 >();
   // End of Conversion Interrupt Disable 3
   constexpr auto ADC_IDR_EOC3 = hr::field_mask_literal< 0x400c0028, 3, 1 >();
   // End of Conversion Interrupt Disable 4
   constexpr auto ADC_IDR_EOC4 = hr::field_mask_literal< 0x400c0028, 4, 1 >();
   // End of Conversion Interrupt Disable 5
   constexpr auto ADC_IDR_EOC5 = hr::field_mask_literal< 0x400c0028, 5, 1 >();
   // End of Conversion Interrupt Disable 6
   constexpr auto ADC_IDR_EOC6 = hr::field_mask_literal< 0x400c0028, 6, 1 >();
   // End of Conversion Interrupt Disable 7
   constexpr auto ADC_IDR_EOC7 = hr::field_mask_literal< 0x400c0028, 7, 1 >();
   // End of Conversion Interrupt Disable 8
   constexpr auto ADC_IDR_EOC8 = hr::field_mask_literal< 0x400c0028, 8, 1 >();
   // End of Conversion Interrupt Disable 9
   constexpr auto ADC_IDR_EOC9 = hr::field_mask_literal< 0x400c0028, 9, 1 >();
   // End of Conversion Interrupt Disable 10
   constexpr auto ADC_IDR_EOC10 = hr::field_mask_literal< 0x400c0028, 10, 1 >();
   // End of Conversion Interrupt Disable 11
   constexpr auto ADC_IDR_EOC11 = hr::field_mask_literal< 0x400c0028, 11, 1 >();
   // End of Conversion Interrupt Disable 12
   constexpr auto ADC_IDR_EOC12 = hr::field_mask_literal< 0x400c0028, 12, 1 >();
   // End of Conversion Interrupt Disable 13
   constexpr auto ADC_IDR_EOC13 = hr::field_mask_literal< 0x400c0028, 13, 1 >();
   // End of Conversion Interrupt Disable 14
   constexpr auto ADC_IDR_EOC14 = hr::field_mask_literal< 0x400c0028, 14, 1 >();
   // End of Conversion Interrupt Disable 15
   constexpr auto ADC_IDR_EOC15 = hr::field_mask_literal< 0x400c0028, 15, 1 >();
   // Data Ready Interrupt Disable
   constexpr auto ADC_IDR_DRDY = hr::field_mask_literal< 0x400c0028, 24, 1 >();
   // General Overrun Error Interrupt Disable
   constexpr auto ADC_IDR_GOVRE = hr::field_mask_literal< 0x400c0028, 25, 1 >();
   // Comparison Event Interrupt Disable
   constexpr auto ADC_IDR_COMPE = hr::field_mask_literal< 0x400c0028, 26, 1 >();
   // End of Receive Buffer Interrupt Disable
   constexpr auto ADC_IDR_ENDRX = hr::field_mask_literal< 0x400c0028, 27, 1 >();
   // Receive Buffer Full Interrupt Disable
   constexpr auto ADC_IDR_RXBUFF = hr::field_mask_literal< 0x400c0028, 28, 1 >();

// IMR
   // End of Conversion Interrupt Mask 0
   constexpr auto ADC_IMR_EOC0 = hr::field_mask_literal< 0x400c002c, 0, 1 >();
   // End of Conversion Interrupt Mask 1
   constexpr auto ADC_IMR_EOC1 = hr::field_mask_literal< 0x400c002c, 1, 1 >();
   // End of Conversion Interrupt Mask 2
   constexpr auto ADC_IMR_EOC2 = hr::field_mask_literal< 0x400c002c, 2, 1 >();
   // End of Conversion Interrupt Mask 3
   constexpr auto ADC_IMR_EOC3 = hr::field_mask_literal< 0x400c002c, 3, 1 >();
   // End of Conversion Interrupt Mask 4
   constexpr auto ADC_IMR_EOC4 = hr::field_mask_literal< 0x400c002c, 4, 1 >();
   // End of Conversion Interrupt Mask 5
   constexpr auto ADC_IMR_EOC5 = hr::field_mask_literal< 0x400c002c, 5, 1 >();
   // End of Conversion Interrupt Mask 6
   constexpr auto ADC_IMR_EOC6 = hr::field_mask_literal< 0x400c002c, 6, 1 >();
   // End of Conversion Interrupt Mask 7
   constexpr auto ADC_IMR_EOC7 = hr::field_mask_literal< 0x400c002c, 7, 1 >();
   // End of Conversion Interrupt Mask 8
   constexpr auto ADC_IMR_EOC8 = hr::field_mask_literal< 0x400c002c, 8, 1 >();
   // End of Conversion Interrupt Mask 9
   constexpr auto ADC_IMR_EOC9 = hr::field_mask_literal< 0x400c002c, 9, 1 >();
   // End of Conversion Interrupt Mask 10
   constexpr auto ADC_IMR_EOC10 = hr::field_mask_literal< 0x400c002c, 10, 1 >();
   // End of Conversion Interrupt Mask 11
   constexpr auto ADC_IMR_EOC11 = hr::field_mask_literal< 0x400c002c, 11, 1 >();
   // End of Conversion Interrupt Mask 12
   constexpr auto ADC_IMR_EOC12 = hr::field_mask_literal< 0x400c002c, 12, 1 >();
   // End of Conversion Interrupt Mask 13
   constexpr auto ADC_IMR_EOC13 = hr::field_mask_literal< 0x400c002c, 13, 1 >();
   // End of Conversion Interrupt Mask 14
   constexpr auto ADC_IMR_EOC14 = hr::field_mask_literal< 0x400c002c, 14, 1 >();
   // End of Conversion Interrupt Mask 15
   constexpr auto ADC_IMR_EOC15 = hr::field_mask_literal< 0x400c002c, 15, 1 >();
   // Data Ready Interrupt Mask
   constexpr auto ADC_IMR_DRDY = hr::field_mask_literal< 0x400c002c, 24, 1 >();
   // General Overrun Error Interrupt Mask
   constexpr auto ADC_IMR_GOVRE = hr::field_mask_literal< 0x400c002c, 25, 1 >();
   // Comparison Event Interrupt Mask
   constexpr auto ADC_IMR_COMPE = hr::field_mask_literal< 0x400c002c, 26, 1 >();
   // End of Receive Buffer Interrupt Mask
   constexpr auto ADC_IMR_ENDRX = hr::field_mask_literal< 0x400c002c, 27, 1 >();
   // Receive Buffer Full Interrupt Mask
   constexpr auto ADC_IMR_RXBUFF = hr::field_mask_literal< 0x400c002c, 28, 1 >();

// ISR
   // End of Conversion 0
   constexpr auto ADC_ISR_EOC0 = hr::field_mask_literal< 0x400c0030, 0, 1 >();
   // End of Conversion 1
   constexpr auto ADC_ISR_EOC1 = hr::field_mask_literal< 0x400c0030, 1, 1 >();
   // End of Conversion 2
   constexpr auto ADC_ISR_EOC2 = hr::field_mask_literal< 0x400c0030, 2, 1 >();
   // End of Conversion 3
   constexpr auto ADC_ISR_EOC3 = hr::field_mask_literal< 0x400c0030, 3, 1 >();
   // End of Conversion 4
   constexpr auto ADC_ISR_EOC4 = hr::field_mask_literal< 0x400c0030, 4, 1 >();
   // End of Conversion 5
   constexpr auto ADC_ISR_EOC5 = hr::field_mask_literal< 0x400c0030, 5, 1 >();
   // End of Conversion 6
   constexpr auto ADC_ISR_EOC6 = hr::field_mask_literal< 0x400c0030, 6, 1 >();
   // End of Conversion 7
   constexpr auto ADC_ISR_EOC7 = hr::field_mask_literal< 0x400c0030, 7, 1 >();
   // End of Conversion 8
   constexpr auto ADC_ISR_EOC8 = hr::field_mask_literal< 0x400c0030, 8, 1 >();
   // End of Conversion 9
   constexpr auto ADC_ISR_EOC9 = hr::field_mask_literal< 0x400c0030, 9, 1 >();
   // End of Conversion 10
   constexpr auto ADC_ISR_EOC10 = hr::field_mask_literal< 0x400c0030, 10, 1 >();
   // End of Conversion 11
   constexpr auto ADC_ISR_EOC11 = hr::field_mask_literal< 0x400c0030, 11, 1 >();
   // End of Conversion 12
   constexpr auto ADC_ISR_EOC12 = hr::field_mask_literal< 0x400c0030, 12, 1 >();
   // End of Conversion 13
   constexpr auto ADC_ISR_EOC13 = hr::field_mask_literal< 0x400c0030, 13, 1 >();
   // End of Conversion 14
   constexpr auto ADC_ISR_EOC14 = hr::field_mask_literal< 0x400c0030, 14, 1 >();
   // End of Conversion 15
   constexpr auto ADC_ISR_EOC15 = hr::field_mask_literal< 0x400c0030, 15, 1 >();
   // Data Ready
   constexpr auto ADC_ISR_DRDY = hr::field_mask_literal< 0x400c0030, 24, 1 >();
   // General Overrun Error
   constexpr auto ADC_ISR_GOVRE = hr::field_mask_literal< 0x400c0030, 25, 1 >();
   // Comparison Error
   constexpr auto ADC_ISR_COMPE = hr::field_mask_literal< 0x400c0030, 26, 1 >();
   // End of RX Buffer
   constexpr auto ADC_ISR_ENDRX = hr::field_mask_literal< 0x400c0030, 27, 1 >();
   // RX Buffer Full
   constexpr auto ADC_ISR_RXBUFF = hr::field_mask_literal< 0x400c0030, 28, 1 >();

// OVER
   // Overrun Error 0
   constexpr auto ADC_OVER_OVRE0 = hr::field_mask_literal< 0x400c003c, 0, 1 >();
   // Overrun Error 1
   constexpr auto ADC_OVER_OVRE1 = hr::field_mask_literal< 0x400c003c, 1, 1 >();
   // Overrun Error 2
   constexpr auto ADC_OVER_OVRE2 = hr::field_mask_literal< 0x400c003c, 2, 1 >();
   // Overrun Error 3
   constexpr auto ADC_OVER_OVRE3 = hr::field_mask_literal< 0x400c003c, 3, 1 >();
   // Overrun Error 4
   constexpr auto ADC_OVER_OVRE4 = hr::field_mask_literal< 0x400c003c, 4, 1 >();
   // Overrun Error 5
   constexpr auto ADC_OVER_OVRE5 = hr::field_mask_literal< 0x400c003c, 5, 1 >();
   // Overrun Error 6
   constexpr auto ADC_OVER_OVRE6 = hr::field_mask_literal< 0x400c003c, 6, 1 >();
   // Overrun Error 7
   constexpr auto ADC_OVER_OVRE7 = hr::field_mask_literal< 0x400c003c, 7, 1 >();
   // Overrun Error 8
   constexpr auto ADC_OVER_OVRE8 = hr::field_mask_literal< 0x400c003c, 8, 1 >();
   // Overrun Error 9
   constexpr auto ADC_OVER_OVRE9 = hr::field_mask_literal< 0x400c003c, 9, 1 >();
   // Overrun Error 10
   constexpr auto ADC_OVER_OVRE10 = hr::field_mask_literal< 0x400c003c, 10, 1 >();
   // Overrun Error 11
   constexpr auto ADC_OVER_OVRE11 = hr::field_mask_literal< 0x400c003c, 11, 1 >();
   // Overrun Error 12
   constexpr auto ADC_OVER_OVRE12 = hr::field_mask_literal< 0x400c003c, 12, 1 >();
   // Overrun Error 13
   constexpr auto ADC_OVER_OVRE13 = hr::field_mask_literal< 0x400c003c, 13, 1 >();
   // Overrun Error 14
   constexpr auto ADC_OVER_OVRE14 = hr::field_mask_literal< 0x400c003c, 14, 1 >();
   // Overrun Error 15
   constexpr auto ADC_OVER_OVRE15 = hr::field_mask_literal< 0x400c003c, 15, 1 >();

// EMR
   // Comparison Mode
   constexpr auto ADC_EMR_CMPMODE_Msk = hr::field_mask_literal< 0x400c0040, 0, 2 >();
      // Generates an event when the converted data is lower than the low threshold of the window.
      constexpr auto ADC_EMR_CMPMODE_LOW = hr::field_value_literal< 0x400c0040, 0, 2 >( 0 );
      // Generates an event when the converted data is higher than the high threshold of the window.
      constexpr auto ADC_EMR_CMPMODE_HIGH = hr::field_value_literal< 0x400c0040, 0, 2 >( 1 );
      // Generates an event when the converted data is in the comparison window.
      constexpr auto ADC_EMR_CMPMODE_IN = hr::field_value_literal< 0x400c0040, 0, 2 >( 2 );
      // Generates an event when the converted data is out of the comparison window.
      constexpr auto ADC_EMR_CMPMODE_OUT = hr::field_value_literal< 0x400c0040, 0, 2 >( 3 );
   // Comparison Selected Channel
   constexpr auto ADC_EMR_CMPSEL_Msk = hr::field_mask_literal< 0x400c0040, 4, 4 >();
   // Compare All Channels
   constexpr auto ADC_EMR_CMPALL = hr::field_mask_literal< 0x400c0040, 9, 1 >();
   // Compare Event Filtering
   constexpr auto ADC_EMR_CMPFILTER_Msk = hr::field_mask_literal< 0x400c0040, 12, 2 >();
   // TAG of ADC_LDCR register
   constexpr auto ADC_EMR_TAG = hr::field_mask_literal< 0x400c0040, 24, 1 >();

// CWR
   // Low Threshold
   constexpr auto ADC_CWR_LOWTHRES_Msk = hr::field_mask_literal< 0x400c0044, 0, 12 >();
   // High Threshold
   constexpr auto ADC_CWR_HIGHTHRES_Msk = hr::field_mask_literal< 0x400c0044, 16, 12 >();

// CGR
   // Gain for channel 0
   constexpr auto ADC_CGR_GAIN0_Msk = hr::field_mask_literal< 0x400c0048, 0, 2 >();
   // Gain for channel 1
   constexpr auto ADC_CGR_GAIN1_Msk = hr::field_mask_literal< 0x400c0048, 2, 2 >();
   // Gain for channel 2
   constexpr auto ADC_CGR_GAIN2_Msk = hr::field_mask_literal< 0x400c0048, 4, 2 >();
   // Gain for channel 3
   constexpr auto ADC_CGR_GAIN3_Msk = hr::field_mask_literal< 0x400c0048, 6, 2 >();
   // Gain for channel 4
   constexpr auto ADC_CGR_GAIN4_Msk = hr::field_mask_literal< 0x400c0048, 8, 2 >();
   // Gain for channel 5
   constexpr auto ADC_CGR_GAIN5_Msk = hr::field_mask_literal< 0x400c0048, 10, 2 >();
   // Gain for channel 6
   constexpr auto ADC_CGR_GAIN6_Msk = hr::field_mask_literal< 0x400c0048, 12, 2 >();
   // Gain for channel 7
   constexpr auto ADC_CGR_GAIN7_Msk = hr::field_mask_literal< 0x400c0048, 14, 2 >();
   // Gain for channel 8
   constexpr auto ADC_CGR_GAIN8_Msk = hr::field_mask_literal< 0x400c0048, 16, 2 >();
   // Gain for channel 9
   constexpr auto ADC_CGR_GAIN9_Msk = hr::field_mask_literal< 0x400c0048, 18, 2 >();
   // Gain for channel 10
   constexpr auto ADC_CGR_GAIN10_Msk = hr::field_mask_literal< 0x400c0048, 20, 2 >();
   // Gain for channel 11
   constexpr auto ADC_CGR_GAIN11_Msk = hr::field_mask_literal< 0x400c0048, 22, 2 >();
   // Gain for channel 12
   constexpr auto ADC_CGR_GAIN12_Msk = hr::field_mask_literal< 0x400c0048, 24, 2 >();
   // Gain for channel 13
   constexpr auto ADC_CGR_GAIN13_Msk = hr::field_mask_literal< 0x400c0048, 26, 2 >();
   // Gain for channel 14
   constexpr auto ADC_CGR_GAIN14_Msk = hr::field_mask_literal< 0x400c0048, 28, 2 >();
   // Gain for channel 15
   constexpr auto ADC_CGR_GAIN15_Msk = hr::field_mask_literal< 0x400c0048, 30, 2 >();

// COR
   // Offset for channel 0
   constexpr auto ADC_COR_OFF0 = hr::field_mask_literal< 0x400c004c, 0, 1 >();
   // Offset for channel 1
   constexpr auto ADC_COR_OFF1 = hr::field_mask_literal< 0x400c004c, 1, 1 >();
   // Offset for channel 2
   constexpr auto ADC_COR_OFF2 = hr::field_mask_literal< 0x400c004c, 2, 1 >();
   // Offset for channel 3
   constexpr auto ADC_COR_OFF3 = hr::field_mask_literal< 0x400c004c, 3, 1 >();
   // Offset for channel 4
   constexpr auto ADC_COR_OFF4 = hr::field_mask_literal< 0x400c004c, 4, 1 >();
   // Offset for channel 5
   constexpr auto ADC_COR_OFF5 = hr::field_mask_literal< 0x400c004c, 5, 1 >();
   // Offset for channel 6
   constexpr auto ADC_COR_OFF6 = hr::field_mask_literal< 0x400c004c, 6, 1 >();
   // Offset for channel 7
   constexpr auto ADC_COR_OFF7 = hr::field_mask_literal< 0x400c004c, 7, 1 >();
   // Offset for channel 8
   constexpr auto ADC_COR_OFF8 = hr::field_mask_literal< 0x400c004c, 8, 1 >();
   // Offset for channel 9
   constexpr auto ADC_COR_OFF9 = hr::field_mask_literal< 0x400c004c, 9, 1 >();
   // Offset for channel 10
   constexpr auto ADC_COR_OFF10 = hr::field_mask_literal< 0x400c004c, 10, 1 >();
   // Offset for channel 11
   constexpr auto ADC_COR_OFF11 = hr::field_mask_literal< 0x400c004c, 11, 1 >();
   // Offset for channel 12
   constexpr auto ADC_COR_OFF12 = hr::field_mask_literal< 0x400c004c, 12, 1 >();
   // Offset for channel 13
   constexpr auto ADC_COR_OFF13 = hr::field_mask_literal< 0x400c004c, 13, 1 >();
   // Offset for channel 14
   constexpr auto ADC_COR_OFF14 = hr::field_mask_literal< 0x400c004c, 14, 1 >();
   // Offset for channel 15
   constexpr auto ADC_COR_OFF15 = hr::field_mask_literal< 0x400c004c, 15, 1 >();
   // Differential inputs for channel 0
   constexpr auto ADC_COR_DIFF0 = hr::field_mask_literal< 0x400c004c, 16, 1 >();
   // Differential inputs for channel 1
   constexpr auto ADC_COR_DIFF1 = hr::field_mask_literal< 0x400c004c, 17, 1 >();
   // Differential inputs for channel 2
   constexpr auto ADC_COR_DIFF2 = hr::field_mask_literal< 0x400c004c, 18, 1 >();
   // Differential inputs for channel 3
   constexpr auto ADC_COR_DIFF3 = hr::field_mask_literal< 0x400c004c, 19, 1 >();
   // Differential inputs for channel 4
   constexpr auto ADC_COR_DIFF4 = hr::field_mask_literal< 0x400c004c, 20, 1 >();
   // Differential inputs for channel 5
   constexpr auto ADC_COR_DIFF5 = hr::field_mask_literal< 0x400c004c, 21, 1 >();
   // Differential inputs for channel 6
   constexpr auto ADC_COR_DIFF6 = hr::field_mask_literal< 0x400c004c, 22, 1 >();
   // Differential inputs for channel 7
   constexpr auto ADC_COR_DIFF7 = hr::field_mask_literal< 0x400c004c, 23, 1 >();
   // Differential inputs for channel 8
   constexpr auto ADC_COR_DIFF8 = hr::field_mask_literal< 0x400c004c, 24, 1 >();
   // Differential inputs for channel 9
   constexpr auto ADC_COR_DIFF9 = hr::field_mask_literal< 0x400c004c, 25, 1 >();
   // Differential inputs for channel 10
   constexpr auto ADC_COR_DIFF10 = hr::field_mask_literal< 0x400c004c, 26, 1 >();
   // Differential inputs for channel 11
   constexpr auto ADC_COR_DIFF11 = hr::field_mask_literal< 0x400c004c, 27, 1 >();
   // Differential inputs for channel 12
   constexpr auto ADC_COR_DIFF12 = hr::field_mask_literal< 0x400c004c, 28, 1 >();
   // Differential inputs for channel 13
   constexpr auto ADC_COR_DIFF13 = hr::field_mask_literal< 0x400c004c, 29, 1 >();
   // Differential inputs for channel 14
   constexpr auto ADC_COR_DIFF14 = hr::field_mask_literal< 0x400c004c, 30, 1 >();
   // Differential inputs for channel 15
   constexpr auto ADC_COR_DIFF15 = hr::field_mask_literal< 0x400c004c, 31, 1 >();

// CDR[0]
   // Converted Data
   constexpr auto ADC_CDR_DATA_Msk = hr::field_mask_literal< 0x400c0050, 0, 12 >();

// ACR
   // Temperature Sensor On
   constexpr auto ADC_ACR_TSON = hr::field_mask_literal< 0x400c0094, 4, 1 >();
   // ADC Bias Current Control
   constexpr auto ADC_ACR_IBCTL_Msk = hr::field_mask_literal< 0x400c0094, 8, 2 >();

// WPMR
   // Write Protect Enable
   constexpr auto ADC_WPMR_WPEN = hr::field_mask_literal< 0x400c00e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto ADC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400c00e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto ADC_WPSR_WPVS = hr::field_mask_literal< 0x400c00e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto ADC_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400c00e8, 8, 16 >();

// RPR
   // Receive Pointer Register
   constexpr auto ADC_RPR_RXPTR_Msk = hr::field_mask_literal< 0x400c0100, 0, 32 >();

// RCR
   // Receive Counter Register
   constexpr auto ADC_RCR_RXCTR_Msk = hr::field_mask_literal< 0x400c0104, 0, 16 >();

// RNPR
   // Receive Next Pointer
   constexpr auto ADC_RNPR_RXNPTR_Msk = hr::field_mask_literal< 0x400c0110, 0, 32 >();

// RNCR
   // Receive Next Counter
   constexpr auto ADC_RNCR_RXNCTR_Msk = hr::field_mask_literal< 0x400c0114, 0, 16 >();

// PTCR
   // Receiver Transfer Enable
   constexpr auto ADC_PTCR_RXTEN = hr::field_mask_literal< 0x400c0120, 0, 1 >();
   // Receiver Transfer Disable
   constexpr auto ADC_PTCR_RXTDIS = hr::field_mask_literal< 0x400c0120, 1, 1 >();
   // Transmitter Transfer Enable
   constexpr auto ADC_PTCR_TXTEN = hr::field_mask_literal< 0x400c0120, 8, 1 >();
   // Transmitter Transfer Disable
   constexpr auto ADC_PTCR_TXTDIS = hr::field_mask_literal< 0x400c0120, 9, 1 >();

// PTSR
   // Receiver Transfer Enable
   constexpr auto ADC_PTSR_RXTEN = hr::field_mask_literal< 0x400c0124, 0, 1 >();
   // Transmitter Transfer Enable
   constexpr auto ADC_PTSR_TXTEN = hr::field_mask_literal< 0x400c0124, 8, 1 >();

// =============================================================================
//
// DMAC
// base address = 0x400c4000
// DMA Controller
//
// =============================================================================

struct Dmac {
   hr::hardware_register<0x400c4000> GCFG;
   hr::hardware_register<0x400c4004> EN;
   hr::hardware_register<0x400c4008> SREQ;
   hr::hardware_register<0x400c400c> CREQ;
   hr::hardware_register<0x400c4010> LAST;
   hr::reserved< 0x14, 1 > _reserved_at_0x14;
   hr::hardware_register<0x400c4018> EBCIER;
   hr::hardware_register<0x400c401c> EBCIDR;
   hr::hardware_register<0x400c4020> EBCIMR;
   hr::hardware_register<0x400c4024> EBCISR;
   hr::hardware_register<0x400c4028> CHER;
   hr::hardware_register<0x400c402c> CHDR;
   hr::hardware_register<0x400c4030> CHSR;
   hr::reserved< 0x34, 2 > _reserved_at_0x34;
   hr::hardware_register<0x400c403c> SADDR0;
   hr::hardware_register<0x400c4040> DADDR0;
   hr::hardware_register<0x400c4044> DSCR0;
   hr::hardware_register<0x400c4048> CTRLA0;
   hr::hardware_register<0x400c404c> CTRLB0;
   hr::hardware_register<0x400c4050> CFG0;
   hr::reserved< 0x54, 4 > _reserved_at_0x54;
   hr::hardware_register<0x400c4064> SADDR1;
   hr::hardware_register<0x400c4068> DADDR1;
   hr::hardware_register<0x400c406c> DSCR1;
   hr::hardware_register<0x400c4070> CTRLA1;
   hr::hardware_register<0x400c4074> CTRLB1;
   hr::hardware_register<0x400c4078> CFG1;
   hr::reserved< 0x7C, 4 > _reserved_at_0x7C;
   hr::hardware_register<0x400c408c> SADDR2;
   hr::hardware_register<0x400c4090> DADDR2;
   hr::hardware_register<0x400c4094> DSCR2;
   hr::hardware_register<0x400c4098> CTRLA2;
   hr::hardware_register<0x400c409c> CTRLB2;
   hr::hardware_register<0x400c40a0> CFG2;
   hr::reserved< 0xA4, 4 > _reserved_at_0xA4;
   hr::hardware_register<0x400c40b4> SADDR3;
   hr::hardware_register<0x400c40b8> DADDR3;
   hr::hardware_register<0x400c40bc> DSCR3;
   hr::hardware_register<0x400c40c0> CTRLA3;
   hr::hardware_register<0x400c40c4> CTRLB3;
   hr::hardware_register<0x400c40c8> CFG3;
   hr::reserved< 0xCC, 4 > _reserved_at_0xCC;
   hr::hardware_register<0x400c40dc> SADDR4;
   hr::hardware_register<0x400c40e0> DADDR4;
   hr::hardware_register<0x400c40e4> DSCR4;
   hr::hardware_register<0x400c40e8> CTRLA4;
   hr::hardware_register<0x400c40ec> CTRLB4;
   hr::hardware_register<0x400c40f0> CFG4;
   hr::reserved< 0xF4, 4 > _reserved_at_0xF4;
   hr::hardware_register<0x400c4104> SADDR5;
   hr::hardware_register<0x400c4108> DADDR5;
   hr::hardware_register<0x400c410c> DSCR5;
   hr::hardware_register<0x400c4110> CTRLA5;
   hr::hardware_register<0x400c4114> CTRLB5;
   hr::hardware_register<0x400c4118> CFG5;
   hr::reserved< 0x11C, 50 > _reserved_at_0x11C;
   hr::hardware_register<0x400c41e4> WPMR;
   hr::hardware_register<0x400c41e8> WPSR;
};

#define DMAC ( ( Dmac * ) 0x400c4000 )

// GCFG
   // Arbiter Configuration
   constexpr auto DMAC_GCFG_ARB_CFG = hr::field_mask_literal< 0x400c4000, 4, 1 >();
      // Fixed priority arbiter.
      constexpr auto DMAC_GCFG_ARB_CFG_FIXED = hr::field_value_literal< 0x400c4000, 4, 1 >( 0 );
      // Modified round robin arbiter.
      constexpr auto DMAC_GCFG_ARB_CFG_ROUND_ROBIN = hr::field_value_literal< 0x400c4000, 4, 1 >( 1 );

// EN
   // None
   constexpr auto DMAC_EN_ENABLE = hr::field_mask_literal< 0x400c4004, 0, 1 >();

// SREQ
   // Source Request
   constexpr auto DMAC_SREQ_SSREQ0 = hr::field_mask_literal< 0x400c4008, 0, 1 >();
   // Destination Request
   constexpr auto DMAC_SREQ_DSREQ0 = hr::field_mask_literal< 0x400c4008, 1, 1 >();
   // Source Request
   constexpr auto DMAC_SREQ_SSREQ1 = hr::field_mask_literal< 0x400c4008, 2, 1 >();
   // Destination Request
   constexpr auto DMAC_SREQ_DSREQ1 = hr::field_mask_literal< 0x400c4008, 3, 1 >();
   // Source Request
   constexpr auto DMAC_SREQ_SSREQ2 = hr::field_mask_literal< 0x400c4008, 4, 1 >();
   // Destination Request
   constexpr auto DMAC_SREQ_DSREQ2 = hr::field_mask_literal< 0x400c4008, 5, 1 >();
   // Source Request
   constexpr auto DMAC_SREQ_SSREQ3 = hr::field_mask_literal< 0x400c4008, 6, 1 >();
   // Destination Request
   constexpr auto DMAC_SREQ_DSREQ3 = hr::field_mask_literal< 0x400c4008, 7, 1 >();
   // Source Request
   constexpr auto DMAC_SREQ_SSREQ4 = hr::field_mask_literal< 0x400c4008, 8, 1 >();
   // Destination Request
   constexpr auto DMAC_SREQ_DSREQ4 = hr::field_mask_literal< 0x400c4008, 9, 1 >();
   // Source Request
   constexpr auto DMAC_SREQ_SSREQ5 = hr::field_mask_literal< 0x400c4008, 10, 1 >();
   // Destination Request
   constexpr auto DMAC_SREQ_DSREQ5 = hr::field_mask_literal< 0x400c4008, 11, 1 >();

// CREQ
   // Source Chunk Request
   constexpr auto DMAC_CREQ_SCREQ0 = hr::field_mask_literal< 0x400c400c, 0, 1 >();
   // Destination Chunk Request
   constexpr auto DMAC_CREQ_DCREQ0 = hr::field_mask_literal< 0x400c400c, 1, 1 >();
   // Source Chunk Request
   constexpr auto DMAC_CREQ_SCREQ1 = hr::field_mask_literal< 0x400c400c, 2, 1 >();
   // Destination Chunk Request
   constexpr auto DMAC_CREQ_DCREQ1 = hr::field_mask_literal< 0x400c400c, 3, 1 >();
   // Source Chunk Request
   constexpr auto DMAC_CREQ_SCREQ2 = hr::field_mask_literal< 0x400c400c, 4, 1 >();
   // Destination Chunk Request
   constexpr auto DMAC_CREQ_DCREQ2 = hr::field_mask_literal< 0x400c400c, 5, 1 >();
   // Source Chunk Request
   constexpr auto DMAC_CREQ_SCREQ3 = hr::field_mask_literal< 0x400c400c, 6, 1 >();
   // Destination Chunk Request
   constexpr auto DMAC_CREQ_DCREQ3 = hr::field_mask_literal< 0x400c400c, 7, 1 >();
   // Source Chunk Request
   constexpr auto DMAC_CREQ_SCREQ4 = hr::field_mask_literal< 0x400c400c, 8, 1 >();
   // Destination Chunk Request
   constexpr auto DMAC_CREQ_DCREQ4 = hr::field_mask_literal< 0x400c400c, 9, 1 >();
   // Source Chunk Request
   constexpr auto DMAC_CREQ_SCREQ5 = hr::field_mask_literal< 0x400c400c, 10, 1 >();
   // Destination Chunk Request
   constexpr auto DMAC_CREQ_DCREQ5 = hr::field_mask_literal< 0x400c400c, 11, 1 >();

// LAST
   // Source Last
   constexpr auto DMAC_LAST_SLAST0 = hr::field_mask_literal< 0x400c4010, 0, 1 >();
   // Destination Last
   constexpr auto DMAC_LAST_DLAST0 = hr::field_mask_literal< 0x400c4010, 1, 1 >();
   // Source Last
   constexpr auto DMAC_LAST_SLAST1 = hr::field_mask_literal< 0x400c4010, 2, 1 >();
   // Destination Last
   constexpr auto DMAC_LAST_DLAST1 = hr::field_mask_literal< 0x400c4010, 3, 1 >();
   // Source Last
   constexpr auto DMAC_LAST_SLAST2 = hr::field_mask_literal< 0x400c4010, 4, 1 >();
   // Destination Last
   constexpr auto DMAC_LAST_DLAST2 = hr::field_mask_literal< 0x400c4010, 5, 1 >();
   // Source Last
   constexpr auto DMAC_LAST_SLAST3 = hr::field_mask_literal< 0x400c4010, 6, 1 >();
   // Destination Last
   constexpr auto DMAC_LAST_DLAST3 = hr::field_mask_literal< 0x400c4010, 7, 1 >();
   // Source Last
   constexpr auto DMAC_LAST_SLAST4 = hr::field_mask_literal< 0x400c4010, 8, 1 >();
   // Destination Last
   constexpr auto DMAC_LAST_DLAST4 = hr::field_mask_literal< 0x400c4010, 9, 1 >();
   // Source Last
   constexpr auto DMAC_LAST_SLAST5 = hr::field_mask_literal< 0x400c4010, 10, 1 >();
   // Destination Last
   constexpr auto DMAC_LAST_DLAST5 = hr::field_mask_literal< 0x400c4010, 11, 1 >();

// EBCIER
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_BTC0 = hr::field_mask_literal< 0x400c4018, 0, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_BTC1 = hr::field_mask_literal< 0x400c4018, 1, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_BTC2 = hr::field_mask_literal< 0x400c4018, 2, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_BTC3 = hr::field_mask_literal< 0x400c4018, 3, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_BTC4 = hr::field_mask_literal< 0x400c4018, 4, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_BTC5 = hr::field_mask_literal< 0x400c4018, 5, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_CBTC0 = hr::field_mask_literal< 0x400c4018, 8, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_CBTC1 = hr::field_mask_literal< 0x400c4018, 9, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_CBTC2 = hr::field_mask_literal< 0x400c4018, 10, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_CBTC3 = hr::field_mask_literal< 0x400c4018, 11, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_CBTC4 = hr::field_mask_literal< 0x400c4018, 12, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIER_CBTC5 = hr::field_mask_literal< 0x400c4018, 13, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIER_ERR0 = hr::field_mask_literal< 0x400c4018, 16, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIER_ERR1 = hr::field_mask_literal< 0x400c4018, 17, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIER_ERR2 = hr::field_mask_literal< 0x400c4018, 18, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIER_ERR3 = hr::field_mask_literal< 0x400c4018, 19, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIER_ERR4 = hr::field_mask_literal< 0x400c4018, 20, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIER_ERR5 = hr::field_mask_literal< 0x400c4018, 21, 1 >();

// EBCIDR
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_BTC0 = hr::field_mask_literal< 0x400c401c, 0, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_BTC1 = hr::field_mask_literal< 0x400c401c, 1, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_BTC2 = hr::field_mask_literal< 0x400c401c, 2, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_BTC3 = hr::field_mask_literal< 0x400c401c, 3, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_BTC4 = hr::field_mask_literal< 0x400c401c, 4, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_BTC5 = hr::field_mask_literal< 0x400c401c, 5, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_CBTC0 = hr::field_mask_literal< 0x400c401c, 8, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_CBTC1 = hr::field_mask_literal< 0x400c401c, 9, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_CBTC2 = hr::field_mask_literal< 0x400c401c, 10, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_CBTC3 = hr::field_mask_literal< 0x400c401c, 11, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_CBTC4 = hr::field_mask_literal< 0x400c401c, 12, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIDR_CBTC5 = hr::field_mask_literal< 0x400c401c, 13, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIDR_ERR0 = hr::field_mask_literal< 0x400c401c, 16, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIDR_ERR1 = hr::field_mask_literal< 0x400c401c, 17, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIDR_ERR2 = hr::field_mask_literal< 0x400c401c, 18, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIDR_ERR3 = hr::field_mask_literal< 0x400c401c, 19, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIDR_ERR4 = hr::field_mask_literal< 0x400c401c, 20, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIDR_ERR5 = hr::field_mask_literal< 0x400c401c, 21, 1 >();

// EBCIMR
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_BTC0 = hr::field_mask_literal< 0x400c4020, 0, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_BTC1 = hr::field_mask_literal< 0x400c4020, 1, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_BTC2 = hr::field_mask_literal< 0x400c4020, 2, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_BTC3 = hr::field_mask_literal< 0x400c4020, 3, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_BTC4 = hr::field_mask_literal< 0x400c4020, 4, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_BTC5 = hr::field_mask_literal< 0x400c4020, 5, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_CBTC0 = hr::field_mask_literal< 0x400c4020, 8, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_CBTC1 = hr::field_mask_literal< 0x400c4020, 9, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_CBTC2 = hr::field_mask_literal< 0x400c4020, 10, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_CBTC3 = hr::field_mask_literal< 0x400c4020, 11, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_CBTC4 = hr::field_mask_literal< 0x400c4020, 12, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCIMR_CBTC5 = hr::field_mask_literal< 0x400c4020, 13, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIMR_ERR0 = hr::field_mask_literal< 0x400c4020, 16, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIMR_ERR1 = hr::field_mask_literal< 0x400c4020, 17, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIMR_ERR2 = hr::field_mask_literal< 0x400c4020, 18, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIMR_ERR3 = hr::field_mask_literal< 0x400c4020, 19, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIMR_ERR4 = hr::field_mask_literal< 0x400c4020, 20, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCIMR_ERR5 = hr::field_mask_literal< 0x400c4020, 21, 1 >();

// EBCISR
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_BTC0 = hr::field_mask_literal< 0x400c4024, 0, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_BTC1 = hr::field_mask_literal< 0x400c4024, 1, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_BTC2 = hr::field_mask_literal< 0x400c4024, 2, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_BTC3 = hr::field_mask_literal< 0x400c4024, 3, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_BTC4 = hr::field_mask_literal< 0x400c4024, 4, 1 >();
   // Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_BTC5 = hr::field_mask_literal< 0x400c4024, 5, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_CBTC0 = hr::field_mask_literal< 0x400c4024, 8, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_CBTC1 = hr::field_mask_literal< 0x400c4024, 9, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_CBTC2 = hr::field_mask_literal< 0x400c4024, 10, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_CBTC3 = hr::field_mask_literal< 0x400c4024, 11, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_CBTC4 = hr::field_mask_literal< 0x400c4024, 12, 1 >();
   // Chained Buffer Transfer Completed [5:0]
   constexpr auto DMAC_EBCISR_CBTC5 = hr::field_mask_literal< 0x400c4024, 13, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCISR_ERR0 = hr::field_mask_literal< 0x400c4024, 16, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCISR_ERR1 = hr::field_mask_literal< 0x400c4024, 17, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCISR_ERR2 = hr::field_mask_literal< 0x400c4024, 18, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCISR_ERR3 = hr::field_mask_literal< 0x400c4024, 19, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCISR_ERR4 = hr::field_mask_literal< 0x400c4024, 20, 1 >();
   // Access Error [5:0]
   constexpr auto DMAC_EBCISR_ERR5 = hr::field_mask_literal< 0x400c4024, 21, 1 >();

// CHER
   // Enable [5:0]
   constexpr auto DMAC_CHER_ENA0 = hr::field_mask_literal< 0x400c4028, 0, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHER_ENA1 = hr::field_mask_literal< 0x400c4028, 1, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHER_ENA2 = hr::field_mask_literal< 0x400c4028, 2, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHER_ENA3 = hr::field_mask_literal< 0x400c4028, 3, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHER_ENA4 = hr::field_mask_literal< 0x400c4028, 4, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHER_ENA5 = hr::field_mask_literal< 0x400c4028, 5, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHER_SUSP0 = hr::field_mask_literal< 0x400c4028, 8, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHER_SUSP1 = hr::field_mask_literal< 0x400c4028, 9, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHER_SUSP2 = hr::field_mask_literal< 0x400c4028, 10, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHER_SUSP3 = hr::field_mask_literal< 0x400c4028, 11, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHER_SUSP4 = hr::field_mask_literal< 0x400c4028, 12, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHER_SUSP5 = hr::field_mask_literal< 0x400c4028, 13, 1 >();
   // Keep on [5:0]
   constexpr auto DMAC_CHER_KEEP0 = hr::field_mask_literal< 0x400c4028, 24, 1 >();
   // Keep on [5:0]
   constexpr auto DMAC_CHER_KEEP1 = hr::field_mask_literal< 0x400c4028, 25, 1 >();
   // Keep on [5:0]
   constexpr auto DMAC_CHER_KEEP2 = hr::field_mask_literal< 0x400c4028, 26, 1 >();
   // Keep on [5:0]
   constexpr auto DMAC_CHER_KEEP3 = hr::field_mask_literal< 0x400c4028, 27, 1 >();
   // Keep on [5:0]
   constexpr auto DMAC_CHER_KEEP4 = hr::field_mask_literal< 0x400c4028, 28, 1 >();
   // Keep on [5:0]
   constexpr auto DMAC_CHER_KEEP5 = hr::field_mask_literal< 0x400c4028, 29, 1 >();

// CHDR
   // Disable [5:0]
   constexpr auto DMAC_CHDR_DIS0 = hr::field_mask_literal< 0x400c402c, 0, 1 >();
   // Disable [5:0]
   constexpr auto DMAC_CHDR_DIS1 = hr::field_mask_literal< 0x400c402c, 1, 1 >();
   // Disable [5:0]
   constexpr auto DMAC_CHDR_DIS2 = hr::field_mask_literal< 0x400c402c, 2, 1 >();
   // Disable [5:0]
   constexpr auto DMAC_CHDR_DIS3 = hr::field_mask_literal< 0x400c402c, 3, 1 >();
   // Disable [5:0]
   constexpr auto DMAC_CHDR_DIS4 = hr::field_mask_literal< 0x400c402c, 4, 1 >();
   // Disable [5:0]
   constexpr auto DMAC_CHDR_DIS5 = hr::field_mask_literal< 0x400c402c, 5, 1 >();
   // Resume [5:0]
   constexpr auto DMAC_CHDR_RES0 = hr::field_mask_literal< 0x400c402c, 8, 1 >();
   // Resume [5:0]
   constexpr auto DMAC_CHDR_RES1 = hr::field_mask_literal< 0x400c402c, 9, 1 >();
   // Resume [5:0]
   constexpr auto DMAC_CHDR_RES2 = hr::field_mask_literal< 0x400c402c, 10, 1 >();
   // Resume [5:0]
   constexpr auto DMAC_CHDR_RES3 = hr::field_mask_literal< 0x400c402c, 11, 1 >();
   // Resume [5:0]
   constexpr auto DMAC_CHDR_RES4 = hr::field_mask_literal< 0x400c402c, 12, 1 >();
   // Resume [5:0]
   constexpr auto DMAC_CHDR_RES5 = hr::field_mask_literal< 0x400c402c, 13, 1 >();

// CHSR
   // Enable [5:0]
   constexpr auto DMAC_CHSR_ENA0 = hr::field_mask_literal< 0x400c4030, 0, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHSR_ENA1 = hr::field_mask_literal< 0x400c4030, 1, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHSR_ENA2 = hr::field_mask_literal< 0x400c4030, 2, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHSR_ENA3 = hr::field_mask_literal< 0x400c4030, 3, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHSR_ENA4 = hr::field_mask_literal< 0x400c4030, 4, 1 >();
   // Enable [5:0]
   constexpr auto DMAC_CHSR_ENA5 = hr::field_mask_literal< 0x400c4030, 5, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHSR_SUSP0 = hr::field_mask_literal< 0x400c4030, 8, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHSR_SUSP1 = hr::field_mask_literal< 0x400c4030, 9, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHSR_SUSP2 = hr::field_mask_literal< 0x400c4030, 10, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHSR_SUSP3 = hr::field_mask_literal< 0x400c4030, 11, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHSR_SUSP4 = hr::field_mask_literal< 0x400c4030, 12, 1 >();
   // Suspend [5:0]
   constexpr auto DMAC_CHSR_SUSP5 = hr::field_mask_literal< 0x400c4030, 13, 1 >();
   // Empty [5:0]
   constexpr auto DMAC_CHSR_EMPT0 = hr::field_mask_literal< 0x400c4030, 16, 1 >();
   // Empty [5:0]
   constexpr auto DMAC_CHSR_EMPT1 = hr::field_mask_literal< 0x400c4030, 17, 1 >();
   // Empty [5:0]
   constexpr auto DMAC_CHSR_EMPT2 = hr::field_mask_literal< 0x400c4030, 18, 1 >();
   // Empty [5:0]
   constexpr auto DMAC_CHSR_EMPT3 = hr::field_mask_literal< 0x400c4030, 19, 1 >();
   // Empty [5:0]
   constexpr auto DMAC_CHSR_EMPT4 = hr::field_mask_literal< 0x400c4030, 20, 1 >();
   // Empty [5:0]
   constexpr auto DMAC_CHSR_EMPT5 = hr::field_mask_literal< 0x400c4030, 21, 1 >();
   // Stalled [5:0]
   constexpr auto DMAC_CHSR_STAL0 = hr::field_mask_literal< 0x400c4030, 24, 1 >();
   // Stalled [5:0]
   constexpr auto DMAC_CHSR_STAL1 = hr::field_mask_literal< 0x400c4030, 25, 1 >();
   // Stalled [5:0]
   constexpr auto DMAC_CHSR_STAL2 = hr::field_mask_literal< 0x400c4030, 26, 1 >();
   // Stalled [5:0]
   constexpr auto DMAC_CHSR_STAL3 = hr::field_mask_literal< 0x400c4030, 27, 1 >();
   // Stalled [5:0]
   constexpr auto DMAC_CHSR_STAL4 = hr::field_mask_literal< 0x400c4030, 28, 1 >();
   // Stalled [5:0]
   constexpr auto DMAC_CHSR_STAL5 = hr::field_mask_literal< 0x400c4030, 29, 1 >();

// SADDR0
   // Channel x Source Address
   constexpr auto DMAC_SADDR0_SADDR_Msk = hr::field_mask_literal< 0x400c403c, 0, 32 >();

// DADDR0
   // Channel x Destination Address
   constexpr auto DMAC_DADDR0_DADDR_Msk = hr::field_mask_literal< 0x400c4040, 0, 32 >();

// DSCR0
   // Buffer Transfer Descriptor Address
   constexpr auto DMAC_DSCR0_DSCR_Msk = hr::field_mask_literal< 0x400c4044, 2, 30 >();

// CTRLA0
   // Buffer Transfer Size
   constexpr auto DMAC_CTRLA0_BTSIZE_Msk = hr::field_mask_literal< 0x400c4048, 0, 16 >();
   // Source Chunk Transfer Size.
   constexpr auto DMAC_CTRLA0_SCSIZE_Msk = hr::field_mask_literal< 0x400c4048, 16, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_1 = hr::field_value_literal< 0x400c4048, 16, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_4 = hr::field_value_literal< 0x400c4048, 16, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_8 = hr::field_value_literal< 0x400c4048, 16, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_16 = hr::field_value_literal< 0x400c4048, 16, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_32 = hr::field_value_literal< 0x400c4048, 16, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_64 = hr::field_value_literal< 0x400c4048, 16, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_128 = hr::field_value_literal< 0x400c4048, 16, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA0_SCSIZE_CHK_256 = hr::field_value_literal< 0x400c4048, 16, 3 >( 7 );
   // Destination Chunk Transfer Size
   constexpr auto DMAC_CTRLA0_DCSIZE_Msk = hr::field_mask_literal< 0x400c4048, 20, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_1 = hr::field_value_literal< 0x400c4048, 20, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_4 = hr::field_value_literal< 0x400c4048, 20, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_8 = hr::field_value_literal< 0x400c4048, 20, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_16 = hr::field_value_literal< 0x400c4048, 20, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_32 = hr::field_value_literal< 0x400c4048, 20, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_64 = hr::field_value_literal< 0x400c4048, 20, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_128 = hr::field_value_literal< 0x400c4048, 20, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA0_DCSIZE_CHK_256 = hr::field_value_literal< 0x400c4048, 20, 3 >( 7 );
   // Transfer Width for the Source
   constexpr auto DMAC_CTRLA0_SRC_WIDTH_Msk = hr::field_mask_literal< 0x400c4048, 24, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA0_SRC_WIDTH_BYTE = hr::field_value_literal< 0x400c4048, 24, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA0_SRC_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4048, 24, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA0_SRC_WIDTH_WORD = hr::field_value_literal< 0x400c4048, 24, 2 >( 2 );
   // Transfer Width for the Destination
   constexpr auto DMAC_CTRLA0_DST_WIDTH_Msk = hr::field_mask_literal< 0x400c4048, 28, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA0_DST_WIDTH_BYTE = hr::field_value_literal< 0x400c4048, 28, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA0_DST_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4048, 28, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA0_DST_WIDTH_WORD = hr::field_value_literal< 0x400c4048, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLA0_DONE = hr::field_mask_literal< 0x400c4048, 31, 1 >();

// CTRLB0
   // Source Address Descriptor
   constexpr auto DMAC_CTRLB0_SRC_DSCR = hr::field_mask_literal< 0x400c404c, 16, 1 >();
      // Source address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB0_SRC_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c404c, 16, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the source.
      constexpr auto DMAC_CTRLB0_SRC_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c404c, 16, 1 >( 1 );
   // Destination Address Descriptor
   constexpr auto DMAC_CTRLB0_DST_DSCR = hr::field_mask_literal< 0x400c404c, 20, 1 >();
      // Destination address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB0_DST_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c404c, 20, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the destination.
      constexpr auto DMAC_CTRLB0_DST_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c404c, 20, 1 >( 1 );
   // Flow Control
   constexpr auto DMAC_CTRLB0_FC_Msk = hr::field_mask_literal< 0x400c404c, 21, 3 >();
      // Memory-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB0_FC_MEM2MEM_DMA_FC = hr::field_value_literal< 0x400c404c, 21, 3 >( 0 );
      // Memory-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB0_FC_MEM2PER_DMA_FC = hr::field_value_literal< 0x400c404c, 21, 3 >( 1 );
      // Peripheral-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB0_FC_PER2MEM_DMA_FC = hr::field_value_literal< 0x400c404c, 21, 3 >( 2 );
      // Peripheral-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB0_FC_PER2PER_DMA_FC = hr::field_value_literal< 0x400c404c, 21, 3 >( 3 );
   // Incrementing, Decrementing or Fixed Address for the Source
   constexpr auto DMAC_CTRLB0_SRC_INCR_Msk = hr::field_mask_literal< 0x400c404c, 24, 2 >();
      // The source address is incremented
      constexpr auto DMAC_CTRLB0_SRC_INCR_INCREMENTING = hr::field_value_literal< 0x400c404c, 24, 2 >( 0 );
      // The source address is decremented
      constexpr auto DMAC_CTRLB0_SRC_INCR_DECREMENTING = hr::field_value_literal< 0x400c404c, 24, 2 >( 1 );
      // The source address remains unchanged
      constexpr auto DMAC_CTRLB0_SRC_INCR_FIXED = hr::field_value_literal< 0x400c404c, 24, 2 >( 2 );
   // Incrementing, Decrementing or Fixed Address for the Destination
   constexpr auto DMAC_CTRLB0_DST_INCR_Msk = hr::field_mask_literal< 0x400c404c, 28, 2 >();
      // The destination address is incremented
      constexpr auto DMAC_CTRLB0_DST_INCR_INCREMENTING = hr::field_value_literal< 0x400c404c, 28, 2 >( 0 );
      // The destination address is decremented
      constexpr auto DMAC_CTRLB0_DST_INCR_DECREMENTING = hr::field_value_literal< 0x400c404c, 28, 2 >( 1 );
      // The destination address remains unchanged
      constexpr auto DMAC_CTRLB0_DST_INCR_FIXED = hr::field_value_literal< 0x400c404c, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLB0_IEN = hr::field_mask_literal< 0x400c404c, 30, 1 >();

// CFG0
   // Source with Peripheral identifier
   constexpr auto DMAC_CFG0_SRC_PER_Msk = hr::field_mask_literal< 0x400c4050, 0, 4 >();
   // Destination with Peripheral identifier
   constexpr auto DMAC_CFG0_DST_PER_Msk = hr::field_mask_literal< 0x400c4050, 4, 4 >();
   // Software or Hardware Selection for the Source
   constexpr auto DMAC_CFG0_SRC_H2SEL = hr::field_mask_literal< 0x400c4050, 9, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG0_SRC_H2SEL_SW = hr::field_value_literal< 0x400c4050, 9, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG0_SRC_H2SEL_HW = hr::field_value_literal< 0x400c4050, 9, 1 >( 1 );
   // Software or Hardware Selection for the Destination
   constexpr auto DMAC_CFG0_DST_H2SEL = hr::field_mask_literal< 0x400c4050, 13, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG0_DST_H2SEL_SW = hr::field_value_literal< 0x400c4050, 13, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG0_DST_H2SEL_HW = hr::field_value_literal< 0x400c4050, 13, 1 >( 1 );
   // Stop On Done
   constexpr auto DMAC_CFG0_SOD = hr::field_mask_literal< 0x400c4050, 16, 1 >();
      // STOP ON DONE disabled, the descriptor fetch operation ignores DONE Field of CTRLA register.
      constexpr auto DMAC_CFG0_SOD_DISABLE = hr::field_value_literal< 0x400c4050, 16, 1 >( 0 );
      // STOP ON DONE activated, the DMAC module is automatically disabled if DONE FIELD is set to 1.
      constexpr auto DMAC_CFG0_SOD_ENABLE = hr::field_value_literal< 0x400c4050, 16, 1 >( 1 );
   // Interface Lock
   constexpr auto DMAC_CFG0_LOCK_IF = hr::field_mask_literal< 0x400c4050, 20, 1 >();
      // Interface Lock capability is disabled
      constexpr auto DMAC_CFG0_LOCK_IF_DISABLE = hr::field_value_literal< 0x400c4050, 20, 1 >( 0 );
      // Interface Lock capability is enabled
      constexpr auto DMAC_CFG0_LOCK_IF_ENABLE = hr::field_value_literal< 0x400c4050, 20, 1 >( 1 );
   // Bus Lock
   constexpr auto DMAC_CFG0_LOCK_B = hr::field_mask_literal< 0x400c4050, 21, 1 >();
      // AHB Bus Locking capability is disabled.
      constexpr auto DMAC_CFG0_LOCK_B_DISABLE = hr::field_value_literal< 0x400c4050, 21, 1 >( 0 );
   // Master Interface Arbiter Lock
   constexpr auto DMAC_CFG0_LOCK_IF_L = hr::field_mask_literal< 0x400c4050, 22, 1 >();
      // The Master Interface Arbiter is locked by the channel x for a chunk transfer.
      constexpr auto DMAC_CFG0_LOCK_IF_L_CHUNK = hr::field_value_literal< 0x400c4050, 22, 1 >( 0 );
      // The Master Interface Arbiter is locked by the channel x for a buffer transfer.
      constexpr auto DMAC_CFG0_LOCK_IF_L_BUFFER = hr::field_value_literal< 0x400c4050, 22, 1 >( 1 );
   // AHB Protection
   constexpr auto DMAC_CFG0_AHB_PROT_Msk = hr::field_mask_literal< 0x400c4050, 24, 3 >();
   // FIFO Configuration
   constexpr auto DMAC_CFG0_FIFOCFG_Msk = hr::field_mask_literal< 0x400c4050, 28, 2 >();
      // The largest defined length AHB burst is performed on the destination AHB interface.
      constexpr auto DMAC_CFG0_FIFOCFG_ALAP_CFG = hr::field_value_literal< 0x400c4050, 28, 2 >( 0 );
      // When half FIFO size is available/filled, a source/destination request is serviced.
      constexpr auto DMAC_CFG0_FIFOCFG_HALF_CFG = hr::field_value_literal< 0x400c4050, 28, 2 >( 1 );
      // When there is enough space/data available to perform a single AHB access, then the request is serviced.
      constexpr auto DMAC_CFG0_FIFOCFG_ASAP_CFG = hr::field_value_literal< 0x400c4050, 28, 2 >( 2 );

// SADDR1
   // Channel x Source Address
   constexpr auto DMAC_SADDR1_SADDR_Msk = hr::field_mask_literal< 0x400c4064, 0, 32 >();

// DADDR1
   // Channel x Destination Address
   constexpr auto DMAC_DADDR1_DADDR_Msk = hr::field_mask_literal< 0x400c4068, 0, 32 >();

// DSCR1
   // Buffer Transfer Descriptor Address
   constexpr auto DMAC_DSCR1_DSCR_Msk = hr::field_mask_literal< 0x400c406c, 2, 30 >();

// CTRLA1
   // Buffer Transfer Size
   constexpr auto DMAC_CTRLA1_BTSIZE_Msk = hr::field_mask_literal< 0x400c4070, 0, 16 >();
   // Source Chunk Transfer Size.
   constexpr auto DMAC_CTRLA1_SCSIZE_Msk = hr::field_mask_literal< 0x400c4070, 16, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_1 = hr::field_value_literal< 0x400c4070, 16, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_4 = hr::field_value_literal< 0x400c4070, 16, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_8 = hr::field_value_literal< 0x400c4070, 16, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_16 = hr::field_value_literal< 0x400c4070, 16, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_32 = hr::field_value_literal< 0x400c4070, 16, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_64 = hr::field_value_literal< 0x400c4070, 16, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_128 = hr::field_value_literal< 0x400c4070, 16, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA1_SCSIZE_CHK_256 = hr::field_value_literal< 0x400c4070, 16, 3 >( 7 );
   // Destination Chunk Transfer Size
   constexpr auto DMAC_CTRLA1_DCSIZE_Msk = hr::field_mask_literal< 0x400c4070, 20, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_1 = hr::field_value_literal< 0x400c4070, 20, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_4 = hr::field_value_literal< 0x400c4070, 20, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_8 = hr::field_value_literal< 0x400c4070, 20, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_16 = hr::field_value_literal< 0x400c4070, 20, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_32 = hr::field_value_literal< 0x400c4070, 20, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_64 = hr::field_value_literal< 0x400c4070, 20, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_128 = hr::field_value_literal< 0x400c4070, 20, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA1_DCSIZE_CHK_256 = hr::field_value_literal< 0x400c4070, 20, 3 >( 7 );
   // Transfer Width for the Source
   constexpr auto DMAC_CTRLA1_SRC_WIDTH_Msk = hr::field_mask_literal< 0x400c4070, 24, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA1_SRC_WIDTH_BYTE = hr::field_value_literal< 0x400c4070, 24, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA1_SRC_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4070, 24, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA1_SRC_WIDTH_WORD = hr::field_value_literal< 0x400c4070, 24, 2 >( 2 );
   // Transfer Width for the Destination
   constexpr auto DMAC_CTRLA1_DST_WIDTH_Msk = hr::field_mask_literal< 0x400c4070, 28, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA1_DST_WIDTH_BYTE = hr::field_value_literal< 0x400c4070, 28, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA1_DST_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4070, 28, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA1_DST_WIDTH_WORD = hr::field_value_literal< 0x400c4070, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLA1_DONE = hr::field_mask_literal< 0x400c4070, 31, 1 >();

// CTRLB1
   // Source Address Descriptor
   constexpr auto DMAC_CTRLB1_SRC_DSCR = hr::field_mask_literal< 0x400c4074, 16, 1 >();
      // Source address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB1_SRC_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c4074, 16, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the source.
      constexpr auto DMAC_CTRLB1_SRC_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c4074, 16, 1 >( 1 );
   // Destination Address Descriptor
   constexpr auto DMAC_CTRLB1_DST_DSCR = hr::field_mask_literal< 0x400c4074, 20, 1 >();
      // Destination address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB1_DST_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c4074, 20, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the destination.
      constexpr auto DMAC_CTRLB1_DST_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c4074, 20, 1 >( 1 );
   // Flow Control
   constexpr auto DMAC_CTRLB1_FC_Msk = hr::field_mask_literal< 0x400c4074, 21, 3 >();
      // Memory-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB1_FC_MEM2MEM_DMA_FC = hr::field_value_literal< 0x400c4074, 21, 3 >( 0 );
      // Memory-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB1_FC_MEM2PER_DMA_FC = hr::field_value_literal< 0x400c4074, 21, 3 >( 1 );
      // Peripheral-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB1_FC_PER2MEM_DMA_FC = hr::field_value_literal< 0x400c4074, 21, 3 >( 2 );
      // Peripheral-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB1_FC_PER2PER_DMA_FC = hr::field_value_literal< 0x400c4074, 21, 3 >( 3 );
   // Incrementing, Decrementing or Fixed Address for the Source
   constexpr auto DMAC_CTRLB1_SRC_INCR_Msk = hr::field_mask_literal< 0x400c4074, 24, 2 >();
      // The source address is incremented
      constexpr auto DMAC_CTRLB1_SRC_INCR_INCREMENTING = hr::field_value_literal< 0x400c4074, 24, 2 >( 0 );
      // The source address is decremented
      constexpr auto DMAC_CTRLB1_SRC_INCR_DECREMENTING = hr::field_value_literal< 0x400c4074, 24, 2 >( 1 );
      // The source address remains unchanged
      constexpr auto DMAC_CTRLB1_SRC_INCR_FIXED = hr::field_value_literal< 0x400c4074, 24, 2 >( 2 );
   // Incrementing, Decrementing or Fixed Address for the Destination
   constexpr auto DMAC_CTRLB1_DST_INCR_Msk = hr::field_mask_literal< 0x400c4074, 28, 2 >();
      // The destination address is incremented
      constexpr auto DMAC_CTRLB1_DST_INCR_INCREMENTING = hr::field_value_literal< 0x400c4074, 28, 2 >( 0 );
      // The destination address is decremented
      constexpr auto DMAC_CTRLB1_DST_INCR_DECREMENTING = hr::field_value_literal< 0x400c4074, 28, 2 >( 1 );
      // The destination address remains unchanged
      constexpr auto DMAC_CTRLB1_DST_INCR_FIXED = hr::field_value_literal< 0x400c4074, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLB1_IEN = hr::field_mask_literal< 0x400c4074, 30, 1 >();

// CFG1
   // Source with Peripheral identifier
   constexpr auto DMAC_CFG1_SRC_PER_Msk = hr::field_mask_literal< 0x400c4078, 0, 4 >();
   // Destination with Peripheral identifier
   constexpr auto DMAC_CFG1_DST_PER_Msk = hr::field_mask_literal< 0x400c4078, 4, 4 >();
   // Software or Hardware Selection for the Source
   constexpr auto DMAC_CFG1_SRC_H2SEL = hr::field_mask_literal< 0x400c4078, 9, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG1_SRC_H2SEL_SW = hr::field_value_literal< 0x400c4078, 9, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG1_SRC_H2SEL_HW = hr::field_value_literal< 0x400c4078, 9, 1 >( 1 );
   // Software or Hardware Selection for the Destination
   constexpr auto DMAC_CFG1_DST_H2SEL = hr::field_mask_literal< 0x400c4078, 13, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG1_DST_H2SEL_SW = hr::field_value_literal< 0x400c4078, 13, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG1_DST_H2SEL_HW = hr::field_value_literal< 0x400c4078, 13, 1 >( 1 );
   // Stop On Done
   constexpr auto DMAC_CFG1_SOD = hr::field_mask_literal< 0x400c4078, 16, 1 >();
      // STOP ON DONE disabled, the descriptor fetch operation ignores DONE Field of CTRLA register.
      constexpr auto DMAC_CFG1_SOD_DISABLE = hr::field_value_literal< 0x400c4078, 16, 1 >( 0 );
      // STOP ON DONE activated, the DMAC module is automatically disabled if DONE FIELD is set to 1.
      constexpr auto DMAC_CFG1_SOD_ENABLE = hr::field_value_literal< 0x400c4078, 16, 1 >( 1 );
   // Interface Lock
   constexpr auto DMAC_CFG1_LOCK_IF = hr::field_mask_literal< 0x400c4078, 20, 1 >();
      // Interface Lock capability is disabled
      constexpr auto DMAC_CFG1_LOCK_IF_DISABLE = hr::field_value_literal< 0x400c4078, 20, 1 >( 0 );
      // Interface Lock capability is enabled
      constexpr auto DMAC_CFG1_LOCK_IF_ENABLE = hr::field_value_literal< 0x400c4078, 20, 1 >( 1 );
   // Bus Lock
   constexpr auto DMAC_CFG1_LOCK_B = hr::field_mask_literal< 0x400c4078, 21, 1 >();
      // AHB Bus Locking capability is disabled.
      constexpr auto DMAC_CFG1_LOCK_B_DISABLE = hr::field_value_literal< 0x400c4078, 21, 1 >( 0 );
   // Master Interface Arbiter Lock
   constexpr auto DMAC_CFG1_LOCK_IF_L = hr::field_mask_literal< 0x400c4078, 22, 1 >();
      // The Master Interface Arbiter is locked by the channel x for a chunk transfer.
      constexpr auto DMAC_CFG1_LOCK_IF_L_CHUNK = hr::field_value_literal< 0x400c4078, 22, 1 >( 0 );
      // The Master Interface Arbiter is locked by the channel x for a buffer transfer.
      constexpr auto DMAC_CFG1_LOCK_IF_L_BUFFER = hr::field_value_literal< 0x400c4078, 22, 1 >( 1 );
   // AHB Protection
   constexpr auto DMAC_CFG1_AHB_PROT_Msk = hr::field_mask_literal< 0x400c4078, 24, 3 >();
   // FIFO Configuration
   constexpr auto DMAC_CFG1_FIFOCFG_Msk = hr::field_mask_literal< 0x400c4078, 28, 2 >();
      // The largest defined length AHB burst is performed on the destination AHB interface.
      constexpr auto DMAC_CFG1_FIFOCFG_ALAP_CFG = hr::field_value_literal< 0x400c4078, 28, 2 >( 0 );
      // When half FIFO size is available/filled, a source/destination request is serviced.
      constexpr auto DMAC_CFG1_FIFOCFG_HALF_CFG = hr::field_value_literal< 0x400c4078, 28, 2 >( 1 );
      // When there is enough space/data available to perform a single AHB access, then the request is serviced.
      constexpr auto DMAC_CFG1_FIFOCFG_ASAP_CFG = hr::field_value_literal< 0x400c4078, 28, 2 >( 2 );

// SADDR2
   // Channel x Source Address
   constexpr auto DMAC_SADDR2_SADDR_Msk = hr::field_mask_literal< 0x400c408c, 0, 32 >();

// DADDR2
   // Channel x Destination Address
   constexpr auto DMAC_DADDR2_DADDR_Msk = hr::field_mask_literal< 0x400c4090, 0, 32 >();

// DSCR2
   // Buffer Transfer Descriptor Address
   constexpr auto DMAC_DSCR2_DSCR_Msk = hr::field_mask_literal< 0x400c4094, 2, 30 >();

// CTRLA2
   // Buffer Transfer Size
   constexpr auto DMAC_CTRLA2_BTSIZE_Msk = hr::field_mask_literal< 0x400c4098, 0, 16 >();
   // Source Chunk Transfer Size.
   constexpr auto DMAC_CTRLA2_SCSIZE_Msk = hr::field_mask_literal< 0x400c4098, 16, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_1 = hr::field_value_literal< 0x400c4098, 16, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_4 = hr::field_value_literal< 0x400c4098, 16, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_8 = hr::field_value_literal< 0x400c4098, 16, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_16 = hr::field_value_literal< 0x400c4098, 16, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_32 = hr::field_value_literal< 0x400c4098, 16, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_64 = hr::field_value_literal< 0x400c4098, 16, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_128 = hr::field_value_literal< 0x400c4098, 16, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA2_SCSIZE_CHK_256 = hr::field_value_literal< 0x400c4098, 16, 3 >( 7 );
   // Destination Chunk Transfer Size
   constexpr auto DMAC_CTRLA2_DCSIZE_Msk = hr::field_mask_literal< 0x400c4098, 20, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_1 = hr::field_value_literal< 0x400c4098, 20, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_4 = hr::field_value_literal< 0x400c4098, 20, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_8 = hr::field_value_literal< 0x400c4098, 20, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_16 = hr::field_value_literal< 0x400c4098, 20, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_32 = hr::field_value_literal< 0x400c4098, 20, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_64 = hr::field_value_literal< 0x400c4098, 20, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_128 = hr::field_value_literal< 0x400c4098, 20, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA2_DCSIZE_CHK_256 = hr::field_value_literal< 0x400c4098, 20, 3 >( 7 );
   // Transfer Width for the Source
   constexpr auto DMAC_CTRLA2_SRC_WIDTH_Msk = hr::field_mask_literal< 0x400c4098, 24, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA2_SRC_WIDTH_BYTE = hr::field_value_literal< 0x400c4098, 24, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA2_SRC_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4098, 24, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA2_SRC_WIDTH_WORD = hr::field_value_literal< 0x400c4098, 24, 2 >( 2 );
   // Transfer Width for the Destination
   constexpr auto DMAC_CTRLA2_DST_WIDTH_Msk = hr::field_mask_literal< 0x400c4098, 28, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA2_DST_WIDTH_BYTE = hr::field_value_literal< 0x400c4098, 28, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA2_DST_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4098, 28, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA2_DST_WIDTH_WORD = hr::field_value_literal< 0x400c4098, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLA2_DONE = hr::field_mask_literal< 0x400c4098, 31, 1 >();

// CTRLB2
   // Source Address Descriptor
   constexpr auto DMAC_CTRLB2_SRC_DSCR = hr::field_mask_literal< 0x400c409c, 16, 1 >();
      // Source address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB2_SRC_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c409c, 16, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the source.
      constexpr auto DMAC_CTRLB2_SRC_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c409c, 16, 1 >( 1 );
   // Destination Address Descriptor
   constexpr auto DMAC_CTRLB2_DST_DSCR = hr::field_mask_literal< 0x400c409c, 20, 1 >();
      // Destination address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB2_DST_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c409c, 20, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the destination.
      constexpr auto DMAC_CTRLB2_DST_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c409c, 20, 1 >( 1 );
   // Flow Control
   constexpr auto DMAC_CTRLB2_FC_Msk = hr::field_mask_literal< 0x400c409c, 21, 3 >();
      // Memory-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB2_FC_MEM2MEM_DMA_FC = hr::field_value_literal< 0x400c409c, 21, 3 >( 0 );
      // Memory-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB2_FC_MEM2PER_DMA_FC = hr::field_value_literal< 0x400c409c, 21, 3 >( 1 );
      // Peripheral-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB2_FC_PER2MEM_DMA_FC = hr::field_value_literal< 0x400c409c, 21, 3 >( 2 );
      // Peripheral-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB2_FC_PER2PER_DMA_FC = hr::field_value_literal< 0x400c409c, 21, 3 >( 3 );
   // Incrementing, Decrementing or Fixed Address for the Source
   constexpr auto DMAC_CTRLB2_SRC_INCR_Msk = hr::field_mask_literal< 0x400c409c, 24, 2 >();
      // The source address is incremented
      constexpr auto DMAC_CTRLB2_SRC_INCR_INCREMENTING = hr::field_value_literal< 0x400c409c, 24, 2 >( 0 );
      // The source address is decremented
      constexpr auto DMAC_CTRLB2_SRC_INCR_DECREMENTING = hr::field_value_literal< 0x400c409c, 24, 2 >( 1 );
      // The source address remains unchanged
      constexpr auto DMAC_CTRLB2_SRC_INCR_FIXED = hr::field_value_literal< 0x400c409c, 24, 2 >( 2 );
   // Incrementing, Decrementing or Fixed Address for the Destination
   constexpr auto DMAC_CTRLB2_DST_INCR_Msk = hr::field_mask_literal< 0x400c409c, 28, 2 >();
      // The destination address is incremented
      constexpr auto DMAC_CTRLB2_DST_INCR_INCREMENTING = hr::field_value_literal< 0x400c409c, 28, 2 >( 0 );
      // The destination address is decremented
      constexpr auto DMAC_CTRLB2_DST_INCR_DECREMENTING = hr::field_value_literal< 0x400c409c, 28, 2 >( 1 );
      // The destination address remains unchanged
      constexpr auto DMAC_CTRLB2_DST_INCR_FIXED = hr::field_value_literal< 0x400c409c, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLB2_IEN = hr::field_mask_literal< 0x400c409c, 30, 1 >();

// CFG2
   // Source with Peripheral identifier
   constexpr auto DMAC_CFG2_SRC_PER_Msk = hr::field_mask_literal< 0x400c40a0, 0, 4 >();
   // Destination with Peripheral identifier
   constexpr auto DMAC_CFG2_DST_PER_Msk = hr::field_mask_literal< 0x400c40a0, 4, 4 >();
   // Software or Hardware Selection for the Source
   constexpr auto DMAC_CFG2_SRC_H2SEL = hr::field_mask_literal< 0x400c40a0, 9, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG2_SRC_H2SEL_SW = hr::field_value_literal< 0x400c40a0, 9, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG2_SRC_H2SEL_HW = hr::field_value_literal< 0x400c40a0, 9, 1 >( 1 );
   // Software or Hardware Selection for the Destination
   constexpr auto DMAC_CFG2_DST_H2SEL = hr::field_mask_literal< 0x400c40a0, 13, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG2_DST_H2SEL_SW = hr::field_value_literal< 0x400c40a0, 13, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG2_DST_H2SEL_HW = hr::field_value_literal< 0x400c40a0, 13, 1 >( 1 );
   // Stop On Done
   constexpr auto DMAC_CFG2_SOD = hr::field_mask_literal< 0x400c40a0, 16, 1 >();
      // STOP ON DONE disabled, the descriptor fetch operation ignores DONE Field of CTRLA register.
      constexpr auto DMAC_CFG2_SOD_DISABLE = hr::field_value_literal< 0x400c40a0, 16, 1 >( 0 );
      // STOP ON DONE activated, the DMAC module is automatically disabled if DONE FIELD is set to 1.
      constexpr auto DMAC_CFG2_SOD_ENABLE = hr::field_value_literal< 0x400c40a0, 16, 1 >( 1 );
   // Interface Lock
   constexpr auto DMAC_CFG2_LOCK_IF = hr::field_mask_literal< 0x400c40a0, 20, 1 >();
      // Interface Lock capability is disabled
      constexpr auto DMAC_CFG2_LOCK_IF_DISABLE = hr::field_value_literal< 0x400c40a0, 20, 1 >( 0 );
      // Interface Lock capability is enabled
      constexpr auto DMAC_CFG2_LOCK_IF_ENABLE = hr::field_value_literal< 0x400c40a0, 20, 1 >( 1 );
   // Bus Lock
   constexpr auto DMAC_CFG2_LOCK_B = hr::field_mask_literal< 0x400c40a0, 21, 1 >();
      // AHB Bus Locking capability is disabled.
      constexpr auto DMAC_CFG2_LOCK_B_DISABLE = hr::field_value_literal< 0x400c40a0, 21, 1 >( 0 );
   // Master Interface Arbiter Lock
   constexpr auto DMAC_CFG2_LOCK_IF_L = hr::field_mask_literal< 0x400c40a0, 22, 1 >();
      // The Master Interface Arbiter is locked by the channel x for a chunk transfer.
      constexpr auto DMAC_CFG2_LOCK_IF_L_CHUNK = hr::field_value_literal< 0x400c40a0, 22, 1 >( 0 );
      // The Master Interface Arbiter is locked by the channel x for a buffer transfer.
      constexpr auto DMAC_CFG2_LOCK_IF_L_BUFFER = hr::field_value_literal< 0x400c40a0, 22, 1 >( 1 );
   // AHB Protection
   constexpr auto DMAC_CFG2_AHB_PROT_Msk = hr::field_mask_literal< 0x400c40a0, 24, 3 >();
   // FIFO Configuration
   constexpr auto DMAC_CFG2_FIFOCFG_Msk = hr::field_mask_literal< 0x400c40a0, 28, 2 >();
      // The largest defined length AHB burst is performed on the destination AHB interface.
      constexpr auto DMAC_CFG2_FIFOCFG_ALAP_CFG = hr::field_value_literal< 0x400c40a0, 28, 2 >( 0 );
      // When half FIFO size is available/filled, a source/destination request is serviced.
      constexpr auto DMAC_CFG2_FIFOCFG_HALF_CFG = hr::field_value_literal< 0x400c40a0, 28, 2 >( 1 );
      // When there is enough space/data available to perform a single AHB access, then the request is serviced.
      constexpr auto DMAC_CFG2_FIFOCFG_ASAP_CFG = hr::field_value_literal< 0x400c40a0, 28, 2 >( 2 );

// SADDR3
   // Channel x Source Address
   constexpr auto DMAC_SADDR3_SADDR_Msk = hr::field_mask_literal< 0x400c40b4, 0, 32 >();

// DADDR3
   // Channel x Destination Address
   constexpr auto DMAC_DADDR3_DADDR_Msk = hr::field_mask_literal< 0x400c40b8, 0, 32 >();

// DSCR3
   // Buffer Transfer Descriptor Address
   constexpr auto DMAC_DSCR3_DSCR_Msk = hr::field_mask_literal< 0x400c40bc, 2, 30 >();

// CTRLA3
   // Buffer Transfer Size
   constexpr auto DMAC_CTRLA3_BTSIZE_Msk = hr::field_mask_literal< 0x400c40c0, 0, 16 >();
   // Source Chunk Transfer Size.
   constexpr auto DMAC_CTRLA3_SCSIZE_Msk = hr::field_mask_literal< 0x400c40c0, 16, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_1 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_4 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_8 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_16 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_32 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_64 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_128 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA3_SCSIZE_CHK_256 = hr::field_value_literal< 0x400c40c0, 16, 3 >( 7 );
   // Destination Chunk Transfer Size
   constexpr auto DMAC_CTRLA3_DCSIZE_Msk = hr::field_mask_literal< 0x400c40c0, 20, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_1 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_4 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_8 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_16 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_32 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_64 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_128 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA3_DCSIZE_CHK_256 = hr::field_value_literal< 0x400c40c0, 20, 3 >( 7 );
   // Transfer Width for the Source
   constexpr auto DMAC_CTRLA3_SRC_WIDTH_Msk = hr::field_mask_literal< 0x400c40c0, 24, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA3_SRC_WIDTH_BYTE = hr::field_value_literal< 0x400c40c0, 24, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA3_SRC_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c40c0, 24, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA3_SRC_WIDTH_WORD = hr::field_value_literal< 0x400c40c0, 24, 2 >( 2 );
   // Transfer Width for the Destination
   constexpr auto DMAC_CTRLA3_DST_WIDTH_Msk = hr::field_mask_literal< 0x400c40c0, 28, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA3_DST_WIDTH_BYTE = hr::field_value_literal< 0x400c40c0, 28, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA3_DST_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c40c0, 28, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA3_DST_WIDTH_WORD = hr::field_value_literal< 0x400c40c0, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLA3_DONE = hr::field_mask_literal< 0x400c40c0, 31, 1 >();

// CTRLB3
   // Source Address Descriptor
   constexpr auto DMAC_CTRLB3_SRC_DSCR = hr::field_mask_literal< 0x400c40c4, 16, 1 >();
      // Source address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB3_SRC_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c40c4, 16, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the source.
      constexpr auto DMAC_CTRLB3_SRC_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c40c4, 16, 1 >( 1 );
   // Destination Address Descriptor
   constexpr auto DMAC_CTRLB3_DST_DSCR = hr::field_mask_literal< 0x400c40c4, 20, 1 >();
      // Destination address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB3_DST_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c40c4, 20, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the destination.
      constexpr auto DMAC_CTRLB3_DST_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c40c4, 20, 1 >( 1 );
   // Flow Control
   constexpr auto DMAC_CTRLB3_FC_Msk = hr::field_mask_literal< 0x400c40c4, 21, 3 >();
      // Memory-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB3_FC_MEM2MEM_DMA_FC = hr::field_value_literal< 0x400c40c4, 21, 3 >( 0 );
      // Memory-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB3_FC_MEM2PER_DMA_FC = hr::field_value_literal< 0x400c40c4, 21, 3 >( 1 );
      // Peripheral-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB3_FC_PER2MEM_DMA_FC = hr::field_value_literal< 0x400c40c4, 21, 3 >( 2 );
      // Peripheral-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB3_FC_PER2PER_DMA_FC = hr::field_value_literal< 0x400c40c4, 21, 3 >( 3 );
   // Incrementing, Decrementing or Fixed Address for the Source
   constexpr auto DMAC_CTRLB3_SRC_INCR_Msk = hr::field_mask_literal< 0x400c40c4, 24, 2 >();
      // The source address is incremented
      constexpr auto DMAC_CTRLB3_SRC_INCR_INCREMENTING = hr::field_value_literal< 0x400c40c4, 24, 2 >( 0 );
      // The source address is decremented
      constexpr auto DMAC_CTRLB3_SRC_INCR_DECREMENTING = hr::field_value_literal< 0x400c40c4, 24, 2 >( 1 );
      // The source address remains unchanged
      constexpr auto DMAC_CTRLB3_SRC_INCR_FIXED = hr::field_value_literal< 0x400c40c4, 24, 2 >( 2 );
   // Incrementing, Decrementing or Fixed Address for the Destination
   constexpr auto DMAC_CTRLB3_DST_INCR_Msk = hr::field_mask_literal< 0x400c40c4, 28, 2 >();
      // The destination address is incremented
      constexpr auto DMAC_CTRLB3_DST_INCR_INCREMENTING = hr::field_value_literal< 0x400c40c4, 28, 2 >( 0 );
      // The destination address is decremented
      constexpr auto DMAC_CTRLB3_DST_INCR_DECREMENTING = hr::field_value_literal< 0x400c40c4, 28, 2 >( 1 );
      // The destination address remains unchanged
      constexpr auto DMAC_CTRLB3_DST_INCR_FIXED = hr::field_value_literal< 0x400c40c4, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLB3_IEN = hr::field_mask_literal< 0x400c40c4, 30, 1 >();

// CFG3
   // Source with Peripheral identifier
   constexpr auto DMAC_CFG3_SRC_PER_Msk = hr::field_mask_literal< 0x400c40c8, 0, 4 >();
   // Destination with Peripheral identifier
   constexpr auto DMAC_CFG3_DST_PER_Msk = hr::field_mask_literal< 0x400c40c8, 4, 4 >();
   // Software or Hardware Selection for the Source
   constexpr auto DMAC_CFG3_SRC_H2SEL = hr::field_mask_literal< 0x400c40c8, 9, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG3_SRC_H2SEL_SW = hr::field_value_literal< 0x400c40c8, 9, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG3_SRC_H2SEL_HW = hr::field_value_literal< 0x400c40c8, 9, 1 >( 1 );
   // Software or Hardware Selection for the Destination
   constexpr auto DMAC_CFG3_DST_H2SEL = hr::field_mask_literal< 0x400c40c8, 13, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG3_DST_H2SEL_SW = hr::field_value_literal< 0x400c40c8, 13, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG3_DST_H2SEL_HW = hr::field_value_literal< 0x400c40c8, 13, 1 >( 1 );
   // Stop On Done
   constexpr auto DMAC_CFG3_SOD = hr::field_mask_literal< 0x400c40c8, 16, 1 >();
      // STOP ON DONE disabled, the descriptor fetch operation ignores DONE Field of CTRLA register.
      constexpr auto DMAC_CFG3_SOD_DISABLE = hr::field_value_literal< 0x400c40c8, 16, 1 >( 0 );
      // STOP ON DONE activated, the DMAC module is automatically disabled if DONE FIELD is set to 1.
      constexpr auto DMAC_CFG3_SOD_ENABLE = hr::field_value_literal< 0x400c40c8, 16, 1 >( 1 );
   // Interface Lock
   constexpr auto DMAC_CFG3_LOCK_IF = hr::field_mask_literal< 0x400c40c8, 20, 1 >();
      // Interface Lock capability is disabled
      constexpr auto DMAC_CFG3_LOCK_IF_DISABLE = hr::field_value_literal< 0x400c40c8, 20, 1 >( 0 );
      // Interface Lock capability is enabled
      constexpr auto DMAC_CFG3_LOCK_IF_ENABLE = hr::field_value_literal< 0x400c40c8, 20, 1 >( 1 );
   // Bus Lock
   constexpr auto DMAC_CFG3_LOCK_B = hr::field_mask_literal< 0x400c40c8, 21, 1 >();
      // AHB Bus Locking capability is disabled.
      constexpr auto DMAC_CFG3_LOCK_B_DISABLE = hr::field_value_literal< 0x400c40c8, 21, 1 >( 0 );
   // Master Interface Arbiter Lock
   constexpr auto DMAC_CFG3_LOCK_IF_L = hr::field_mask_literal< 0x400c40c8, 22, 1 >();
      // The Master Interface Arbiter is locked by the channel x for a chunk transfer.
      constexpr auto DMAC_CFG3_LOCK_IF_L_CHUNK = hr::field_value_literal< 0x400c40c8, 22, 1 >( 0 );
      // The Master Interface Arbiter is locked by the channel x for a buffer transfer.
      constexpr auto DMAC_CFG3_LOCK_IF_L_BUFFER = hr::field_value_literal< 0x400c40c8, 22, 1 >( 1 );
   // AHB Protection
   constexpr auto DMAC_CFG3_AHB_PROT_Msk = hr::field_mask_literal< 0x400c40c8, 24, 3 >();
   // FIFO Configuration
   constexpr auto DMAC_CFG3_FIFOCFG_Msk = hr::field_mask_literal< 0x400c40c8, 28, 2 >();
      // The largest defined length AHB burst is performed on the destination AHB interface.
      constexpr auto DMAC_CFG3_FIFOCFG_ALAP_CFG = hr::field_value_literal< 0x400c40c8, 28, 2 >( 0 );
      // When half FIFO size is available/filled, a source/destination request is serviced.
      constexpr auto DMAC_CFG3_FIFOCFG_HALF_CFG = hr::field_value_literal< 0x400c40c8, 28, 2 >( 1 );
      // When there is enough space/data available to perform a single AHB access, then the request is serviced.
      constexpr auto DMAC_CFG3_FIFOCFG_ASAP_CFG = hr::field_value_literal< 0x400c40c8, 28, 2 >( 2 );

// SADDR4
   // Channel x Source Address
   constexpr auto DMAC_SADDR4_SADDR_Msk = hr::field_mask_literal< 0x400c40dc, 0, 32 >();

// DADDR4
   // Channel x Destination Address
   constexpr auto DMAC_DADDR4_DADDR_Msk = hr::field_mask_literal< 0x400c40e0, 0, 32 >();

// DSCR4
   // Buffer Transfer Descriptor Address
   constexpr auto DMAC_DSCR4_DSCR_Msk = hr::field_mask_literal< 0x400c40e4, 2, 30 >();

// CTRLA4
   // Buffer Transfer Size
   constexpr auto DMAC_CTRLA4_BTSIZE_Msk = hr::field_mask_literal< 0x400c40e8, 0, 16 >();
   // Source Chunk Transfer Size.
   constexpr auto DMAC_CTRLA4_SCSIZE_Msk = hr::field_mask_literal< 0x400c40e8, 16, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_1 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_4 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_8 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_16 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_32 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_64 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_128 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA4_SCSIZE_CHK_256 = hr::field_value_literal< 0x400c40e8, 16, 3 >( 7 );
   // Destination Chunk Transfer Size
   constexpr auto DMAC_CTRLA4_DCSIZE_Msk = hr::field_mask_literal< 0x400c40e8, 20, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_1 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_4 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_8 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_16 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_32 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_64 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_128 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA4_DCSIZE_CHK_256 = hr::field_value_literal< 0x400c40e8, 20, 3 >( 7 );
   // Transfer Width for the Source
   constexpr auto DMAC_CTRLA4_SRC_WIDTH_Msk = hr::field_mask_literal< 0x400c40e8, 24, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA4_SRC_WIDTH_BYTE = hr::field_value_literal< 0x400c40e8, 24, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA4_SRC_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c40e8, 24, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA4_SRC_WIDTH_WORD = hr::field_value_literal< 0x400c40e8, 24, 2 >( 2 );
   // Transfer Width for the Destination
   constexpr auto DMAC_CTRLA4_DST_WIDTH_Msk = hr::field_mask_literal< 0x400c40e8, 28, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA4_DST_WIDTH_BYTE = hr::field_value_literal< 0x400c40e8, 28, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA4_DST_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c40e8, 28, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA4_DST_WIDTH_WORD = hr::field_value_literal< 0x400c40e8, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLA4_DONE = hr::field_mask_literal< 0x400c40e8, 31, 1 >();

// CTRLB4
   // Source Address Descriptor
   constexpr auto DMAC_CTRLB4_SRC_DSCR = hr::field_mask_literal< 0x400c40ec, 16, 1 >();
      // Source address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB4_SRC_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c40ec, 16, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the source.
      constexpr auto DMAC_CTRLB4_SRC_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c40ec, 16, 1 >( 1 );
   // Destination Address Descriptor
   constexpr auto DMAC_CTRLB4_DST_DSCR = hr::field_mask_literal< 0x400c40ec, 20, 1 >();
      // Destination address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB4_DST_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c40ec, 20, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the destination.
      constexpr auto DMAC_CTRLB4_DST_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c40ec, 20, 1 >( 1 );
   // Flow Control
   constexpr auto DMAC_CTRLB4_FC_Msk = hr::field_mask_literal< 0x400c40ec, 21, 3 >();
      // Memory-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB4_FC_MEM2MEM_DMA_FC = hr::field_value_literal< 0x400c40ec, 21, 3 >( 0 );
      // Memory-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB4_FC_MEM2PER_DMA_FC = hr::field_value_literal< 0x400c40ec, 21, 3 >( 1 );
      // Peripheral-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB4_FC_PER2MEM_DMA_FC = hr::field_value_literal< 0x400c40ec, 21, 3 >( 2 );
      // Peripheral-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB4_FC_PER2PER_DMA_FC = hr::field_value_literal< 0x400c40ec, 21, 3 >( 3 );
   // Incrementing, Decrementing or Fixed Address for the Source
   constexpr auto DMAC_CTRLB4_SRC_INCR_Msk = hr::field_mask_literal< 0x400c40ec, 24, 2 >();
      // The source address is incremented
      constexpr auto DMAC_CTRLB4_SRC_INCR_INCREMENTING = hr::field_value_literal< 0x400c40ec, 24, 2 >( 0 );
      // The source address is decremented
      constexpr auto DMAC_CTRLB4_SRC_INCR_DECREMENTING = hr::field_value_literal< 0x400c40ec, 24, 2 >( 1 );
      // The source address remains unchanged
      constexpr auto DMAC_CTRLB4_SRC_INCR_FIXED = hr::field_value_literal< 0x400c40ec, 24, 2 >( 2 );
   // Incrementing, Decrementing or Fixed Address for the Destination
   constexpr auto DMAC_CTRLB4_DST_INCR_Msk = hr::field_mask_literal< 0x400c40ec, 28, 2 >();
      // The destination address is incremented
      constexpr auto DMAC_CTRLB4_DST_INCR_INCREMENTING = hr::field_value_literal< 0x400c40ec, 28, 2 >( 0 );
      // The destination address is decremented
      constexpr auto DMAC_CTRLB4_DST_INCR_DECREMENTING = hr::field_value_literal< 0x400c40ec, 28, 2 >( 1 );
      // The destination address remains unchanged
      constexpr auto DMAC_CTRLB4_DST_INCR_FIXED = hr::field_value_literal< 0x400c40ec, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLB4_IEN = hr::field_mask_literal< 0x400c40ec, 30, 1 >();

// CFG4
   // Source with Peripheral identifier
   constexpr auto DMAC_CFG4_SRC_PER_Msk = hr::field_mask_literal< 0x400c40f0, 0, 4 >();
   // Destination with Peripheral identifier
   constexpr auto DMAC_CFG4_DST_PER_Msk = hr::field_mask_literal< 0x400c40f0, 4, 4 >();
   // Software or Hardware Selection for the Source
   constexpr auto DMAC_CFG4_SRC_H2SEL = hr::field_mask_literal< 0x400c40f0, 9, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG4_SRC_H2SEL_SW = hr::field_value_literal< 0x400c40f0, 9, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG4_SRC_H2SEL_HW = hr::field_value_literal< 0x400c40f0, 9, 1 >( 1 );
   // Software or Hardware Selection for the Destination
   constexpr auto DMAC_CFG4_DST_H2SEL = hr::field_mask_literal< 0x400c40f0, 13, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG4_DST_H2SEL_SW = hr::field_value_literal< 0x400c40f0, 13, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG4_DST_H2SEL_HW = hr::field_value_literal< 0x400c40f0, 13, 1 >( 1 );
   // Stop On Done
   constexpr auto DMAC_CFG4_SOD = hr::field_mask_literal< 0x400c40f0, 16, 1 >();
      // STOP ON DONE disabled, the descriptor fetch operation ignores DONE Field of CTRLA register.
      constexpr auto DMAC_CFG4_SOD_DISABLE = hr::field_value_literal< 0x400c40f0, 16, 1 >( 0 );
      // STOP ON DONE activated, the DMAC module is automatically disabled if DONE FIELD is set to 1.
      constexpr auto DMAC_CFG4_SOD_ENABLE = hr::field_value_literal< 0x400c40f0, 16, 1 >( 1 );
   // Interface Lock
   constexpr auto DMAC_CFG4_LOCK_IF = hr::field_mask_literal< 0x400c40f0, 20, 1 >();
      // Interface Lock capability is disabled
      constexpr auto DMAC_CFG4_LOCK_IF_DISABLE = hr::field_value_literal< 0x400c40f0, 20, 1 >( 0 );
      // Interface Lock capability is enabled
      constexpr auto DMAC_CFG4_LOCK_IF_ENABLE = hr::field_value_literal< 0x400c40f0, 20, 1 >( 1 );
   // Bus Lock
   constexpr auto DMAC_CFG4_LOCK_B = hr::field_mask_literal< 0x400c40f0, 21, 1 >();
      // AHB Bus Locking capability is disabled.
      constexpr auto DMAC_CFG4_LOCK_B_DISABLE = hr::field_value_literal< 0x400c40f0, 21, 1 >( 0 );
   // Master Interface Arbiter Lock
   constexpr auto DMAC_CFG4_LOCK_IF_L = hr::field_mask_literal< 0x400c40f0, 22, 1 >();
      // The Master Interface Arbiter is locked by the channel x for a chunk transfer.
      constexpr auto DMAC_CFG4_LOCK_IF_L_CHUNK = hr::field_value_literal< 0x400c40f0, 22, 1 >( 0 );
      // The Master Interface Arbiter is locked by the channel x for a buffer transfer.
      constexpr auto DMAC_CFG4_LOCK_IF_L_BUFFER = hr::field_value_literal< 0x400c40f0, 22, 1 >( 1 );
   // AHB Protection
   constexpr auto DMAC_CFG4_AHB_PROT_Msk = hr::field_mask_literal< 0x400c40f0, 24, 3 >();
   // FIFO Configuration
   constexpr auto DMAC_CFG4_FIFOCFG_Msk = hr::field_mask_literal< 0x400c40f0, 28, 2 >();
      // The largest defined length AHB burst is performed on the destination AHB interface.
      constexpr auto DMAC_CFG4_FIFOCFG_ALAP_CFG = hr::field_value_literal< 0x400c40f0, 28, 2 >( 0 );
      // When half FIFO size is available/filled, a source/destination request is serviced.
      constexpr auto DMAC_CFG4_FIFOCFG_HALF_CFG = hr::field_value_literal< 0x400c40f0, 28, 2 >( 1 );
      // When there is enough space/data available to perform a single AHB access, then the request is serviced.
      constexpr auto DMAC_CFG4_FIFOCFG_ASAP_CFG = hr::field_value_literal< 0x400c40f0, 28, 2 >( 2 );

// SADDR5
   // Channel x Source Address
   constexpr auto DMAC_SADDR5_SADDR_Msk = hr::field_mask_literal< 0x400c4104, 0, 32 >();

// DADDR5
   // Channel x Destination Address
   constexpr auto DMAC_DADDR5_DADDR_Msk = hr::field_mask_literal< 0x400c4108, 0, 32 >();

// DSCR5
   // Buffer Transfer Descriptor Address
   constexpr auto DMAC_DSCR5_DSCR_Msk = hr::field_mask_literal< 0x400c410c, 2, 30 >();

// CTRLA5
   // Buffer Transfer Size
   constexpr auto DMAC_CTRLA5_BTSIZE_Msk = hr::field_mask_literal< 0x400c4110, 0, 16 >();
   // Source Chunk Transfer Size.
   constexpr auto DMAC_CTRLA5_SCSIZE_Msk = hr::field_mask_literal< 0x400c4110, 16, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_1 = hr::field_value_literal< 0x400c4110, 16, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_4 = hr::field_value_literal< 0x400c4110, 16, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_8 = hr::field_value_literal< 0x400c4110, 16, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_16 = hr::field_value_literal< 0x400c4110, 16, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_32 = hr::field_value_literal< 0x400c4110, 16, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_64 = hr::field_value_literal< 0x400c4110, 16, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_128 = hr::field_value_literal< 0x400c4110, 16, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA5_SCSIZE_CHK_256 = hr::field_value_literal< 0x400c4110, 16, 3 >( 7 );
   // Destination Chunk Transfer Size
   constexpr auto DMAC_CTRLA5_DCSIZE_Msk = hr::field_mask_literal< 0x400c4110, 20, 3 >();
      // 1 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_1 = hr::field_value_literal< 0x400c4110, 20, 3 >( 0 );
      // 4 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_4 = hr::field_value_literal< 0x400c4110, 20, 3 >( 1 );
      // 8 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_8 = hr::field_value_literal< 0x400c4110, 20, 3 >( 2 );
      // 16 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_16 = hr::field_value_literal< 0x400c4110, 20, 3 >( 3 );
      // 32 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_32 = hr::field_value_literal< 0x400c4110, 20, 3 >( 4 );
      // 64 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_64 = hr::field_value_literal< 0x400c4110, 20, 3 >( 5 );
      // 128 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_128 = hr::field_value_literal< 0x400c4110, 20, 3 >( 6 );
      // 256 data transferred
      constexpr auto DMAC_CTRLA5_DCSIZE_CHK_256 = hr::field_value_literal< 0x400c4110, 20, 3 >( 7 );
   // Transfer Width for the Source
   constexpr auto DMAC_CTRLA5_SRC_WIDTH_Msk = hr::field_mask_literal< 0x400c4110, 24, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA5_SRC_WIDTH_BYTE = hr::field_value_literal< 0x400c4110, 24, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA5_SRC_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4110, 24, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA5_SRC_WIDTH_WORD = hr::field_value_literal< 0x400c4110, 24, 2 >( 2 );
   // Transfer Width for the Destination
   constexpr auto DMAC_CTRLA5_DST_WIDTH_Msk = hr::field_mask_literal< 0x400c4110, 28, 2 >();
      // the transfer size is set to 8-bit width
      constexpr auto DMAC_CTRLA5_DST_WIDTH_BYTE = hr::field_value_literal< 0x400c4110, 28, 2 >( 0 );
      // the transfer size is set to 16-bit width
      constexpr auto DMAC_CTRLA5_DST_WIDTH_HALF_WORD = hr::field_value_literal< 0x400c4110, 28, 2 >( 1 );
      // the transfer size is set to 32-bit width
      constexpr auto DMAC_CTRLA5_DST_WIDTH_WORD = hr::field_value_literal< 0x400c4110, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLA5_DONE = hr::field_mask_literal< 0x400c4110, 31, 1 >();

// CTRLB5
   // Source Address Descriptor
   constexpr auto DMAC_CTRLB5_SRC_DSCR = hr::field_mask_literal< 0x400c4114, 16, 1 >();
      // Source address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB5_SRC_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c4114, 16, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the source.
      constexpr auto DMAC_CTRLB5_SRC_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c4114, 16, 1 >( 1 );
   // Destination Address Descriptor
   constexpr auto DMAC_CTRLB5_DST_DSCR = hr::field_mask_literal< 0x400c4114, 20, 1 >();
      // Destination address is updated when the descriptor is fetched from the memory.
      constexpr auto DMAC_CTRLB5_DST_DSCR_FETCH_FROM_MEM = hr::field_value_literal< 0x400c4114, 20, 1 >( 0 );
      // Buffer Descriptor Fetch operation is disabled for the destination.
      constexpr auto DMAC_CTRLB5_DST_DSCR_FETCH_DISABLE = hr::field_value_literal< 0x400c4114, 20, 1 >( 1 );
   // Flow Control
   constexpr auto DMAC_CTRLB5_FC_Msk = hr::field_mask_literal< 0x400c4114, 21, 3 >();
      // Memory-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB5_FC_MEM2MEM_DMA_FC = hr::field_value_literal< 0x400c4114, 21, 3 >( 0 );
      // Memory-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB5_FC_MEM2PER_DMA_FC = hr::field_value_literal< 0x400c4114, 21, 3 >( 1 );
      // Peripheral-to-Memory Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB5_FC_PER2MEM_DMA_FC = hr::field_value_literal< 0x400c4114, 21, 3 >( 2 );
      // Peripheral-to-Peripheral Transfer DMAC is flow controller
      constexpr auto DMAC_CTRLB5_FC_PER2PER_DMA_FC = hr::field_value_literal< 0x400c4114, 21, 3 >( 3 );
   // Incrementing, Decrementing or Fixed Address for the Source
   constexpr auto DMAC_CTRLB5_SRC_INCR_Msk = hr::field_mask_literal< 0x400c4114, 24, 2 >();
      // The source address is incremented
      constexpr auto DMAC_CTRLB5_SRC_INCR_INCREMENTING = hr::field_value_literal< 0x400c4114, 24, 2 >( 0 );
      // The source address is decremented
      constexpr auto DMAC_CTRLB5_SRC_INCR_DECREMENTING = hr::field_value_literal< 0x400c4114, 24, 2 >( 1 );
      // The source address remains unchanged
      constexpr auto DMAC_CTRLB5_SRC_INCR_FIXED = hr::field_value_literal< 0x400c4114, 24, 2 >( 2 );
   // Incrementing, Decrementing or Fixed Address for the Destination
   constexpr auto DMAC_CTRLB5_DST_INCR_Msk = hr::field_mask_literal< 0x400c4114, 28, 2 >();
      // The destination address is incremented
      constexpr auto DMAC_CTRLB5_DST_INCR_INCREMENTING = hr::field_value_literal< 0x400c4114, 28, 2 >( 0 );
      // The destination address is decremented
      constexpr auto DMAC_CTRLB5_DST_INCR_DECREMENTING = hr::field_value_literal< 0x400c4114, 28, 2 >( 1 );
      // The destination address remains unchanged
      constexpr auto DMAC_CTRLB5_DST_INCR_FIXED = hr::field_value_literal< 0x400c4114, 28, 2 >( 2 );
   // None
   constexpr auto DMAC_CTRLB5_IEN = hr::field_mask_literal< 0x400c4114, 30, 1 >();

// CFG5
   // Source with Peripheral identifier
   constexpr auto DMAC_CFG5_SRC_PER_Msk = hr::field_mask_literal< 0x400c4118, 0, 4 >();
   // Destination with Peripheral identifier
   constexpr auto DMAC_CFG5_DST_PER_Msk = hr::field_mask_literal< 0x400c4118, 4, 4 >();
   // Software or Hardware Selection for the Source
   constexpr auto DMAC_CFG5_SRC_H2SEL = hr::field_mask_literal< 0x400c4118, 9, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG5_SRC_H2SEL_SW = hr::field_value_literal< 0x400c4118, 9, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG5_SRC_H2SEL_HW = hr::field_value_literal< 0x400c4118, 9, 1 >( 1 );
   // Software or Hardware Selection for the Destination
   constexpr auto DMAC_CFG5_DST_H2SEL = hr::field_mask_literal< 0x400c4118, 13, 1 >();
      // Software handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG5_DST_H2SEL_SW = hr::field_value_literal< 0x400c4118, 13, 1 >( 0 );
      // Hardware handshaking interface is used to trigger a transfer request.
      constexpr auto DMAC_CFG5_DST_H2SEL_HW = hr::field_value_literal< 0x400c4118, 13, 1 >( 1 );
   // Stop On Done
   constexpr auto DMAC_CFG5_SOD = hr::field_mask_literal< 0x400c4118, 16, 1 >();
      // STOP ON DONE disabled, the descriptor fetch operation ignores DONE Field of CTRLA register.
      constexpr auto DMAC_CFG5_SOD_DISABLE = hr::field_value_literal< 0x400c4118, 16, 1 >( 0 );
      // STOP ON DONE activated, the DMAC module is automatically disabled if DONE FIELD is set to 1.
      constexpr auto DMAC_CFG5_SOD_ENABLE = hr::field_value_literal< 0x400c4118, 16, 1 >( 1 );
   // Interface Lock
   constexpr auto DMAC_CFG5_LOCK_IF = hr::field_mask_literal< 0x400c4118, 20, 1 >();
      // Interface Lock capability is disabled
      constexpr auto DMAC_CFG5_LOCK_IF_DISABLE = hr::field_value_literal< 0x400c4118, 20, 1 >( 0 );
      // Interface Lock capability is enabled
      constexpr auto DMAC_CFG5_LOCK_IF_ENABLE = hr::field_value_literal< 0x400c4118, 20, 1 >( 1 );
   // Bus Lock
   constexpr auto DMAC_CFG5_LOCK_B = hr::field_mask_literal< 0x400c4118, 21, 1 >();
      // AHB Bus Locking capability is disabled.
      constexpr auto DMAC_CFG5_LOCK_B_DISABLE = hr::field_value_literal< 0x400c4118, 21, 1 >( 0 );
   // Master Interface Arbiter Lock
   constexpr auto DMAC_CFG5_LOCK_IF_L = hr::field_mask_literal< 0x400c4118, 22, 1 >();
      // The Master Interface Arbiter is locked by the channel x for a chunk transfer.
      constexpr auto DMAC_CFG5_LOCK_IF_L_CHUNK = hr::field_value_literal< 0x400c4118, 22, 1 >( 0 );
      // The Master Interface Arbiter is locked by the channel x for a buffer transfer.
      constexpr auto DMAC_CFG5_LOCK_IF_L_BUFFER = hr::field_value_literal< 0x400c4118, 22, 1 >( 1 );
   // AHB Protection
   constexpr auto DMAC_CFG5_AHB_PROT_Msk = hr::field_mask_literal< 0x400c4118, 24, 3 >();
   // FIFO Configuration
   constexpr auto DMAC_CFG5_FIFOCFG_Msk = hr::field_mask_literal< 0x400c4118, 28, 2 >();
      // The largest defined length AHB burst is performed on the destination AHB interface.
      constexpr auto DMAC_CFG5_FIFOCFG_ALAP_CFG = hr::field_value_literal< 0x400c4118, 28, 2 >( 0 );
      // When half FIFO size is available/filled, a source/destination request is serviced.
      constexpr auto DMAC_CFG5_FIFOCFG_HALF_CFG = hr::field_value_literal< 0x400c4118, 28, 2 >( 1 );
      // When there is enough space/data available to perform a single AHB access, then the request is serviced.
      constexpr auto DMAC_CFG5_FIFOCFG_ASAP_CFG = hr::field_value_literal< 0x400c4118, 28, 2 >( 2 );

// WPMR
   // Write Protect Enable
   constexpr auto DMAC_WPMR_WPEN = hr::field_mask_literal< 0x400c41e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto DMAC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400c41e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto DMAC_WPSR_WPVS = hr::field_mask_literal< 0x400c41e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto DMAC_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400c41e8, 8, 16 >();

// =============================================================================
//
// DACC
// base address = 0x400c8000
// Digital-to-Analog Converter Controller
//
// =============================================================================

struct Dacc {
   hr::hardware_register<0x400c8000> CR;
   hr::hardware_register<0x400c8004> MR;
   hr::reserved< 0x8, 2 > _reserved_at_0x8;
   hr::hardware_register<0x400c8010> CHER;
   hr::hardware_register<0x400c8014> CHDR;
   hr::hardware_register<0x400c8018> CHSR;
   hr::reserved< 0x1C, 1 > _reserved_at_0x1C;
   hr::hardware_register<0x400c8020> CDR;
   hr::hardware_register<0x400c8024> IER;
   hr::hardware_register<0x400c8028> IDR;
   hr::hardware_register<0x400c802c> IMR;
   hr::hardware_register<0x400c8030> ISR;
   hr::reserved< 0x34, 24 > _reserved_at_0x34;
   hr::hardware_register<0x400c8094> ACR;
   hr::reserved< 0x98, 19 > _reserved_at_0x98;
   hr::hardware_register<0x400c80e4> WPMR;
   hr::hardware_register<0x400c80e8> WPSR;
   hr::reserved< 0xEC, 7 > _reserved_at_0xEC;
   hr::hardware_register<0x400c8108> TPR;
   hr::hardware_register<0x400c810c> TCR;
   hr::reserved< 0x110, 2 > _reserved_at_0x110;
   hr::hardware_register<0x400c8118> TNPR;
   hr::hardware_register<0x400c811c> TNCR;
   hr::hardware_register<0x400c8120> PTCR;
   hr::hardware_register<0x400c8124> PTSR;
};

#define DACC ( ( Dacc * ) 0x400c8000 )

// CR
   // Software Reset
   constexpr auto DACC_CR_SWRST = hr::field_mask_literal< 0x400c8000, 0, 1 >();

// MR
   // Trigger Enable
   constexpr auto DACC_MR_TRGEN = hr::field_mask_literal< 0x400c8004, 0, 1 >();
      // External trigger mode disabled. DACC in free running mode.
      constexpr auto DACC_MR_TRGEN_DIS = hr::field_value_literal< 0x400c8004, 0, 1 >( 0 );
      // External trigger mode enabled.
      constexpr auto DACC_MR_TRGEN_EN = hr::field_value_literal< 0x400c8004, 0, 1 >( 1 );
   // Trigger Selection
   constexpr auto DACC_MR_TRGSEL_Msk = hr::field_mask_literal< 0x400c8004, 1, 3 >();
   // Word Transfer
   constexpr auto DACC_MR_WORD = hr::field_mask_literal< 0x400c8004, 4, 1 >();
      // Half-Word transfer
      constexpr auto DACC_MR_WORD_HALF = hr::field_value_literal< 0x400c8004, 4, 1 >( 0 );
      // Word Transfer
      constexpr auto DACC_MR_WORD_WORD = hr::field_value_literal< 0x400c8004, 4, 1 >( 1 );
   // Sleep Mode
   constexpr auto DACC_MR_SLEEP = hr::field_mask_literal< 0x400c8004, 5, 1 >();
   // Fast Wake up Mode
   constexpr auto DACC_MR_FASTWKUP = hr::field_mask_literal< 0x400c8004, 6, 1 >();
   // Refresh Period
   constexpr auto DACC_MR_REFRESH_Msk = hr::field_mask_literal< 0x400c8004, 8, 8 >();
   // User Channel Selection
   constexpr auto DACC_MR_USER_SEL_Msk = hr::field_mask_literal< 0x400c8004, 16, 2 >();
      // Channel 0
      constexpr auto DACC_MR_USER_SEL_CHANNEL0 = hr::field_value_literal< 0x400c8004, 16, 2 >( 0 );
      // Channel 1
      constexpr auto DACC_MR_USER_SEL_CHANNEL1 = hr::field_value_literal< 0x400c8004, 16, 2 >( 1 );
   // Tag Selection Mode
   constexpr auto DACC_MR_TAG = hr::field_mask_literal< 0x400c8004, 20, 1 >();
      // Tag selection mode disabled. Using USER_SEL to select the channel for the conversion.
      constexpr auto DACC_MR_TAG_DIS = hr::field_value_literal< 0x400c8004, 20, 1 >( 0 );
      // Tag selection mode enabled
      constexpr auto DACC_MR_TAG_EN = hr::field_value_literal< 0x400c8004, 20, 1 >( 1 );
   // Max Speed Mode
   constexpr auto DACC_MR_MAXS = hr::field_mask_literal< 0x400c8004, 21, 1 >();
      // Normal Mode
      constexpr auto DACC_MR_MAXS_NORMAL = hr::field_value_literal< 0x400c8004, 21, 1 >( 0 );
      // Max Speed Mode enabled
      constexpr auto DACC_MR_MAXS_MAXIMUM = hr::field_value_literal< 0x400c8004, 21, 1 >( 1 );
   // Startup Time Selection
   constexpr auto DACC_MR_STARTUP_Msk = hr::field_mask_literal< 0x400c8004, 24, 6 >();
      // 0 periods of DACClock
      constexpr auto DACC_MR_STARTUP_0 = hr::field_value_literal< 0x400c8004, 24, 6 >( 0 );
      // 8 periods of DACClock
      constexpr auto DACC_MR_STARTUP_8 = hr::field_value_literal< 0x400c8004, 24, 6 >( 1 );
      // 16 periods of DACClock
      constexpr auto DACC_MR_STARTUP_16 = hr::field_value_literal< 0x400c8004, 24, 6 >( 2 );
      // 24 periods of DACClock
      constexpr auto DACC_MR_STARTUP_24 = hr::field_value_literal< 0x400c8004, 24, 6 >( 3 );
      // 64 periods of DACClock
      constexpr auto DACC_MR_STARTUP_64 = hr::field_value_literal< 0x400c8004, 24, 6 >( 4 );
      // 80 periods of DACClock
      constexpr auto DACC_MR_STARTUP_80 = hr::field_value_literal< 0x400c8004, 24, 6 >( 5 );
      // 96 periods of DACClock
      constexpr auto DACC_MR_STARTUP_96 = hr::field_value_literal< 0x400c8004, 24, 6 >( 6 );
      // 112 periods of DACClock
      constexpr auto DACC_MR_STARTUP_112 = hr::field_value_literal< 0x400c8004, 24, 6 >( 7 );
      // 512 periods of DACClock
      constexpr auto DACC_MR_STARTUP_512 = hr::field_value_literal< 0x400c8004, 24, 6 >( 8 );
      // 576 periods of DACClock
      constexpr auto DACC_MR_STARTUP_576 = hr::field_value_literal< 0x400c8004, 24, 6 >( 9 );
      // 640 periods of DACClock
      constexpr auto DACC_MR_STARTUP_640 = hr::field_value_literal< 0x400c8004, 24, 6 >( 10 );
      // 704 periods of DACClock
      constexpr auto DACC_MR_STARTUP_704 = hr::field_value_literal< 0x400c8004, 24, 6 >( 11 );
      // 768 periods of DACClock
      constexpr auto DACC_MR_STARTUP_768 = hr::field_value_literal< 0x400c8004, 24, 6 >( 12 );
      // 832 periods of DACClock
      constexpr auto DACC_MR_STARTUP_832 = hr::field_value_literal< 0x400c8004, 24, 6 >( 13 );
      // 896 periods of DACClock
      constexpr auto DACC_MR_STARTUP_896 = hr::field_value_literal< 0x400c8004, 24, 6 >( 14 );
      // 960 periods of DACClock
      constexpr auto DACC_MR_STARTUP_960 = hr::field_value_literal< 0x400c8004, 24, 6 >( 15 );
      // 1024 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1024 = hr::field_value_literal< 0x400c8004, 24, 6 >( 16 );
      // 1088 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1088 = hr::field_value_literal< 0x400c8004, 24, 6 >( 17 );
      // 1152 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1152 = hr::field_value_literal< 0x400c8004, 24, 6 >( 18 );
      // 1216 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1216 = hr::field_value_literal< 0x400c8004, 24, 6 >( 19 );
      // 1280 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1280 = hr::field_value_literal< 0x400c8004, 24, 6 >( 20 );
      // 1344 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1344 = hr::field_value_literal< 0x400c8004, 24, 6 >( 21 );
      // 1408 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1408 = hr::field_value_literal< 0x400c8004, 24, 6 >( 22 );
      // 1472 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1472 = hr::field_value_literal< 0x400c8004, 24, 6 >( 23 );
      // 1536 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1536 = hr::field_value_literal< 0x400c8004, 24, 6 >( 24 );
      // 1600 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1600 = hr::field_value_literal< 0x400c8004, 24, 6 >( 25 );
      // 1664 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1664 = hr::field_value_literal< 0x400c8004, 24, 6 >( 26 );
      // 1728 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1728 = hr::field_value_literal< 0x400c8004, 24, 6 >( 27 );
      // 1792 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1792 = hr::field_value_literal< 0x400c8004, 24, 6 >( 28 );
      // 1856 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1856 = hr::field_value_literal< 0x400c8004, 24, 6 >( 29 );
      // 1920 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1920 = hr::field_value_literal< 0x400c8004, 24, 6 >( 30 );
      // 1984 periods of DACClock
      constexpr auto DACC_MR_STARTUP_1984 = hr::field_value_literal< 0x400c8004, 24, 6 >( 31 );

// CHER
   // Channel 0 Enable
   constexpr auto DACC_CHER_CH0 = hr::field_mask_literal< 0x400c8010, 0, 1 >();
   // Channel 1 Enable
   constexpr auto DACC_CHER_CH1 = hr::field_mask_literal< 0x400c8010, 1, 1 >();

// CHDR
   // Channel 0 Disable
   constexpr auto DACC_CHDR_CH0 = hr::field_mask_literal< 0x400c8014, 0, 1 >();
   // Channel 1 Disable
   constexpr auto DACC_CHDR_CH1 = hr::field_mask_literal< 0x400c8014, 1, 1 >();

// CHSR
   // Channel 0 Status
   constexpr auto DACC_CHSR_CH0 = hr::field_mask_literal< 0x400c8018, 0, 1 >();
   // Channel 1 Status
   constexpr auto DACC_CHSR_CH1 = hr::field_mask_literal< 0x400c8018, 1, 1 >();

// CDR
   // Data to Convert
   constexpr auto DACC_CDR_DATA_Msk = hr::field_mask_literal< 0x400c8020, 0, 32 >();

// IER
   // Transmit Ready Interrupt Enable
   constexpr auto DACC_IER_TXRDY = hr::field_mask_literal< 0x400c8024, 0, 1 >();
   // End of Conversion Interrupt Enable
   constexpr auto DACC_IER_EOC = hr::field_mask_literal< 0x400c8024, 1, 1 >();
   // End of Transmit Buffer Interrupt Enable
   constexpr auto DACC_IER_ENDTX = hr::field_mask_literal< 0x400c8024, 2, 1 >();
   // Transmit Buffer Empty Interrupt Enable
   constexpr auto DACC_IER_TXBUFE = hr::field_mask_literal< 0x400c8024, 3, 1 >();

// IDR
   // Transmit Ready Interrupt Disable.
   constexpr auto DACC_IDR_TXRDY = hr::field_mask_literal< 0x400c8028, 0, 1 >();
   // End of Conversion Interrupt Disable
   constexpr auto DACC_IDR_EOC = hr::field_mask_literal< 0x400c8028, 1, 1 >();
   // End of Transmit Buffer Interrupt Disable
   constexpr auto DACC_IDR_ENDTX = hr::field_mask_literal< 0x400c8028, 2, 1 >();
   // Transmit Buffer Empty Interrupt Disable
   constexpr auto DACC_IDR_TXBUFE = hr::field_mask_literal< 0x400c8028, 3, 1 >();

// IMR
   // Transmit Ready Interrupt Mask
   constexpr auto DACC_IMR_TXRDY = hr::field_mask_literal< 0x400c802c, 0, 1 >();
   // End of Conversion Interrupt Mask
   constexpr auto DACC_IMR_EOC = hr::field_mask_literal< 0x400c802c, 1, 1 >();
   // End of Transmit Buffer Interrupt Mask
   constexpr auto DACC_IMR_ENDTX = hr::field_mask_literal< 0x400c802c, 2, 1 >();
   // Transmit Buffer Empty Interrupt Mask
   constexpr auto DACC_IMR_TXBUFE = hr::field_mask_literal< 0x400c802c, 3, 1 >();

// ISR
   // Transmit Ready Interrupt Flag
   constexpr auto DACC_ISR_TXRDY = hr::field_mask_literal< 0x400c8030, 0, 1 >();
   // End of Conversion Interrupt Flag
   constexpr auto DACC_ISR_EOC = hr::field_mask_literal< 0x400c8030, 1, 1 >();
   // End of DMA Interrupt Flag
   constexpr auto DACC_ISR_ENDTX = hr::field_mask_literal< 0x400c8030, 2, 1 >();
   // Transmit Buffer Empty
   constexpr auto DACC_ISR_TXBUFE = hr::field_mask_literal< 0x400c8030, 3, 1 >();

// ACR
   // Analog Output Current Control
   constexpr auto DACC_ACR_IBCTLCH0_Msk = hr::field_mask_literal< 0x400c8094, 0, 2 >();
   // Analog Output Current Control
   constexpr auto DACC_ACR_IBCTLCH1_Msk = hr::field_mask_literal< 0x400c8094, 2, 2 >();
   // Bias Current Control for DAC Core
   constexpr auto DACC_ACR_IBCTLDACCORE_Msk = hr::field_mask_literal< 0x400c8094, 8, 2 >();

// WPMR
   // Write Protect Enable
   constexpr auto DACC_WPMR_WPEN = hr::field_mask_literal< 0x400c80e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto DACC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400c80e4, 8, 24 >();

// WPSR
   // Write protection error
   constexpr auto DACC_WPSR_WPROTERR = hr::field_mask_literal< 0x400c80e8, 0, 1 >();
   // Write protection error address
   constexpr auto DACC_WPSR_WPROTADDR_Msk = hr::field_mask_literal< 0x400c80e8, 8, 8 >();

// TPR
   // Transmit Counter Register
   constexpr auto DACC_TPR_TXPTR_Msk = hr::field_mask_literal< 0x400c8108, 0, 32 >();

// TCR
   // Transmit Counter Register
   constexpr auto DACC_TCR_TXCTR_Msk = hr::field_mask_literal< 0x400c810c, 0, 16 >();

// TNPR
   // Transmit Next Pointer
   constexpr auto DACC_TNPR_TXNPTR_Msk = hr::field_mask_literal< 0x400c8118, 0, 32 >();

// TNCR
   // Transmit Counter Next
   constexpr auto DACC_TNCR_TXNCTR_Msk = hr::field_mask_literal< 0x400c811c, 0, 16 >();

// PTCR
   // Receiver Transfer Enable
   constexpr auto DACC_PTCR_RXTEN = hr::field_mask_literal< 0x400c8120, 0, 1 >();
   // Receiver Transfer Disable
   constexpr auto DACC_PTCR_RXTDIS = hr::field_mask_literal< 0x400c8120, 1, 1 >();
   // Transmitter Transfer Enable
   constexpr auto DACC_PTCR_TXTEN = hr::field_mask_literal< 0x400c8120, 8, 1 >();
   // Transmitter Transfer Disable
   constexpr auto DACC_PTCR_TXTDIS = hr::field_mask_literal< 0x400c8120, 9, 1 >();

// PTSR
   // Receiver Transfer Enable
   constexpr auto DACC_PTSR_RXTEN = hr::field_mask_literal< 0x400c8124, 0, 1 >();
   // Transmitter Transfer Enable
   constexpr auto DACC_PTSR_TXTEN = hr::field_mask_literal< 0x400c8124, 8, 1 >();

// =============================================================================
//
// SMC
// base address = 0x400e0000
// Static Memory Controller
//
// =============================================================================

struct Smc {
   hr::hardware_register<0x400e0000> CFG;
   hr::hardware_register<0x400e0004> CTRL;
   hr::hardware_register<0x400e0008> SR;
   hr::hardware_register<0x400e000c> IER;
   hr::hardware_register<0x400e0010> IDR;
   hr::hardware_register<0x400e0014> IMR;
   hr::hardware_register<0x400e0018> ADDR;
   hr::hardware_register<0x400e001c> BANK;
   hr::hardware_register<0x400e0020> ECC_CTRL;
   hr::hardware_register<0x400e0024> ECC_MD;
   hr::hardware_register<0x400e0028> ECC_SR1;
   hr::hardware_register<0x400e002c> ECC_PR0;
   hr::hardware_register<0x400e0030> ECC_PR1;
   hr::hardware_register<0x400e0034> ECC_SR2;
   hr::hardware_register<0x400e0038> ECC_PR2;
   hr::hardware_register<0x400e003c> ECC_PR3;
   hr::hardware_register<0x400e0040> ECC_PR4;
   hr::hardware_register<0x400e0044> ECC_PR5;
   hr::hardware_register<0x400e0048> ECC_PR6;
   hr::hardware_register<0x400e004c> ECC_PR7;
   hr::hardware_register<0x400e0050> ECC_PR8;
   hr::hardware_register<0x400e0054> ECC_PR9;
   hr::hardware_register<0x400e0058> ECC_PR10;
   hr::hardware_register<0x400e005c> ECC_PR11;
   hr::hardware_register<0x400e0060> ECC_PR12;
   hr::hardware_register<0x400e0064> ECC_PR13;
   hr::hardware_register<0x400e0068> ECC_PR14;
   hr::hardware_register<0x400e006c> ECC_PR15;
   hr::hardware_register<0x400e0070> SETUP0;
   hr::hardware_register<0x400e0074> PULSE0;
   hr::hardware_register<0x400e0078> CYCLE0;
   hr::hardware_register<0x400e007c> TIMINGS0;
   hr::hardware_register<0x400e0080> MODE0;
   hr::hardware_register<0x400e0084> SETUP1;
   hr::hardware_register<0x400e0088> PULSE1;
   hr::hardware_register<0x400e008c> CYCLE1;
   hr::hardware_register<0x400e0090> TIMINGS1;
   hr::hardware_register<0x400e0094> MODE1;
   hr::hardware_register<0x400e0098> SETUP2;
   hr::hardware_register<0x400e009c> PULSE2;
   hr::hardware_register<0x400e00a0> CYCLE2;
   hr::hardware_register<0x400e00a4> TIMINGS2;
   hr::hardware_register<0x400e00a8> MODE2;
   hr::hardware_register<0x400e00ac> SETUP3;
   hr::hardware_register<0x400e00b0> PULSE3;
   hr::hardware_register<0x400e00b4> CYCLE3;
   hr::hardware_register<0x400e00b8> TIMINGS3;
   hr::hardware_register<0x400e00bc> MODE3;
   hr::hardware_register<0x400e00c0> SETUP4;
   hr::hardware_register<0x400e00c4> PULSE4;
   hr::hardware_register<0x400e00c8> CYCLE4;
   hr::hardware_register<0x400e00cc> TIMINGS4;
   hr::hardware_register<0x400e00d0> MODE4;
   hr::hardware_register<0x400e00d4> SETUP5;
   hr::hardware_register<0x400e00d8> PULSE5;
   hr::hardware_register<0x400e00dc> CYCLE5;
   hr::hardware_register<0x400e00e0> TIMINGS5;
   hr::hardware_register<0x400e00e4> MODE5;
   hr::hardware_register<0x400e00e8> SETUP6;
   hr::hardware_register<0x400e00ec> PULSE6;
   hr::hardware_register<0x400e00f0> CYCLE6;
   hr::hardware_register<0x400e00f4> TIMINGS6;
   hr::hardware_register<0x400e00f8> MODE6;
   hr::hardware_register<0x400e00fc> SETUP7;
   hr::hardware_register<0x400e0100> PULSE7;
   hr::hardware_register<0x400e0104> CYCLE7;
   hr::hardware_register<0x400e0108> TIMINGS7;
   hr::hardware_register<0x400e010c> MODE7;
   hr::hardware_register<0x400e0110> OCMS;
   hr::hardware_register<0x400e0114> KEY1;
   hr::hardware_register<0x400e0118> KEY2;
   hr::reserved< 0x11C, 50 > _reserved_at_0x11C;
   hr::hardware_register<0x400e01e4> WPCR;
   hr::hardware_register<0x400e01e8> WPSR;
};

#define SMC ( ( Smc * ) 0x400e0000 )

// CFG
   // None
   constexpr auto SMC_CFG_PAGESIZE_Msk = hr::field_mask_literal< 0x400e0000, 0, 2 >();
      // Main area 512 Bytes + Spare area 16 Bytes = 528 Bytes
      constexpr auto SMC_CFG_PAGESIZE_PS512_16 = hr::field_value_literal< 0x400e0000, 0, 2 >( 0 );
      // Main area 1024 Bytes + Spare area 32 Bytes = 1056 Bytes
      constexpr auto SMC_CFG_PAGESIZE_PS1024_32 = hr::field_value_literal< 0x400e0000, 0, 2 >( 1 );
      // Main area 2048 Bytes + Spare area 64 Bytes = 2112 Bytes
      constexpr auto SMC_CFG_PAGESIZE_PS2048_64 = hr::field_value_literal< 0x400e0000, 0, 2 >( 2 );
      // Main area 4096 Bytes + Spare area 128 Bytes = 4224 Bytes
      constexpr auto SMC_CFG_PAGESIZE_PS4096_128 = hr::field_value_literal< 0x400e0000, 0, 2 >( 3 );
   // Write Spare Area
   constexpr auto SMC_CFG_WSPARE = hr::field_mask_literal< 0x400e0000, 8, 1 >();
   // Read Spare Area
   constexpr auto SMC_CFG_RSPARE = hr::field_mask_literal< 0x400e0000, 9, 1 >();
   // Rising/Falling Edge Detection Control
   constexpr auto SMC_CFG_EDGECTRL = hr::field_mask_literal< 0x400e0000, 12, 1 >();
   // Ready/Busy Signal Edge Detection
   constexpr auto SMC_CFG_RBEDGE = hr::field_mask_literal< 0x400e0000, 13, 1 >();
   // Data Timeout Cycle Number
   constexpr auto SMC_CFG_DTOCYC_Msk = hr::field_mask_literal< 0x400e0000, 16, 4 >();
   // Data Timeout Multiplier
   constexpr auto SMC_CFG_DTOMUL_Msk = hr::field_mask_literal< 0x400e0000, 20, 3 >();
      // DTOCYC
      constexpr auto SMC_CFG_DTOMUL_X1 = hr::field_value_literal< 0x400e0000, 20, 3 >( 0 );
      // DTOCYC x 16
      constexpr auto SMC_CFG_DTOMUL_X16 = hr::field_value_literal< 0x400e0000, 20, 3 >( 1 );
      // DTOCYC x 128
      constexpr auto SMC_CFG_DTOMUL_X128 = hr::field_value_literal< 0x400e0000, 20, 3 >( 2 );
      // DTOCYC x 256
      constexpr auto SMC_CFG_DTOMUL_X256 = hr::field_value_literal< 0x400e0000, 20, 3 >( 3 );
      // DTOCYC x 1024
      constexpr auto SMC_CFG_DTOMUL_X1024 = hr::field_value_literal< 0x400e0000, 20, 3 >( 4 );
      // DTOCYC x 4096
      constexpr auto SMC_CFG_DTOMUL_X4096 = hr::field_value_literal< 0x400e0000, 20, 3 >( 5 );
      // DTOCYC x 65536
      constexpr auto SMC_CFG_DTOMUL_X65536 = hr::field_value_literal< 0x400e0000, 20, 3 >( 6 );
      // DTOCYC x 1048576
      constexpr auto SMC_CFG_DTOMUL_X1048576 = hr::field_value_literal< 0x400e0000, 20, 3 >( 7 );

// CTRL
   // NAND Flash Controller Enable
   constexpr auto SMC_CTRL_NFCEN = hr::field_mask_literal< 0x400e0004, 0, 1 >();
   // NAND Flash Controller Disable
   constexpr auto SMC_CTRL_NFCDIS = hr::field_mask_literal< 0x400e0004, 1, 1 >();

// SR
   // NAND Flash Controller status (this field cannot be reset)
   constexpr auto SMC_SR_SMCSTS = hr::field_mask_literal< 0x400e0008, 0, 1 >();
   // Selected Ready Busy Rising Edge Detected
   constexpr auto SMC_SR_RB_RISE = hr::field_mask_literal< 0x400e0008, 4, 1 >();
   // Selected Ready Busy Falling Edge Detected
   constexpr auto SMC_SR_RB_FALL = hr::field_mask_literal< 0x400e0008, 5, 1 >();
   // NFC Busy (this field cannot be reset)
   constexpr auto SMC_SR_NFCBUSY = hr::field_mask_literal< 0x400e0008, 8, 1 >();
   // NFC Write/Read Operation (this field cannot be reset)
   constexpr auto SMC_SR_NFCWR = hr::field_mask_literal< 0x400e0008, 11, 1 >();
   // NFC Chip Select ID (this field cannot be reset)
   constexpr auto SMC_SR_NFCSID_Msk = hr::field_mask_literal< 0x400e0008, 12, 3 >();
   // NFC Data Transfer Terminated
   constexpr auto SMC_SR_XFRDONE = hr::field_mask_literal< 0x400e0008, 16, 1 >();
   // Command Done
   constexpr auto SMC_SR_CMDDONE = hr::field_mask_literal< 0x400e0008, 17, 1 >();
   // Data Timeout Error
   constexpr auto SMC_SR_DTOE = hr::field_mask_literal< 0x400e0008, 20, 1 >();
   // Undefined Area Error
   constexpr auto SMC_SR_UNDEF = hr::field_mask_literal< 0x400e0008, 21, 1 >();
   // Accessing While Busy
   constexpr auto SMC_SR_AWB = hr::field_mask_literal< 0x400e0008, 22, 1 >();
   // NFC Access Size Error
   constexpr auto SMC_SR_NFCASE = hr::field_mask_literal< 0x400e0008, 23, 1 >();
   // Ready/Busy Line 0 Edge Detected
   constexpr auto SMC_SR_RB_EDGE0 = hr::field_mask_literal< 0x400e0008, 24, 1 >();

// IER
   // Ready Busy Rising Edge Detection Interrupt Enable
   constexpr auto SMC_IER_RB_RISE = hr::field_mask_literal< 0x400e000c, 4, 1 >();
   // Ready Busy Falling Edge Detection Interrupt Enable
   constexpr auto SMC_IER_RB_FALL = hr::field_mask_literal< 0x400e000c, 5, 1 >();
   // Transfer Done Interrupt Enable
   constexpr auto SMC_IER_XFRDONE = hr::field_mask_literal< 0x400e000c, 16, 1 >();
   // Command Done Interrupt Enable
   constexpr auto SMC_IER_CMDDONE = hr::field_mask_literal< 0x400e000c, 17, 1 >();
   // Data Timeout Error Interrupt Enable
   constexpr auto SMC_IER_DTOE = hr::field_mask_literal< 0x400e000c, 20, 1 >();
   // Undefined Area Access Interrupt Enable
   constexpr auto SMC_IER_UNDEF = hr::field_mask_literal< 0x400e000c, 21, 1 >();
   // Accessing While Busy Interrupt Enable
   constexpr auto SMC_IER_AWB = hr::field_mask_literal< 0x400e000c, 22, 1 >();
   // NFC Access Size Error Interrupt Enable
   constexpr auto SMC_IER_NFCASE = hr::field_mask_literal< 0x400e000c, 23, 1 >();
   // Ready/Busy Line 0 Interrupt Enable
   constexpr auto SMC_IER_RB_EDGE0 = hr::field_mask_literal< 0x400e000c, 24, 1 >();

// IDR
   // Ready Busy Rising Edge Detection Interrupt Disable
   constexpr auto SMC_IDR_RB_RISE = hr::field_mask_literal< 0x400e0010, 4, 1 >();
   // Ready Busy Falling Edge Detection Interrupt Disable
   constexpr auto SMC_IDR_RB_FALL = hr::field_mask_literal< 0x400e0010, 5, 1 >();
   // Transfer Done Interrupt Disable
   constexpr auto SMC_IDR_XFRDONE = hr::field_mask_literal< 0x400e0010, 16, 1 >();
   // Command Done Interrupt Disable
   constexpr auto SMC_IDR_CMDDONE = hr::field_mask_literal< 0x400e0010, 17, 1 >();
   // Data Timeout Error Interrupt Disable
   constexpr auto SMC_IDR_DTOE = hr::field_mask_literal< 0x400e0010, 20, 1 >();
   // Undefined Area Access Interrupt Disable
   constexpr auto SMC_IDR_UNDEF = hr::field_mask_literal< 0x400e0010, 21, 1 >();
   // Accessing While Busy Interrupt Disable
   constexpr auto SMC_IDR_AWB = hr::field_mask_literal< 0x400e0010, 22, 1 >();
   // NFC Access Size Error Interrupt Disable
   constexpr auto SMC_IDR_NFCASE = hr::field_mask_literal< 0x400e0010, 23, 1 >();
   // Ready/Busy Line 0 Interrupt Disable
   constexpr auto SMC_IDR_RB_EDGE0 = hr::field_mask_literal< 0x400e0010, 24, 1 >();

// IMR
   // Ready Busy Rising Edge Detection Interrupt Mask
   constexpr auto SMC_IMR_RB_RISE = hr::field_mask_literal< 0x400e0014, 4, 1 >();
   // Ready Busy Falling Edge Detection Interrupt Mask
   constexpr auto SMC_IMR_RB_FALL = hr::field_mask_literal< 0x400e0014, 5, 1 >();
   // Transfer Done Interrupt Mask
   constexpr auto SMC_IMR_XFRDONE = hr::field_mask_literal< 0x400e0014, 16, 1 >();
   // Command Done Interrupt Mask
   constexpr auto SMC_IMR_CMDDONE = hr::field_mask_literal< 0x400e0014, 17, 1 >();
   // Data Timeout Error Interrupt Mask
   constexpr auto SMC_IMR_DTOE = hr::field_mask_literal< 0x400e0014, 20, 1 >();
   // Undefined Area Access Interrupt Mask5
   constexpr auto SMC_IMR_UNDEF = hr::field_mask_literal< 0x400e0014, 21, 1 >();
   // Accessing While Busy Interrupt Mask
   constexpr auto SMC_IMR_AWB = hr::field_mask_literal< 0x400e0014, 22, 1 >();
   // NFC Access Size Error Interrupt Mask
   constexpr auto SMC_IMR_NFCASE = hr::field_mask_literal< 0x400e0014, 23, 1 >();
   // Ready/Busy Line 0 Interrupt Mask
   constexpr auto SMC_IMR_RB_EDGE0 = hr::field_mask_literal< 0x400e0014, 24, 1 >();

// ADDR
   // NAND Flash Array Address cycle 0
   constexpr auto SMC_ADDR_ADDR_CYCLE0_Msk = hr::field_mask_literal< 0x400e0018, 0, 8 >();

// BANK
   // Bank Identifier
   constexpr auto SMC_BANK_BANK_Msk = hr::field_mask_literal< 0x400e001c, 0, 3 >();

// ECC_CTRL
   // Reset ECC
   constexpr auto SMC_ECC_CTRL_RST = hr::field_mask_literal< 0x400e0020, 0, 1 >();
   // Software Reset
   constexpr auto SMC_ECC_CTRL_SWRST = hr::field_mask_literal< 0x400e0020, 1, 1 >();

// ECC_MD
   // ECC Page Size
   constexpr auto SMC_ECC_MD_ECC_PAGESIZE_Msk = hr::field_mask_literal< 0x400e0024, 0, 2 >();
      // Main area 512 Bytes + Spare area 16 Bytes = 528 Bytes
      constexpr auto SMC_ECC_MD_ECC_PAGESIZE_PS512_16 = hr::field_value_literal< 0x400e0024, 0, 2 >( 0 );
      // Main area 1024 Bytes + Spare area 32 Bytes = 1056 Bytes
      constexpr auto SMC_ECC_MD_ECC_PAGESIZE_PS1024_32 = hr::field_value_literal< 0x400e0024, 0, 2 >( 1 );
      // Main area 2048 Bytes + Spare area 64 Bytes = 2112 Bytes
      constexpr auto SMC_ECC_MD_ECC_PAGESIZE_PS2048_64 = hr::field_value_literal< 0x400e0024, 0, 2 >( 2 );
      // Main area 4096 Bytes + Spare area 128 Bytes = 4224 Bytes
      constexpr auto SMC_ECC_MD_ECC_PAGESIZE_PS4096_128 = hr::field_value_literal< 0x400e0024, 0, 2 >( 3 );
   // Type of Correction
   constexpr auto SMC_ECC_MD_TYPCORREC_Msk = hr::field_mask_literal< 0x400e0024, 4, 2 >();
      // 1 bit correction for a page of 512/1024/2048/4096 Bytes  (for 8 or 16-bit NAND Flash)
      constexpr auto SMC_ECC_MD_TYPCORREC_CPAGE = hr::field_value_literal< 0x400e0024, 4, 2 >( 0 );
      // 1 bit correction for 256 Bytes of data for a page of 512/2048/4096 bytes (for 8-bit NAND Flash only)
      constexpr auto SMC_ECC_MD_TYPCORREC_C256B = hr::field_value_literal< 0x400e0024, 4, 2 >( 1 );
      // 1 bit correction for 512 Bytes of data for a page of 512/2048/4096 bytes (for 8-bit NAND Flash only)
      constexpr auto SMC_ECC_MD_TYPCORREC_C512B = hr::field_value_literal< 0x400e0024, 4, 2 >( 2 );

// ECC_SR1
   // Recoverable Error
   constexpr auto SMC_ECC_SR1_RECERR0 = hr::field_mask_literal< 0x400e0028, 0, 1 >();
   // ECC Error
   constexpr auto SMC_ECC_SR1_ECCERR0_Msk = hr::field_mask_literal< 0x400e0028, 1, 2 >();
   // Recoverable Error in the page between the 256th and the 511th bytes or the 512nd and the 1023rd bytes
   constexpr auto SMC_ECC_SR1_RECERR1 = hr::field_mask_literal< 0x400e0028, 4, 1 >();
   // ECC Error in the page between the 256th and the 511th bytes or between the 512nd and the 1023rd bytes
   constexpr auto SMC_ECC_SR1_ECCERR1 = hr::field_mask_literal< 0x400e0028, 5, 1 >();
   // Multiple Error in the page between the 256th and the 511th bytes or between the 512nd and the 1023rd bytes
   constexpr auto SMC_ECC_SR1_MULERR1 = hr::field_mask_literal< 0x400e0028, 6, 1 >();
   // Recoverable Error in the page between the 512nd and the 767th bytes or between the 1024th and the 1535th bytes
   constexpr auto SMC_ECC_SR1_RECERR2 = hr::field_mask_literal< 0x400e0028, 8, 1 >();
   // ECC Error in the page between the 512nd and the 767th bytes or between the 1024th and the 1535th bytes
   constexpr auto SMC_ECC_SR1_ECCERR2 = hr::field_mask_literal< 0x400e0028, 9, 1 >();
   // Multiple Error in the page between the 512nd and the 767th bytes or between the 1024th and the 1535th bytes
   constexpr auto SMC_ECC_SR1_MULERR2 = hr::field_mask_literal< 0x400e0028, 10, 1 >();
   // Recoverable Error in the page between the 768th and the 1023rd bytes or between the 1536th and the 2047th bytes
   constexpr auto SMC_ECC_SR1_RECERR3 = hr::field_mask_literal< 0x400e0028, 12, 1 >();
   // ECC Error in the page between the 768th and the 1023rd bytes or between the 1536th and the 2047th bytes
   constexpr auto SMC_ECC_SR1_ECCERR3 = hr::field_mask_literal< 0x400e0028, 13, 1 >();
   // Multiple Error in the page between the 768th and the 1023rd bytes or between the 1536th and the 2047th bytes
   constexpr auto SMC_ECC_SR1_MULERR3 = hr::field_mask_literal< 0x400e0028, 14, 1 >();
   // Recoverable Error in the page between the 1024th and the 1279th bytes or between the 2048th and the 2559th bytes
   constexpr auto SMC_ECC_SR1_RECERR4 = hr::field_mask_literal< 0x400e0028, 16, 1 >();
   // ECC Error in the page between the 1024th and the 1279th bytes or between the 2048th and the 2559th bytes
   constexpr auto SMC_ECC_SR1_ECCERR4_Msk = hr::field_mask_literal< 0x400e0028, 17, 2 >();
   // Recoverable Error in the page between the 1280th and the 1535th bytes or between the 2560th and the 3071st bytes
   constexpr auto SMC_ECC_SR1_RECERR5 = hr::field_mask_literal< 0x400e0028, 20, 1 >();
   // ECC Error in the page between the 1280th and the 1535th bytes or between the 2560th and the 3071st bytes
   constexpr auto SMC_ECC_SR1_ECCERR5_Msk = hr::field_mask_literal< 0x400e0028, 21, 2 >();
   // Recoverable Error in the page between the 1536th and the 1791st bytes or between the 3072nd and the 3583rd bytes
   constexpr auto SMC_ECC_SR1_RECERR6 = hr::field_mask_literal< 0x400e0028, 24, 1 >();
   // ECC Error in the page between the 1536th and the 1791st bytes or between the 3072nd and the 3583rd bytes
   constexpr auto SMC_ECC_SR1_ECCERR6_Msk = hr::field_mask_literal< 0x400e0028, 25, 2 >();
   // Recoverable Error in the page between the 1792nd and the 2047th bytes or between the 3584th and the 4095th bytes
   constexpr auto SMC_ECC_SR1_RECERR7 = hr::field_mask_literal< 0x400e0028, 28, 1 >();
   // ECC Error in the page between the 1792nd and the 2047th bytes or between the 3584th and the 4095th bytes
   constexpr auto SMC_ECC_SR1_ECCERR7_Msk = hr::field_mask_literal< 0x400e0028, 29, 2 >();

// ECC_PR0
   // Bit Address
   constexpr auto SMC_ECC_PR0_BITADDR_Msk = hr::field_mask_literal< 0x400e002c, 0, 4 >();
   // Word Address
   constexpr auto SMC_ECC_PR0_WORDADDR_Msk = hr::field_mask_literal< 0x400e002c, 4, 12 >();

// ECC_PR0_W9BIT
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR0_W9BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e002c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR0_W9BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e002c, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR0_W9BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e002c, 12, 12 >();

// ECC_PR0_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR0_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e002c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR0_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e002c, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR0_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e002c, 12, 11 >();

// ECC_PR1
   // Parity N
   constexpr auto SMC_ECC_PR1_NPARITY_Msk = hr::field_mask_literal< 0x400e0030, 0, 16 >();

// ECC_PR1_W9BIT
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR1_W9BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e0030, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR1_W9BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e0030, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR1_W9BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e0030, 12, 12 >();

// ECC_PR1_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR1_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e0030, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR1_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e0030, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR1_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e0030, 12, 11 >();

// ECC_SR2
   // Recoverable Error in the page between the 2048th and the 2303rd bytes
   constexpr auto SMC_ECC_SR2_RECERR8 = hr::field_mask_literal< 0x400e0034, 0, 1 >();
   // ECC Error in the page between the 2048th and the 2303rd bytes
   constexpr auto SMC_ECC_SR2_ECCERR8_Msk = hr::field_mask_literal< 0x400e0034, 1, 2 >();
   // Recoverable Error in the page between the 2304th and the 2559th bytes
   constexpr auto SMC_ECC_SR2_RECERR9 = hr::field_mask_literal< 0x400e0034, 4, 1 >();
   // ECC Error in the page between the 2304th and the 2559th bytes
   constexpr auto SMC_ECC_SR2_ECCERR9 = hr::field_mask_literal< 0x400e0034, 5, 1 >();
   // Multiple Error in the page between the 2304th and the 2559th bytes
   constexpr auto SMC_ECC_SR2_MULERR9 = hr::field_mask_literal< 0x400e0034, 6, 1 >();
   // Recoverable Error in the page between the 2560th and the 2815th bytes
   constexpr auto SMC_ECC_SR2_RECERR10 = hr::field_mask_literal< 0x400e0034, 8, 1 >();
   // ECC Error in the page between the 2560th and the 2815th bytes
   constexpr auto SMC_ECC_SR2_ECCERR10 = hr::field_mask_literal< 0x400e0034, 9, 1 >();
   // Multiple Error in the page between the 2560th and the 2815th bytes
   constexpr auto SMC_ECC_SR2_MULERR10 = hr::field_mask_literal< 0x400e0034, 10, 1 >();
   // Recoverable Error in the page between the 2816th and the 3071st bytes
   constexpr auto SMC_ECC_SR2_RECERR11 = hr::field_mask_literal< 0x400e0034, 12, 1 >();
   // ECC Error in the page between the 2816th and the 3071st bytes
   constexpr auto SMC_ECC_SR2_ECCERR11 = hr::field_mask_literal< 0x400e0034, 13, 1 >();
   // Multiple Error in the page between the 2816th and the 3071st bytes
   constexpr auto SMC_ECC_SR2_MULERR11 = hr::field_mask_literal< 0x400e0034, 14, 1 >();
   // Recoverable Error in the page between the 3072nd and the 3327th bytes
   constexpr auto SMC_ECC_SR2_RECERR12 = hr::field_mask_literal< 0x400e0034, 16, 1 >();
   // ECC Error in the page between the 3072nd and the 3327th bytes
   constexpr auto SMC_ECC_SR2_ECCERR12_Msk = hr::field_mask_literal< 0x400e0034, 17, 2 >();
   // Recoverable Error in the page between the 3328th and the 3583rd bytes
   constexpr auto SMC_ECC_SR2_RECERR13 = hr::field_mask_literal< 0x400e0034, 20, 1 >();
   // ECC Error in the page between the 3328th and the 3583rd bytes
   constexpr auto SMC_ECC_SR2_ECCERR13_Msk = hr::field_mask_literal< 0x400e0034, 21, 2 >();
   // Recoverable Error in the page between the 3584th and the 3839th bytes
   constexpr auto SMC_ECC_SR2_RECERR14 = hr::field_mask_literal< 0x400e0034, 24, 1 >();
   // ECC Error in the page between the 3584th and the 3839th bytes
   constexpr auto SMC_ECC_SR2_ECCERR14_Msk = hr::field_mask_literal< 0x400e0034, 25, 2 >();
   // Recoverable Error in the page between the 3840th and the 4095th bytes
   constexpr auto SMC_ECC_SR2_RECERR15 = hr::field_mask_literal< 0x400e0034, 28, 1 >();
   // ECC Error in the page between the 3840th and the 4095th bytes
   constexpr auto SMC_ECC_SR2_ECCERR15_Msk = hr::field_mask_literal< 0x400e0034, 29, 2 >();

// ECC_PR2
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR2_BITADDR_Msk = hr::field_mask_literal< 0x400e0038, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR2_WORDADDR_Msk = hr::field_mask_literal< 0x400e0038, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR2_NPARITY_Msk = hr::field_mask_literal< 0x400e0038, 12, 12 >();

// ECC_PR2_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR2_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e0038, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR2_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e0038, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR2_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e0038, 12, 11 >();

// ECC_PR3
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR3_BITADDR_Msk = hr::field_mask_literal< 0x400e003c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR3_WORDADDR_Msk = hr::field_mask_literal< 0x400e003c, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR3_NPARITY_Msk = hr::field_mask_literal< 0x400e003c, 12, 12 >();

// ECC_PR3_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR3_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e003c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR3_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e003c, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR3_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e003c, 12, 11 >();

// ECC_PR4
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR4_BITADDR_Msk = hr::field_mask_literal< 0x400e0040, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR4_WORDADDR_Msk = hr::field_mask_literal< 0x400e0040, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR4_NPARITY_Msk = hr::field_mask_literal< 0x400e0040, 12, 12 >();

// ECC_PR4_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR4_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e0040, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR4_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e0040, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR4_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e0040, 12, 11 >();

// ECC_PR5
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR5_BITADDR_Msk = hr::field_mask_literal< 0x400e0044, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR5_WORDADDR_Msk = hr::field_mask_literal< 0x400e0044, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR5_NPARITY_Msk = hr::field_mask_literal< 0x400e0044, 12, 12 >();

// ECC_PR5_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR5_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e0044, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR5_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e0044, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR5_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e0044, 12, 11 >();

// ECC_PR6
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR6_BITADDR_Msk = hr::field_mask_literal< 0x400e0048, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR6_WORDADDR_Msk = hr::field_mask_literal< 0x400e0048, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR6_NPARITY_Msk = hr::field_mask_literal< 0x400e0048, 12, 12 >();

// ECC_PR6_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR6_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e0048, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR6_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e0048, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR6_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e0048, 12, 11 >();

// ECC_PR7
   // Corrupted Bit Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR7_BITADDR_Msk = hr::field_mask_literal< 0x400e004c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 512) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR7_WORDADDR_Msk = hr::field_mask_literal< 0x400e004c, 3, 9 >();
   // Parity N
   constexpr auto SMC_ECC_PR7_NPARITY_Msk = hr::field_mask_literal< 0x400e004c, 12, 12 >();

// ECC_PR7_W8BIT
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR7_W8BIT_BITADDR_Msk = hr::field_mask_literal< 0x400e004c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR7_W8BIT_WORDADDR_Msk = hr::field_mask_literal< 0x400e004c, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR7_W8BIT_NPARITY_Msk = hr::field_mask_literal< 0x400e004c, 12, 11 >();

// ECC_PR8
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR8_BITADDR_Msk = hr::field_mask_literal< 0x400e0050, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR8_WORDADDR_Msk = hr::field_mask_literal< 0x400e0050, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR8_NPARITY_Msk = hr::field_mask_literal< 0x400e0050, 12, 11 >();

// ECC_PR9
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR9_BITADDR_Msk = hr::field_mask_literal< 0x400e0054, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR9_WORDADDR_Msk = hr::field_mask_literal< 0x400e0054, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR9_NPARITY_Msk = hr::field_mask_literal< 0x400e0054, 12, 11 >();

// ECC_PR10
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR10_BITADDR_Msk = hr::field_mask_literal< 0x400e0058, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR10_WORDADDR_Msk = hr::field_mask_literal< 0x400e0058, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR10_NPARITY_Msk = hr::field_mask_literal< 0x400e0058, 12, 11 >();

// ECC_PR11
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR11_BITADDR_Msk = hr::field_mask_literal< 0x400e005c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR11_WORDADDR_Msk = hr::field_mask_literal< 0x400e005c, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR11_NPARITY_Msk = hr::field_mask_literal< 0x400e005c, 12, 11 >();

// ECC_PR12
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR12_BITADDR_Msk = hr::field_mask_literal< 0x400e0060, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR12_WORDADDR_Msk = hr::field_mask_literal< 0x400e0060, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR12_NPARITY_Msk = hr::field_mask_literal< 0x400e0060, 12, 11 >();

// ECC_PR13
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR13_BITADDR_Msk = hr::field_mask_literal< 0x400e0064, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR13_WORDADDR_Msk = hr::field_mask_literal< 0x400e0064, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR13_NPARITY_Msk = hr::field_mask_literal< 0x400e0064, 12, 11 >();

// ECC_PR14
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR14_BITADDR_Msk = hr::field_mask_literal< 0x400e0068, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR14_WORDADDR_Msk = hr::field_mask_literal< 0x400e0068, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR14_NPARITY_Msk = hr::field_mask_literal< 0x400e0068, 12, 11 >();

// ECC_PR15
   // Corrupted Bit Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR15_BITADDR_Msk = hr::field_mask_literal< 0x400e006c, 0, 3 >();
   // Corrupted Word Address in the Page between (i x 256) and ((i + 1) x 512) - 1) Bytes
   constexpr auto SMC_ECC_PR15_WORDADDR_Msk = hr::field_mask_literal< 0x400e006c, 3, 8 >();
   // Parity N
   constexpr auto SMC_ECC_PR15_NPARITY_Msk = hr::field_mask_literal< 0x400e006c, 12, 11 >();

// SETUP0
   // NWE Setup Length
   constexpr auto SMC_SETUP0_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e0070, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP0_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e0070, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP0_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e0070, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP0_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e0070, 24, 6 >();

// PULSE0
   // NWE Pulse Length
   constexpr auto SMC_PULSE0_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e0074, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE0_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e0074, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE0_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e0074, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE0_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e0074, 24, 6 >();

// CYCLE0
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE0_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e0078, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE0_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e0078, 16, 9 >();

// TIMINGS0
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS0_TCLR_Msk = hr::field_mask_literal< 0x400e007c, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS0_TADL_Msk = hr::field_mask_literal< 0x400e007c, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS0_TAR_Msk = hr::field_mask_literal< 0x400e007c, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS0_OCMS = hr::field_mask_literal< 0x400e007c, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS0_TRR_Msk = hr::field_mask_literal< 0x400e007c, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS0_TWB_Msk = hr::field_mask_literal< 0x400e007c, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS0_RBNSEL_Msk = hr::field_mask_literal< 0x400e007c, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS0_NFSEL = hr::field_mask_literal< 0x400e007c, 31, 1 >();

// MODE0
   // None
   constexpr auto SMC_MODE0_READ_MODE = hr::field_mask_literal< 0x400e0080, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE0_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e0080, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE0_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e0080, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE0_WRITE_MODE = hr::field_mask_literal< 0x400e0080, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE0_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e0080, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE0_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e0080, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE0_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e0080, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE0_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e0080, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE0_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e0080, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE0_EXNW_MODE_READY = hr::field_value_literal< 0x400e0080, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE0_BAT = hr::field_mask_literal< 0x400e0080, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE0_DBW = hr::field_mask_literal< 0x400e0080, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE0_DBW_BIT_8 = hr::field_value_literal< 0x400e0080, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE0_DBW_BIT_16 = hr::field_value_literal< 0x400e0080, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE0_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e0080, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE0_TDF_MODE = hr::field_mask_literal< 0x400e0080, 20, 1 >();

// SETUP1
   // NWE Setup Length
   constexpr auto SMC_SETUP1_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e0084, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP1_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e0084, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP1_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e0084, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP1_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e0084, 24, 6 >();

// PULSE1
   // NWE Pulse Length
   constexpr auto SMC_PULSE1_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e0088, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE1_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e0088, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE1_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e0088, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE1_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e0088, 24, 6 >();

// CYCLE1
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE1_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e008c, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE1_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e008c, 16, 9 >();

// TIMINGS1
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS1_TCLR_Msk = hr::field_mask_literal< 0x400e0090, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS1_TADL_Msk = hr::field_mask_literal< 0x400e0090, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS1_TAR_Msk = hr::field_mask_literal< 0x400e0090, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS1_OCMS = hr::field_mask_literal< 0x400e0090, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS1_TRR_Msk = hr::field_mask_literal< 0x400e0090, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS1_TWB_Msk = hr::field_mask_literal< 0x400e0090, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS1_RBNSEL_Msk = hr::field_mask_literal< 0x400e0090, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS1_NFSEL = hr::field_mask_literal< 0x400e0090, 31, 1 >();

// MODE1
   // None
   constexpr auto SMC_MODE1_READ_MODE = hr::field_mask_literal< 0x400e0094, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE1_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e0094, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE1_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e0094, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE1_WRITE_MODE = hr::field_mask_literal< 0x400e0094, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE1_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e0094, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE1_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e0094, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE1_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e0094, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE1_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e0094, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE1_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e0094, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE1_EXNW_MODE_READY = hr::field_value_literal< 0x400e0094, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE1_BAT = hr::field_mask_literal< 0x400e0094, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE1_DBW = hr::field_mask_literal< 0x400e0094, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE1_DBW_BIT_8 = hr::field_value_literal< 0x400e0094, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE1_DBW_BIT_16 = hr::field_value_literal< 0x400e0094, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE1_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e0094, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE1_TDF_MODE = hr::field_mask_literal< 0x400e0094, 20, 1 >();

// SETUP2
   // NWE Setup Length
   constexpr auto SMC_SETUP2_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e0098, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP2_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e0098, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP2_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e0098, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP2_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e0098, 24, 6 >();

// PULSE2
   // NWE Pulse Length
   constexpr auto SMC_PULSE2_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e009c, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE2_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e009c, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE2_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e009c, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE2_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e009c, 24, 6 >();

// CYCLE2
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE2_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e00a0, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE2_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e00a0, 16, 9 >();

// TIMINGS2
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS2_TCLR_Msk = hr::field_mask_literal< 0x400e00a4, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS2_TADL_Msk = hr::field_mask_literal< 0x400e00a4, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS2_TAR_Msk = hr::field_mask_literal< 0x400e00a4, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS2_OCMS = hr::field_mask_literal< 0x400e00a4, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS2_TRR_Msk = hr::field_mask_literal< 0x400e00a4, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS2_TWB_Msk = hr::field_mask_literal< 0x400e00a4, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS2_RBNSEL_Msk = hr::field_mask_literal< 0x400e00a4, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS2_NFSEL = hr::field_mask_literal< 0x400e00a4, 31, 1 >();

// MODE2
   // None
   constexpr auto SMC_MODE2_READ_MODE = hr::field_mask_literal< 0x400e00a8, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE2_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00a8, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE2_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e00a8, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE2_WRITE_MODE = hr::field_mask_literal< 0x400e00a8, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE2_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00a8, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE2_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e00a8, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE2_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e00a8, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE2_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e00a8, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE2_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e00a8, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE2_EXNW_MODE_READY = hr::field_value_literal< 0x400e00a8, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE2_BAT = hr::field_mask_literal< 0x400e00a8, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE2_DBW = hr::field_mask_literal< 0x400e00a8, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE2_DBW_BIT_8 = hr::field_value_literal< 0x400e00a8, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE2_DBW_BIT_16 = hr::field_value_literal< 0x400e00a8, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE2_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e00a8, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE2_TDF_MODE = hr::field_mask_literal< 0x400e00a8, 20, 1 >();

// SETUP3
   // NWE Setup Length
   constexpr auto SMC_SETUP3_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e00ac, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP3_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e00ac, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP3_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e00ac, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP3_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e00ac, 24, 6 >();

// PULSE3
   // NWE Pulse Length
   constexpr auto SMC_PULSE3_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e00b0, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE3_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e00b0, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE3_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e00b0, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE3_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e00b0, 24, 6 >();

// CYCLE3
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE3_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e00b4, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE3_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e00b4, 16, 9 >();

// TIMINGS3
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS3_TCLR_Msk = hr::field_mask_literal< 0x400e00b8, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS3_TADL_Msk = hr::field_mask_literal< 0x400e00b8, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS3_TAR_Msk = hr::field_mask_literal< 0x400e00b8, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS3_OCMS = hr::field_mask_literal< 0x400e00b8, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS3_TRR_Msk = hr::field_mask_literal< 0x400e00b8, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS3_TWB_Msk = hr::field_mask_literal< 0x400e00b8, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS3_RBNSEL_Msk = hr::field_mask_literal< 0x400e00b8, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS3_NFSEL = hr::field_mask_literal< 0x400e00b8, 31, 1 >();

// MODE3
   // None
   constexpr auto SMC_MODE3_READ_MODE = hr::field_mask_literal< 0x400e00bc, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE3_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00bc, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE3_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e00bc, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE3_WRITE_MODE = hr::field_mask_literal< 0x400e00bc, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE3_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00bc, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE3_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e00bc, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE3_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e00bc, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE3_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e00bc, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE3_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e00bc, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE3_EXNW_MODE_READY = hr::field_value_literal< 0x400e00bc, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE3_BAT = hr::field_mask_literal< 0x400e00bc, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE3_DBW = hr::field_mask_literal< 0x400e00bc, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE3_DBW_BIT_8 = hr::field_value_literal< 0x400e00bc, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE3_DBW_BIT_16 = hr::field_value_literal< 0x400e00bc, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE3_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e00bc, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE3_TDF_MODE = hr::field_mask_literal< 0x400e00bc, 20, 1 >();

// SETUP4
   // NWE Setup Length
   constexpr auto SMC_SETUP4_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e00c0, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP4_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e00c0, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP4_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e00c0, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP4_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e00c0, 24, 6 >();

// PULSE4
   // NWE Pulse Length
   constexpr auto SMC_PULSE4_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e00c4, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE4_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e00c4, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE4_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e00c4, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE4_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e00c4, 24, 6 >();

// CYCLE4
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE4_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e00c8, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE4_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e00c8, 16, 9 >();

// TIMINGS4
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS4_TCLR_Msk = hr::field_mask_literal< 0x400e00cc, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS4_TADL_Msk = hr::field_mask_literal< 0x400e00cc, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS4_TAR_Msk = hr::field_mask_literal< 0x400e00cc, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS4_OCMS = hr::field_mask_literal< 0x400e00cc, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS4_TRR_Msk = hr::field_mask_literal< 0x400e00cc, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS4_TWB_Msk = hr::field_mask_literal< 0x400e00cc, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS4_RBNSEL_Msk = hr::field_mask_literal< 0x400e00cc, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS4_NFSEL = hr::field_mask_literal< 0x400e00cc, 31, 1 >();

// MODE4
   // None
   constexpr auto SMC_MODE4_READ_MODE = hr::field_mask_literal< 0x400e00d0, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE4_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00d0, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE4_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e00d0, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE4_WRITE_MODE = hr::field_mask_literal< 0x400e00d0, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE4_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00d0, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE4_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e00d0, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE4_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e00d0, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE4_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e00d0, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE4_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e00d0, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE4_EXNW_MODE_READY = hr::field_value_literal< 0x400e00d0, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE4_BAT = hr::field_mask_literal< 0x400e00d0, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE4_DBW = hr::field_mask_literal< 0x400e00d0, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE4_DBW_BIT_8 = hr::field_value_literal< 0x400e00d0, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE4_DBW_BIT_16 = hr::field_value_literal< 0x400e00d0, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE4_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e00d0, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE4_TDF_MODE = hr::field_mask_literal< 0x400e00d0, 20, 1 >();

// SETUP5
   // NWE Setup Length
   constexpr auto SMC_SETUP5_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e00d4, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP5_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e00d4, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP5_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e00d4, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP5_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e00d4, 24, 6 >();

// PULSE5
   // NWE Pulse Length
   constexpr auto SMC_PULSE5_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e00d8, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE5_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e00d8, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE5_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e00d8, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE5_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e00d8, 24, 6 >();

// CYCLE5
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE5_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e00dc, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE5_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e00dc, 16, 9 >();

// TIMINGS5
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS5_TCLR_Msk = hr::field_mask_literal< 0x400e00e0, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS5_TADL_Msk = hr::field_mask_literal< 0x400e00e0, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS5_TAR_Msk = hr::field_mask_literal< 0x400e00e0, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS5_OCMS = hr::field_mask_literal< 0x400e00e0, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS5_TRR_Msk = hr::field_mask_literal< 0x400e00e0, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS5_TWB_Msk = hr::field_mask_literal< 0x400e00e0, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS5_RBNSEL_Msk = hr::field_mask_literal< 0x400e00e0, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS5_NFSEL = hr::field_mask_literal< 0x400e00e0, 31, 1 >();

// MODE5
   // None
   constexpr auto SMC_MODE5_READ_MODE = hr::field_mask_literal< 0x400e00e4, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE5_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00e4, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE5_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e00e4, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE5_WRITE_MODE = hr::field_mask_literal< 0x400e00e4, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE5_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00e4, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE5_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e00e4, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE5_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e00e4, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE5_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e00e4, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE5_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e00e4, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE5_EXNW_MODE_READY = hr::field_value_literal< 0x400e00e4, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE5_BAT = hr::field_mask_literal< 0x400e00e4, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE5_DBW = hr::field_mask_literal< 0x400e00e4, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE5_DBW_BIT_8 = hr::field_value_literal< 0x400e00e4, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE5_DBW_BIT_16 = hr::field_value_literal< 0x400e00e4, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE5_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e00e4, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE5_TDF_MODE = hr::field_mask_literal< 0x400e00e4, 20, 1 >();

// SETUP6
   // NWE Setup Length
   constexpr auto SMC_SETUP6_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e00e8, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP6_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e00e8, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP6_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e00e8, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP6_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e00e8, 24, 6 >();

// PULSE6
   // NWE Pulse Length
   constexpr auto SMC_PULSE6_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e00ec, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE6_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e00ec, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE6_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e00ec, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE6_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e00ec, 24, 6 >();

// CYCLE6
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE6_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e00f0, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE6_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e00f0, 16, 9 >();

// TIMINGS6
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS6_TCLR_Msk = hr::field_mask_literal< 0x400e00f4, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS6_TADL_Msk = hr::field_mask_literal< 0x400e00f4, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS6_TAR_Msk = hr::field_mask_literal< 0x400e00f4, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS6_OCMS = hr::field_mask_literal< 0x400e00f4, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS6_TRR_Msk = hr::field_mask_literal< 0x400e00f4, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS6_TWB_Msk = hr::field_mask_literal< 0x400e00f4, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS6_RBNSEL_Msk = hr::field_mask_literal< 0x400e00f4, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS6_NFSEL = hr::field_mask_literal< 0x400e00f4, 31, 1 >();

// MODE6
   // None
   constexpr auto SMC_MODE6_READ_MODE = hr::field_mask_literal< 0x400e00f8, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE6_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00f8, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE6_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e00f8, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE6_WRITE_MODE = hr::field_mask_literal< 0x400e00f8, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE6_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e00f8, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE6_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e00f8, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE6_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e00f8, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE6_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e00f8, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE6_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e00f8, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE6_EXNW_MODE_READY = hr::field_value_literal< 0x400e00f8, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE6_BAT = hr::field_mask_literal< 0x400e00f8, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE6_DBW = hr::field_mask_literal< 0x400e00f8, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE6_DBW_BIT_8 = hr::field_value_literal< 0x400e00f8, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE6_DBW_BIT_16 = hr::field_value_literal< 0x400e00f8, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE6_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e00f8, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE6_TDF_MODE = hr::field_mask_literal< 0x400e00f8, 20, 1 >();

// SETUP7
   // NWE Setup Length
   constexpr auto SMC_SETUP7_NWE_SETUP_Msk = hr::field_mask_literal< 0x400e00fc, 0, 6 >();
   // NCS Setup Length in Write Access
   constexpr auto SMC_SETUP7_NCS_WR_SETUP_Msk = hr::field_mask_literal< 0x400e00fc, 8, 6 >();
   // NRD Setup Length
   constexpr auto SMC_SETUP7_NRD_SETUP_Msk = hr::field_mask_literal< 0x400e00fc, 16, 6 >();
   // NCS Setup Length in Read Access
   constexpr auto SMC_SETUP7_NCS_RD_SETUP_Msk = hr::field_mask_literal< 0x400e00fc, 24, 6 >();

// PULSE7
   // NWE Pulse Length
   constexpr auto SMC_PULSE7_NWE_PULSE_Msk = hr::field_mask_literal< 0x400e0100, 0, 6 >();
   // NCS Pulse Length in WRITE Access
   constexpr auto SMC_PULSE7_NCS_WR_PULSE_Msk = hr::field_mask_literal< 0x400e0100, 8, 6 >();
   // NRD Pulse Length
   constexpr auto SMC_PULSE7_NRD_PULSE_Msk = hr::field_mask_literal< 0x400e0100, 16, 6 >();
   // NCS Pulse Length in READ Access
   constexpr auto SMC_PULSE7_NCS_RD_PULSE_Msk = hr::field_mask_literal< 0x400e0100, 24, 6 >();

// CYCLE7
   // Total Write Cycle Length
   constexpr auto SMC_CYCLE7_NWE_CYCLE_Msk = hr::field_mask_literal< 0x400e0104, 0, 9 >();
   // Total Read Cycle Length
   constexpr auto SMC_CYCLE7_NRD_CYCLE_Msk = hr::field_mask_literal< 0x400e0104, 16, 9 >();

// TIMINGS7
   // CLE to REN Low Delay
   constexpr auto SMC_TIMINGS7_TCLR_Msk = hr::field_mask_literal< 0x400e0108, 0, 4 >();
   // ALE to Data Start
   constexpr auto SMC_TIMINGS7_TADL_Msk = hr::field_mask_literal< 0x400e0108, 4, 4 >();
   // ALE to REN Low Delay
   constexpr auto SMC_TIMINGS7_TAR_Msk = hr::field_mask_literal< 0x400e0108, 8, 4 >();
   // Off Chip Memory Scrambling Enable
   constexpr auto SMC_TIMINGS7_OCMS = hr::field_mask_literal< 0x400e0108, 12, 1 >();
   // Ready to REN Low Delay
   constexpr auto SMC_TIMINGS7_TRR_Msk = hr::field_mask_literal< 0x400e0108, 16, 4 >();
   // WEN High to REN to Busy
   constexpr auto SMC_TIMINGS7_TWB_Msk = hr::field_mask_literal< 0x400e0108, 24, 4 >();
   // Ready/Busy Line Selection
   constexpr auto SMC_TIMINGS7_RBNSEL_Msk = hr::field_mask_literal< 0x400e0108, 28, 3 >();
   // NAND Flash Selection
   constexpr auto SMC_TIMINGS7_NFSEL = hr::field_mask_literal< 0x400e0108, 31, 1 >();

// MODE7
   // None
   constexpr auto SMC_MODE7_READ_MODE = hr::field_mask_literal< 0x400e010c, 0, 1 >();
      // The Read operation is controlled by the NCS signal.
      constexpr auto SMC_MODE7_READ_MODE_NCS_CTRL = hr::field_value_literal< 0x400e010c, 0, 1 >( 0 );
      // The Read operation is controlled by the NRD signal.
      constexpr auto SMC_MODE7_READ_MODE_NRD_CTRL = hr::field_value_literal< 0x400e010c, 0, 1 >( 1 );
   // None
   constexpr auto SMC_MODE7_WRITE_MODE = hr::field_mask_literal< 0x400e010c, 1, 1 >();
      // The Write operation is controller by the NCS signal.
      constexpr auto SMC_MODE7_WRITE_MODE_NCS_CTRL = hr::field_value_literal< 0x400e010c, 1, 1 >( 0 );
      // The Write operation is controlled by the NWE signal.
      constexpr auto SMC_MODE7_WRITE_MODE_NWE_CTRL = hr::field_value_literal< 0x400e010c, 1, 1 >( 1 );
   // NWAIT Mode
   constexpr auto SMC_MODE7_EXNW_MODE_Msk = hr::field_mask_literal< 0x400e010c, 4, 2 >();
      // Disabled
      constexpr auto SMC_MODE7_EXNW_MODE_DISABLED = hr::field_value_literal< 0x400e010c, 4, 2 >( 0 );
      // Frozen Mode
      constexpr auto SMC_MODE7_EXNW_MODE_FROZEN = hr::field_value_literal< 0x400e010c, 4, 2 >( 2 );
      // Ready Mode
      constexpr auto SMC_MODE7_EXNW_MODE_READY = hr::field_value_literal< 0x400e010c, 4, 2 >( 3 );
   // Byte Access Type
   constexpr auto SMC_MODE7_BAT = hr::field_mask_literal< 0x400e010c, 8, 1 >();
   // Data Bus Width
   constexpr auto SMC_MODE7_DBW = hr::field_mask_literal< 0x400e010c, 12, 1 >();
      // 8-bit bus
      constexpr auto SMC_MODE7_DBW_BIT_8 = hr::field_value_literal< 0x400e010c, 12, 1 >( 0 );
      // 16-bit bus
      constexpr auto SMC_MODE7_DBW_BIT_16 = hr::field_value_literal< 0x400e010c, 12, 1 >( 1 );
   // Data Float Time
   constexpr auto SMC_MODE7_TDF_CYCLES_Msk = hr::field_mask_literal< 0x400e010c, 16, 4 >();
   // TDF Optimization
   constexpr auto SMC_MODE7_TDF_MODE = hr::field_mask_literal< 0x400e010c, 20, 1 >();

// OCMS
   // Static Memory Controller Scrambling Enable
   constexpr auto SMC_OCMS_SMSE = hr::field_mask_literal< 0x400e0110, 0, 1 >();
   // SRAM Scrambling Enable
   constexpr auto SMC_OCMS_SRSE = hr::field_mask_literal< 0x400e0110, 1, 1 >();

// KEY1
   // Off Chip Memory Scrambling (OCMS) Key Part 1
   constexpr auto SMC_KEY1_KEY1_Msk = hr::field_mask_literal< 0x400e0114, 0, 32 >();

// KEY2
   // Off Chip Memory Scrambling (OCMS) Key Part 2
   constexpr auto SMC_KEY2_KEY2_Msk = hr::field_mask_literal< 0x400e0118, 0, 32 >();

// WPCR
   // Write Protection Enable
   constexpr auto SMC_WPCR_WP_EN = hr::field_mask_literal< 0x400e01e4, 0, 1 >();
   // Write Protection KEY password
   constexpr auto SMC_WPCR_WP_KEY_Msk = hr::field_mask_literal< 0x400e01e4, 8, 24 >();

// WPSR
   // Write Protection Violation Status
   constexpr auto SMC_WPSR_WP_VS_Msk = hr::field_mask_literal< 0x400e01e8, 0, 4 >();
   // Write Protection Violation Source
   constexpr auto SMC_WPSR_WP_VSRC_Msk = hr::field_mask_literal< 0x400e01e8, 8, 16 >();

// =============================================================================
//
// MATRIX
// base address = 0x400e0400
// AHB Bus Matrix
//
// =============================================================================

struct Matrix {
   hr::hardware_register<0x400e0400> MATRIX_MCFG[6];
   hr::reserved< 0x18, 10 > _reserved_at_0x18;
   hr::hardware_register<0x400e0440> MATRIX_SCFG[9];
   hr::reserved< 0x64, 7 > _reserved_at_0x64;
   hr::hardware_register<0x400e0480> MATRIX_PRAS0;
   hr::reserved< 0x84, 1 > _reserved_at_0x84;
   hr::hardware_register<0x400e0488> MATRIX_PRAS1;
   hr::reserved< 0x8C, 1 > _reserved_at_0x8C;
   hr::hardware_register<0x400e0490> MATRIX_PRAS2;
   hr::reserved< 0x94, 1 > _reserved_at_0x94;
   hr::hardware_register<0x400e0498> MATRIX_PRAS3;
   hr::reserved< 0x9C, 1 > _reserved_at_0x9C;
   hr::hardware_register<0x400e04a0> MATRIX_PRAS4;
   hr::reserved< 0xA4, 1 > _reserved_at_0xA4;
   hr::hardware_register<0x400e04a8> MATRIX_PRAS5;
   hr::reserved< 0xAC, 1 > _reserved_at_0xAC;
   hr::hardware_register<0x400e04b0> MATRIX_PRAS6;
   hr::reserved< 0xB4, 1 > _reserved_at_0xB4;
   hr::hardware_register<0x400e04b8> MATRIX_PRAS7;
   hr::reserved< 0xBC, 1 > _reserved_at_0xBC;
   hr::hardware_register<0x400e04c0> MATRIX_PRAS8;
   hr::reserved< 0xC4, 15 > _reserved_at_0xC4;
   hr::hardware_register<0x400e0500> MATRIX_MRCR;
   hr::reserved< 0x104, 4 > _reserved_at_0x104;
   hr::hardware_register<0x400e0514> CCFG_SYSIO;
   hr::reserved< 0x118, 51 > _reserved_at_0x118;
   hr::hardware_register<0x400e05e4> MATRIX_WPMR;
   hr::hardware_register<0x400e05e8> MATRIX_WPSR;
};

#define MATRIX ( ( Matrix * ) 0x400e0400 )

// MATRIX_MCFG[0]
   // Undefined Length Burst Type
   constexpr auto MATRIX_MCFG_ULBT_Msk = hr::field_mask_literal< 0x400e0400, 0, 3 >();

// MATRIX_SCFG[0]
   // Maximum Number of Allowed Cycles for a Burst
   constexpr auto MATRIX_SCFG_SLOT_CYCLE_Msk = hr::field_mask_literal< 0x400e0440, 0, 8 >();
   // Default Master Type
   constexpr auto MATRIX_SCFG_DEFMSTR_TYPE_Msk = hr::field_mask_literal< 0x400e0440, 16, 2 >();
   // Fixed Default Master
   constexpr auto MATRIX_SCFG_FIXED_DEFMSTR_Msk = hr::field_mask_literal< 0x400e0440, 18, 3 >();
   // Arbitration Type
   constexpr auto MATRIX_SCFG_ARBT_Msk = hr::field_mask_literal< 0x400e0440, 24, 2 >();

// MATRIX_PRAS0
   // Master 0 Priority
   constexpr auto MATRIX_PRAS0_M0PR_Msk = hr::field_mask_literal< 0x400e0480, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS0_M1PR_Msk = hr::field_mask_literal< 0x400e0480, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS0_M2PR_Msk = hr::field_mask_literal< 0x400e0480, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS0_M3PR_Msk = hr::field_mask_literal< 0x400e0480, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS0_M4PR_Msk = hr::field_mask_literal< 0x400e0480, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS0_M5PR_Msk = hr::field_mask_literal< 0x400e0480, 20, 2 >();

// MATRIX_PRAS1
   // Master 0 Priority
   constexpr auto MATRIX_PRAS1_M0PR_Msk = hr::field_mask_literal< 0x400e0488, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS1_M1PR_Msk = hr::field_mask_literal< 0x400e0488, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS1_M2PR_Msk = hr::field_mask_literal< 0x400e0488, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS1_M3PR_Msk = hr::field_mask_literal< 0x400e0488, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS1_M4PR_Msk = hr::field_mask_literal< 0x400e0488, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS1_M5PR_Msk = hr::field_mask_literal< 0x400e0488, 20, 2 >();

// MATRIX_PRAS2
   // Master 0 Priority
   constexpr auto MATRIX_PRAS2_M0PR_Msk = hr::field_mask_literal< 0x400e0490, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS2_M1PR_Msk = hr::field_mask_literal< 0x400e0490, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS2_M2PR_Msk = hr::field_mask_literal< 0x400e0490, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS2_M3PR_Msk = hr::field_mask_literal< 0x400e0490, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS2_M4PR_Msk = hr::field_mask_literal< 0x400e0490, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS2_M5PR_Msk = hr::field_mask_literal< 0x400e0490, 20, 2 >();

// MATRIX_PRAS3
   // Master 0 Priority
   constexpr auto MATRIX_PRAS3_M0PR_Msk = hr::field_mask_literal< 0x400e0498, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS3_M1PR_Msk = hr::field_mask_literal< 0x400e0498, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS3_M2PR_Msk = hr::field_mask_literal< 0x400e0498, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS3_M3PR_Msk = hr::field_mask_literal< 0x400e0498, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS3_M4PR_Msk = hr::field_mask_literal< 0x400e0498, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS3_M5PR_Msk = hr::field_mask_literal< 0x400e0498, 20, 2 >();

// MATRIX_PRAS4
   // Master 0 Priority
   constexpr auto MATRIX_PRAS4_M0PR_Msk = hr::field_mask_literal< 0x400e04a0, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS4_M1PR_Msk = hr::field_mask_literal< 0x400e04a0, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS4_M2PR_Msk = hr::field_mask_literal< 0x400e04a0, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS4_M3PR_Msk = hr::field_mask_literal< 0x400e04a0, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS4_M4PR_Msk = hr::field_mask_literal< 0x400e04a0, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS4_M5PR_Msk = hr::field_mask_literal< 0x400e04a0, 20, 2 >();

// MATRIX_PRAS5
   // Master 0 Priority
   constexpr auto MATRIX_PRAS5_M0PR_Msk = hr::field_mask_literal< 0x400e04a8, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS5_M1PR_Msk = hr::field_mask_literal< 0x400e04a8, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS5_M2PR_Msk = hr::field_mask_literal< 0x400e04a8, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS5_M3PR_Msk = hr::field_mask_literal< 0x400e04a8, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS5_M4PR_Msk = hr::field_mask_literal< 0x400e04a8, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS5_M5PR_Msk = hr::field_mask_literal< 0x400e04a8, 20, 2 >();

// MATRIX_PRAS6
   // Master 0 Priority
   constexpr auto MATRIX_PRAS6_M0PR_Msk = hr::field_mask_literal< 0x400e04b0, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS6_M1PR_Msk = hr::field_mask_literal< 0x400e04b0, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS6_M2PR_Msk = hr::field_mask_literal< 0x400e04b0, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS6_M3PR_Msk = hr::field_mask_literal< 0x400e04b0, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS6_M4PR_Msk = hr::field_mask_literal< 0x400e04b0, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS6_M5PR_Msk = hr::field_mask_literal< 0x400e04b0, 20, 2 >();

// MATRIX_PRAS7
   // Master 0 Priority
   constexpr auto MATRIX_PRAS7_M0PR_Msk = hr::field_mask_literal< 0x400e04b8, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS7_M1PR_Msk = hr::field_mask_literal< 0x400e04b8, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS7_M2PR_Msk = hr::field_mask_literal< 0x400e04b8, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS7_M3PR_Msk = hr::field_mask_literal< 0x400e04b8, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS7_M4PR_Msk = hr::field_mask_literal< 0x400e04b8, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS7_M5PR_Msk = hr::field_mask_literal< 0x400e04b8, 20, 2 >();

// MATRIX_PRAS8
   // Master 0 Priority
   constexpr auto MATRIX_PRAS8_M0PR_Msk = hr::field_mask_literal< 0x400e04c0, 0, 2 >();
   // Master 1 Priority
   constexpr auto MATRIX_PRAS8_M1PR_Msk = hr::field_mask_literal< 0x400e04c0, 4, 2 >();
   // Master 2 Priority
   constexpr auto MATRIX_PRAS8_M2PR_Msk = hr::field_mask_literal< 0x400e04c0, 8, 2 >();
   // Master 3 Priority
   constexpr auto MATRIX_PRAS8_M3PR_Msk = hr::field_mask_literal< 0x400e04c0, 12, 2 >();
   // Master 4 Priority
   constexpr auto MATRIX_PRAS8_M4PR_Msk = hr::field_mask_literal< 0x400e04c0, 16, 2 >();
   // Master 5 Priority
   constexpr auto MATRIX_PRAS8_M5PR_Msk = hr::field_mask_literal< 0x400e04c0, 20, 2 >();

// MATRIX_MRCR
   // Remap Command Bit for AHB Master 0
   constexpr auto MATRIX_MRCR_RCB0 = hr::field_mask_literal< 0x400e0500, 0, 1 >();
   // Remap Command Bit for AHB Master 1
   constexpr auto MATRIX_MRCR_RCB1 = hr::field_mask_literal< 0x400e0500, 1, 1 >();
   // Remap Command Bit for AHB Master 2
   constexpr auto MATRIX_MRCR_RCB2 = hr::field_mask_literal< 0x400e0500, 2, 1 >();
   // Remap Command Bit for AHB Master 3
   constexpr auto MATRIX_MRCR_RCB3 = hr::field_mask_literal< 0x400e0500, 3, 1 >();
   // Remap Command Bit for AHB Master 4
   constexpr auto MATRIX_MRCR_RCB4_Msk = hr::field_mask_literal< 0x400e0500, 4, 2 >();
   // Remap Command Bit for AHB Master 5
   constexpr auto MATRIX_MRCR_RCB5 = hr::field_mask_literal< 0x400e0500, 6, 1 >();

// CCFG_SYSIO
   // PC0 or ERASE Assignment
   constexpr auto CCFG_SYSIO_SYSIO12 = hr::field_mask_literal< 0x400e0514, 12, 1 >();

// MATRIX_WPMR
   // Write Protect ENable
   constexpr auto MATRIX_WPMR_WPEN = hr::field_mask_literal< 0x400e05e4, 0, 1 >();
   // Write Protect KEY (Write-only)
   constexpr auto MATRIX_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e05e4, 8, 24 >();

// MATRIX_WPSR
   // Write Protect Violation Status
   constexpr auto MATRIX_WPSR_WPVS = hr::field_mask_literal< 0x400e05e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto MATRIX_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400e05e8, 8, 16 >();

// =============================================================================
//
// PMC
// base address = 0x400e0600
// Power Management Controller
//
// =============================================================================

struct Pmc {
   hr::hardware_register<0x400e0600> PMC_SCER;
   hr::hardware_register<0x400e0604> PMC_SCDR;
   hr::hardware_register<0x400e0608> PMC_SCSR;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x400e0610> PMC_PCER0;
   hr::hardware_register<0x400e0614> PMC_PCDR0;
   hr::hardware_register<0x400e0618> PMC_PCSR0;
   hr::hardware_register<0x400e061c> CKGR_UCKR;
   hr::hardware_register<0x400e0620> CKGR_MOR;
   hr::hardware_register<0x400e0624> CKGR_MCFR;
   hr::hardware_register<0x400e0628> CKGR_PLLAR;
   hr::reserved< 0x2C, 1 > _reserved_at_0x2C;
   hr::hardware_register<0x400e0630> PMC_MCKR;
   hr::reserved< 0x34, 1 > _reserved_at_0x34;
   hr::hardware_register<0x400e0638> PMC_USB;
   hr::reserved< 0x3C, 1 > _reserved_at_0x3C;
   hr::hardware_register<0x400e0640> PMC_PCK[3];
   hr::reserved< 0x4C, 5 > _reserved_at_0x4C;
   hr::hardware_register<0x400e0660> PMC_IER;
   hr::hardware_register<0x400e0664> PMC_IDR;
   hr::hardware_register<0x400e0668> PMC_SR;
   hr::hardware_register<0x400e066c> PMC_IMR;
   hr::hardware_register<0x400e0670> PMC_FSMR;
   hr::hardware_register<0x400e0674> PMC_FSPR;
   hr::hardware_register<0x400e0678> PMC_FOCR;
   hr::reserved< 0x7C, 26 > _reserved_at_0x7C;
   hr::hardware_register<0x400e06e4> PMC_WPMR;
   hr::hardware_register<0x400e06e8> PMC_WPSR;
   hr::reserved< 0xEC, 5 > _reserved_at_0xEC;
   hr::hardware_register<0x400e0700> PMC_PCER1;
   hr::hardware_register<0x400e0704> PMC_PCDR1;
   hr::hardware_register<0x400e0708> PMC_PCSR1;
   hr::hardware_register<0x400e070c> PMC_PCR;
};

#define PMC ( ( Pmc * ) 0x400e0600 )

// PMC_SCER
   // Enable USB OTG Clock (48 MHz, USB_48M) for UTMI
   constexpr auto PMC_SCER_UOTGCLK = hr::field_mask_literal< 0x400e0600, 5, 1 >();
   // Programmable Clock 0 Output Enable
   constexpr auto PMC_SCER_PCK0 = hr::field_mask_literal< 0x400e0600, 8, 1 >();
   // Programmable Clock 1 Output Enable
   constexpr auto PMC_SCER_PCK1 = hr::field_mask_literal< 0x400e0600, 9, 1 >();
   // Programmable Clock 2 Output Enable
   constexpr auto PMC_SCER_PCK2 = hr::field_mask_literal< 0x400e0600, 10, 1 >();

// PMC_SCDR
   // Disable USB OTG Clock (48 MHz, USB_48M) for UTMI
   constexpr auto PMC_SCDR_UOTGCLK = hr::field_mask_literal< 0x400e0604, 5, 1 >();
   // Programmable Clock 0 Output Disable
   constexpr auto PMC_SCDR_PCK0 = hr::field_mask_literal< 0x400e0604, 8, 1 >();
   // Programmable Clock 1 Output Disable
   constexpr auto PMC_SCDR_PCK1 = hr::field_mask_literal< 0x400e0604, 9, 1 >();
   // Programmable Clock 2 Output Disable
   constexpr auto PMC_SCDR_PCK2 = hr::field_mask_literal< 0x400e0604, 10, 1 >();

// PMC_SCSR
   // USB OTG Clock (48 MHz, USB_48M) Clock Status
   constexpr auto PMC_SCSR_UOTGCLK = hr::field_mask_literal< 0x400e0608, 5, 1 >();
   // Programmable Clock 0 Output Status
   constexpr auto PMC_SCSR_PCK0 = hr::field_mask_literal< 0x400e0608, 8, 1 >();
   // Programmable Clock 1 Output Status
   constexpr auto PMC_SCSR_PCK1 = hr::field_mask_literal< 0x400e0608, 9, 1 >();
   // Programmable Clock 2 Output Status
   constexpr auto PMC_SCSR_PCK2 = hr::field_mask_literal< 0x400e0608, 10, 1 >();

// PMC_PCER0
   // Peripheral Clock 2 Enable
   constexpr auto PMC_PCER0_PID2 = hr::field_mask_literal< 0x400e0610, 2, 1 >();
   // Peripheral Clock 3 Enable
   constexpr auto PMC_PCER0_PID3 = hr::field_mask_literal< 0x400e0610, 3, 1 >();
   // Peripheral Clock 4 Enable
   constexpr auto PMC_PCER0_PID4 = hr::field_mask_literal< 0x400e0610, 4, 1 >();
   // Peripheral Clock 5 Enable
   constexpr auto PMC_PCER0_PID5 = hr::field_mask_literal< 0x400e0610, 5, 1 >();
   // Peripheral Clock 6 Enable
   constexpr auto PMC_PCER0_PID6 = hr::field_mask_literal< 0x400e0610, 6, 1 >();
   // Peripheral Clock 7 Enable
   constexpr auto PMC_PCER0_PID7 = hr::field_mask_literal< 0x400e0610, 7, 1 >();
   // Peripheral Clock 8 Enable
   constexpr auto PMC_PCER0_PID8 = hr::field_mask_literal< 0x400e0610, 8, 1 >();
   // Peripheral Clock 9 Enable
   constexpr auto PMC_PCER0_PID9 = hr::field_mask_literal< 0x400e0610, 9, 1 >();
   // Peripheral Clock 10 Enable
   constexpr auto PMC_PCER0_PID10 = hr::field_mask_literal< 0x400e0610, 10, 1 >();
   // Peripheral Clock 11 Enable
   constexpr auto PMC_PCER0_PID11 = hr::field_mask_literal< 0x400e0610, 11, 1 >();
   // Peripheral Clock 12 Enable
   constexpr auto PMC_PCER0_PID12 = hr::field_mask_literal< 0x400e0610, 12, 1 >();
   // Peripheral Clock 13 Enable
   constexpr auto PMC_PCER0_PID13 = hr::field_mask_literal< 0x400e0610, 13, 1 >();
   // Peripheral Clock 14 Enable
   constexpr auto PMC_PCER0_PID14 = hr::field_mask_literal< 0x400e0610, 14, 1 >();
   // Peripheral Clock 15 Enable
   constexpr auto PMC_PCER0_PID15 = hr::field_mask_literal< 0x400e0610, 15, 1 >();
   // Peripheral Clock 16 Enable
   constexpr auto PMC_PCER0_PID16 = hr::field_mask_literal< 0x400e0610, 16, 1 >();
   // Peripheral Clock 17 Enable
   constexpr auto PMC_PCER0_PID17 = hr::field_mask_literal< 0x400e0610, 17, 1 >();
   // Peripheral Clock 18 Enable
   constexpr auto PMC_PCER0_PID18 = hr::field_mask_literal< 0x400e0610, 18, 1 >();
   // Peripheral Clock 19 Enable
   constexpr auto PMC_PCER0_PID19 = hr::field_mask_literal< 0x400e0610, 19, 1 >();
   // Peripheral Clock 20 Enable
   constexpr auto PMC_PCER0_PID20 = hr::field_mask_literal< 0x400e0610, 20, 1 >();
   // Peripheral Clock 21 Enable
   constexpr auto PMC_PCER0_PID21 = hr::field_mask_literal< 0x400e0610, 21, 1 >();
   // Peripheral Clock 22 Enable
   constexpr auto PMC_PCER0_PID22 = hr::field_mask_literal< 0x400e0610, 22, 1 >();
   // Peripheral Clock 23 Enable
   constexpr auto PMC_PCER0_PID23 = hr::field_mask_literal< 0x400e0610, 23, 1 >();
   // Peripheral Clock 24 Enable
   constexpr auto PMC_PCER0_PID24 = hr::field_mask_literal< 0x400e0610, 24, 1 >();
   // Peripheral Clock 25 Enable
   constexpr auto PMC_PCER0_PID25 = hr::field_mask_literal< 0x400e0610, 25, 1 >();
   // Peripheral Clock 26 Enable
   constexpr auto PMC_PCER0_PID26 = hr::field_mask_literal< 0x400e0610, 26, 1 >();
   // Peripheral Clock 27 Enable
   constexpr auto PMC_PCER0_PID27 = hr::field_mask_literal< 0x400e0610, 27, 1 >();
   // Peripheral Clock 28 Enable
   constexpr auto PMC_PCER0_PID28 = hr::field_mask_literal< 0x400e0610, 28, 1 >();
   // Peripheral Clock 29 Enable
   constexpr auto PMC_PCER0_PID29 = hr::field_mask_literal< 0x400e0610, 29, 1 >();
   // Peripheral Clock 30 Enable
   constexpr auto PMC_PCER0_PID30 = hr::field_mask_literal< 0x400e0610, 30, 1 >();
   // Peripheral Clock 31 Enable
   constexpr auto PMC_PCER0_PID31 = hr::field_mask_literal< 0x400e0610, 31, 1 >();

// PMC_PCDR0
   // Peripheral Clock 2 Disable
   constexpr auto PMC_PCDR0_PID2 = hr::field_mask_literal< 0x400e0614, 2, 1 >();
   // Peripheral Clock 3 Disable
   constexpr auto PMC_PCDR0_PID3 = hr::field_mask_literal< 0x400e0614, 3, 1 >();
   // Peripheral Clock 4 Disable
   constexpr auto PMC_PCDR0_PID4 = hr::field_mask_literal< 0x400e0614, 4, 1 >();
   // Peripheral Clock 5 Disable
   constexpr auto PMC_PCDR0_PID5 = hr::field_mask_literal< 0x400e0614, 5, 1 >();
   // Peripheral Clock 6 Disable
   constexpr auto PMC_PCDR0_PID6 = hr::field_mask_literal< 0x400e0614, 6, 1 >();
   // Peripheral Clock 7 Disable
   constexpr auto PMC_PCDR0_PID7 = hr::field_mask_literal< 0x400e0614, 7, 1 >();
   // Peripheral Clock 8 Disable
   constexpr auto PMC_PCDR0_PID8 = hr::field_mask_literal< 0x400e0614, 8, 1 >();
   // Peripheral Clock 9 Disable
   constexpr auto PMC_PCDR0_PID9 = hr::field_mask_literal< 0x400e0614, 9, 1 >();
   // Peripheral Clock 10 Disable
   constexpr auto PMC_PCDR0_PID10 = hr::field_mask_literal< 0x400e0614, 10, 1 >();
   // Peripheral Clock 11 Disable
   constexpr auto PMC_PCDR0_PID11 = hr::field_mask_literal< 0x400e0614, 11, 1 >();
   // Peripheral Clock 12 Disable
   constexpr auto PMC_PCDR0_PID12 = hr::field_mask_literal< 0x400e0614, 12, 1 >();
   // Peripheral Clock 13 Disable
   constexpr auto PMC_PCDR0_PID13 = hr::field_mask_literal< 0x400e0614, 13, 1 >();
   // Peripheral Clock 14 Disable
   constexpr auto PMC_PCDR0_PID14 = hr::field_mask_literal< 0x400e0614, 14, 1 >();
   // Peripheral Clock 15 Disable
   constexpr auto PMC_PCDR0_PID15 = hr::field_mask_literal< 0x400e0614, 15, 1 >();
   // Peripheral Clock 16 Disable
   constexpr auto PMC_PCDR0_PID16 = hr::field_mask_literal< 0x400e0614, 16, 1 >();
   // Peripheral Clock 17 Disable
   constexpr auto PMC_PCDR0_PID17 = hr::field_mask_literal< 0x400e0614, 17, 1 >();
   // Peripheral Clock 18 Disable
   constexpr auto PMC_PCDR0_PID18 = hr::field_mask_literal< 0x400e0614, 18, 1 >();
   // Peripheral Clock 19 Disable
   constexpr auto PMC_PCDR0_PID19 = hr::field_mask_literal< 0x400e0614, 19, 1 >();
   // Peripheral Clock 20 Disable
   constexpr auto PMC_PCDR0_PID20 = hr::field_mask_literal< 0x400e0614, 20, 1 >();
   // Peripheral Clock 21 Disable
   constexpr auto PMC_PCDR0_PID21 = hr::field_mask_literal< 0x400e0614, 21, 1 >();
   // Peripheral Clock 22 Disable
   constexpr auto PMC_PCDR0_PID22 = hr::field_mask_literal< 0x400e0614, 22, 1 >();
   // Peripheral Clock 23 Disable
   constexpr auto PMC_PCDR0_PID23 = hr::field_mask_literal< 0x400e0614, 23, 1 >();
   // Peripheral Clock 24 Disable
   constexpr auto PMC_PCDR0_PID24 = hr::field_mask_literal< 0x400e0614, 24, 1 >();
   // Peripheral Clock 25 Disable
   constexpr auto PMC_PCDR0_PID25 = hr::field_mask_literal< 0x400e0614, 25, 1 >();
   // Peripheral Clock 26 Disable
   constexpr auto PMC_PCDR0_PID26 = hr::field_mask_literal< 0x400e0614, 26, 1 >();
   // Peripheral Clock 27 Disable
   constexpr auto PMC_PCDR0_PID27 = hr::field_mask_literal< 0x400e0614, 27, 1 >();
   // Peripheral Clock 28 Disable
   constexpr auto PMC_PCDR0_PID28 = hr::field_mask_literal< 0x400e0614, 28, 1 >();
   // Peripheral Clock 29 Disable
   constexpr auto PMC_PCDR0_PID29 = hr::field_mask_literal< 0x400e0614, 29, 1 >();
   // Peripheral Clock 30 Disable
   constexpr auto PMC_PCDR0_PID30 = hr::field_mask_literal< 0x400e0614, 30, 1 >();
   // Peripheral Clock 31 Disable
   constexpr auto PMC_PCDR0_PID31 = hr::field_mask_literal< 0x400e0614, 31, 1 >();

// PMC_PCSR0
   // Peripheral Clock 2 Status
   constexpr auto PMC_PCSR0_PID2 = hr::field_mask_literal< 0x400e0618, 2, 1 >();
   // Peripheral Clock 3 Status
   constexpr auto PMC_PCSR0_PID3 = hr::field_mask_literal< 0x400e0618, 3, 1 >();
   // Peripheral Clock 4 Status
   constexpr auto PMC_PCSR0_PID4 = hr::field_mask_literal< 0x400e0618, 4, 1 >();
   // Peripheral Clock 5 Status
   constexpr auto PMC_PCSR0_PID5 = hr::field_mask_literal< 0x400e0618, 5, 1 >();
   // Peripheral Clock 6 Status
   constexpr auto PMC_PCSR0_PID6 = hr::field_mask_literal< 0x400e0618, 6, 1 >();
   // Peripheral Clock 7 Status
   constexpr auto PMC_PCSR0_PID7 = hr::field_mask_literal< 0x400e0618, 7, 1 >();
   // Peripheral Clock 8 Status
   constexpr auto PMC_PCSR0_PID8 = hr::field_mask_literal< 0x400e0618, 8, 1 >();
   // Peripheral Clock 9 Status
   constexpr auto PMC_PCSR0_PID9 = hr::field_mask_literal< 0x400e0618, 9, 1 >();
   // Peripheral Clock 10 Status
   constexpr auto PMC_PCSR0_PID10 = hr::field_mask_literal< 0x400e0618, 10, 1 >();
   // Peripheral Clock 11 Status
   constexpr auto PMC_PCSR0_PID11 = hr::field_mask_literal< 0x400e0618, 11, 1 >();
   // Peripheral Clock 12 Status
   constexpr auto PMC_PCSR0_PID12 = hr::field_mask_literal< 0x400e0618, 12, 1 >();
   // Peripheral Clock 13 Status
   constexpr auto PMC_PCSR0_PID13 = hr::field_mask_literal< 0x400e0618, 13, 1 >();
   // Peripheral Clock 14 Status
   constexpr auto PMC_PCSR0_PID14 = hr::field_mask_literal< 0x400e0618, 14, 1 >();
   // Peripheral Clock 15 Status
   constexpr auto PMC_PCSR0_PID15 = hr::field_mask_literal< 0x400e0618, 15, 1 >();
   // Peripheral Clock 16 Status
   constexpr auto PMC_PCSR0_PID16 = hr::field_mask_literal< 0x400e0618, 16, 1 >();
   // Peripheral Clock 17 Status
   constexpr auto PMC_PCSR0_PID17 = hr::field_mask_literal< 0x400e0618, 17, 1 >();
   // Peripheral Clock 18 Status
   constexpr auto PMC_PCSR0_PID18 = hr::field_mask_literal< 0x400e0618, 18, 1 >();
   // Peripheral Clock 19 Status
   constexpr auto PMC_PCSR0_PID19 = hr::field_mask_literal< 0x400e0618, 19, 1 >();
   // Peripheral Clock 20 Status
   constexpr auto PMC_PCSR0_PID20 = hr::field_mask_literal< 0x400e0618, 20, 1 >();
   // Peripheral Clock 21 Status
   constexpr auto PMC_PCSR0_PID21 = hr::field_mask_literal< 0x400e0618, 21, 1 >();
   // Peripheral Clock 22 Status
   constexpr auto PMC_PCSR0_PID22 = hr::field_mask_literal< 0x400e0618, 22, 1 >();
   // Peripheral Clock 23 Status
   constexpr auto PMC_PCSR0_PID23 = hr::field_mask_literal< 0x400e0618, 23, 1 >();
   // Peripheral Clock 24 Status
   constexpr auto PMC_PCSR0_PID24 = hr::field_mask_literal< 0x400e0618, 24, 1 >();
   // Peripheral Clock 25 Status
   constexpr auto PMC_PCSR0_PID25 = hr::field_mask_literal< 0x400e0618, 25, 1 >();
   // Peripheral Clock 26 Status
   constexpr auto PMC_PCSR0_PID26 = hr::field_mask_literal< 0x400e0618, 26, 1 >();
   // Peripheral Clock 27 Status
   constexpr auto PMC_PCSR0_PID27 = hr::field_mask_literal< 0x400e0618, 27, 1 >();
   // Peripheral Clock 28 Status
   constexpr auto PMC_PCSR0_PID28 = hr::field_mask_literal< 0x400e0618, 28, 1 >();
   // Peripheral Clock 29 Status
   constexpr auto PMC_PCSR0_PID29 = hr::field_mask_literal< 0x400e0618, 29, 1 >();
   // Peripheral Clock 30 Status
   constexpr auto PMC_PCSR0_PID30 = hr::field_mask_literal< 0x400e0618, 30, 1 >();
   // Peripheral Clock 31 Status
   constexpr auto PMC_PCSR0_PID31 = hr::field_mask_literal< 0x400e0618, 31, 1 >();

// CKGR_UCKR
   // UTMI PLL Enable
   constexpr auto CKGR_UCKR_UPLLEN = hr::field_mask_literal< 0x400e061c, 16, 1 >();
   // UTMI PLL Start-up Time
   constexpr auto CKGR_UCKR_UPLLCOUNT_Msk = hr::field_mask_literal< 0x400e061c, 20, 4 >();

// CKGR_MOR
   // Main Crystal Oscillator Enable
   constexpr auto CKGR_MOR_MOSCXTEN = hr::field_mask_literal< 0x400e0620, 0, 1 >();
   // Main Crystal Oscillator Bypass
   constexpr auto CKGR_MOR_MOSCXTBY = hr::field_mask_literal< 0x400e0620, 1, 1 >();
   // Main On-Chip RC Oscillator Enable
   constexpr auto CKGR_MOR_MOSCRCEN = hr::field_mask_literal< 0x400e0620, 3, 1 >();
   // Main On-Chip RC Oscillator Frequency Selection
   constexpr auto CKGR_MOR_MOSCRCF_Msk = hr::field_mask_literal< 0x400e0620, 4, 3 >();
      // The Fast RC Oscillator Frequency is at 4 MHz (default)
      constexpr auto CKGR_MOR_MOSCRCF_4_MHZ = hr::field_value_literal< 0x400e0620, 4, 3 >( 0 );
      // The Fast RC Oscillator Frequency is at 8 MHz
      constexpr auto CKGR_MOR_MOSCRCF_8_MHZ = hr::field_value_literal< 0x400e0620, 4, 3 >( 1 );
      // The Fast RC Oscillator Frequency is at 12 MHz
      constexpr auto CKGR_MOR_MOSCRCF_12_MHZ = hr::field_value_literal< 0x400e0620, 4, 3 >( 2 );
   // Main Crystal Oscillator Start-up Time
   constexpr auto CKGR_MOR_MOSCXTST_Msk = hr::field_mask_literal< 0x400e0620, 8, 8 >();
   // Password
   constexpr auto CKGR_MOR_KEY_Msk = hr::field_mask_literal< 0x400e0620, 16, 8 >();
   // Main Oscillator Selection
   constexpr auto CKGR_MOR_MOSCSEL = hr::field_mask_literal< 0x400e0620, 24, 1 >();
   // Clock Failure Detector Enable
   constexpr auto CKGR_MOR_CFDEN = hr::field_mask_literal< 0x400e0620, 25, 1 >();

// CKGR_MCFR
   // Main Clock Frequency
   constexpr auto CKGR_MCFR_MAINF_Msk = hr::field_mask_literal< 0x400e0624, 0, 16 >();
   // Main Clock Ready
   constexpr auto CKGR_MCFR_MAINFRDY = hr::field_mask_literal< 0x400e0624, 16, 1 >();

// CKGR_PLLAR
   // Divider
   constexpr auto CKGR_PLLAR_DIVA_Msk = hr::field_mask_literal< 0x400e0628, 0, 8 >();
   // PLLA Counter
   constexpr auto CKGR_PLLAR_PLLACOUNT_Msk = hr::field_mask_literal< 0x400e0628, 8, 6 >();
   // PLLA Multiplier
   constexpr auto CKGR_PLLAR_MULA_Msk = hr::field_mask_literal< 0x400e0628, 16, 11 >();
   // Must Be Set to 1
   constexpr auto CKGR_PLLAR_ONE = hr::field_mask_literal< 0x400e0628, 29, 1 >();

// PMC_MCKR
   // Master Clock Source Selection
   constexpr auto PMC_MCKR_CSS_Msk = hr::field_mask_literal< 0x400e0630, 0, 2 >();
      // Slow Clock is selected
      constexpr auto PMC_MCKR_CSS_SLOW_CLK = hr::field_value_literal< 0x400e0630, 0, 2 >( 0 );
      // Main Clock is selected
      constexpr auto PMC_MCKR_CSS_MAIN_CLK = hr::field_value_literal< 0x400e0630, 0, 2 >( 1 );
      // PLLA Clock is selected
      constexpr auto PMC_MCKR_CSS_PLLA_CLK = hr::field_value_literal< 0x400e0630, 0, 2 >( 2 );
      // UPLL Clock is selected
      constexpr auto PMC_MCKR_CSS_UPLL_CLK = hr::field_value_literal< 0x400e0630, 0, 2 >( 3 );
   // Processor Clock Prescaler
   constexpr auto PMC_MCKR_PRES_Msk = hr::field_mask_literal< 0x400e0630, 4, 3 >();
      // Selected clock
      constexpr auto PMC_MCKR_PRES_CLK_1 = hr::field_value_literal< 0x400e0630, 4, 3 >( 0 );
      // Selected clock divided by 2
      constexpr auto PMC_MCKR_PRES_CLK_2 = hr::field_value_literal< 0x400e0630, 4, 3 >( 1 );
      // Selected clock divided by 4
      constexpr auto PMC_MCKR_PRES_CLK_4 = hr::field_value_literal< 0x400e0630, 4, 3 >( 2 );
      // Selected clock divided by 8
      constexpr auto PMC_MCKR_PRES_CLK_8 = hr::field_value_literal< 0x400e0630, 4, 3 >( 3 );
      // Selected clock divided by 16
      constexpr auto PMC_MCKR_PRES_CLK_16 = hr::field_value_literal< 0x400e0630, 4, 3 >( 4 );
      // Selected clock divided by 32
      constexpr auto PMC_MCKR_PRES_CLK_32 = hr::field_value_literal< 0x400e0630, 4, 3 >( 5 );
      // Selected clock divided by 64
      constexpr auto PMC_MCKR_PRES_CLK_64 = hr::field_value_literal< 0x400e0630, 4, 3 >( 6 );
      // Selected clock divided by 3
      constexpr auto PMC_MCKR_PRES_CLK_3 = hr::field_value_literal< 0x400e0630, 4, 3 >( 7 );
   // PLLA Divisor by 2
   constexpr auto PMC_MCKR_PLLADIV2 = hr::field_mask_literal< 0x400e0630, 12, 1 >();
   // None
   constexpr auto PMC_MCKR_UPLLDIV2 = hr::field_mask_literal< 0x400e0630, 13, 1 >();

// PMC_USB
   // USB Input Clock Selection
   constexpr auto PMC_USB_USBS = hr::field_mask_literal< 0x400e0638, 0, 1 >();
   // Divider for USB Clock.
   constexpr auto PMC_USB_USBDIV_Msk = hr::field_mask_literal< 0x400e0638, 8, 4 >();

// PMC_PCK[0]
   // Master Clock Source Selection
   constexpr auto PMC_PCK_CSS_Msk = hr::field_mask_literal< 0x400e0640, 0, 3 >();
      // Slow Clock is selected
      constexpr auto PMC_PCK_CSS_SLOW_CLK = hr::field_value_literal< 0x400e0640, 0, 3 >( 0 );
      // Main Clock is selected
      constexpr auto PMC_PCK_CSS_MAIN_CLK = hr::field_value_literal< 0x400e0640, 0, 3 >( 1 );
      // PLLA Clock is selected
      constexpr auto PMC_PCK_CSS_PLLA_CLK = hr::field_value_literal< 0x400e0640, 0, 3 >( 2 );
      // UPLL Clock is selected
      constexpr auto PMC_PCK_CSS_UPLL_CLK = hr::field_value_literal< 0x400e0640, 0, 3 >( 3 );
      // Master Clock is selected
      constexpr auto PMC_PCK_CSS_MCK = hr::field_value_literal< 0x400e0640, 0, 3 >( 4 );
   // Programmable Clock Prescaler
   constexpr auto PMC_PCK_PRES_Msk = hr::field_mask_literal< 0x400e0640, 4, 3 >();
      // Selected clock
      constexpr auto PMC_PCK_PRES_CLK_1 = hr::field_value_literal< 0x400e0640, 4, 3 >( 0 );
      // Selected clock divided by 2
      constexpr auto PMC_PCK_PRES_CLK_2 = hr::field_value_literal< 0x400e0640, 4, 3 >( 1 );
      // Selected clock divided by 4
      constexpr auto PMC_PCK_PRES_CLK_4 = hr::field_value_literal< 0x400e0640, 4, 3 >( 2 );
      // Selected clock divided by 8
      constexpr auto PMC_PCK_PRES_CLK_8 = hr::field_value_literal< 0x400e0640, 4, 3 >( 3 );
      // Selected clock divided by 16
      constexpr auto PMC_PCK_PRES_CLK_16 = hr::field_value_literal< 0x400e0640, 4, 3 >( 4 );
      // Selected clock divided by 32
      constexpr auto PMC_PCK_PRES_CLK_32 = hr::field_value_literal< 0x400e0640, 4, 3 >( 5 );
      // Selected clock divided by 64
      constexpr auto PMC_PCK_PRES_CLK_64 = hr::field_value_literal< 0x400e0640, 4, 3 >( 6 );

// PMC_IER
   // Main Crystal Oscillator Status Interrupt Enable
   constexpr auto PMC_IER_MOSCXTS = hr::field_mask_literal< 0x400e0660, 0, 1 >();
   // PLLA Lock Interrupt Enable
   constexpr auto PMC_IER_LOCKA = hr::field_mask_literal< 0x400e0660, 1, 1 >();
   // Master Clock Ready Interrupt Enable
   constexpr auto PMC_IER_MCKRDY = hr::field_mask_literal< 0x400e0660, 3, 1 >();
   // UTMI PLL Lock Interrupt Enable
   constexpr auto PMC_IER_LOCKU = hr::field_mask_literal< 0x400e0660, 6, 1 >();
   // Programmable Clock Ready 0 Interrupt Enable
   constexpr auto PMC_IER_PCKRDY0 = hr::field_mask_literal< 0x400e0660, 8, 1 >();
   // Programmable Clock Ready 1 Interrupt Enable
   constexpr auto PMC_IER_PCKRDY1 = hr::field_mask_literal< 0x400e0660, 9, 1 >();
   // Programmable Clock Ready 2 Interrupt Enable
   constexpr auto PMC_IER_PCKRDY2 = hr::field_mask_literal< 0x400e0660, 10, 1 >();
   // Main Oscillator Selection Status Interrupt Enable
   constexpr auto PMC_IER_MOSCSELS = hr::field_mask_literal< 0x400e0660, 16, 1 >();
   // Main On-Chip RC Status Interrupt Enable
   constexpr auto PMC_IER_MOSCRCS = hr::field_mask_literal< 0x400e0660, 17, 1 >();
   // Clock Failure Detector Event Interrupt Enable
   constexpr auto PMC_IER_CFDEV = hr::field_mask_literal< 0x400e0660, 18, 1 >();

// PMC_IDR
   // Main Crystal Oscillator Status Interrupt Disable
   constexpr auto PMC_IDR_MOSCXTS = hr::field_mask_literal< 0x400e0664, 0, 1 >();
   // PLLA Lock Interrupt Disable
   constexpr auto PMC_IDR_LOCKA = hr::field_mask_literal< 0x400e0664, 1, 1 >();
   // Master Clock Ready Interrupt Disable
   constexpr auto PMC_IDR_MCKRDY = hr::field_mask_literal< 0x400e0664, 3, 1 >();
   // UTMI PLL Lock Interrupt Disable
   constexpr auto PMC_IDR_LOCKU = hr::field_mask_literal< 0x400e0664, 6, 1 >();
   // Programmable Clock Ready 0 Interrupt Disable
   constexpr auto PMC_IDR_PCKRDY0 = hr::field_mask_literal< 0x400e0664, 8, 1 >();
   // Programmable Clock Ready 1 Interrupt Disable
   constexpr auto PMC_IDR_PCKRDY1 = hr::field_mask_literal< 0x400e0664, 9, 1 >();
   // Programmable Clock Ready 2 Interrupt Disable
   constexpr auto PMC_IDR_PCKRDY2 = hr::field_mask_literal< 0x400e0664, 10, 1 >();
   // Main Oscillator Selection Status Interrupt Disable
   constexpr auto PMC_IDR_MOSCSELS = hr::field_mask_literal< 0x400e0664, 16, 1 >();
   // Main On-Chip RC Status Interrupt Disable
   constexpr auto PMC_IDR_MOSCRCS = hr::field_mask_literal< 0x400e0664, 17, 1 >();
   // Clock Failure Detector Event Interrupt Disable
   constexpr auto PMC_IDR_CFDEV = hr::field_mask_literal< 0x400e0664, 18, 1 >();

// PMC_SR
   // Main XTAL Oscillator Status
   constexpr auto PMC_SR_MOSCXTS = hr::field_mask_literal< 0x400e0668, 0, 1 >();
   // PLLA Lock Status
   constexpr auto PMC_SR_LOCKA = hr::field_mask_literal< 0x400e0668, 1, 1 >();
   // Master Clock Status
   constexpr auto PMC_SR_MCKRDY = hr::field_mask_literal< 0x400e0668, 3, 1 >();
   // UTMI PLL Lock Status
   constexpr auto PMC_SR_LOCKU = hr::field_mask_literal< 0x400e0668, 6, 1 >();
   // Slow Clock Oscillator Selection
   constexpr auto PMC_SR_OSCSELS = hr::field_mask_literal< 0x400e0668, 7, 1 >();
   // Programmable Clock Ready Status
   constexpr auto PMC_SR_PCKRDY0 = hr::field_mask_literal< 0x400e0668, 8, 1 >();
   // Programmable Clock Ready Status
   constexpr auto PMC_SR_PCKRDY1 = hr::field_mask_literal< 0x400e0668, 9, 1 >();
   // Programmable Clock Ready Status
   constexpr auto PMC_SR_PCKRDY2 = hr::field_mask_literal< 0x400e0668, 10, 1 >();
   // Main Oscillator Selection Status
   constexpr auto PMC_SR_MOSCSELS = hr::field_mask_literal< 0x400e0668, 16, 1 >();
   // Main On-Chip RC Oscillator Status
   constexpr auto PMC_SR_MOSCRCS = hr::field_mask_literal< 0x400e0668, 17, 1 >();
   // Clock Failure Detector Event
   constexpr auto PMC_SR_CFDEV = hr::field_mask_literal< 0x400e0668, 18, 1 >();
   // Clock Failure Detector Status
   constexpr auto PMC_SR_CFDS = hr::field_mask_literal< 0x400e0668, 19, 1 >();
   // Clock Failure Detector Fault Output Status
   constexpr auto PMC_SR_FOS = hr::field_mask_literal< 0x400e0668, 20, 1 >();

// PMC_IMR
   // Main Crystal Oscillator Status Interrupt Mask
   constexpr auto PMC_IMR_MOSCXTS = hr::field_mask_literal< 0x400e066c, 0, 1 >();
   // PLLA Lock Interrupt Mask
   constexpr auto PMC_IMR_LOCKA = hr::field_mask_literal< 0x400e066c, 1, 1 >();
   // Master Clock Ready Interrupt Mask
   constexpr auto PMC_IMR_MCKRDY = hr::field_mask_literal< 0x400e066c, 3, 1 >();
   // UTMI PLL Lock Interrupt Mask
   constexpr auto PMC_IMR_LOCKU = hr::field_mask_literal< 0x400e066c, 6, 1 >();
   // Programmable Clock Ready 0 Interrupt Mask
   constexpr auto PMC_IMR_PCKRDY0 = hr::field_mask_literal< 0x400e066c, 8, 1 >();
   // Programmable Clock Ready 1 Interrupt Mask
   constexpr auto PMC_IMR_PCKRDY1 = hr::field_mask_literal< 0x400e066c, 9, 1 >();
   // Programmable Clock Ready 2 Interrupt Mask
   constexpr auto PMC_IMR_PCKRDY2 = hr::field_mask_literal< 0x400e066c, 10, 1 >();
   // Main Oscillator Selection Status Interrupt Mask
   constexpr auto PMC_IMR_MOSCSELS = hr::field_mask_literal< 0x400e066c, 16, 1 >();
   // Main On-Chip RC Status Interrupt Mask
   constexpr auto PMC_IMR_MOSCRCS = hr::field_mask_literal< 0x400e066c, 17, 1 >();
   // Clock Failure Detector Event Interrupt Mask
   constexpr auto PMC_IMR_CFDEV = hr::field_mask_literal< 0x400e066c, 18, 1 >();

// PMC_FSMR
   // Fast Startup Input Enable 0
   constexpr auto PMC_FSMR_FSTT0 = hr::field_mask_literal< 0x400e0670, 0, 1 >();
   // Fast Startup Input Enable 1
   constexpr auto PMC_FSMR_FSTT1 = hr::field_mask_literal< 0x400e0670, 1, 1 >();
   // Fast Startup Input Enable 2
   constexpr auto PMC_FSMR_FSTT2 = hr::field_mask_literal< 0x400e0670, 2, 1 >();
   // Fast Startup Input Enable 3
   constexpr auto PMC_FSMR_FSTT3 = hr::field_mask_literal< 0x400e0670, 3, 1 >();
   // Fast Startup Input Enable 4
   constexpr auto PMC_FSMR_FSTT4 = hr::field_mask_literal< 0x400e0670, 4, 1 >();
   // Fast Startup Input Enable 5
   constexpr auto PMC_FSMR_FSTT5 = hr::field_mask_literal< 0x400e0670, 5, 1 >();
   // Fast Startup Input Enable 6
   constexpr auto PMC_FSMR_FSTT6 = hr::field_mask_literal< 0x400e0670, 6, 1 >();
   // Fast Startup Input Enable 7
   constexpr auto PMC_FSMR_FSTT7 = hr::field_mask_literal< 0x400e0670, 7, 1 >();
   // Fast Startup Input Enable 8
   constexpr auto PMC_FSMR_FSTT8 = hr::field_mask_literal< 0x400e0670, 8, 1 >();
   // Fast Startup Input Enable 9
   constexpr auto PMC_FSMR_FSTT9 = hr::field_mask_literal< 0x400e0670, 9, 1 >();
   // Fast Startup Input Enable 10
   constexpr auto PMC_FSMR_FSTT10 = hr::field_mask_literal< 0x400e0670, 10, 1 >();
   // Fast Startup Input Enable 11
   constexpr auto PMC_FSMR_FSTT11 = hr::field_mask_literal< 0x400e0670, 11, 1 >();
   // Fast Startup Input Enable 12
   constexpr auto PMC_FSMR_FSTT12 = hr::field_mask_literal< 0x400e0670, 12, 1 >();
   // Fast Startup Input Enable 13
   constexpr auto PMC_FSMR_FSTT13 = hr::field_mask_literal< 0x400e0670, 13, 1 >();
   // Fast Startup Input Enable 14
   constexpr auto PMC_FSMR_FSTT14 = hr::field_mask_literal< 0x400e0670, 14, 1 >();
   // Fast Startup Input Enable 15
   constexpr auto PMC_FSMR_FSTT15 = hr::field_mask_literal< 0x400e0670, 15, 1 >();
   // RTT Alarm Enable
   constexpr auto PMC_FSMR_RTTAL = hr::field_mask_literal< 0x400e0670, 16, 1 >();
   // RTC Alarm Enable
   constexpr auto PMC_FSMR_RTCAL = hr::field_mask_literal< 0x400e0670, 17, 1 >();
   // USB Alarm Enable
   constexpr auto PMC_FSMR_USBAL = hr::field_mask_literal< 0x400e0670, 18, 1 >();
   // Low Power Mode
   constexpr auto PMC_FSMR_LPM = hr::field_mask_literal< 0x400e0670, 20, 1 >();

// PMC_FSPR
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP0 = hr::field_mask_literal< 0x400e0674, 0, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP1 = hr::field_mask_literal< 0x400e0674, 1, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP2 = hr::field_mask_literal< 0x400e0674, 2, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP3 = hr::field_mask_literal< 0x400e0674, 3, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP4 = hr::field_mask_literal< 0x400e0674, 4, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP5 = hr::field_mask_literal< 0x400e0674, 5, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP6 = hr::field_mask_literal< 0x400e0674, 6, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP7 = hr::field_mask_literal< 0x400e0674, 7, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP8 = hr::field_mask_literal< 0x400e0674, 8, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP9 = hr::field_mask_literal< 0x400e0674, 9, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP10 = hr::field_mask_literal< 0x400e0674, 10, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP11 = hr::field_mask_literal< 0x400e0674, 11, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP12 = hr::field_mask_literal< 0x400e0674, 12, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP13 = hr::field_mask_literal< 0x400e0674, 13, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP14 = hr::field_mask_literal< 0x400e0674, 14, 1 >();
   // Fast Startup Input Polarityx
   constexpr auto PMC_FSPR_FSTP15 = hr::field_mask_literal< 0x400e0674, 15, 1 >();

// PMC_FOCR
   // Fault Output Clear
   constexpr auto PMC_FOCR_FOCLR = hr::field_mask_literal< 0x400e0678, 0, 1 >();

// PMC_WPMR
   // Write Protect Enable
   constexpr auto PMC_WPMR_WPEN = hr::field_mask_literal< 0x400e06e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto PMC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e06e4, 8, 24 >();

// PMC_WPSR
   // Write Protect Violation Status
   constexpr auto PMC_WPSR_WPVS = hr::field_mask_literal< 0x400e06e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto PMC_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400e06e8, 8, 16 >();

// PMC_PCER1
   // Peripheral Clock 32 Enable
   constexpr auto PMC_PCER1_PID32 = hr::field_mask_literal< 0x400e0700, 0, 1 >();
   // Peripheral Clock 33 Enable
   constexpr auto PMC_PCER1_PID33 = hr::field_mask_literal< 0x400e0700, 1, 1 >();
   // Peripheral Clock 34 Enable
   constexpr auto PMC_PCER1_PID34 = hr::field_mask_literal< 0x400e0700, 2, 1 >();
   // Peripheral Clock 35 Enable
   constexpr auto PMC_PCER1_PID35 = hr::field_mask_literal< 0x400e0700, 3, 1 >();
   // Peripheral Clock 36 Enable
   constexpr auto PMC_PCER1_PID36 = hr::field_mask_literal< 0x400e0700, 4, 1 >();
   // Peripheral Clock 37 Enable
   constexpr auto PMC_PCER1_PID37 = hr::field_mask_literal< 0x400e0700, 5, 1 >();
   // Peripheral Clock 38 Enable
   constexpr auto PMC_PCER1_PID38 = hr::field_mask_literal< 0x400e0700, 6, 1 >();
   // Peripheral Clock 39 Enable
   constexpr auto PMC_PCER1_PID39 = hr::field_mask_literal< 0x400e0700, 7, 1 >();
   // Peripheral Clock 40 Enable
   constexpr auto PMC_PCER1_PID40 = hr::field_mask_literal< 0x400e0700, 8, 1 >();
   // Peripheral Clock 41 Enable
   constexpr auto PMC_PCER1_PID41 = hr::field_mask_literal< 0x400e0700, 9, 1 >();
   // Peripheral Clock 42 Enable
   constexpr auto PMC_PCER1_PID42 = hr::field_mask_literal< 0x400e0700, 10, 1 >();
   // Peripheral Clock 43 Enable
   constexpr auto PMC_PCER1_PID43 = hr::field_mask_literal< 0x400e0700, 11, 1 >();
   // Peripheral Clock 44 Enable
   constexpr auto PMC_PCER1_PID44 = hr::field_mask_literal< 0x400e0700, 12, 1 >();

// PMC_PCDR1
   // Peripheral Clock 32 Disable
   constexpr auto PMC_PCDR1_PID32 = hr::field_mask_literal< 0x400e0704, 0, 1 >();
   // Peripheral Clock 33 Disable
   constexpr auto PMC_PCDR1_PID33 = hr::field_mask_literal< 0x400e0704, 1, 1 >();
   // Peripheral Clock 34 Disable
   constexpr auto PMC_PCDR1_PID34 = hr::field_mask_literal< 0x400e0704, 2, 1 >();
   // Peripheral Clock 35 Disable
   constexpr auto PMC_PCDR1_PID35 = hr::field_mask_literal< 0x400e0704, 3, 1 >();
   // Peripheral Clock 36 Disable
   constexpr auto PMC_PCDR1_PID36 = hr::field_mask_literal< 0x400e0704, 4, 1 >();
   // Peripheral Clock 37 Disable
   constexpr auto PMC_PCDR1_PID37 = hr::field_mask_literal< 0x400e0704, 5, 1 >();
   // Peripheral Clock 38 Disable
   constexpr auto PMC_PCDR1_PID38 = hr::field_mask_literal< 0x400e0704, 6, 1 >();
   // Peripheral Clock 39 Disable
   constexpr auto PMC_PCDR1_PID39 = hr::field_mask_literal< 0x400e0704, 7, 1 >();
   // Peripheral Clock 40 Disable
   constexpr auto PMC_PCDR1_PID40 = hr::field_mask_literal< 0x400e0704, 8, 1 >();
   // Peripheral Clock 41 Disable
   constexpr auto PMC_PCDR1_PID41 = hr::field_mask_literal< 0x400e0704, 9, 1 >();
   // Peripheral Clock 42 Disable
   constexpr auto PMC_PCDR1_PID42 = hr::field_mask_literal< 0x400e0704, 10, 1 >();
   // Peripheral Clock 43 Disable
   constexpr auto PMC_PCDR1_PID43 = hr::field_mask_literal< 0x400e0704, 11, 1 >();
   // Peripheral Clock 44 Disable
   constexpr auto PMC_PCDR1_PID44 = hr::field_mask_literal< 0x400e0704, 12, 1 >();

// PMC_PCSR1
   // Peripheral Clock 32 Status
   constexpr auto PMC_PCSR1_PID32 = hr::field_mask_literal< 0x400e0708, 0, 1 >();
   // Peripheral Clock 33 Status
   constexpr auto PMC_PCSR1_PID33 = hr::field_mask_literal< 0x400e0708, 1, 1 >();
   // Peripheral Clock 34 Status
   constexpr auto PMC_PCSR1_PID34 = hr::field_mask_literal< 0x400e0708, 2, 1 >();
   // Peripheral Clock 35 Status
   constexpr auto PMC_PCSR1_PID35 = hr::field_mask_literal< 0x400e0708, 3, 1 >();
   // Peripheral Clock 36 Status
   constexpr auto PMC_PCSR1_PID36 = hr::field_mask_literal< 0x400e0708, 4, 1 >();
   // Peripheral Clock 37 Status
   constexpr auto PMC_PCSR1_PID37 = hr::field_mask_literal< 0x400e0708, 5, 1 >();
   // Peripheral Clock 38 Status
   constexpr auto PMC_PCSR1_PID38 = hr::field_mask_literal< 0x400e0708, 6, 1 >();
   // Peripheral Clock 39 Status
   constexpr auto PMC_PCSR1_PID39 = hr::field_mask_literal< 0x400e0708, 7, 1 >();
   // Peripheral Clock 40 Status
   constexpr auto PMC_PCSR1_PID40 = hr::field_mask_literal< 0x400e0708, 8, 1 >();
   // Peripheral Clock 41 Status
   constexpr auto PMC_PCSR1_PID41 = hr::field_mask_literal< 0x400e0708, 9, 1 >();
   // Peripheral Clock 42 Status
   constexpr auto PMC_PCSR1_PID42 = hr::field_mask_literal< 0x400e0708, 10, 1 >();
   // Peripheral Clock 43 Status
   constexpr auto PMC_PCSR1_PID43 = hr::field_mask_literal< 0x400e0708, 11, 1 >();
   // Peripheral Clock 44 Status
   constexpr auto PMC_PCSR1_PID44 = hr::field_mask_literal< 0x400e0708, 12, 1 >();

// PMC_PCR
   // Peripheral ID
   constexpr auto PMC_PCR_PID_Msk = hr::field_mask_literal< 0x400e070c, 0, 6 >();
   // Command
   constexpr auto PMC_PCR_CMD = hr::field_mask_literal< 0x400e070c, 12, 1 >();
   // Divisor Value
   constexpr auto PMC_PCR_DIV_Msk = hr::field_mask_literal< 0x400e070c, 16, 2 >();
      // Peripheral clock is MCK
      constexpr auto PMC_PCR_DIV_PERIPH_DIV_MCK = hr::field_value_literal< 0x400e070c, 16, 2 >( 0 );
      // Peripheral clock is MCK/2
      constexpr auto PMC_PCR_DIV_PERIPH_DIV2_MCK = hr::field_value_literal< 0x400e070c, 16, 2 >( 1 );
      // Peripheral clock is MCK/4
      constexpr auto PMC_PCR_DIV_PERIPH_DIV4_MCK = hr::field_value_literal< 0x400e070c, 16, 2 >( 2 );
   // Enable
   constexpr auto PMC_PCR_EN = hr::field_mask_literal< 0x400e070c, 28, 1 >();

// =============================================================================
//
// UART
// base address = 0x400e0800
// Universal Asynchronous Receiver Transmitter
//
// =============================================================================

struct Uart {
   hr::hardware_register<0x400e0800> CR;
   hr::hardware_register<0x400e0804> MR;
   hr::hardware_register<0x400e0808> IER;
   hr::hardware_register<0x400e080c> IDR;
   hr::hardware_register<0x400e0810> IMR;
   hr::hardware_register<0x400e0814> SR;
   hr::hardware_register<0x400e0818> RHR;
   hr::hardware_register<0x400e081c> THR;
   hr::hardware_register<0x400e0820> BRGR;
   hr::reserved< 0x24, 55 > _reserved_at_0x24;
   hr::hardware_register<0x400e0900> RPR;
   hr::hardware_register<0x400e0904> RCR;
   hr::hardware_register<0x400e0908> TPR;
   hr::hardware_register<0x400e090c> TCR;
   hr::hardware_register<0x400e0910> RNPR;
   hr::hardware_register<0x400e0914> RNCR;
   hr::hardware_register<0x400e0918> TNPR;
   hr::hardware_register<0x400e091c> TNCR;
   hr::hardware_register<0x400e0920> PTCR;
   hr::hardware_register<0x400e0924> PTSR;
};

#define UART ( ( Uart * ) 0x400e0800 )

// CR
   // Reset Receiver
   constexpr auto UART_CR_RSTRX = hr::field_mask_literal< 0x400e0800, 2, 1 >();
   // Reset Transmitter
   constexpr auto UART_CR_RSTTX = hr::field_mask_literal< 0x400e0800, 3, 1 >();
   // Receiver Enable
   constexpr auto UART_CR_RXEN = hr::field_mask_literal< 0x400e0800, 4, 1 >();
   // Receiver Disable
   constexpr auto UART_CR_RXDIS = hr::field_mask_literal< 0x400e0800, 5, 1 >();
   // Transmitter Enable
   constexpr auto UART_CR_TXEN = hr::field_mask_literal< 0x400e0800, 6, 1 >();
   // Transmitter Disable
   constexpr auto UART_CR_TXDIS = hr::field_mask_literal< 0x400e0800, 7, 1 >();
   // Reset Status Bits
   constexpr auto UART_CR_RSTSTA = hr::field_mask_literal< 0x400e0800, 8, 1 >();

// MR
   // Parity Type
   constexpr auto UART_MR_PAR_Msk = hr::field_mask_literal< 0x400e0804, 9, 3 >();
      // Even parity
      constexpr auto UART_MR_PAR_EVEN = hr::field_value_literal< 0x400e0804, 9, 3 >( 0 );
      // Odd parity
      constexpr auto UART_MR_PAR_ODD = hr::field_value_literal< 0x400e0804, 9, 3 >( 1 );
      // Space: parity forced to 0
      constexpr auto UART_MR_PAR_SPACE = hr::field_value_literal< 0x400e0804, 9, 3 >( 2 );
      // Mark: parity forced to 1
      constexpr auto UART_MR_PAR_MARK = hr::field_value_literal< 0x400e0804, 9, 3 >( 3 );
      // No parity
      constexpr auto UART_MR_PAR_NO = hr::field_value_literal< 0x400e0804, 9, 3 >( 4 );
   // Channel Mode
   constexpr auto UART_MR_CHMODE_Msk = hr::field_mask_literal< 0x400e0804, 14, 2 >();
      // Normal Mode
      constexpr auto UART_MR_CHMODE_NORMAL = hr::field_value_literal< 0x400e0804, 14, 2 >( 0 );
      // Automatic Echo
      constexpr auto UART_MR_CHMODE_AUTOMATIC = hr::field_value_literal< 0x400e0804, 14, 2 >( 1 );
      // Local Loopback
      constexpr auto UART_MR_CHMODE_LOCAL_LOOPBACK = hr::field_value_literal< 0x400e0804, 14, 2 >( 2 );
      // Remote Loopback
      constexpr auto UART_MR_CHMODE_REMOTE_LOOPBACK = hr::field_value_literal< 0x400e0804, 14, 2 >( 3 );

// IER
   // Enable RXRDY Interrupt
   constexpr auto UART_IER_RXRDY = hr::field_mask_literal< 0x400e0808, 0, 1 >();
   // Enable TXRDY Interrupt
   constexpr auto UART_IER_TXRDY = hr::field_mask_literal< 0x400e0808, 1, 1 >();
   // Enable End of Receive Transfer Interrupt
   constexpr auto UART_IER_ENDRX = hr::field_mask_literal< 0x400e0808, 3, 1 >();
   // Enable End of Transmit Interrupt
   constexpr auto UART_IER_ENDTX = hr::field_mask_literal< 0x400e0808, 4, 1 >();
   // Enable Overrun Error Interrupt
   constexpr auto UART_IER_OVRE = hr::field_mask_literal< 0x400e0808, 5, 1 >();
   // Enable Framing Error Interrupt
   constexpr auto UART_IER_FRAME = hr::field_mask_literal< 0x400e0808, 6, 1 >();
   // Enable Parity Error Interrupt
   constexpr auto UART_IER_PARE = hr::field_mask_literal< 0x400e0808, 7, 1 >();
   // Enable TXEMPTY Interrupt
   constexpr auto UART_IER_TXEMPTY = hr::field_mask_literal< 0x400e0808, 9, 1 >();
   // Enable Buffer Empty Interrupt
   constexpr auto UART_IER_TXBUFE = hr::field_mask_literal< 0x400e0808, 11, 1 >();
   // Enable Buffer Full Interrupt
   constexpr auto UART_IER_RXBUFF = hr::field_mask_literal< 0x400e0808, 12, 1 >();

// IDR
   // Disable RXRDY Interrupt
   constexpr auto UART_IDR_RXRDY = hr::field_mask_literal< 0x400e080c, 0, 1 >();
   // Disable TXRDY Interrupt
   constexpr auto UART_IDR_TXRDY = hr::field_mask_literal< 0x400e080c, 1, 1 >();
   // Disable End of Receive Transfer Interrupt
   constexpr auto UART_IDR_ENDRX = hr::field_mask_literal< 0x400e080c, 3, 1 >();
   // Disable End of Transmit Interrupt
   constexpr auto UART_IDR_ENDTX = hr::field_mask_literal< 0x400e080c, 4, 1 >();
   // Disable Overrun Error Interrupt
   constexpr auto UART_IDR_OVRE = hr::field_mask_literal< 0x400e080c, 5, 1 >();
   // Disable Framing Error Interrupt
   constexpr auto UART_IDR_FRAME = hr::field_mask_literal< 0x400e080c, 6, 1 >();
   // Disable Parity Error Interrupt
   constexpr auto UART_IDR_PARE = hr::field_mask_literal< 0x400e080c, 7, 1 >();
   // Disable TXEMPTY Interrupt
   constexpr auto UART_IDR_TXEMPTY = hr::field_mask_literal< 0x400e080c, 9, 1 >();
   // Disable Buffer Empty Interrupt
   constexpr auto UART_IDR_TXBUFE = hr::field_mask_literal< 0x400e080c, 11, 1 >();
   // Disable Buffer Full Interrupt
   constexpr auto UART_IDR_RXBUFF = hr::field_mask_literal< 0x400e080c, 12, 1 >();

// IMR
   // Mask RXRDY Interrupt
   constexpr auto UART_IMR_RXRDY = hr::field_mask_literal< 0x400e0810, 0, 1 >();
   // Disable TXRDY Interrupt
   constexpr auto UART_IMR_TXRDY = hr::field_mask_literal< 0x400e0810, 1, 1 >();
   // Mask End of Receive Transfer Interrupt
   constexpr auto UART_IMR_ENDRX = hr::field_mask_literal< 0x400e0810, 3, 1 >();
   // Mask End of Transmit Interrupt
   constexpr auto UART_IMR_ENDTX = hr::field_mask_literal< 0x400e0810, 4, 1 >();
   // Mask Overrun Error Interrupt
   constexpr auto UART_IMR_OVRE = hr::field_mask_literal< 0x400e0810, 5, 1 >();
   // Mask Framing Error Interrupt
   constexpr auto UART_IMR_FRAME = hr::field_mask_literal< 0x400e0810, 6, 1 >();
   // Mask Parity Error Interrupt
   constexpr auto UART_IMR_PARE = hr::field_mask_literal< 0x400e0810, 7, 1 >();
   // Mask TXEMPTY Interrupt
   constexpr auto UART_IMR_TXEMPTY = hr::field_mask_literal< 0x400e0810, 9, 1 >();
   // Mask TXBUFE Interrupt
   constexpr auto UART_IMR_TXBUFE = hr::field_mask_literal< 0x400e0810, 11, 1 >();
   // Mask RXBUFF Interrupt
   constexpr auto UART_IMR_RXBUFF = hr::field_mask_literal< 0x400e0810, 12, 1 >();

// SR
   // Receiver Ready
   constexpr auto UART_SR_RXRDY = hr::field_mask_literal< 0x400e0814, 0, 1 >();
   // Transmitter Ready
   constexpr auto UART_SR_TXRDY = hr::field_mask_literal< 0x400e0814, 1, 1 >();
   // End of Receiver Transfer
   constexpr auto UART_SR_ENDRX = hr::field_mask_literal< 0x400e0814, 3, 1 >();
   // End of Transmitter Transfer
   constexpr auto UART_SR_ENDTX = hr::field_mask_literal< 0x400e0814, 4, 1 >();
   // Overrun Error
   constexpr auto UART_SR_OVRE = hr::field_mask_literal< 0x400e0814, 5, 1 >();
   // Framing Error
   constexpr auto UART_SR_FRAME = hr::field_mask_literal< 0x400e0814, 6, 1 >();
   // Parity Error
   constexpr auto UART_SR_PARE = hr::field_mask_literal< 0x400e0814, 7, 1 >();
   // Transmitter Empty
   constexpr auto UART_SR_TXEMPTY = hr::field_mask_literal< 0x400e0814, 9, 1 >();
   // Transmission Buffer Empty
   constexpr auto UART_SR_TXBUFE = hr::field_mask_literal< 0x400e0814, 11, 1 >();
   // Receive Buffer Full
   constexpr auto UART_SR_RXBUFF = hr::field_mask_literal< 0x400e0814, 12, 1 >();

// RHR
   // Received Character
   constexpr auto UART_RHR_RXCHR_Msk = hr::field_mask_literal< 0x400e0818, 0, 8 >();

// THR
   // Character to be Transmitted
   constexpr auto UART_THR_TXCHR_Msk = hr::field_mask_literal< 0x400e081c, 0, 8 >();

// BRGR
   // Clock Divisor
   constexpr auto UART_BRGR_CD_Msk = hr::field_mask_literal< 0x400e0820, 0, 16 >();

// RPR
   // Receive Pointer Register
   constexpr auto UART_RPR_RXPTR_Msk = hr::field_mask_literal< 0x400e0900, 0, 32 >();

// RCR
   // Receive Counter Register
   constexpr auto UART_RCR_RXCTR_Msk = hr::field_mask_literal< 0x400e0904, 0, 16 >();

// TPR
   // Transmit Counter Register
   constexpr auto UART_TPR_TXPTR_Msk = hr::field_mask_literal< 0x400e0908, 0, 32 >();

// TCR
   // Transmit Counter Register
   constexpr auto UART_TCR_TXCTR_Msk = hr::field_mask_literal< 0x400e090c, 0, 16 >();

// RNPR
   // Receive Next Pointer
   constexpr auto UART_RNPR_RXNPTR_Msk = hr::field_mask_literal< 0x400e0910, 0, 32 >();

// RNCR
   // Receive Next Counter
   constexpr auto UART_RNCR_RXNCTR_Msk = hr::field_mask_literal< 0x400e0914, 0, 16 >();

// TNPR
   // Transmit Next Pointer
   constexpr auto UART_TNPR_TXNPTR_Msk = hr::field_mask_literal< 0x400e0918, 0, 32 >();

// TNCR
   // Transmit Counter Next
   constexpr auto UART_TNCR_TXNCTR_Msk = hr::field_mask_literal< 0x400e091c, 0, 16 >();

// PTCR
   // Receiver Transfer Enable
   constexpr auto UART_PTCR_RXTEN = hr::field_mask_literal< 0x400e0920, 0, 1 >();
   // Receiver Transfer Disable
   constexpr auto UART_PTCR_RXTDIS = hr::field_mask_literal< 0x400e0920, 1, 1 >();
   // Transmitter Transfer Enable
   constexpr auto UART_PTCR_TXTEN = hr::field_mask_literal< 0x400e0920, 8, 1 >();
   // Transmitter Transfer Disable
   constexpr auto UART_PTCR_TXTDIS = hr::field_mask_literal< 0x400e0920, 9, 1 >();

// PTSR
   // Receiver Transfer Enable
   constexpr auto UART_PTSR_RXTEN = hr::field_mask_literal< 0x400e0924, 0, 1 >();
   // Transmitter Transfer Enable
   constexpr auto UART_PTSR_TXTEN = hr::field_mask_literal< 0x400e0924, 8, 1 >();

// =============================================================================
//
// CHIPID
// base address = 0x400e0940
// Chip Identifier
//
// =============================================================================

struct Chipid {
   hr::hardware_register<0x400e0940> CIDR;
   hr::hardware_register<0x400e0944> EXID;
};

#define CHIPID ( ( Chipid * ) 0x400e0940 )

// CIDR
   // Version of the Device
   constexpr auto CHIPID_CIDR_VERSION_Msk = hr::field_mask_literal< 0x400e0940, 0, 5 >();
   // Embedded Processor
   constexpr auto CHIPID_CIDR_EPROC_Msk = hr::field_mask_literal< 0x400e0940, 5, 3 >();
      // ARM946ES
      constexpr auto CHIPID_CIDR_EPROC_ARM946ES = hr::field_value_literal< 0x400e0940, 5, 3 >( 1 );
      // ARM7TDMI
      constexpr auto CHIPID_CIDR_EPROC_ARM7TDMI = hr::field_value_literal< 0x400e0940, 5, 3 >( 2 );
      // Cortex-M3
      constexpr auto CHIPID_CIDR_EPROC_CM3 = hr::field_value_literal< 0x400e0940, 5, 3 >( 3 );
      // ARM920T
      constexpr auto CHIPID_CIDR_EPROC_ARM920T = hr::field_value_literal< 0x400e0940, 5, 3 >( 4 );
      // ARM926EJS
      constexpr auto CHIPID_CIDR_EPROC_ARM926EJS = hr::field_value_literal< 0x400e0940, 5, 3 >( 5 );
      // Cortex-A5
      constexpr auto CHIPID_CIDR_EPROC_CA5 = hr::field_value_literal< 0x400e0940, 5, 3 >( 6 );
      // Cortex-M4
      constexpr auto CHIPID_CIDR_EPROC_CM4 = hr::field_value_literal< 0x400e0940, 5, 3 >( 7 );
   // Nonvolatile Program Memory Size
   constexpr auto CHIPID_CIDR_NVPSIZ_Msk = hr::field_mask_literal< 0x400e0940, 8, 4 >();
      // None
      constexpr auto CHIPID_CIDR_NVPSIZ_NONE = hr::field_value_literal< 0x400e0940, 8, 4 >( 0 );
      // 8K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_8K = hr::field_value_literal< 0x400e0940, 8, 4 >( 1 );
      // 16K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_16K = hr::field_value_literal< 0x400e0940, 8, 4 >( 2 );
      // 32K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_32K = hr::field_value_literal< 0x400e0940, 8, 4 >( 3 );
      // 64K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_64K = hr::field_value_literal< 0x400e0940, 8, 4 >( 5 );
      // 128K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_128K = hr::field_value_literal< 0x400e0940, 8, 4 >( 7 );
      // 256K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_256K = hr::field_value_literal< 0x400e0940, 8, 4 >( 9 );
      // 512K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_512K = hr::field_value_literal< 0x400e0940, 8, 4 >( 10 );
      // 1024K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_1024K = hr::field_value_literal< 0x400e0940, 8, 4 >( 12 );
      // 2048K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ_2048K = hr::field_value_literal< 0x400e0940, 8, 4 >( 14 );
   // Second Nonvolatile Program Memory Size
   constexpr auto CHIPID_CIDR_NVPSIZ2_Msk = hr::field_mask_literal< 0x400e0940, 12, 4 >();
      // None
      constexpr auto CHIPID_CIDR_NVPSIZ2_NONE = hr::field_value_literal< 0x400e0940, 12, 4 >( 0 );
      // 8K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_8K = hr::field_value_literal< 0x400e0940, 12, 4 >( 1 );
      // 16K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_16K = hr::field_value_literal< 0x400e0940, 12, 4 >( 2 );
      // 32K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_32K = hr::field_value_literal< 0x400e0940, 12, 4 >( 3 );
      // 64K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_64K = hr::field_value_literal< 0x400e0940, 12, 4 >( 5 );
      // 128K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_128K = hr::field_value_literal< 0x400e0940, 12, 4 >( 7 );
      // 256K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_256K = hr::field_value_literal< 0x400e0940, 12, 4 >( 9 );
      // 512K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_512K = hr::field_value_literal< 0x400e0940, 12, 4 >( 10 );
      // 1024K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_1024K = hr::field_value_literal< 0x400e0940, 12, 4 >( 12 );
      // 2048K bytes
      constexpr auto CHIPID_CIDR_NVPSIZ2_2048K = hr::field_value_literal< 0x400e0940, 12, 4 >( 14 );
   // Internal SRAM Size
   constexpr auto CHIPID_CIDR_SRAMSIZ_Msk = hr::field_mask_literal< 0x400e0940, 16, 4 >();
      // 48K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_48K = hr::field_value_literal< 0x400e0940, 16, 4 >( 0 );
      // 1K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_1K = hr::field_value_literal< 0x400e0940, 16, 4 >( 1 );
      // 2K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_2K = hr::field_value_literal< 0x400e0940, 16, 4 >( 2 );
      // 6K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_6K = hr::field_value_literal< 0x400e0940, 16, 4 >( 3 );
      // 24K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_24K = hr::field_value_literal< 0x400e0940, 16, 4 >( 4 );
      // 4K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_4K = hr::field_value_literal< 0x400e0940, 16, 4 >( 5 );
      // 80K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_80K = hr::field_value_literal< 0x400e0940, 16, 4 >( 6 );
      // 160K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_160K = hr::field_value_literal< 0x400e0940, 16, 4 >( 7 );
      // 8K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_8K = hr::field_value_literal< 0x400e0940, 16, 4 >( 8 );
      // 16K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_16K = hr::field_value_literal< 0x400e0940, 16, 4 >( 9 );
      // 32K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_32K = hr::field_value_literal< 0x400e0940, 16, 4 >( 10 );
      // 64K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_64K = hr::field_value_literal< 0x400e0940, 16, 4 >( 11 );
      // 128K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_128K = hr::field_value_literal< 0x400e0940, 16, 4 >( 12 );
      // 256K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_256K = hr::field_value_literal< 0x400e0940, 16, 4 >( 13 );
      // 96K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_96K = hr::field_value_literal< 0x400e0940, 16, 4 >( 14 );
      // 512K bytes
      constexpr auto CHIPID_CIDR_SRAMSIZ_512K = hr::field_value_literal< 0x400e0940, 16, 4 >( 15 );
   // Architecture Identifier
   constexpr auto CHIPID_CIDR_ARCH_Msk = hr::field_mask_literal< 0x400e0940, 20, 8 >();
      // AT91SAM9xx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM9XX = hr::field_value_literal< 0x400e0940, 20, 8 >( 25 );
      // AT91SAM9XExx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM9XEXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 41 );
      // AT91x34 Series
      constexpr auto CHIPID_CIDR_ARCH_AT91X34 = hr::field_value_literal< 0x400e0940, 20, 8 >( 52 );
      // CAP7 Series
      constexpr auto CHIPID_CIDR_ARCH_CAP7 = hr::field_value_literal< 0x400e0940, 20, 8 >( 55 );
      // CAP9 Series
      constexpr auto CHIPID_CIDR_ARCH_CAP9 = hr::field_value_literal< 0x400e0940, 20, 8 >( 57 );
      // CAP11 Series
      constexpr auto CHIPID_CIDR_ARCH_CAP11 = hr::field_value_literal< 0x400e0940, 20, 8 >( 59 );
      // AT91x40 Series
      constexpr auto CHIPID_CIDR_ARCH_AT91X40 = hr::field_value_literal< 0x400e0940, 20, 8 >( 64 );
      // AT91x42 Series
      constexpr auto CHIPID_CIDR_ARCH_AT91X42 = hr::field_value_literal< 0x400e0940, 20, 8 >( 66 );
      // AT91x55 Series
      constexpr auto CHIPID_CIDR_ARCH_AT91X55 = hr::field_value_literal< 0x400e0940, 20, 8 >( 85 );
      // AT91SAM7Axx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7AXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 96 );
      // AT91SAM7AQxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7AQXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 97 );
      // AT91x63 Series
      constexpr auto CHIPID_CIDR_ARCH_AT91X63 = hr::field_value_literal< 0x400e0940, 20, 8 >( 99 );
      // AT91SAM7Sxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7SXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 112 );
      // AT91SAM7XCxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7XCXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 113 );
      // AT91SAM7SExx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7SEXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 114 );
      // AT91SAM7Lxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7LXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 115 );
      // AT91SAM7Xxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7XXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 117 );
      // AT91SAM7SLxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT91SAM7SLXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 118 );
      // SAM3UxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3UXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 128 );
      // SAM3UxE Series (144-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3UXE = hr::field_value_literal< 0x400e0940, 20, 8 >( 129 );
      // SAM3AxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3AXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 131 );
      // SAM4AxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4AXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 131 );
      // SAM3XxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3XXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 132 );
      // SAM4XxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4XXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 132 );
      // SAM3XxE Series (144-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3XXE = hr::field_value_literal< 0x400e0940, 20, 8 >( 133 );
      // SAM4XxE Series (144-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4XXE = hr::field_value_literal< 0x400e0940, 20, 8 >( 133 );
      // SAM3XxG Series (208/217-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3XXG = hr::field_value_literal< 0x400e0940, 20, 8 >( 134 );
      // SAM4XxG Series (208/217-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4XXG = hr::field_value_literal< 0x400e0940, 20, 8 >( 134 );
      // SAM3SxASeries (48-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3SXA = hr::field_value_literal< 0x400e0940, 20, 8 >( 136 );
      // SAM4SxA Series (48-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4SXA = hr::field_value_literal< 0x400e0940, 20, 8 >( 136 );
      // SAM3SxB Series (64-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3SXB = hr::field_value_literal< 0x400e0940, 20, 8 >( 137 );
      // SAM4SxB Series (64-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4SXB = hr::field_value_literal< 0x400e0940, 20, 8 >( 137 );
      // SAM3SxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3SXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 138 );
      // SAM4SxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM4SXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 138 );
      // AT91x92 Series
      constexpr auto CHIPID_CIDR_ARCH_AT91X92 = hr::field_value_literal< 0x400e0940, 20, 8 >( 146 );
      // SAM3NxA Series (48-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3NXA = hr::field_value_literal< 0x400e0940, 20, 8 >( 147 );
      // SAM3NxB Series (64-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3NXB = hr::field_value_literal< 0x400e0940, 20, 8 >( 148 );
      // SAM3NxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3NXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 149 );
      // SAM3SDxB Series (64-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3SDXB = hr::field_value_literal< 0x400e0940, 20, 8 >( 153 );
      // SAM3SDxC Series (100-pin version)
      constexpr auto CHIPID_CIDR_ARCH_SAM3SDXC = hr::field_value_literal< 0x400e0940, 20, 8 >( 154 );
      // SAM5A
      constexpr auto CHIPID_CIDR_ARCH_SAM5A = hr::field_value_literal< 0x400e0940, 20, 8 >( 165 );
      // AT75Cxx Series
      constexpr auto CHIPID_CIDR_ARCH_AT75CXX = hr::field_value_literal< 0x400e0940, 20, 8 >( 240 );
   // Nonvolatile Program Memory Type
   constexpr auto CHIPID_CIDR_NVPTYP_Msk = hr::field_mask_literal< 0x400e0940, 28, 3 >();
      // ROM
      constexpr auto CHIPID_CIDR_NVPTYP_ROM = hr::field_value_literal< 0x400e0940, 28, 3 >( 0 );
      // ROMless or on-chip Flash
      constexpr auto CHIPID_CIDR_NVPTYP_ROMLESS = hr::field_value_literal< 0x400e0940, 28, 3 >( 1 );
      // Embedded Flash Memory
      constexpr auto CHIPID_CIDR_NVPTYP_FLASH = hr::field_value_literal< 0x400e0940, 28, 3 >( 2 );
      // ROM and Embedded Flash MemoryNVPSIZ is ROM size      NVPSIZ2 is Flash size
      constexpr auto CHIPID_CIDR_NVPTYP_ROM_FLASH = hr::field_value_literal< 0x400e0940, 28, 3 >( 3 );
      // SRAM emulating ROM
      constexpr auto CHIPID_CIDR_NVPTYP_SRAM = hr::field_value_literal< 0x400e0940, 28, 3 >( 4 );
   // Extension Flag
   constexpr auto CHIPID_CIDR_EXT = hr::field_mask_literal< 0x400e0940, 31, 1 >();

// EXID
   // Chip ID Extension
   constexpr auto CHIPID_EXID_EXID_Msk = hr::field_mask_literal< 0x400e0944, 0, 32 >();

// =============================================================================
//
// EFC0
// base address = 0x400e0a00
// Embedded Flash Controller 0
//
// =============================================================================

struct Efc0 {
   hr::hardware_register<0x400e0a00> FMR;
   hr::hardware_register<0x400e0a04> FCR;
   hr::hardware_register<0x400e0a08> FSR;
   hr::hardware_register<0x400e0a0c> FRR;
};

#define EFC0 ( ( Efc0 * ) 0x400e0a00 )

// FMR
   // Ready Interrupt Enable
   constexpr auto EFC0_FMR_FRDY = hr::field_mask_literal< 0x400e0a00, 0, 1 >();
   // Flash Wait State
   constexpr auto EFC0_FMR_FWS_Msk = hr::field_mask_literal< 0x400e0a00, 8, 4 >();
   // Sequential Code Optimization Disable
   constexpr auto EFC0_FMR_SCOD = hr::field_mask_literal< 0x400e0a00, 16, 1 >();
   // Flash Access Mode
   constexpr auto EFC0_FMR_FAM = hr::field_mask_literal< 0x400e0a00, 24, 1 >();

// FCR
   // Flash Command
   constexpr auto EFC0_FCR_FCMD_Msk = hr::field_mask_literal< 0x400e0a04, 0, 8 >();
      // Get Flash Descriptor
      constexpr auto EFC0_FCR_FCMD_GETD = hr::field_value_literal< 0x400e0a04, 0, 8 >( 0 );
      // Write page
      constexpr auto EFC0_FCR_FCMD_WP = hr::field_value_literal< 0x400e0a04, 0, 8 >( 1 );
      // Write page and lock
      constexpr auto EFC0_FCR_FCMD_WPL = hr::field_value_literal< 0x400e0a04, 0, 8 >( 2 );
      // Erase page and write page
      constexpr auto EFC0_FCR_FCMD_EWP = hr::field_value_literal< 0x400e0a04, 0, 8 >( 3 );
      // Erase page and write page then lock
      constexpr auto EFC0_FCR_FCMD_EWPL = hr::field_value_literal< 0x400e0a04, 0, 8 >( 4 );
      // Erase all
      constexpr auto EFC0_FCR_FCMD_EA = hr::field_value_literal< 0x400e0a04, 0, 8 >( 5 );
      // Set Lock Bit
      constexpr auto EFC0_FCR_FCMD_SLB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 8 );
      // Clear Lock Bit
      constexpr auto EFC0_FCR_FCMD_CLB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 9 );
      // Get Lock Bit
      constexpr auto EFC0_FCR_FCMD_GLB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 10 );
      // Set GPNVM Bit
      constexpr auto EFC0_FCR_FCMD_SGPB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 11 );
      // Clear GPNVM Bit
      constexpr auto EFC0_FCR_FCMD_CGPB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 12 );
      // Get GPNVM Bit
      constexpr auto EFC0_FCR_FCMD_GGPB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 13 );
      // Start Read Unique Identifier
      constexpr auto EFC0_FCR_FCMD_STUI = hr::field_value_literal< 0x400e0a04, 0, 8 >( 14 );
      // Stop Read Unique Identifier
      constexpr auto EFC0_FCR_FCMD_SPUI = hr::field_value_literal< 0x400e0a04, 0, 8 >( 15 );
      // Get CALIB Bit
      constexpr auto EFC0_FCR_FCMD_GCALB = hr::field_value_literal< 0x400e0a04, 0, 8 >( 16 );
   // Flash Command Argument
   constexpr auto EFC0_FCR_FARG_Msk = hr::field_mask_literal< 0x400e0a04, 8, 16 >();
   // Flash Writing Protection Key
   constexpr auto EFC0_FCR_FKEY_Msk = hr::field_mask_literal< 0x400e0a04, 24, 8 >();
      // The 0x5A value enables the command defined by the bits of the register. If the field is written with a different value, the write is not performed and no action is started.
      constexpr auto EFC0_FCR_FKEY_PASSWD = hr::field_value_literal< 0x400e0a04, 24, 8 >( 90 );

// FSR
   // Flash Ready Status
   constexpr auto EFC0_FSR_FRDY = hr::field_mask_literal< 0x400e0a08, 0, 1 >();
   // Flash Command Error Status
   constexpr auto EFC0_FSR_FCMDE = hr::field_mask_literal< 0x400e0a08, 1, 1 >();
   // Flash Lock Error Status
   constexpr auto EFC0_FSR_FLOCKE = hr::field_mask_literal< 0x400e0a08, 2, 1 >();

// FRR
   // Flash Result Value
   constexpr auto EFC0_FRR_FVALUE_Msk = hr::field_mask_literal< 0x400e0a0c, 0, 32 >();

// =============================================================================
//
// EFC1
// base address = 0x400e0c00
// Embedded Flash Controller 1
//
// =============================================================================

struct Efc1 {
   hr::hardware_register<0x400e0c00> FMR;
   hr::hardware_register<0x400e0c04> FCR;
   hr::hardware_register<0x400e0c08> FSR;
   hr::hardware_register<0x400e0c0c> FRR;
};

#define EFC1 ( ( Efc1 * ) 0x400e0c00 )

// =============================================================================
//
// PIOA
// base address = 0x400e0e00
// Parallel Input/Output Controller A
//
// =============================================================================

struct Pioa {
   hr::hardware_register<0x400e0e00> PER;
   hr::hardware_register<0x400e0e04> PDR;
   hr::hardware_register<0x400e0e08> PSR;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x400e0e10> OER;
   hr::hardware_register<0x400e0e14> ODR;
   hr::hardware_register<0x400e0e18> OSR;
   hr::reserved< 0x1C, 1 > _reserved_at_0x1C;
   hr::hardware_register<0x400e0e20> IFER;
   hr::hardware_register<0x400e0e24> IFDR;
   hr::hardware_register<0x400e0e28> IFSR;
   hr::reserved< 0x2C, 1 > _reserved_at_0x2C;
   hr::hardware_register<0x400e0e30> SODR;
   hr::hardware_register<0x400e0e34> CODR;
   hr::hardware_register<0x400e0e38> ODSR;
   hr::hardware_register<0x400e0e3c> PDSR;
   hr::hardware_register<0x400e0e40> IER;
   hr::hardware_register<0x400e0e44> IDR;
   hr::hardware_register<0x400e0e48> IMR;
   hr::hardware_register<0x400e0e4c> ISR;
   hr::hardware_register<0x400e0e50> MDER;
   hr::hardware_register<0x400e0e54> MDDR;
   hr::hardware_register<0x400e0e58> MDSR;
   hr::reserved< 0x5C, 1 > _reserved_at_0x5C;
   hr::hardware_register<0x400e0e60> PUDR;
   hr::hardware_register<0x400e0e64> PUER;
   hr::hardware_register<0x400e0e68> PUSR;
   hr::reserved< 0x6C, 1 > _reserved_at_0x6C;
   hr::hardware_register<0x400e0e70> ABSR;
   hr::reserved< 0x74, 3 > _reserved_at_0x74;
   hr::hardware_register<0x400e0e80> SCIFSR;
   hr::hardware_register<0x400e0e84> DIFSR;
   hr::hardware_register<0x400e0e88> IFDGSR;
   hr::hardware_register<0x400e0e8c> SCDR;
   hr::reserved< 0x90, 4 > _reserved_at_0x90;
   hr::hardware_register<0x400e0ea0> OWER;
   hr::hardware_register<0x400e0ea4> OWDR;
   hr::hardware_register<0x400e0ea8> OWSR;
   hr::reserved< 0xAC, 1 > _reserved_at_0xAC;
   hr::hardware_register<0x400e0eb0> AIMER;
   hr::hardware_register<0x400e0eb4> AIMDR;
   hr::hardware_register<0x400e0eb8> AIMMR;
   hr::reserved< 0xBC, 1 > _reserved_at_0xBC;
   hr::hardware_register<0x400e0ec0> ESR;
   hr::hardware_register<0x400e0ec4> LSR;
   hr::hardware_register<0x400e0ec8> ELSR;
   hr::reserved< 0xCC, 1 > _reserved_at_0xCC;
   hr::hardware_register<0x400e0ed0> FELLSR;
   hr::hardware_register<0x400e0ed4> REHLSR;
   hr::hardware_register<0x400e0ed8> FRLHSR;
   hr::reserved< 0xDC, 1 > _reserved_at_0xDC;
   hr::hardware_register<0x400e0ee0> LOCKSR;
   hr::hardware_register<0x400e0ee4> WPMR;
   hr::hardware_register<0x400e0ee8> WPSR;
};

#define PIOA ( ( Pioa * ) 0x400e0e00 )

// PER
   // PIO Enable
   constexpr auto PIOA_PER_P0 = hr::field_mask_literal< 0x400e0e00, 0, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P1 = hr::field_mask_literal< 0x400e0e00, 1, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P2 = hr::field_mask_literal< 0x400e0e00, 2, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P3 = hr::field_mask_literal< 0x400e0e00, 3, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P4 = hr::field_mask_literal< 0x400e0e00, 4, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P5 = hr::field_mask_literal< 0x400e0e00, 5, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P6 = hr::field_mask_literal< 0x400e0e00, 6, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P7 = hr::field_mask_literal< 0x400e0e00, 7, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P8 = hr::field_mask_literal< 0x400e0e00, 8, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P9 = hr::field_mask_literal< 0x400e0e00, 9, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P10 = hr::field_mask_literal< 0x400e0e00, 10, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P11 = hr::field_mask_literal< 0x400e0e00, 11, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P12 = hr::field_mask_literal< 0x400e0e00, 12, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P13 = hr::field_mask_literal< 0x400e0e00, 13, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P14 = hr::field_mask_literal< 0x400e0e00, 14, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P15 = hr::field_mask_literal< 0x400e0e00, 15, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P16 = hr::field_mask_literal< 0x400e0e00, 16, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P17 = hr::field_mask_literal< 0x400e0e00, 17, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P18 = hr::field_mask_literal< 0x400e0e00, 18, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P19 = hr::field_mask_literal< 0x400e0e00, 19, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P20 = hr::field_mask_literal< 0x400e0e00, 20, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P21 = hr::field_mask_literal< 0x400e0e00, 21, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P22 = hr::field_mask_literal< 0x400e0e00, 22, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P23 = hr::field_mask_literal< 0x400e0e00, 23, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P24 = hr::field_mask_literal< 0x400e0e00, 24, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P25 = hr::field_mask_literal< 0x400e0e00, 25, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P26 = hr::field_mask_literal< 0x400e0e00, 26, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P27 = hr::field_mask_literal< 0x400e0e00, 27, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P28 = hr::field_mask_literal< 0x400e0e00, 28, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P29 = hr::field_mask_literal< 0x400e0e00, 29, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P30 = hr::field_mask_literal< 0x400e0e00, 30, 1 >();
   // PIO Enable
   constexpr auto PIOA_PER_P31 = hr::field_mask_literal< 0x400e0e00, 31, 1 >();

// PDR
   // PIO Disable
   constexpr auto PIOA_PDR_P0 = hr::field_mask_literal< 0x400e0e04, 0, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P1 = hr::field_mask_literal< 0x400e0e04, 1, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P2 = hr::field_mask_literal< 0x400e0e04, 2, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P3 = hr::field_mask_literal< 0x400e0e04, 3, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P4 = hr::field_mask_literal< 0x400e0e04, 4, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P5 = hr::field_mask_literal< 0x400e0e04, 5, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P6 = hr::field_mask_literal< 0x400e0e04, 6, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P7 = hr::field_mask_literal< 0x400e0e04, 7, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P8 = hr::field_mask_literal< 0x400e0e04, 8, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P9 = hr::field_mask_literal< 0x400e0e04, 9, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P10 = hr::field_mask_literal< 0x400e0e04, 10, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P11 = hr::field_mask_literal< 0x400e0e04, 11, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P12 = hr::field_mask_literal< 0x400e0e04, 12, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P13 = hr::field_mask_literal< 0x400e0e04, 13, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P14 = hr::field_mask_literal< 0x400e0e04, 14, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P15 = hr::field_mask_literal< 0x400e0e04, 15, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P16 = hr::field_mask_literal< 0x400e0e04, 16, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P17 = hr::field_mask_literal< 0x400e0e04, 17, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P18 = hr::field_mask_literal< 0x400e0e04, 18, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P19 = hr::field_mask_literal< 0x400e0e04, 19, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P20 = hr::field_mask_literal< 0x400e0e04, 20, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P21 = hr::field_mask_literal< 0x400e0e04, 21, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P22 = hr::field_mask_literal< 0x400e0e04, 22, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P23 = hr::field_mask_literal< 0x400e0e04, 23, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P24 = hr::field_mask_literal< 0x400e0e04, 24, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P25 = hr::field_mask_literal< 0x400e0e04, 25, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P26 = hr::field_mask_literal< 0x400e0e04, 26, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P27 = hr::field_mask_literal< 0x400e0e04, 27, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P28 = hr::field_mask_literal< 0x400e0e04, 28, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P29 = hr::field_mask_literal< 0x400e0e04, 29, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P30 = hr::field_mask_literal< 0x400e0e04, 30, 1 >();
   // PIO Disable
   constexpr auto PIOA_PDR_P31 = hr::field_mask_literal< 0x400e0e04, 31, 1 >();

// PSR
   // PIO Status
   constexpr auto PIOA_PSR_P0 = hr::field_mask_literal< 0x400e0e08, 0, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P1 = hr::field_mask_literal< 0x400e0e08, 1, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P2 = hr::field_mask_literal< 0x400e0e08, 2, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P3 = hr::field_mask_literal< 0x400e0e08, 3, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P4 = hr::field_mask_literal< 0x400e0e08, 4, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P5 = hr::field_mask_literal< 0x400e0e08, 5, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P6 = hr::field_mask_literal< 0x400e0e08, 6, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P7 = hr::field_mask_literal< 0x400e0e08, 7, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P8 = hr::field_mask_literal< 0x400e0e08, 8, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P9 = hr::field_mask_literal< 0x400e0e08, 9, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P10 = hr::field_mask_literal< 0x400e0e08, 10, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P11 = hr::field_mask_literal< 0x400e0e08, 11, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P12 = hr::field_mask_literal< 0x400e0e08, 12, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P13 = hr::field_mask_literal< 0x400e0e08, 13, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P14 = hr::field_mask_literal< 0x400e0e08, 14, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P15 = hr::field_mask_literal< 0x400e0e08, 15, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P16 = hr::field_mask_literal< 0x400e0e08, 16, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P17 = hr::field_mask_literal< 0x400e0e08, 17, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P18 = hr::field_mask_literal< 0x400e0e08, 18, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P19 = hr::field_mask_literal< 0x400e0e08, 19, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P20 = hr::field_mask_literal< 0x400e0e08, 20, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P21 = hr::field_mask_literal< 0x400e0e08, 21, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P22 = hr::field_mask_literal< 0x400e0e08, 22, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P23 = hr::field_mask_literal< 0x400e0e08, 23, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P24 = hr::field_mask_literal< 0x400e0e08, 24, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P25 = hr::field_mask_literal< 0x400e0e08, 25, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P26 = hr::field_mask_literal< 0x400e0e08, 26, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P27 = hr::field_mask_literal< 0x400e0e08, 27, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P28 = hr::field_mask_literal< 0x400e0e08, 28, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P29 = hr::field_mask_literal< 0x400e0e08, 29, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P30 = hr::field_mask_literal< 0x400e0e08, 30, 1 >();
   // PIO Status
   constexpr auto PIOA_PSR_P31 = hr::field_mask_literal< 0x400e0e08, 31, 1 >();

// OER
   // Output Enable
   constexpr auto PIOA_OER_P0 = hr::field_mask_literal< 0x400e0e10, 0, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P1 = hr::field_mask_literal< 0x400e0e10, 1, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P2 = hr::field_mask_literal< 0x400e0e10, 2, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P3 = hr::field_mask_literal< 0x400e0e10, 3, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P4 = hr::field_mask_literal< 0x400e0e10, 4, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P5 = hr::field_mask_literal< 0x400e0e10, 5, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P6 = hr::field_mask_literal< 0x400e0e10, 6, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P7 = hr::field_mask_literal< 0x400e0e10, 7, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P8 = hr::field_mask_literal< 0x400e0e10, 8, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P9 = hr::field_mask_literal< 0x400e0e10, 9, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P10 = hr::field_mask_literal< 0x400e0e10, 10, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P11 = hr::field_mask_literal< 0x400e0e10, 11, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P12 = hr::field_mask_literal< 0x400e0e10, 12, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P13 = hr::field_mask_literal< 0x400e0e10, 13, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P14 = hr::field_mask_literal< 0x400e0e10, 14, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P15 = hr::field_mask_literal< 0x400e0e10, 15, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P16 = hr::field_mask_literal< 0x400e0e10, 16, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P17 = hr::field_mask_literal< 0x400e0e10, 17, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P18 = hr::field_mask_literal< 0x400e0e10, 18, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P19 = hr::field_mask_literal< 0x400e0e10, 19, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P20 = hr::field_mask_literal< 0x400e0e10, 20, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P21 = hr::field_mask_literal< 0x400e0e10, 21, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P22 = hr::field_mask_literal< 0x400e0e10, 22, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P23 = hr::field_mask_literal< 0x400e0e10, 23, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P24 = hr::field_mask_literal< 0x400e0e10, 24, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P25 = hr::field_mask_literal< 0x400e0e10, 25, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P26 = hr::field_mask_literal< 0x400e0e10, 26, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P27 = hr::field_mask_literal< 0x400e0e10, 27, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P28 = hr::field_mask_literal< 0x400e0e10, 28, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P29 = hr::field_mask_literal< 0x400e0e10, 29, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P30 = hr::field_mask_literal< 0x400e0e10, 30, 1 >();
   // Output Enable
   constexpr auto PIOA_OER_P31 = hr::field_mask_literal< 0x400e0e10, 31, 1 >();

// ODR
   // Output Disable
   constexpr auto PIOA_ODR_P0 = hr::field_mask_literal< 0x400e0e14, 0, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P1 = hr::field_mask_literal< 0x400e0e14, 1, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P2 = hr::field_mask_literal< 0x400e0e14, 2, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P3 = hr::field_mask_literal< 0x400e0e14, 3, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P4 = hr::field_mask_literal< 0x400e0e14, 4, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P5 = hr::field_mask_literal< 0x400e0e14, 5, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P6 = hr::field_mask_literal< 0x400e0e14, 6, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P7 = hr::field_mask_literal< 0x400e0e14, 7, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P8 = hr::field_mask_literal< 0x400e0e14, 8, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P9 = hr::field_mask_literal< 0x400e0e14, 9, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P10 = hr::field_mask_literal< 0x400e0e14, 10, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P11 = hr::field_mask_literal< 0x400e0e14, 11, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P12 = hr::field_mask_literal< 0x400e0e14, 12, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P13 = hr::field_mask_literal< 0x400e0e14, 13, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P14 = hr::field_mask_literal< 0x400e0e14, 14, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P15 = hr::field_mask_literal< 0x400e0e14, 15, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P16 = hr::field_mask_literal< 0x400e0e14, 16, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P17 = hr::field_mask_literal< 0x400e0e14, 17, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P18 = hr::field_mask_literal< 0x400e0e14, 18, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P19 = hr::field_mask_literal< 0x400e0e14, 19, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P20 = hr::field_mask_literal< 0x400e0e14, 20, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P21 = hr::field_mask_literal< 0x400e0e14, 21, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P22 = hr::field_mask_literal< 0x400e0e14, 22, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P23 = hr::field_mask_literal< 0x400e0e14, 23, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P24 = hr::field_mask_literal< 0x400e0e14, 24, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P25 = hr::field_mask_literal< 0x400e0e14, 25, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P26 = hr::field_mask_literal< 0x400e0e14, 26, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P27 = hr::field_mask_literal< 0x400e0e14, 27, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P28 = hr::field_mask_literal< 0x400e0e14, 28, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P29 = hr::field_mask_literal< 0x400e0e14, 29, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P30 = hr::field_mask_literal< 0x400e0e14, 30, 1 >();
   // Output Disable
   constexpr auto PIOA_ODR_P31 = hr::field_mask_literal< 0x400e0e14, 31, 1 >();

// OSR
   // Output Status
   constexpr auto PIOA_OSR_P0 = hr::field_mask_literal< 0x400e0e18, 0, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P1 = hr::field_mask_literal< 0x400e0e18, 1, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P2 = hr::field_mask_literal< 0x400e0e18, 2, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P3 = hr::field_mask_literal< 0x400e0e18, 3, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P4 = hr::field_mask_literal< 0x400e0e18, 4, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P5 = hr::field_mask_literal< 0x400e0e18, 5, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P6 = hr::field_mask_literal< 0x400e0e18, 6, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P7 = hr::field_mask_literal< 0x400e0e18, 7, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P8 = hr::field_mask_literal< 0x400e0e18, 8, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P9 = hr::field_mask_literal< 0x400e0e18, 9, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P10 = hr::field_mask_literal< 0x400e0e18, 10, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P11 = hr::field_mask_literal< 0x400e0e18, 11, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P12 = hr::field_mask_literal< 0x400e0e18, 12, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P13 = hr::field_mask_literal< 0x400e0e18, 13, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P14 = hr::field_mask_literal< 0x400e0e18, 14, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P15 = hr::field_mask_literal< 0x400e0e18, 15, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P16 = hr::field_mask_literal< 0x400e0e18, 16, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P17 = hr::field_mask_literal< 0x400e0e18, 17, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P18 = hr::field_mask_literal< 0x400e0e18, 18, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P19 = hr::field_mask_literal< 0x400e0e18, 19, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P20 = hr::field_mask_literal< 0x400e0e18, 20, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P21 = hr::field_mask_literal< 0x400e0e18, 21, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P22 = hr::field_mask_literal< 0x400e0e18, 22, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P23 = hr::field_mask_literal< 0x400e0e18, 23, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P24 = hr::field_mask_literal< 0x400e0e18, 24, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P25 = hr::field_mask_literal< 0x400e0e18, 25, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P26 = hr::field_mask_literal< 0x400e0e18, 26, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P27 = hr::field_mask_literal< 0x400e0e18, 27, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P28 = hr::field_mask_literal< 0x400e0e18, 28, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P29 = hr::field_mask_literal< 0x400e0e18, 29, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P30 = hr::field_mask_literal< 0x400e0e18, 30, 1 >();
   // Output Status
   constexpr auto PIOA_OSR_P31 = hr::field_mask_literal< 0x400e0e18, 31, 1 >();

// IFER
   // Input Filter Enable
   constexpr auto PIOA_IFER_P0 = hr::field_mask_literal< 0x400e0e20, 0, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P1 = hr::field_mask_literal< 0x400e0e20, 1, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P2 = hr::field_mask_literal< 0x400e0e20, 2, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P3 = hr::field_mask_literal< 0x400e0e20, 3, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P4 = hr::field_mask_literal< 0x400e0e20, 4, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P5 = hr::field_mask_literal< 0x400e0e20, 5, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P6 = hr::field_mask_literal< 0x400e0e20, 6, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P7 = hr::field_mask_literal< 0x400e0e20, 7, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P8 = hr::field_mask_literal< 0x400e0e20, 8, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P9 = hr::field_mask_literal< 0x400e0e20, 9, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P10 = hr::field_mask_literal< 0x400e0e20, 10, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P11 = hr::field_mask_literal< 0x400e0e20, 11, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P12 = hr::field_mask_literal< 0x400e0e20, 12, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P13 = hr::field_mask_literal< 0x400e0e20, 13, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P14 = hr::field_mask_literal< 0x400e0e20, 14, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P15 = hr::field_mask_literal< 0x400e0e20, 15, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P16 = hr::field_mask_literal< 0x400e0e20, 16, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P17 = hr::field_mask_literal< 0x400e0e20, 17, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P18 = hr::field_mask_literal< 0x400e0e20, 18, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P19 = hr::field_mask_literal< 0x400e0e20, 19, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P20 = hr::field_mask_literal< 0x400e0e20, 20, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P21 = hr::field_mask_literal< 0x400e0e20, 21, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P22 = hr::field_mask_literal< 0x400e0e20, 22, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P23 = hr::field_mask_literal< 0x400e0e20, 23, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P24 = hr::field_mask_literal< 0x400e0e20, 24, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P25 = hr::field_mask_literal< 0x400e0e20, 25, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P26 = hr::field_mask_literal< 0x400e0e20, 26, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P27 = hr::field_mask_literal< 0x400e0e20, 27, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P28 = hr::field_mask_literal< 0x400e0e20, 28, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P29 = hr::field_mask_literal< 0x400e0e20, 29, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P30 = hr::field_mask_literal< 0x400e0e20, 30, 1 >();
   // Input Filter Enable
   constexpr auto PIOA_IFER_P31 = hr::field_mask_literal< 0x400e0e20, 31, 1 >();

// IFDR
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P0 = hr::field_mask_literal< 0x400e0e24, 0, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P1 = hr::field_mask_literal< 0x400e0e24, 1, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P2 = hr::field_mask_literal< 0x400e0e24, 2, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P3 = hr::field_mask_literal< 0x400e0e24, 3, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P4 = hr::field_mask_literal< 0x400e0e24, 4, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P5 = hr::field_mask_literal< 0x400e0e24, 5, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P6 = hr::field_mask_literal< 0x400e0e24, 6, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P7 = hr::field_mask_literal< 0x400e0e24, 7, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P8 = hr::field_mask_literal< 0x400e0e24, 8, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P9 = hr::field_mask_literal< 0x400e0e24, 9, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P10 = hr::field_mask_literal< 0x400e0e24, 10, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P11 = hr::field_mask_literal< 0x400e0e24, 11, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P12 = hr::field_mask_literal< 0x400e0e24, 12, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P13 = hr::field_mask_literal< 0x400e0e24, 13, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P14 = hr::field_mask_literal< 0x400e0e24, 14, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P15 = hr::field_mask_literal< 0x400e0e24, 15, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P16 = hr::field_mask_literal< 0x400e0e24, 16, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P17 = hr::field_mask_literal< 0x400e0e24, 17, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P18 = hr::field_mask_literal< 0x400e0e24, 18, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P19 = hr::field_mask_literal< 0x400e0e24, 19, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P20 = hr::field_mask_literal< 0x400e0e24, 20, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P21 = hr::field_mask_literal< 0x400e0e24, 21, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P22 = hr::field_mask_literal< 0x400e0e24, 22, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P23 = hr::field_mask_literal< 0x400e0e24, 23, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P24 = hr::field_mask_literal< 0x400e0e24, 24, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P25 = hr::field_mask_literal< 0x400e0e24, 25, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P26 = hr::field_mask_literal< 0x400e0e24, 26, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P27 = hr::field_mask_literal< 0x400e0e24, 27, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P28 = hr::field_mask_literal< 0x400e0e24, 28, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P29 = hr::field_mask_literal< 0x400e0e24, 29, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P30 = hr::field_mask_literal< 0x400e0e24, 30, 1 >();
   // Input Filter Disable
   constexpr auto PIOA_IFDR_P31 = hr::field_mask_literal< 0x400e0e24, 31, 1 >();

// IFSR
   // Input Filer Status
   constexpr auto PIOA_IFSR_P0 = hr::field_mask_literal< 0x400e0e28, 0, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P1 = hr::field_mask_literal< 0x400e0e28, 1, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P2 = hr::field_mask_literal< 0x400e0e28, 2, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P3 = hr::field_mask_literal< 0x400e0e28, 3, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P4 = hr::field_mask_literal< 0x400e0e28, 4, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P5 = hr::field_mask_literal< 0x400e0e28, 5, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P6 = hr::field_mask_literal< 0x400e0e28, 6, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P7 = hr::field_mask_literal< 0x400e0e28, 7, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P8 = hr::field_mask_literal< 0x400e0e28, 8, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P9 = hr::field_mask_literal< 0x400e0e28, 9, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P10 = hr::field_mask_literal< 0x400e0e28, 10, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P11 = hr::field_mask_literal< 0x400e0e28, 11, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P12 = hr::field_mask_literal< 0x400e0e28, 12, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P13 = hr::field_mask_literal< 0x400e0e28, 13, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P14 = hr::field_mask_literal< 0x400e0e28, 14, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P15 = hr::field_mask_literal< 0x400e0e28, 15, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P16 = hr::field_mask_literal< 0x400e0e28, 16, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P17 = hr::field_mask_literal< 0x400e0e28, 17, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P18 = hr::field_mask_literal< 0x400e0e28, 18, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P19 = hr::field_mask_literal< 0x400e0e28, 19, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P20 = hr::field_mask_literal< 0x400e0e28, 20, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P21 = hr::field_mask_literal< 0x400e0e28, 21, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P22 = hr::field_mask_literal< 0x400e0e28, 22, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P23 = hr::field_mask_literal< 0x400e0e28, 23, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P24 = hr::field_mask_literal< 0x400e0e28, 24, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P25 = hr::field_mask_literal< 0x400e0e28, 25, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P26 = hr::field_mask_literal< 0x400e0e28, 26, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P27 = hr::field_mask_literal< 0x400e0e28, 27, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P28 = hr::field_mask_literal< 0x400e0e28, 28, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P29 = hr::field_mask_literal< 0x400e0e28, 29, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P30 = hr::field_mask_literal< 0x400e0e28, 30, 1 >();
   // Input Filer Status
   constexpr auto PIOA_IFSR_P31 = hr::field_mask_literal< 0x400e0e28, 31, 1 >();

// SODR
   // Set Output Data
   constexpr auto PIOA_SODR_P0 = hr::field_mask_literal< 0x400e0e30, 0, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P1 = hr::field_mask_literal< 0x400e0e30, 1, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P2 = hr::field_mask_literal< 0x400e0e30, 2, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P3 = hr::field_mask_literal< 0x400e0e30, 3, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P4 = hr::field_mask_literal< 0x400e0e30, 4, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P5 = hr::field_mask_literal< 0x400e0e30, 5, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P6 = hr::field_mask_literal< 0x400e0e30, 6, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P7 = hr::field_mask_literal< 0x400e0e30, 7, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P8 = hr::field_mask_literal< 0x400e0e30, 8, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P9 = hr::field_mask_literal< 0x400e0e30, 9, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P10 = hr::field_mask_literal< 0x400e0e30, 10, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P11 = hr::field_mask_literal< 0x400e0e30, 11, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P12 = hr::field_mask_literal< 0x400e0e30, 12, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P13 = hr::field_mask_literal< 0x400e0e30, 13, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P14 = hr::field_mask_literal< 0x400e0e30, 14, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P15 = hr::field_mask_literal< 0x400e0e30, 15, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P16 = hr::field_mask_literal< 0x400e0e30, 16, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P17 = hr::field_mask_literal< 0x400e0e30, 17, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P18 = hr::field_mask_literal< 0x400e0e30, 18, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P19 = hr::field_mask_literal< 0x400e0e30, 19, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P20 = hr::field_mask_literal< 0x400e0e30, 20, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P21 = hr::field_mask_literal< 0x400e0e30, 21, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P22 = hr::field_mask_literal< 0x400e0e30, 22, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P23 = hr::field_mask_literal< 0x400e0e30, 23, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P24 = hr::field_mask_literal< 0x400e0e30, 24, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P25 = hr::field_mask_literal< 0x400e0e30, 25, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P26 = hr::field_mask_literal< 0x400e0e30, 26, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P27 = hr::field_mask_literal< 0x400e0e30, 27, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P28 = hr::field_mask_literal< 0x400e0e30, 28, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P29 = hr::field_mask_literal< 0x400e0e30, 29, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P30 = hr::field_mask_literal< 0x400e0e30, 30, 1 >();
   // Set Output Data
   constexpr auto PIOA_SODR_P31 = hr::field_mask_literal< 0x400e0e30, 31, 1 >();

// CODR
   // Clear Output Data
   constexpr auto PIOA_CODR_P0 = hr::field_mask_literal< 0x400e0e34, 0, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P1 = hr::field_mask_literal< 0x400e0e34, 1, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P2 = hr::field_mask_literal< 0x400e0e34, 2, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P3 = hr::field_mask_literal< 0x400e0e34, 3, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P4 = hr::field_mask_literal< 0x400e0e34, 4, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P5 = hr::field_mask_literal< 0x400e0e34, 5, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P6 = hr::field_mask_literal< 0x400e0e34, 6, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P7 = hr::field_mask_literal< 0x400e0e34, 7, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P8 = hr::field_mask_literal< 0x400e0e34, 8, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P9 = hr::field_mask_literal< 0x400e0e34, 9, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P10 = hr::field_mask_literal< 0x400e0e34, 10, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P11 = hr::field_mask_literal< 0x400e0e34, 11, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P12 = hr::field_mask_literal< 0x400e0e34, 12, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P13 = hr::field_mask_literal< 0x400e0e34, 13, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P14 = hr::field_mask_literal< 0x400e0e34, 14, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P15 = hr::field_mask_literal< 0x400e0e34, 15, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P16 = hr::field_mask_literal< 0x400e0e34, 16, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P17 = hr::field_mask_literal< 0x400e0e34, 17, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P18 = hr::field_mask_literal< 0x400e0e34, 18, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P19 = hr::field_mask_literal< 0x400e0e34, 19, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P20 = hr::field_mask_literal< 0x400e0e34, 20, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P21 = hr::field_mask_literal< 0x400e0e34, 21, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P22 = hr::field_mask_literal< 0x400e0e34, 22, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P23 = hr::field_mask_literal< 0x400e0e34, 23, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P24 = hr::field_mask_literal< 0x400e0e34, 24, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P25 = hr::field_mask_literal< 0x400e0e34, 25, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P26 = hr::field_mask_literal< 0x400e0e34, 26, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P27 = hr::field_mask_literal< 0x400e0e34, 27, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P28 = hr::field_mask_literal< 0x400e0e34, 28, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P29 = hr::field_mask_literal< 0x400e0e34, 29, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P30 = hr::field_mask_literal< 0x400e0e34, 30, 1 >();
   // Clear Output Data
   constexpr auto PIOA_CODR_P31 = hr::field_mask_literal< 0x400e0e34, 31, 1 >();

// ODSR
   // Output Data Status
   constexpr auto PIOA_ODSR_P0 = hr::field_mask_literal< 0x400e0e38, 0, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P1 = hr::field_mask_literal< 0x400e0e38, 1, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P2 = hr::field_mask_literal< 0x400e0e38, 2, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P3 = hr::field_mask_literal< 0x400e0e38, 3, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P4 = hr::field_mask_literal< 0x400e0e38, 4, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P5 = hr::field_mask_literal< 0x400e0e38, 5, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P6 = hr::field_mask_literal< 0x400e0e38, 6, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P7 = hr::field_mask_literal< 0x400e0e38, 7, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P8 = hr::field_mask_literal< 0x400e0e38, 8, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P9 = hr::field_mask_literal< 0x400e0e38, 9, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P10 = hr::field_mask_literal< 0x400e0e38, 10, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P11 = hr::field_mask_literal< 0x400e0e38, 11, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P12 = hr::field_mask_literal< 0x400e0e38, 12, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P13 = hr::field_mask_literal< 0x400e0e38, 13, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P14 = hr::field_mask_literal< 0x400e0e38, 14, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P15 = hr::field_mask_literal< 0x400e0e38, 15, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P16 = hr::field_mask_literal< 0x400e0e38, 16, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P17 = hr::field_mask_literal< 0x400e0e38, 17, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P18 = hr::field_mask_literal< 0x400e0e38, 18, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P19 = hr::field_mask_literal< 0x400e0e38, 19, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P20 = hr::field_mask_literal< 0x400e0e38, 20, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P21 = hr::field_mask_literal< 0x400e0e38, 21, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P22 = hr::field_mask_literal< 0x400e0e38, 22, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P23 = hr::field_mask_literal< 0x400e0e38, 23, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P24 = hr::field_mask_literal< 0x400e0e38, 24, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P25 = hr::field_mask_literal< 0x400e0e38, 25, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P26 = hr::field_mask_literal< 0x400e0e38, 26, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P27 = hr::field_mask_literal< 0x400e0e38, 27, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P28 = hr::field_mask_literal< 0x400e0e38, 28, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P29 = hr::field_mask_literal< 0x400e0e38, 29, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P30 = hr::field_mask_literal< 0x400e0e38, 30, 1 >();
   // Output Data Status
   constexpr auto PIOA_ODSR_P31 = hr::field_mask_literal< 0x400e0e38, 31, 1 >();

// PDSR
   // Output Data Status
   constexpr auto PIOA_PDSR_P0 = hr::field_mask_literal< 0x400e0e3c, 0, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P1 = hr::field_mask_literal< 0x400e0e3c, 1, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P2 = hr::field_mask_literal< 0x400e0e3c, 2, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P3 = hr::field_mask_literal< 0x400e0e3c, 3, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P4 = hr::field_mask_literal< 0x400e0e3c, 4, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P5 = hr::field_mask_literal< 0x400e0e3c, 5, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P6 = hr::field_mask_literal< 0x400e0e3c, 6, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P7 = hr::field_mask_literal< 0x400e0e3c, 7, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P8 = hr::field_mask_literal< 0x400e0e3c, 8, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P9 = hr::field_mask_literal< 0x400e0e3c, 9, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P10 = hr::field_mask_literal< 0x400e0e3c, 10, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P11 = hr::field_mask_literal< 0x400e0e3c, 11, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P12 = hr::field_mask_literal< 0x400e0e3c, 12, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P13 = hr::field_mask_literal< 0x400e0e3c, 13, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P14 = hr::field_mask_literal< 0x400e0e3c, 14, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P15 = hr::field_mask_literal< 0x400e0e3c, 15, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P16 = hr::field_mask_literal< 0x400e0e3c, 16, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P17 = hr::field_mask_literal< 0x400e0e3c, 17, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P18 = hr::field_mask_literal< 0x400e0e3c, 18, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P19 = hr::field_mask_literal< 0x400e0e3c, 19, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P20 = hr::field_mask_literal< 0x400e0e3c, 20, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P21 = hr::field_mask_literal< 0x400e0e3c, 21, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P22 = hr::field_mask_literal< 0x400e0e3c, 22, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P23 = hr::field_mask_literal< 0x400e0e3c, 23, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P24 = hr::field_mask_literal< 0x400e0e3c, 24, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P25 = hr::field_mask_literal< 0x400e0e3c, 25, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P26 = hr::field_mask_literal< 0x400e0e3c, 26, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P27 = hr::field_mask_literal< 0x400e0e3c, 27, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P28 = hr::field_mask_literal< 0x400e0e3c, 28, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P29 = hr::field_mask_literal< 0x400e0e3c, 29, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P30 = hr::field_mask_literal< 0x400e0e3c, 30, 1 >();
   // Output Data Status
   constexpr auto PIOA_PDSR_P31 = hr::field_mask_literal< 0x400e0e3c, 31, 1 >();

// IER
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P0 = hr::field_mask_literal< 0x400e0e40, 0, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P1 = hr::field_mask_literal< 0x400e0e40, 1, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P2 = hr::field_mask_literal< 0x400e0e40, 2, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P3 = hr::field_mask_literal< 0x400e0e40, 3, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P4 = hr::field_mask_literal< 0x400e0e40, 4, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P5 = hr::field_mask_literal< 0x400e0e40, 5, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P6 = hr::field_mask_literal< 0x400e0e40, 6, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P7 = hr::field_mask_literal< 0x400e0e40, 7, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P8 = hr::field_mask_literal< 0x400e0e40, 8, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P9 = hr::field_mask_literal< 0x400e0e40, 9, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P10 = hr::field_mask_literal< 0x400e0e40, 10, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P11 = hr::field_mask_literal< 0x400e0e40, 11, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P12 = hr::field_mask_literal< 0x400e0e40, 12, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P13 = hr::field_mask_literal< 0x400e0e40, 13, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P14 = hr::field_mask_literal< 0x400e0e40, 14, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P15 = hr::field_mask_literal< 0x400e0e40, 15, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P16 = hr::field_mask_literal< 0x400e0e40, 16, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P17 = hr::field_mask_literal< 0x400e0e40, 17, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P18 = hr::field_mask_literal< 0x400e0e40, 18, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P19 = hr::field_mask_literal< 0x400e0e40, 19, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P20 = hr::field_mask_literal< 0x400e0e40, 20, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P21 = hr::field_mask_literal< 0x400e0e40, 21, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P22 = hr::field_mask_literal< 0x400e0e40, 22, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P23 = hr::field_mask_literal< 0x400e0e40, 23, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P24 = hr::field_mask_literal< 0x400e0e40, 24, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P25 = hr::field_mask_literal< 0x400e0e40, 25, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P26 = hr::field_mask_literal< 0x400e0e40, 26, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P27 = hr::field_mask_literal< 0x400e0e40, 27, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P28 = hr::field_mask_literal< 0x400e0e40, 28, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P29 = hr::field_mask_literal< 0x400e0e40, 29, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P30 = hr::field_mask_literal< 0x400e0e40, 30, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOA_IER_P31 = hr::field_mask_literal< 0x400e0e40, 31, 1 >();

// IDR
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P0 = hr::field_mask_literal< 0x400e0e44, 0, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P1 = hr::field_mask_literal< 0x400e0e44, 1, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P2 = hr::field_mask_literal< 0x400e0e44, 2, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P3 = hr::field_mask_literal< 0x400e0e44, 3, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P4 = hr::field_mask_literal< 0x400e0e44, 4, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P5 = hr::field_mask_literal< 0x400e0e44, 5, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P6 = hr::field_mask_literal< 0x400e0e44, 6, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P7 = hr::field_mask_literal< 0x400e0e44, 7, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P8 = hr::field_mask_literal< 0x400e0e44, 8, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P9 = hr::field_mask_literal< 0x400e0e44, 9, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P10 = hr::field_mask_literal< 0x400e0e44, 10, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P11 = hr::field_mask_literal< 0x400e0e44, 11, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P12 = hr::field_mask_literal< 0x400e0e44, 12, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P13 = hr::field_mask_literal< 0x400e0e44, 13, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P14 = hr::field_mask_literal< 0x400e0e44, 14, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P15 = hr::field_mask_literal< 0x400e0e44, 15, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P16 = hr::field_mask_literal< 0x400e0e44, 16, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P17 = hr::field_mask_literal< 0x400e0e44, 17, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P18 = hr::field_mask_literal< 0x400e0e44, 18, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P19 = hr::field_mask_literal< 0x400e0e44, 19, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P20 = hr::field_mask_literal< 0x400e0e44, 20, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P21 = hr::field_mask_literal< 0x400e0e44, 21, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P22 = hr::field_mask_literal< 0x400e0e44, 22, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P23 = hr::field_mask_literal< 0x400e0e44, 23, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P24 = hr::field_mask_literal< 0x400e0e44, 24, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P25 = hr::field_mask_literal< 0x400e0e44, 25, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P26 = hr::field_mask_literal< 0x400e0e44, 26, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P27 = hr::field_mask_literal< 0x400e0e44, 27, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P28 = hr::field_mask_literal< 0x400e0e44, 28, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P29 = hr::field_mask_literal< 0x400e0e44, 29, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P30 = hr::field_mask_literal< 0x400e0e44, 30, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOA_IDR_P31 = hr::field_mask_literal< 0x400e0e44, 31, 1 >();

// IMR
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P0 = hr::field_mask_literal< 0x400e0e48, 0, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P1 = hr::field_mask_literal< 0x400e0e48, 1, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P2 = hr::field_mask_literal< 0x400e0e48, 2, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P3 = hr::field_mask_literal< 0x400e0e48, 3, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P4 = hr::field_mask_literal< 0x400e0e48, 4, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P5 = hr::field_mask_literal< 0x400e0e48, 5, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P6 = hr::field_mask_literal< 0x400e0e48, 6, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P7 = hr::field_mask_literal< 0x400e0e48, 7, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P8 = hr::field_mask_literal< 0x400e0e48, 8, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P9 = hr::field_mask_literal< 0x400e0e48, 9, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P10 = hr::field_mask_literal< 0x400e0e48, 10, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P11 = hr::field_mask_literal< 0x400e0e48, 11, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P12 = hr::field_mask_literal< 0x400e0e48, 12, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P13 = hr::field_mask_literal< 0x400e0e48, 13, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P14 = hr::field_mask_literal< 0x400e0e48, 14, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P15 = hr::field_mask_literal< 0x400e0e48, 15, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P16 = hr::field_mask_literal< 0x400e0e48, 16, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P17 = hr::field_mask_literal< 0x400e0e48, 17, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P18 = hr::field_mask_literal< 0x400e0e48, 18, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P19 = hr::field_mask_literal< 0x400e0e48, 19, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P20 = hr::field_mask_literal< 0x400e0e48, 20, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P21 = hr::field_mask_literal< 0x400e0e48, 21, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P22 = hr::field_mask_literal< 0x400e0e48, 22, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P23 = hr::field_mask_literal< 0x400e0e48, 23, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P24 = hr::field_mask_literal< 0x400e0e48, 24, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P25 = hr::field_mask_literal< 0x400e0e48, 25, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P26 = hr::field_mask_literal< 0x400e0e48, 26, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P27 = hr::field_mask_literal< 0x400e0e48, 27, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P28 = hr::field_mask_literal< 0x400e0e48, 28, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P29 = hr::field_mask_literal< 0x400e0e48, 29, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P30 = hr::field_mask_literal< 0x400e0e48, 30, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOA_IMR_P31 = hr::field_mask_literal< 0x400e0e48, 31, 1 >();

// ISR
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P0 = hr::field_mask_literal< 0x400e0e4c, 0, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P1 = hr::field_mask_literal< 0x400e0e4c, 1, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P2 = hr::field_mask_literal< 0x400e0e4c, 2, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P3 = hr::field_mask_literal< 0x400e0e4c, 3, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P4 = hr::field_mask_literal< 0x400e0e4c, 4, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P5 = hr::field_mask_literal< 0x400e0e4c, 5, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P6 = hr::field_mask_literal< 0x400e0e4c, 6, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P7 = hr::field_mask_literal< 0x400e0e4c, 7, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P8 = hr::field_mask_literal< 0x400e0e4c, 8, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P9 = hr::field_mask_literal< 0x400e0e4c, 9, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P10 = hr::field_mask_literal< 0x400e0e4c, 10, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P11 = hr::field_mask_literal< 0x400e0e4c, 11, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P12 = hr::field_mask_literal< 0x400e0e4c, 12, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P13 = hr::field_mask_literal< 0x400e0e4c, 13, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P14 = hr::field_mask_literal< 0x400e0e4c, 14, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P15 = hr::field_mask_literal< 0x400e0e4c, 15, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P16 = hr::field_mask_literal< 0x400e0e4c, 16, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P17 = hr::field_mask_literal< 0x400e0e4c, 17, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P18 = hr::field_mask_literal< 0x400e0e4c, 18, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P19 = hr::field_mask_literal< 0x400e0e4c, 19, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P20 = hr::field_mask_literal< 0x400e0e4c, 20, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P21 = hr::field_mask_literal< 0x400e0e4c, 21, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P22 = hr::field_mask_literal< 0x400e0e4c, 22, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P23 = hr::field_mask_literal< 0x400e0e4c, 23, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P24 = hr::field_mask_literal< 0x400e0e4c, 24, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P25 = hr::field_mask_literal< 0x400e0e4c, 25, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P26 = hr::field_mask_literal< 0x400e0e4c, 26, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P27 = hr::field_mask_literal< 0x400e0e4c, 27, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P28 = hr::field_mask_literal< 0x400e0e4c, 28, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P29 = hr::field_mask_literal< 0x400e0e4c, 29, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P30 = hr::field_mask_literal< 0x400e0e4c, 30, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOA_ISR_P31 = hr::field_mask_literal< 0x400e0e4c, 31, 1 >();

// MDER
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P0 = hr::field_mask_literal< 0x400e0e50, 0, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P1 = hr::field_mask_literal< 0x400e0e50, 1, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P2 = hr::field_mask_literal< 0x400e0e50, 2, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P3 = hr::field_mask_literal< 0x400e0e50, 3, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P4 = hr::field_mask_literal< 0x400e0e50, 4, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P5 = hr::field_mask_literal< 0x400e0e50, 5, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P6 = hr::field_mask_literal< 0x400e0e50, 6, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P7 = hr::field_mask_literal< 0x400e0e50, 7, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P8 = hr::field_mask_literal< 0x400e0e50, 8, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P9 = hr::field_mask_literal< 0x400e0e50, 9, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P10 = hr::field_mask_literal< 0x400e0e50, 10, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P11 = hr::field_mask_literal< 0x400e0e50, 11, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P12 = hr::field_mask_literal< 0x400e0e50, 12, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P13 = hr::field_mask_literal< 0x400e0e50, 13, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P14 = hr::field_mask_literal< 0x400e0e50, 14, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P15 = hr::field_mask_literal< 0x400e0e50, 15, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P16 = hr::field_mask_literal< 0x400e0e50, 16, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P17 = hr::field_mask_literal< 0x400e0e50, 17, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P18 = hr::field_mask_literal< 0x400e0e50, 18, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P19 = hr::field_mask_literal< 0x400e0e50, 19, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P20 = hr::field_mask_literal< 0x400e0e50, 20, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P21 = hr::field_mask_literal< 0x400e0e50, 21, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P22 = hr::field_mask_literal< 0x400e0e50, 22, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P23 = hr::field_mask_literal< 0x400e0e50, 23, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P24 = hr::field_mask_literal< 0x400e0e50, 24, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P25 = hr::field_mask_literal< 0x400e0e50, 25, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P26 = hr::field_mask_literal< 0x400e0e50, 26, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P27 = hr::field_mask_literal< 0x400e0e50, 27, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P28 = hr::field_mask_literal< 0x400e0e50, 28, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P29 = hr::field_mask_literal< 0x400e0e50, 29, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P30 = hr::field_mask_literal< 0x400e0e50, 30, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOA_MDER_P31 = hr::field_mask_literal< 0x400e0e50, 31, 1 >();

// MDDR
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P0 = hr::field_mask_literal< 0x400e0e54, 0, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P1 = hr::field_mask_literal< 0x400e0e54, 1, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P2 = hr::field_mask_literal< 0x400e0e54, 2, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P3 = hr::field_mask_literal< 0x400e0e54, 3, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P4 = hr::field_mask_literal< 0x400e0e54, 4, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P5 = hr::field_mask_literal< 0x400e0e54, 5, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P6 = hr::field_mask_literal< 0x400e0e54, 6, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P7 = hr::field_mask_literal< 0x400e0e54, 7, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P8 = hr::field_mask_literal< 0x400e0e54, 8, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P9 = hr::field_mask_literal< 0x400e0e54, 9, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P10 = hr::field_mask_literal< 0x400e0e54, 10, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P11 = hr::field_mask_literal< 0x400e0e54, 11, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P12 = hr::field_mask_literal< 0x400e0e54, 12, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P13 = hr::field_mask_literal< 0x400e0e54, 13, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P14 = hr::field_mask_literal< 0x400e0e54, 14, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P15 = hr::field_mask_literal< 0x400e0e54, 15, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P16 = hr::field_mask_literal< 0x400e0e54, 16, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P17 = hr::field_mask_literal< 0x400e0e54, 17, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P18 = hr::field_mask_literal< 0x400e0e54, 18, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P19 = hr::field_mask_literal< 0x400e0e54, 19, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P20 = hr::field_mask_literal< 0x400e0e54, 20, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P21 = hr::field_mask_literal< 0x400e0e54, 21, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P22 = hr::field_mask_literal< 0x400e0e54, 22, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P23 = hr::field_mask_literal< 0x400e0e54, 23, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P24 = hr::field_mask_literal< 0x400e0e54, 24, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P25 = hr::field_mask_literal< 0x400e0e54, 25, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P26 = hr::field_mask_literal< 0x400e0e54, 26, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P27 = hr::field_mask_literal< 0x400e0e54, 27, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P28 = hr::field_mask_literal< 0x400e0e54, 28, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P29 = hr::field_mask_literal< 0x400e0e54, 29, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P30 = hr::field_mask_literal< 0x400e0e54, 30, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOA_MDDR_P31 = hr::field_mask_literal< 0x400e0e54, 31, 1 >();

// MDSR
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P0 = hr::field_mask_literal< 0x400e0e58, 0, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P1 = hr::field_mask_literal< 0x400e0e58, 1, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P2 = hr::field_mask_literal< 0x400e0e58, 2, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P3 = hr::field_mask_literal< 0x400e0e58, 3, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P4 = hr::field_mask_literal< 0x400e0e58, 4, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P5 = hr::field_mask_literal< 0x400e0e58, 5, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P6 = hr::field_mask_literal< 0x400e0e58, 6, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P7 = hr::field_mask_literal< 0x400e0e58, 7, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P8 = hr::field_mask_literal< 0x400e0e58, 8, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P9 = hr::field_mask_literal< 0x400e0e58, 9, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P10 = hr::field_mask_literal< 0x400e0e58, 10, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P11 = hr::field_mask_literal< 0x400e0e58, 11, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P12 = hr::field_mask_literal< 0x400e0e58, 12, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P13 = hr::field_mask_literal< 0x400e0e58, 13, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P14 = hr::field_mask_literal< 0x400e0e58, 14, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P15 = hr::field_mask_literal< 0x400e0e58, 15, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P16 = hr::field_mask_literal< 0x400e0e58, 16, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P17 = hr::field_mask_literal< 0x400e0e58, 17, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P18 = hr::field_mask_literal< 0x400e0e58, 18, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P19 = hr::field_mask_literal< 0x400e0e58, 19, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P20 = hr::field_mask_literal< 0x400e0e58, 20, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P21 = hr::field_mask_literal< 0x400e0e58, 21, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P22 = hr::field_mask_literal< 0x400e0e58, 22, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P23 = hr::field_mask_literal< 0x400e0e58, 23, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P24 = hr::field_mask_literal< 0x400e0e58, 24, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P25 = hr::field_mask_literal< 0x400e0e58, 25, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P26 = hr::field_mask_literal< 0x400e0e58, 26, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P27 = hr::field_mask_literal< 0x400e0e58, 27, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P28 = hr::field_mask_literal< 0x400e0e58, 28, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P29 = hr::field_mask_literal< 0x400e0e58, 29, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P30 = hr::field_mask_literal< 0x400e0e58, 30, 1 >();
   // Multi Drive Status.
   constexpr auto PIOA_MDSR_P31 = hr::field_mask_literal< 0x400e0e58, 31, 1 >();

// PUDR
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P0 = hr::field_mask_literal< 0x400e0e60, 0, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P1 = hr::field_mask_literal< 0x400e0e60, 1, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P2 = hr::field_mask_literal< 0x400e0e60, 2, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P3 = hr::field_mask_literal< 0x400e0e60, 3, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P4 = hr::field_mask_literal< 0x400e0e60, 4, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P5 = hr::field_mask_literal< 0x400e0e60, 5, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P6 = hr::field_mask_literal< 0x400e0e60, 6, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P7 = hr::field_mask_literal< 0x400e0e60, 7, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P8 = hr::field_mask_literal< 0x400e0e60, 8, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P9 = hr::field_mask_literal< 0x400e0e60, 9, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P10 = hr::field_mask_literal< 0x400e0e60, 10, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P11 = hr::field_mask_literal< 0x400e0e60, 11, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P12 = hr::field_mask_literal< 0x400e0e60, 12, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P13 = hr::field_mask_literal< 0x400e0e60, 13, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P14 = hr::field_mask_literal< 0x400e0e60, 14, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P15 = hr::field_mask_literal< 0x400e0e60, 15, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P16 = hr::field_mask_literal< 0x400e0e60, 16, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P17 = hr::field_mask_literal< 0x400e0e60, 17, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P18 = hr::field_mask_literal< 0x400e0e60, 18, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P19 = hr::field_mask_literal< 0x400e0e60, 19, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P20 = hr::field_mask_literal< 0x400e0e60, 20, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P21 = hr::field_mask_literal< 0x400e0e60, 21, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P22 = hr::field_mask_literal< 0x400e0e60, 22, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P23 = hr::field_mask_literal< 0x400e0e60, 23, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P24 = hr::field_mask_literal< 0x400e0e60, 24, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P25 = hr::field_mask_literal< 0x400e0e60, 25, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P26 = hr::field_mask_literal< 0x400e0e60, 26, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P27 = hr::field_mask_literal< 0x400e0e60, 27, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P28 = hr::field_mask_literal< 0x400e0e60, 28, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P29 = hr::field_mask_literal< 0x400e0e60, 29, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P30 = hr::field_mask_literal< 0x400e0e60, 30, 1 >();
   // Pull Up Disable.
   constexpr auto PIOA_PUDR_P31 = hr::field_mask_literal< 0x400e0e60, 31, 1 >();

// PUER
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P0 = hr::field_mask_literal< 0x400e0e64, 0, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P1 = hr::field_mask_literal< 0x400e0e64, 1, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P2 = hr::field_mask_literal< 0x400e0e64, 2, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P3 = hr::field_mask_literal< 0x400e0e64, 3, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P4 = hr::field_mask_literal< 0x400e0e64, 4, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P5 = hr::field_mask_literal< 0x400e0e64, 5, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P6 = hr::field_mask_literal< 0x400e0e64, 6, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P7 = hr::field_mask_literal< 0x400e0e64, 7, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P8 = hr::field_mask_literal< 0x400e0e64, 8, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P9 = hr::field_mask_literal< 0x400e0e64, 9, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P10 = hr::field_mask_literal< 0x400e0e64, 10, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P11 = hr::field_mask_literal< 0x400e0e64, 11, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P12 = hr::field_mask_literal< 0x400e0e64, 12, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P13 = hr::field_mask_literal< 0x400e0e64, 13, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P14 = hr::field_mask_literal< 0x400e0e64, 14, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P15 = hr::field_mask_literal< 0x400e0e64, 15, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P16 = hr::field_mask_literal< 0x400e0e64, 16, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P17 = hr::field_mask_literal< 0x400e0e64, 17, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P18 = hr::field_mask_literal< 0x400e0e64, 18, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P19 = hr::field_mask_literal< 0x400e0e64, 19, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P20 = hr::field_mask_literal< 0x400e0e64, 20, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P21 = hr::field_mask_literal< 0x400e0e64, 21, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P22 = hr::field_mask_literal< 0x400e0e64, 22, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P23 = hr::field_mask_literal< 0x400e0e64, 23, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P24 = hr::field_mask_literal< 0x400e0e64, 24, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P25 = hr::field_mask_literal< 0x400e0e64, 25, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P26 = hr::field_mask_literal< 0x400e0e64, 26, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P27 = hr::field_mask_literal< 0x400e0e64, 27, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P28 = hr::field_mask_literal< 0x400e0e64, 28, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P29 = hr::field_mask_literal< 0x400e0e64, 29, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P30 = hr::field_mask_literal< 0x400e0e64, 30, 1 >();
   // Pull Up Enable.
   constexpr auto PIOA_PUER_P31 = hr::field_mask_literal< 0x400e0e64, 31, 1 >();

// PUSR
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P0 = hr::field_mask_literal< 0x400e0e68, 0, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P1 = hr::field_mask_literal< 0x400e0e68, 1, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P2 = hr::field_mask_literal< 0x400e0e68, 2, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P3 = hr::field_mask_literal< 0x400e0e68, 3, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P4 = hr::field_mask_literal< 0x400e0e68, 4, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P5 = hr::field_mask_literal< 0x400e0e68, 5, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P6 = hr::field_mask_literal< 0x400e0e68, 6, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P7 = hr::field_mask_literal< 0x400e0e68, 7, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P8 = hr::field_mask_literal< 0x400e0e68, 8, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P9 = hr::field_mask_literal< 0x400e0e68, 9, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P10 = hr::field_mask_literal< 0x400e0e68, 10, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P11 = hr::field_mask_literal< 0x400e0e68, 11, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P12 = hr::field_mask_literal< 0x400e0e68, 12, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P13 = hr::field_mask_literal< 0x400e0e68, 13, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P14 = hr::field_mask_literal< 0x400e0e68, 14, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P15 = hr::field_mask_literal< 0x400e0e68, 15, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P16 = hr::field_mask_literal< 0x400e0e68, 16, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P17 = hr::field_mask_literal< 0x400e0e68, 17, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P18 = hr::field_mask_literal< 0x400e0e68, 18, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P19 = hr::field_mask_literal< 0x400e0e68, 19, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P20 = hr::field_mask_literal< 0x400e0e68, 20, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P21 = hr::field_mask_literal< 0x400e0e68, 21, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P22 = hr::field_mask_literal< 0x400e0e68, 22, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P23 = hr::field_mask_literal< 0x400e0e68, 23, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P24 = hr::field_mask_literal< 0x400e0e68, 24, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P25 = hr::field_mask_literal< 0x400e0e68, 25, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P26 = hr::field_mask_literal< 0x400e0e68, 26, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P27 = hr::field_mask_literal< 0x400e0e68, 27, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P28 = hr::field_mask_literal< 0x400e0e68, 28, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P29 = hr::field_mask_literal< 0x400e0e68, 29, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P30 = hr::field_mask_literal< 0x400e0e68, 30, 1 >();
   // Pull Up Status.
   constexpr auto PIOA_PUSR_P31 = hr::field_mask_literal< 0x400e0e68, 31, 1 >();

// ABSR
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P0 = hr::field_mask_literal< 0x400e0e70, 0, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P1 = hr::field_mask_literal< 0x400e0e70, 1, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P2 = hr::field_mask_literal< 0x400e0e70, 2, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P3 = hr::field_mask_literal< 0x400e0e70, 3, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P4 = hr::field_mask_literal< 0x400e0e70, 4, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P5 = hr::field_mask_literal< 0x400e0e70, 5, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P6 = hr::field_mask_literal< 0x400e0e70, 6, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P7 = hr::field_mask_literal< 0x400e0e70, 7, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P8 = hr::field_mask_literal< 0x400e0e70, 8, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P9 = hr::field_mask_literal< 0x400e0e70, 9, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P10 = hr::field_mask_literal< 0x400e0e70, 10, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P11 = hr::field_mask_literal< 0x400e0e70, 11, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P12 = hr::field_mask_literal< 0x400e0e70, 12, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P13 = hr::field_mask_literal< 0x400e0e70, 13, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P14 = hr::field_mask_literal< 0x400e0e70, 14, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P15 = hr::field_mask_literal< 0x400e0e70, 15, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P16 = hr::field_mask_literal< 0x400e0e70, 16, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P17 = hr::field_mask_literal< 0x400e0e70, 17, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P18 = hr::field_mask_literal< 0x400e0e70, 18, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P19 = hr::field_mask_literal< 0x400e0e70, 19, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P20 = hr::field_mask_literal< 0x400e0e70, 20, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P21 = hr::field_mask_literal< 0x400e0e70, 21, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P22 = hr::field_mask_literal< 0x400e0e70, 22, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P23 = hr::field_mask_literal< 0x400e0e70, 23, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P24 = hr::field_mask_literal< 0x400e0e70, 24, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P25 = hr::field_mask_literal< 0x400e0e70, 25, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P26 = hr::field_mask_literal< 0x400e0e70, 26, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P27 = hr::field_mask_literal< 0x400e0e70, 27, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P28 = hr::field_mask_literal< 0x400e0e70, 28, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P29 = hr::field_mask_literal< 0x400e0e70, 29, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P30 = hr::field_mask_literal< 0x400e0e70, 30, 1 >();
   // Peripheral A Select.
   constexpr auto PIOA_ABSR_P31 = hr::field_mask_literal< 0x400e0e70, 31, 1 >();

// SCIFSR
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P0 = hr::field_mask_literal< 0x400e0e80, 0, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P1 = hr::field_mask_literal< 0x400e0e80, 1, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P2 = hr::field_mask_literal< 0x400e0e80, 2, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P3 = hr::field_mask_literal< 0x400e0e80, 3, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P4 = hr::field_mask_literal< 0x400e0e80, 4, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P5 = hr::field_mask_literal< 0x400e0e80, 5, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P6 = hr::field_mask_literal< 0x400e0e80, 6, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P7 = hr::field_mask_literal< 0x400e0e80, 7, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P8 = hr::field_mask_literal< 0x400e0e80, 8, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P9 = hr::field_mask_literal< 0x400e0e80, 9, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P10 = hr::field_mask_literal< 0x400e0e80, 10, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P11 = hr::field_mask_literal< 0x400e0e80, 11, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P12 = hr::field_mask_literal< 0x400e0e80, 12, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P13 = hr::field_mask_literal< 0x400e0e80, 13, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P14 = hr::field_mask_literal< 0x400e0e80, 14, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P15 = hr::field_mask_literal< 0x400e0e80, 15, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P16 = hr::field_mask_literal< 0x400e0e80, 16, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P17 = hr::field_mask_literal< 0x400e0e80, 17, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P18 = hr::field_mask_literal< 0x400e0e80, 18, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P19 = hr::field_mask_literal< 0x400e0e80, 19, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P20 = hr::field_mask_literal< 0x400e0e80, 20, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P21 = hr::field_mask_literal< 0x400e0e80, 21, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P22 = hr::field_mask_literal< 0x400e0e80, 22, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P23 = hr::field_mask_literal< 0x400e0e80, 23, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P24 = hr::field_mask_literal< 0x400e0e80, 24, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P25 = hr::field_mask_literal< 0x400e0e80, 25, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P26 = hr::field_mask_literal< 0x400e0e80, 26, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P27 = hr::field_mask_literal< 0x400e0e80, 27, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P28 = hr::field_mask_literal< 0x400e0e80, 28, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P29 = hr::field_mask_literal< 0x400e0e80, 29, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P30 = hr::field_mask_literal< 0x400e0e80, 30, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOA_SCIFSR_P31 = hr::field_mask_literal< 0x400e0e80, 31, 1 >();

// DIFSR
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P0 = hr::field_mask_literal< 0x400e0e84, 0, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P1 = hr::field_mask_literal< 0x400e0e84, 1, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P2 = hr::field_mask_literal< 0x400e0e84, 2, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P3 = hr::field_mask_literal< 0x400e0e84, 3, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P4 = hr::field_mask_literal< 0x400e0e84, 4, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P5 = hr::field_mask_literal< 0x400e0e84, 5, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P6 = hr::field_mask_literal< 0x400e0e84, 6, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P7 = hr::field_mask_literal< 0x400e0e84, 7, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P8 = hr::field_mask_literal< 0x400e0e84, 8, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P9 = hr::field_mask_literal< 0x400e0e84, 9, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P10 = hr::field_mask_literal< 0x400e0e84, 10, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P11 = hr::field_mask_literal< 0x400e0e84, 11, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P12 = hr::field_mask_literal< 0x400e0e84, 12, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P13 = hr::field_mask_literal< 0x400e0e84, 13, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P14 = hr::field_mask_literal< 0x400e0e84, 14, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P15 = hr::field_mask_literal< 0x400e0e84, 15, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P16 = hr::field_mask_literal< 0x400e0e84, 16, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P17 = hr::field_mask_literal< 0x400e0e84, 17, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P18 = hr::field_mask_literal< 0x400e0e84, 18, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P19 = hr::field_mask_literal< 0x400e0e84, 19, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P20 = hr::field_mask_literal< 0x400e0e84, 20, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P21 = hr::field_mask_literal< 0x400e0e84, 21, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P22 = hr::field_mask_literal< 0x400e0e84, 22, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P23 = hr::field_mask_literal< 0x400e0e84, 23, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P24 = hr::field_mask_literal< 0x400e0e84, 24, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P25 = hr::field_mask_literal< 0x400e0e84, 25, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P26 = hr::field_mask_literal< 0x400e0e84, 26, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P27 = hr::field_mask_literal< 0x400e0e84, 27, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P28 = hr::field_mask_literal< 0x400e0e84, 28, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P29 = hr::field_mask_literal< 0x400e0e84, 29, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P30 = hr::field_mask_literal< 0x400e0e84, 30, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOA_DIFSR_P31 = hr::field_mask_literal< 0x400e0e84, 31, 1 >();

// IFDGSR
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P0 = hr::field_mask_literal< 0x400e0e88, 0, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P1 = hr::field_mask_literal< 0x400e0e88, 1, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P2 = hr::field_mask_literal< 0x400e0e88, 2, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P3 = hr::field_mask_literal< 0x400e0e88, 3, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P4 = hr::field_mask_literal< 0x400e0e88, 4, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P5 = hr::field_mask_literal< 0x400e0e88, 5, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P6 = hr::field_mask_literal< 0x400e0e88, 6, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P7 = hr::field_mask_literal< 0x400e0e88, 7, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P8 = hr::field_mask_literal< 0x400e0e88, 8, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P9 = hr::field_mask_literal< 0x400e0e88, 9, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P10 = hr::field_mask_literal< 0x400e0e88, 10, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P11 = hr::field_mask_literal< 0x400e0e88, 11, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P12 = hr::field_mask_literal< 0x400e0e88, 12, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P13 = hr::field_mask_literal< 0x400e0e88, 13, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P14 = hr::field_mask_literal< 0x400e0e88, 14, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P15 = hr::field_mask_literal< 0x400e0e88, 15, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P16 = hr::field_mask_literal< 0x400e0e88, 16, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P17 = hr::field_mask_literal< 0x400e0e88, 17, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P18 = hr::field_mask_literal< 0x400e0e88, 18, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P19 = hr::field_mask_literal< 0x400e0e88, 19, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P20 = hr::field_mask_literal< 0x400e0e88, 20, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P21 = hr::field_mask_literal< 0x400e0e88, 21, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P22 = hr::field_mask_literal< 0x400e0e88, 22, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P23 = hr::field_mask_literal< 0x400e0e88, 23, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P24 = hr::field_mask_literal< 0x400e0e88, 24, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P25 = hr::field_mask_literal< 0x400e0e88, 25, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P26 = hr::field_mask_literal< 0x400e0e88, 26, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P27 = hr::field_mask_literal< 0x400e0e88, 27, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P28 = hr::field_mask_literal< 0x400e0e88, 28, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P29 = hr::field_mask_literal< 0x400e0e88, 29, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P30 = hr::field_mask_literal< 0x400e0e88, 30, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOA_IFDGSR_P31 = hr::field_mask_literal< 0x400e0e88, 31, 1 >();

// SCDR
   // Slow Clock Divider Selection for Debouncing
   constexpr auto PIOA_SCDR_DIV_Msk = hr::field_mask_literal< 0x400e0e8c, 0, 14 >();

// OWER
   // Output Write Enable.
   constexpr auto PIOA_OWER_P0 = hr::field_mask_literal< 0x400e0ea0, 0, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P1 = hr::field_mask_literal< 0x400e0ea0, 1, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P2 = hr::field_mask_literal< 0x400e0ea0, 2, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P3 = hr::field_mask_literal< 0x400e0ea0, 3, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P4 = hr::field_mask_literal< 0x400e0ea0, 4, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P5 = hr::field_mask_literal< 0x400e0ea0, 5, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P6 = hr::field_mask_literal< 0x400e0ea0, 6, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P7 = hr::field_mask_literal< 0x400e0ea0, 7, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P8 = hr::field_mask_literal< 0x400e0ea0, 8, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P9 = hr::field_mask_literal< 0x400e0ea0, 9, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P10 = hr::field_mask_literal< 0x400e0ea0, 10, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P11 = hr::field_mask_literal< 0x400e0ea0, 11, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P12 = hr::field_mask_literal< 0x400e0ea0, 12, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P13 = hr::field_mask_literal< 0x400e0ea0, 13, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P14 = hr::field_mask_literal< 0x400e0ea0, 14, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P15 = hr::field_mask_literal< 0x400e0ea0, 15, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P16 = hr::field_mask_literal< 0x400e0ea0, 16, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P17 = hr::field_mask_literal< 0x400e0ea0, 17, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P18 = hr::field_mask_literal< 0x400e0ea0, 18, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P19 = hr::field_mask_literal< 0x400e0ea0, 19, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P20 = hr::field_mask_literal< 0x400e0ea0, 20, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P21 = hr::field_mask_literal< 0x400e0ea0, 21, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P22 = hr::field_mask_literal< 0x400e0ea0, 22, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P23 = hr::field_mask_literal< 0x400e0ea0, 23, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P24 = hr::field_mask_literal< 0x400e0ea0, 24, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P25 = hr::field_mask_literal< 0x400e0ea0, 25, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P26 = hr::field_mask_literal< 0x400e0ea0, 26, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P27 = hr::field_mask_literal< 0x400e0ea0, 27, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P28 = hr::field_mask_literal< 0x400e0ea0, 28, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P29 = hr::field_mask_literal< 0x400e0ea0, 29, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P30 = hr::field_mask_literal< 0x400e0ea0, 30, 1 >();
   // Output Write Enable.
   constexpr auto PIOA_OWER_P31 = hr::field_mask_literal< 0x400e0ea0, 31, 1 >();

// OWDR
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P0 = hr::field_mask_literal< 0x400e0ea4, 0, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P1 = hr::field_mask_literal< 0x400e0ea4, 1, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P2 = hr::field_mask_literal< 0x400e0ea4, 2, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P3 = hr::field_mask_literal< 0x400e0ea4, 3, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P4 = hr::field_mask_literal< 0x400e0ea4, 4, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P5 = hr::field_mask_literal< 0x400e0ea4, 5, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P6 = hr::field_mask_literal< 0x400e0ea4, 6, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P7 = hr::field_mask_literal< 0x400e0ea4, 7, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P8 = hr::field_mask_literal< 0x400e0ea4, 8, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P9 = hr::field_mask_literal< 0x400e0ea4, 9, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P10 = hr::field_mask_literal< 0x400e0ea4, 10, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P11 = hr::field_mask_literal< 0x400e0ea4, 11, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P12 = hr::field_mask_literal< 0x400e0ea4, 12, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P13 = hr::field_mask_literal< 0x400e0ea4, 13, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P14 = hr::field_mask_literal< 0x400e0ea4, 14, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P15 = hr::field_mask_literal< 0x400e0ea4, 15, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P16 = hr::field_mask_literal< 0x400e0ea4, 16, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P17 = hr::field_mask_literal< 0x400e0ea4, 17, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P18 = hr::field_mask_literal< 0x400e0ea4, 18, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P19 = hr::field_mask_literal< 0x400e0ea4, 19, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P20 = hr::field_mask_literal< 0x400e0ea4, 20, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P21 = hr::field_mask_literal< 0x400e0ea4, 21, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P22 = hr::field_mask_literal< 0x400e0ea4, 22, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P23 = hr::field_mask_literal< 0x400e0ea4, 23, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P24 = hr::field_mask_literal< 0x400e0ea4, 24, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P25 = hr::field_mask_literal< 0x400e0ea4, 25, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P26 = hr::field_mask_literal< 0x400e0ea4, 26, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P27 = hr::field_mask_literal< 0x400e0ea4, 27, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P28 = hr::field_mask_literal< 0x400e0ea4, 28, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P29 = hr::field_mask_literal< 0x400e0ea4, 29, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P30 = hr::field_mask_literal< 0x400e0ea4, 30, 1 >();
   // Output Write Disable.
   constexpr auto PIOA_OWDR_P31 = hr::field_mask_literal< 0x400e0ea4, 31, 1 >();

// OWSR
   // Output Write Status.
   constexpr auto PIOA_OWSR_P0 = hr::field_mask_literal< 0x400e0ea8, 0, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P1 = hr::field_mask_literal< 0x400e0ea8, 1, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P2 = hr::field_mask_literal< 0x400e0ea8, 2, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P3 = hr::field_mask_literal< 0x400e0ea8, 3, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P4 = hr::field_mask_literal< 0x400e0ea8, 4, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P5 = hr::field_mask_literal< 0x400e0ea8, 5, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P6 = hr::field_mask_literal< 0x400e0ea8, 6, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P7 = hr::field_mask_literal< 0x400e0ea8, 7, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P8 = hr::field_mask_literal< 0x400e0ea8, 8, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P9 = hr::field_mask_literal< 0x400e0ea8, 9, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P10 = hr::field_mask_literal< 0x400e0ea8, 10, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P11 = hr::field_mask_literal< 0x400e0ea8, 11, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P12 = hr::field_mask_literal< 0x400e0ea8, 12, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P13 = hr::field_mask_literal< 0x400e0ea8, 13, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P14 = hr::field_mask_literal< 0x400e0ea8, 14, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P15 = hr::field_mask_literal< 0x400e0ea8, 15, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P16 = hr::field_mask_literal< 0x400e0ea8, 16, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P17 = hr::field_mask_literal< 0x400e0ea8, 17, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P18 = hr::field_mask_literal< 0x400e0ea8, 18, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P19 = hr::field_mask_literal< 0x400e0ea8, 19, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P20 = hr::field_mask_literal< 0x400e0ea8, 20, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P21 = hr::field_mask_literal< 0x400e0ea8, 21, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P22 = hr::field_mask_literal< 0x400e0ea8, 22, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P23 = hr::field_mask_literal< 0x400e0ea8, 23, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P24 = hr::field_mask_literal< 0x400e0ea8, 24, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P25 = hr::field_mask_literal< 0x400e0ea8, 25, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P26 = hr::field_mask_literal< 0x400e0ea8, 26, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P27 = hr::field_mask_literal< 0x400e0ea8, 27, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P28 = hr::field_mask_literal< 0x400e0ea8, 28, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P29 = hr::field_mask_literal< 0x400e0ea8, 29, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P30 = hr::field_mask_literal< 0x400e0ea8, 30, 1 >();
   // Output Write Status.
   constexpr auto PIOA_OWSR_P31 = hr::field_mask_literal< 0x400e0ea8, 31, 1 >();

// AIMER
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P0 = hr::field_mask_literal< 0x400e0eb0, 0, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P1 = hr::field_mask_literal< 0x400e0eb0, 1, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P2 = hr::field_mask_literal< 0x400e0eb0, 2, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P3 = hr::field_mask_literal< 0x400e0eb0, 3, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P4 = hr::field_mask_literal< 0x400e0eb0, 4, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P5 = hr::field_mask_literal< 0x400e0eb0, 5, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P6 = hr::field_mask_literal< 0x400e0eb0, 6, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P7 = hr::field_mask_literal< 0x400e0eb0, 7, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P8 = hr::field_mask_literal< 0x400e0eb0, 8, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P9 = hr::field_mask_literal< 0x400e0eb0, 9, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P10 = hr::field_mask_literal< 0x400e0eb0, 10, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P11 = hr::field_mask_literal< 0x400e0eb0, 11, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P12 = hr::field_mask_literal< 0x400e0eb0, 12, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P13 = hr::field_mask_literal< 0x400e0eb0, 13, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P14 = hr::field_mask_literal< 0x400e0eb0, 14, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P15 = hr::field_mask_literal< 0x400e0eb0, 15, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P16 = hr::field_mask_literal< 0x400e0eb0, 16, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P17 = hr::field_mask_literal< 0x400e0eb0, 17, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P18 = hr::field_mask_literal< 0x400e0eb0, 18, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P19 = hr::field_mask_literal< 0x400e0eb0, 19, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P20 = hr::field_mask_literal< 0x400e0eb0, 20, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P21 = hr::field_mask_literal< 0x400e0eb0, 21, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P22 = hr::field_mask_literal< 0x400e0eb0, 22, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P23 = hr::field_mask_literal< 0x400e0eb0, 23, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P24 = hr::field_mask_literal< 0x400e0eb0, 24, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P25 = hr::field_mask_literal< 0x400e0eb0, 25, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P26 = hr::field_mask_literal< 0x400e0eb0, 26, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P27 = hr::field_mask_literal< 0x400e0eb0, 27, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P28 = hr::field_mask_literal< 0x400e0eb0, 28, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P29 = hr::field_mask_literal< 0x400e0eb0, 29, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P30 = hr::field_mask_literal< 0x400e0eb0, 30, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOA_AIMER_P31 = hr::field_mask_literal< 0x400e0eb0, 31, 1 >();

// AIMDR
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P0 = hr::field_mask_literal< 0x400e0eb4, 0, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P1 = hr::field_mask_literal< 0x400e0eb4, 1, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P2 = hr::field_mask_literal< 0x400e0eb4, 2, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P3 = hr::field_mask_literal< 0x400e0eb4, 3, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P4 = hr::field_mask_literal< 0x400e0eb4, 4, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P5 = hr::field_mask_literal< 0x400e0eb4, 5, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P6 = hr::field_mask_literal< 0x400e0eb4, 6, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P7 = hr::field_mask_literal< 0x400e0eb4, 7, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P8 = hr::field_mask_literal< 0x400e0eb4, 8, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P9 = hr::field_mask_literal< 0x400e0eb4, 9, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P10 = hr::field_mask_literal< 0x400e0eb4, 10, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P11 = hr::field_mask_literal< 0x400e0eb4, 11, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P12 = hr::field_mask_literal< 0x400e0eb4, 12, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P13 = hr::field_mask_literal< 0x400e0eb4, 13, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P14 = hr::field_mask_literal< 0x400e0eb4, 14, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P15 = hr::field_mask_literal< 0x400e0eb4, 15, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P16 = hr::field_mask_literal< 0x400e0eb4, 16, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P17 = hr::field_mask_literal< 0x400e0eb4, 17, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P18 = hr::field_mask_literal< 0x400e0eb4, 18, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P19 = hr::field_mask_literal< 0x400e0eb4, 19, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P20 = hr::field_mask_literal< 0x400e0eb4, 20, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P21 = hr::field_mask_literal< 0x400e0eb4, 21, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P22 = hr::field_mask_literal< 0x400e0eb4, 22, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P23 = hr::field_mask_literal< 0x400e0eb4, 23, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P24 = hr::field_mask_literal< 0x400e0eb4, 24, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P25 = hr::field_mask_literal< 0x400e0eb4, 25, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P26 = hr::field_mask_literal< 0x400e0eb4, 26, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P27 = hr::field_mask_literal< 0x400e0eb4, 27, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P28 = hr::field_mask_literal< 0x400e0eb4, 28, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P29 = hr::field_mask_literal< 0x400e0eb4, 29, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P30 = hr::field_mask_literal< 0x400e0eb4, 30, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOA_AIMDR_P31 = hr::field_mask_literal< 0x400e0eb4, 31, 1 >();

// AIMMR
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P0 = hr::field_mask_literal< 0x400e0eb8, 0, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P1 = hr::field_mask_literal< 0x400e0eb8, 1, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P2 = hr::field_mask_literal< 0x400e0eb8, 2, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P3 = hr::field_mask_literal< 0x400e0eb8, 3, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P4 = hr::field_mask_literal< 0x400e0eb8, 4, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P5 = hr::field_mask_literal< 0x400e0eb8, 5, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P6 = hr::field_mask_literal< 0x400e0eb8, 6, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P7 = hr::field_mask_literal< 0x400e0eb8, 7, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P8 = hr::field_mask_literal< 0x400e0eb8, 8, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P9 = hr::field_mask_literal< 0x400e0eb8, 9, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P10 = hr::field_mask_literal< 0x400e0eb8, 10, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P11 = hr::field_mask_literal< 0x400e0eb8, 11, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P12 = hr::field_mask_literal< 0x400e0eb8, 12, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P13 = hr::field_mask_literal< 0x400e0eb8, 13, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P14 = hr::field_mask_literal< 0x400e0eb8, 14, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P15 = hr::field_mask_literal< 0x400e0eb8, 15, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P16 = hr::field_mask_literal< 0x400e0eb8, 16, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P17 = hr::field_mask_literal< 0x400e0eb8, 17, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P18 = hr::field_mask_literal< 0x400e0eb8, 18, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P19 = hr::field_mask_literal< 0x400e0eb8, 19, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P20 = hr::field_mask_literal< 0x400e0eb8, 20, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P21 = hr::field_mask_literal< 0x400e0eb8, 21, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P22 = hr::field_mask_literal< 0x400e0eb8, 22, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P23 = hr::field_mask_literal< 0x400e0eb8, 23, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P24 = hr::field_mask_literal< 0x400e0eb8, 24, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P25 = hr::field_mask_literal< 0x400e0eb8, 25, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P26 = hr::field_mask_literal< 0x400e0eb8, 26, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P27 = hr::field_mask_literal< 0x400e0eb8, 27, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P28 = hr::field_mask_literal< 0x400e0eb8, 28, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P29 = hr::field_mask_literal< 0x400e0eb8, 29, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P30 = hr::field_mask_literal< 0x400e0eb8, 30, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOA_AIMMR_P31 = hr::field_mask_literal< 0x400e0eb8, 31, 1 >();

// ESR
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P0 = hr::field_mask_literal< 0x400e0ec0, 0, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P1 = hr::field_mask_literal< 0x400e0ec0, 1, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P2 = hr::field_mask_literal< 0x400e0ec0, 2, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P3 = hr::field_mask_literal< 0x400e0ec0, 3, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P4 = hr::field_mask_literal< 0x400e0ec0, 4, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P5 = hr::field_mask_literal< 0x400e0ec0, 5, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P6 = hr::field_mask_literal< 0x400e0ec0, 6, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P7 = hr::field_mask_literal< 0x400e0ec0, 7, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P8 = hr::field_mask_literal< 0x400e0ec0, 8, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P9 = hr::field_mask_literal< 0x400e0ec0, 9, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P10 = hr::field_mask_literal< 0x400e0ec0, 10, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P11 = hr::field_mask_literal< 0x400e0ec0, 11, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P12 = hr::field_mask_literal< 0x400e0ec0, 12, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P13 = hr::field_mask_literal< 0x400e0ec0, 13, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P14 = hr::field_mask_literal< 0x400e0ec0, 14, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P15 = hr::field_mask_literal< 0x400e0ec0, 15, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P16 = hr::field_mask_literal< 0x400e0ec0, 16, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P17 = hr::field_mask_literal< 0x400e0ec0, 17, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P18 = hr::field_mask_literal< 0x400e0ec0, 18, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P19 = hr::field_mask_literal< 0x400e0ec0, 19, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P20 = hr::field_mask_literal< 0x400e0ec0, 20, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P21 = hr::field_mask_literal< 0x400e0ec0, 21, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P22 = hr::field_mask_literal< 0x400e0ec0, 22, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P23 = hr::field_mask_literal< 0x400e0ec0, 23, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P24 = hr::field_mask_literal< 0x400e0ec0, 24, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P25 = hr::field_mask_literal< 0x400e0ec0, 25, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P26 = hr::field_mask_literal< 0x400e0ec0, 26, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P27 = hr::field_mask_literal< 0x400e0ec0, 27, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P28 = hr::field_mask_literal< 0x400e0ec0, 28, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P29 = hr::field_mask_literal< 0x400e0ec0, 29, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P30 = hr::field_mask_literal< 0x400e0ec0, 30, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOA_ESR_P31 = hr::field_mask_literal< 0x400e0ec0, 31, 1 >();

// LSR
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P0 = hr::field_mask_literal< 0x400e0ec4, 0, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P1 = hr::field_mask_literal< 0x400e0ec4, 1, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P2 = hr::field_mask_literal< 0x400e0ec4, 2, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P3 = hr::field_mask_literal< 0x400e0ec4, 3, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P4 = hr::field_mask_literal< 0x400e0ec4, 4, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P5 = hr::field_mask_literal< 0x400e0ec4, 5, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P6 = hr::field_mask_literal< 0x400e0ec4, 6, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P7 = hr::field_mask_literal< 0x400e0ec4, 7, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P8 = hr::field_mask_literal< 0x400e0ec4, 8, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P9 = hr::field_mask_literal< 0x400e0ec4, 9, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P10 = hr::field_mask_literal< 0x400e0ec4, 10, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P11 = hr::field_mask_literal< 0x400e0ec4, 11, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P12 = hr::field_mask_literal< 0x400e0ec4, 12, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P13 = hr::field_mask_literal< 0x400e0ec4, 13, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P14 = hr::field_mask_literal< 0x400e0ec4, 14, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P15 = hr::field_mask_literal< 0x400e0ec4, 15, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P16 = hr::field_mask_literal< 0x400e0ec4, 16, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P17 = hr::field_mask_literal< 0x400e0ec4, 17, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P18 = hr::field_mask_literal< 0x400e0ec4, 18, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P19 = hr::field_mask_literal< 0x400e0ec4, 19, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P20 = hr::field_mask_literal< 0x400e0ec4, 20, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P21 = hr::field_mask_literal< 0x400e0ec4, 21, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P22 = hr::field_mask_literal< 0x400e0ec4, 22, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P23 = hr::field_mask_literal< 0x400e0ec4, 23, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P24 = hr::field_mask_literal< 0x400e0ec4, 24, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P25 = hr::field_mask_literal< 0x400e0ec4, 25, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P26 = hr::field_mask_literal< 0x400e0ec4, 26, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P27 = hr::field_mask_literal< 0x400e0ec4, 27, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P28 = hr::field_mask_literal< 0x400e0ec4, 28, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P29 = hr::field_mask_literal< 0x400e0ec4, 29, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P30 = hr::field_mask_literal< 0x400e0ec4, 30, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOA_LSR_P31 = hr::field_mask_literal< 0x400e0ec4, 31, 1 >();

// ELSR
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P0 = hr::field_mask_literal< 0x400e0ec8, 0, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P1 = hr::field_mask_literal< 0x400e0ec8, 1, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P2 = hr::field_mask_literal< 0x400e0ec8, 2, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P3 = hr::field_mask_literal< 0x400e0ec8, 3, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P4 = hr::field_mask_literal< 0x400e0ec8, 4, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P5 = hr::field_mask_literal< 0x400e0ec8, 5, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P6 = hr::field_mask_literal< 0x400e0ec8, 6, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P7 = hr::field_mask_literal< 0x400e0ec8, 7, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P8 = hr::field_mask_literal< 0x400e0ec8, 8, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P9 = hr::field_mask_literal< 0x400e0ec8, 9, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P10 = hr::field_mask_literal< 0x400e0ec8, 10, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P11 = hr::field_mask_literal< 0x400e0ec8, 11, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P12 = hr::field_mask_literal< 0x400e0ec8, 12, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P13 = hr::field_mask_literal< 0x400e0ec8, 13, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P14 = hr::field_mask_literal< 0x400e0ec8, 14, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P15 = hr::field_mask_literal< 0x400e0ec8, 15, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P16 = hr::field_mask_literal< 0x400e0ec8, 16, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P17 = hr::field_mask_literal< 0x400e0ec8, 17, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P18 = hr::field_mask_literal< 0x400e0ec8, 18, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P19 = hr::field_mask_literal< 0x400e0ec8, 19, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P20 = hr::field_mask_literal< 0x400e0ec8, 20, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P21 = hr::field_mask_literal< 0x400e0ec8, 21, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P22 = hr::field_mask_literal< 0x400e0ec8, 22, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P23 = hr::field_mask_literal< 0x400e0ec8, 23, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P24 = hr::field_mask_literal< 0x400e0ec8, 24, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P25 = hr::field_mask_literal< 0x400e0ec8, 25, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P26 = hr::field_mask_literal< 0x400e0ec8, 26, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P27 = hr::field_mask_literal< 0x400e0ec8, 27, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P28 = hr::field_mask_literal< 0x400e0ec8, 28, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P29 = hr::field_mask_literal< 0x400e0ec8, 29, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P30 = hr::field_mask_literal< 0x400e0ec8, 30, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOA_ELSR_P31 = hr::field_mask_literal< 0x400e0ec8, 31, 1 >();

// FELLSR
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P0 = hr::field_mask_literal< 0x400e0ed0, 0, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P1 = hr::field_mask_literal< 0x400e0ed0, 1, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P2 = hr::field_mask_literal< 0x400e0ed0, 2, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P3 = hr::field_mask_literal< 0x400e0ed0, 3, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P4 = hr::field_mask_literal< 0x400e0ed0, 4, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P5 = hr::field_mask_literal< 0x400e0ed0, 5, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P6 = hr::field_mask_literal< 0x400e0ed0, 6, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P7 = hr::field_mask_literal< 0x400e0ed0, 7, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P8 = hr::field_mask_literal< 0x400e0ed0, 8, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P9 = hr::field_mask_literal< 0x400e0ed0, 9, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P10 = hr::field_mask_literal< 0x400e0ed0, 10, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P11 = hr::field_mask_literal< 0x400e0ed0, 11, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P12 = hr::field_mask_literal< 0x400e0ed0, 12, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P13 = hr::field_mask_literal< 0x400e0ed0, 13, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P14 = hr::field_mask_literal< 0x400e0ed0, 14, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P15 = hr::field_mask_literal< 0x400e0ed0, 15, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P16 = hr::field_mask_literal< 0x400e0ed0, 16, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P17 = hr::field_mask_literal< 0x400e0ed0, 17, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P18 = hr::field_mask_literal< 0x400e0ed0, 18, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P19 = hr::field_mask_literal< 0x400e0ed0, 19, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P20 = hr::field_mask_literal< 0x400e0ed0, 20, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P21 = hr::field_mask_literal< 0x400e0ed0, 21, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P22 = hr::field_mask_literal< 0x400e0ed0, 22, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P23 = hr::field_mask_literal< 0x400e0ed0, 23, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P24 = hr::field_mask_literal< 0x400e0ed0, 24, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P25 = hr::field_mask_literal< 0x400e0ed0, 25, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P26 = hr::field_mask_literal< 0x400e0ed0, 26, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P27 = hr::field_mask_literal< 0x400e0ed0, 27, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P28 = hr::field_mask_literal< 0x400e0ed0, 28, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P29 = hr::field_mask_literal< 0x400e0ed0, 29, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P30 = hr::field_mask_literal< 0x400e0ed0, 30, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOA_FELLSR_P31 = hr::field_mask_literal< 0x400e0ed0, 31, 1 >();

// REHLSR
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P0 = hr::field_mask_literal< 0x400e0ed4, 0, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P1 = hr::field_mask_literal< 0x400e0ed4, 1, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P2 = hr::field_mask_literal< 0x400e0ed4, 2, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P3 = hr::field_mask_literal< 0x400e0ed4, 3, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P4 = hr::field_mask_literal< 0x400e0ed4, 4, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P5 = hr::field_mask_literal< 0x400e0ed4, 5, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P6 = hr::field_mask_literal< 0x400e0ed4, 6, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P7 = hr::field_mask_literal< 0x400e0ed4, 7, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P8 = hr::field_mask_literal< 0x400e0ed4, 8, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P9 = hr::field_mask_literal< 0x400e0ed4, 9, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P10 = hr::field_mask_literal< 0x400e0ed4, 10, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P11 = hr::field_mask_literal< 0x400e0ed4, 11, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P12 = hr::field_mask_literal< 0x400e0ed4, 12, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P13 = hr::field_mask_literal< 0x400e0ed4, 13, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P14 = hr::field_mask_literal< 0x400e0ed4, 14, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P15 = hr::field_mask_literal< 0x400e0ed4, 15, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P16 = hr::field_mask_literal< 0x400e0ed4, 16, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P17 = hr::field_mask_literal< 0x400e0ed4, 17, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P18 = hr::field_mask_literal< 0x400e0ed4, 18, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P19 = hr::field_mask_literal< 0x400e0ed4, 19, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P20 = hr::field_mask_literal< 0x400e0ed4, 20, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P21 = hr::field_mask_literal< 0x400e0ed4, 21, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P22 = hr::field_mask_literal< 0x400e0ed4, 22, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P23 = hr::field_mask_literal< 0x400e0ed4, 23, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P24 = hr::field_mask_literal< 0x400e0ed4, 24, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P25 = hr::field_mask_literal< 0x400e0ed4, 25, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P26 = hr::field_mask_literal< 0x400e0ed4, 26, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P27 = hr::field_mask_literal< 0x400e0ed4, 27, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P28 = hr::field_mask_literal< 0x400e0ed4, 28, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P29 = hr::field_mask_literal< 0x400e0ed4, 29, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P30 = hr::field_mask_literal< 0x400e0ed4, 30, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOA_REHLSR_P31 = hr::field_mask_literal< 0x400e0ed4, 31, 1 >();

// FRLHSR
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P0 = hr::field_mask_literal< 0x400e0ed8, 0, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P1 = hr::field_mask_literal< 0x400e0ed8, 1, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P2 = hr::field_mask_literal< 0x400e0ed8, 2, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P3 = hr::field_mask_literal< 0x400e0ed8, 3, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P4 = hr::field_mask_literal< 0x400e0ed8, 4, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P5 = hr::field_mask_literal< 0x400e0ed8, 5, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P6 = hr::field_mask_literal< 0x400e0ed8, 6, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P7 = hr::field_mask_literal< 0x400e0ed8, 7, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P8 = hr::field_mask_literal< 0x400e0ed8, 8, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P9 = hr::field_mask_literal< 0x400e0ed8, 9, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P10 = hr::field_mask_literal< 0x400e0ed8, 10, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P11 = hr::field_mask_literal< 0x400e0ed8, 11, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P12 = hr::field_mask_literal< 0x400e0ed8, 12, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P13 = hr::field_mask_literal< 0x400e0ed8, 13, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P14 = hr::field_mask_literal< 0x400e0ed8, 14, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P15 = hr::field_mask_literal< 0x400e0ed8, 15, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P16 = hr::field_mask_literal< 0x400e0ed8, 16, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P17 = hr::field_mask_literal< 0x400e0ed8, 17, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P18 = hr::field_mask_literal< 0x400e0ed8, 18, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P19 = hr::field_mask_literal< 0x400e0ed8, 19, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P20 = hr::field_mask_literal< 0x400e0ed8, 20, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P21 = hr::field_mask_literal< 0x400e0ed8, 21, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P22 = hr::field_mask_literal< 0x400e0ed8, 22, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P23 = hr::field_mask_literal< 0x400e0ed8, 23, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P24 = hr::field_mask_literal< 0x400e0ed8, 24, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P25 = hr::field_mask_literal< 0x400e0ed8, 25, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P26 = hr::field_mask_literal< 0x400e0ed8, 26, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P27 = hr::field_mask_literal< 0x400e0ed8, 27, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P28 = hr::field_mask_literal< 0x400e0ed8, 28, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P29 = hr::field_mask_literal< 0x400e0ed8, 29, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P30 = hr::field_mask_literal< 0x400e0ed8, 30, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOA_FRLHSR_P31 = hr::field_mask_literal< 0x400e0ed8, 31, 1 >();

// LOCKSR
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P0 = hr::field_mask_literal< 0x400e0ee0, 0, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P1 = hr::field_mask_literal< 0x400e0ee0, 1, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P2 = hr::field_mask_literal< 0x400e0ee0, 2, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P3 = hr::field_mask_literal< 0x400e0ee0, 3, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P4 = hr::field_mask_literal< 0x400e0ee0, 4, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P5 = hr::field_mask_literal< 0x400e0ee0, 5, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P6 = hr::field_mask_literal< 0x400e0ee0, 6, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P7 = hr::field_mask_literal< 0x400e0ee0, 7, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P8 = hr::field_mask_literal< 0x400e0ee0, 8, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P9 = hr::field_mask_literal< 0x400e0ee0, 9, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P10 = hr::field_mask_literal< 0x400e0ee0, 10, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P11 = hr::field_mask_literal< 0x400e0ee0, 11, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P12 = hr::field_mask_literal< 0x400e0ee0, 12, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P13 = hr::field_mask_literal< 0x400e0ee0, 13, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P14 = hr::field_mask_literal< 0x400e0ee0, 14, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P15 = hr::field_mask_literal< 0x400e0ee0, 15, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P16 = hr::field_mask_literal< 0x400e0ee0, 16, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P17 = hr::field_mask_literal< 0x400e0ee0, 17, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P18 = hr::field_mask_literal< 0x400e0ee0, 18, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P19 = hr::field_mask_literal< 0x400e0ee0, 19, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P20 = hr::field_mask_literal< 0x400e0ee0, 20, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P21 = hr::field_mask_literal< 0x400e0ee0, 21, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P22 = hr::field_mask_literal< 0x400e0ee0, 22, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P23 = hr::field_mask_literal< 0x400e0ee0, 23, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P24 = hr::field_mask_literal< 0x400e0ee0, 24, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P25 = hr::field_mask_literal< 0x400e0ee0, 25, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P26 = hr::field_mask_literal< 0x400e0ee0, 26, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P27 = hr::field_mask_literal< 0x400e0ee0, 27, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P28 = hr::field_mask_literal< 0x400e0ee0, 28, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P29 = hr::field_mask_literal< 0x400e0ee0, 29, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P30 = hr::field_mask_literal< 0x400e0ee0, 30, 1 >();
   // Lock Status.
   constexpr auto PIOA_LOCKSR_P31 = hr::field_mask_literal< 0x400e0ee0, 31, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto PIOA_WPMR_WPEN = hr::field_mask_literal< 0x400e0ee4, 0, 1 >();
   // Write Protect KEY
   constexpr auto PIOA_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e0ee4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto PIOA_WPSR_WPVS = hr::field_mask_literal< 0x400e0ee8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto PIOA_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400e0ee8, 8, 16 >();

// =============================================================================
//
// PIOB
// base address = 0x400e1000
// Parallel Input/Output Controller B
//
// =============================================================================

struct Piob {
   hr::hardware_register<0x400e1000> PER;
   hr::hardware_register<0x400e1004> PDR;
   hr::hardware_register<0x400e1008> PSR;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x400e1010> OER;
   hr::hardware_register<0x400e1014> ODR;
   hr::hardware_register<0x400e1018> OSR;
   hr::reserved< 0x1C, 1 > _reserved_at_0x1C;
   hr::hardware_register<0x400e1020> IFER;
   hr::hardware_register<0x400e1024> IFDR;
   hr::hardware_register<0x400e1028> IFSR;
   hr::reserved< 0x2C, 1 > _reserved_at_0x2C;
   hr::hardware_register<0x400e1030> SODR;
   hr::hardware_register<0x400e1034> CODR;
   hr::hardware_register<0x400e1038> ODSR;
   hr::hardware_register<0x400e103c> PDSR;
   hr::hardware_register<0x400e1040> IER;
   hr::hardware_register<0x400e1044> IDR;
   hr::hardware_register<0x400e1048> IMR;
   hr::hardware_register<0x400e104c> ISR;
   hr::hardware_register<0x400e1050> MDER;
   hr::hardware_register<0x400e1054> MDDR;
   hr::hardware_register<0x400e1058> MDSR;
   hr::reserved< 0x5C, 1 > _reserved_at_0x5C;
   hr::hardware_register<0x400e1060> PUDR;
   hr::hardware_register<0x400e1064> PUER;
   hr::hardware_register<0x400e1068> PUSR;
   hr::reserved< 0x6C, 1 > _reserved_at_0x6C;
   hr::hardware_register<0x400e1070> ABSR;
   hr::reserved< 0x74, 3 > _reserved_at_0x74;
   hr::hardware_register<0x400e1080> SCIFSR;
   hr::hardware_register<0x400e1084> DIFSR;
   hr::hardware_register<0x400e1088> IFDGSR;
   hr::hardware_register<0x400e108c> SCDR;
   hr::reserved< 0x90, 4 > _reserved_at_0x90;
   hr::hardware_register<0x400e10a0> OWER;
   hr::hardware_register<0x400e10a4> OWDR;
   hr::hardware_register<0x400e10a8> OWSR;
   hr::reserved< 0xAC, 1 > _reserved_at_0xAC;
   hr::hardware_register<0x400e10b0> AIMER;
   hr::hardware_register<0x400e10b4> AIMDR;
   hr::hardware_register<0x400e10b8> AIMMR;
   hr::reserved< 0xBC, 1 > _reserved_at_0xBC;
   hr::hardware_register<0x400e10c0> ESR;
   hr::hardware_register<0x400e10c4> LSR;
   hr::hardware_register<0x400e10c8> ELSR;
   hr::reserved< 0xCC, 1 > _reserved_at_0xCC;
   hr::hardware_register<0x400e10d0> FELLSR;
   hr::hardware_register<0x400e10d4> REHLSR;
   hr::hardware_register<0x400e10d8> FRLHSR;
   hr::reserved< 0xDC, 1 > _reserved_at_0xDC;
   hr::hardware_register<0x400e10e0> LOCKSR;
   hr::hardware_register<0x400e10e4> WPMR;
   hr::hardware_register<0x400e10e8> WPSR;
};

#define PIOB ( ( Piob * ) 0x400e1000 )

// PER
   // PIO Enable
   constexpr auto PIOB_PER_P0 = hr::field_mask_literal< 0x400e1000, 0, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P1 = hr::field_mask_literal< 0x400e1000, 1, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P2 = hr::field_mask_literal< 0x400e1000, 2, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P3 = hr::field_mask_literal< 0x400e1000, 3, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P4 = hr::field_mask_literal< 0x400e1000, 4, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P5 = hr::field_mask_literal< 0x400e1000, 5, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P6 = hr::field_mask_literal< 0x400e1000, 6, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P7 = hr::field_mask_literal< 0x400e1000, 7, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P8 = hr::field_mask_literal< 0x400e1000, 8, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P9 = hr::field_mask_literal< 0x400e1000, 9, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P10 = hr::field_mask_literal< 0x400e1000, 10, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P11 = hr::field_mask_literal< 0x400e1000, 11, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P12 = hr::field_mask_literal< 0x400e1000, 12, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P13 = hr::field_mask_literal< 0x400e1000, 13, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P14 = hr::field_mask_literal< 0x400e1000, 14, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P15 = hr::field_mask_literal< 0x400e1000, 15, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P16 = hr::field_mask_literal< 0x400e1000, 16, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P17 = hr::field_mask_literal< 0x400e1000, 17, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P18 = hr::field_mask_literal< 0x400e1000, 18, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P19 = hr::field_mask_literal< 0x400e1000, 19, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P20 = hr::field_mask_literal< 0x400e1000, 20, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P21 = hr::field_mask_literal< 0x400e1000, 21, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P22 = hr::field_mask_literal< 0x400e1000, 22, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P23 = hr::field_mask_literal< 0x400e1000, 23, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P24 = hr::field_mask_literal< 0x400e1000, 24, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P25 = hr::field_mask_literal< 0x400e1000, 25, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P26 = hr::field_mask_literal< 0x400e1000, 26, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P27 = hr::field_mask_literal< 0x400e1000, 27, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P28 = hr::field_mask_literal< 0x400e1000, 28, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P29 = hr::field_mask_literal< 0x400e1000, 29, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P30 = hr::field_mask_literal< 0x400e1000, 30, 1 >();
   // PIO Enable
   constexpr auto PIOB_PER_P31 = hr::field_mask_literal< 0x400e1000, 31, 1 >();

// PDR
   // PIO Disable
   constexpr auto PIOB_PDR_P0 = hr::field_mask_literal< 0x400e1004, 0, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P1 = hr::field_mask_literal< 0x400e1004, 1, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P2 = hr::field_mask_literal< 0x400e1004, 2, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P3 = hr::field_mask_literal< 0x400e1004, 3, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P4 = hr::field_mask_literal< 0x400e1004, 4, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P5 = hr::field_mask_literal< 0x400e1004, 5, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P6 = hr::field_mask_literal< 0x400e1004, 6, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P7 = hr::field_mask_literal< 0x400e1004, 7, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P8 = hr::field_mask_literal< 0x400e1004, 8, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P9 = hr::field_mask_literal< 0x400e1004, 9, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P10 = hr::field_mask_literal< 0x400e1004, 10, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P11 = hr::field_mask_literal< 0x400e1004, 11, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P12 = hr::field_mask_literal< 0x400e1004, 12, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P13 = hr::field_mask_literal< 0x400e1004, 13, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P14 = hr::field_mask_literal< 0x400e1004, 14, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P15 = hr::field_mask_literal< 0x400e1004, 15, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P16 = hr::field_mask_literal< 0x400e1004, 16, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P17 = hr::field_mask_literal< 0x400e1004, 17, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P18 = hr::field_mask_literal< 0x400e1004, 18, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P19 = hr::field_mask_literal< 0x400e1004, 19, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P20 = hr::field_mask_literal< 0x400e1004, 20, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P21 = hr::field_mask_literal< 0x400e1004, 21, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P22 = hr::field_mask_literal< 0x400e1004, 22, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P23 = hr::field_mask_literal< 0x400e1004, 23, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P24 = hr::field_mask_literal< 0x400e1004, 24, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P25 = hr::field_mask_literal< 0x400e1004, 25, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P26 = hr::field_mask_literal< 0x400e1004, 26, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P27 = hr::field_mask_literal< 0x400e1004, 27, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P28 = hr::field_mask_literal< 0x400e1004, 28, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P29 = hr::field_mask_literal< 0x400e1004, 29, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P30 = hr::field_mask_literal< 0x400e1004, 30, 1 >();
   // PIO Disable
   constexpr auto PIOB_PDR_P31 = hr::field_mask_literal< 0x400e1004, 31, 1 >();

// PSR
   // PIO Status
   constexpr auto PIOB_PSR_P0 = hr::field_mask_literal< 0x400e1008, 0, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P1 = hr::field_mask_literal< 0x400e1008, 1, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P2 = hr::field_mask_literal< 0x400e1008, 2, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P3 = hr::field_mask_literal< 0x400e1008, 3, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P4 = hr::field_mask_literal< 0x400e1008, 4, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P5 = hr::field_mask_literal< 0x400e1008, 5, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P6 = hr::field_mask_literal< 0x400e1008, 6, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P7 = hr::field_mask_literal< 0x400e1008, 7, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P8 = hr::field_mask_literal< 0x400e1008, 8, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P9 = hr::field_mask_literal< 0x400e1008, 9, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P10 = hr::field_mask_literal< 0x400e1008, 10, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P11 = hr::field_mask_literal< 0x400e1008, 11, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P12 = hr::field_mask_literal< 0x400e1008, 12, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P13 = hr::field_mask_literal< 0x400e1008, 13, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P14 = hr::field_mask_literal< 0x400e1008, 14, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P15 = hr::field_mask_literal< 0x400e1008, 15, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P16 = hr::field_mask_literal< 0x400e1008, 16, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P17 = hr::field_mask_literal< 0x400e1008, 17, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P18 = hr::field_mask_literal< 0x400e1008, 18, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P19 = hr::field_mask_literal< 0x400e1008, 19, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P20 = hr::field_mask_literal< 0x400e1008, 20, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P21 = hr::field_mask_literal< 0x400e1008, 21, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P22 = hr::field_mask_literal< 0x400e1008, 22, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P23 = hr::field_mask_literal< 0x400e1008, 23, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P24 = hr::field_mask_literal< 0x400e1008, 24, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P25 = hr::field_mask_literal< 0x400e1008, 25, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P26 = hr::field_mask_literal< 0x400e1008, 26, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P27 = hr::field_mask_literal< 0x400e1008, 27, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P28 = hr::field_mask_literal< 0x400e1008, 28, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P29 = hr::field_mask_literal< 0x400e1008, 29, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P30 = hr::field_mask_literal< 0x400e1008, 30, 1 >();
   // PIO Status
   constexpr auto PIOB_PSR_P31 = hr::field_mask_literal< 0x400e1008, 31, 1 >();

// OER
   // Output Enable
   constexpr auto PIOB_OER_P0 = hr::field_mask_literal< 0x400e1010, 0, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P1 = hr::field_mask_literal< 0x400e1010, 1, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P2 = hr::field_mask_literal< 0x400e1010, 2, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P3 = hr::field_mask_literal< 0x400e1010, 3, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P4 = hr::field_mask_literal< 0x400e1010, 4, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P5 = hr::field_mask_literal< 0x400e1010, 5, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P6 = hr::field_mask_literal< 0x400e1010, 6, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P7 = hr::field_mask_literal< 0x400e1010, 7, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P8 = hr::field_mask_literal< 0x400e1010, 8, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P9 = hr::field_mask_literal< 0x400e1010, 9, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P10 = hr::field_mask_literal< 0x400e1010, 10, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P11 = hr::field_mask_literal< 0x400e1010, 11, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P12 = hr::field_mask_literal< 0x400e1010, 12, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P13 = hr::field_mask_literal< 0x400e1010, 13, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P14 = hr::field_mask_literal< 0x400e1010, 14, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P15 = hr::field_mask_literal< 0x400e1010, 15, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P16 = hr::field_mask_literal< 0x400e1010, 16, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P17 = hr::field_mask_literal< 0x400e1010, 17, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P18 = hr::field_mask_literal< 0x400e1010, 18, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P19 = hr::field_mask_literal< 0x400e1010, 19, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P20 = hr::field_mask_literal< 0x400e1010, 20, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P21 = hr::field_mask_literal< 0x400e1010, 21, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P22 = hr::field_mask_literal< 0x400e1010, 22, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P23 = hr::field_mask_literal< 0x400e1010, 23, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P24 = hr::field_mask_literal< 0x400e1010, 24, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P25 = hr::field_mask_literal< 0x400e1010, 25, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P26 = hr::field_mask_literal< 0x400e1010, 26, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P27 = hr::field_mask_literal< 0x400e1010, 27, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P28 = hr::field_mask_literal< 0x400e1010, 28, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P29 = hr::field_mask_literal< 0x400e1010, 29, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P30 = hr::field_mask_literal< 0x400e1010, 30, 1 >();
   // Output Enable
   constexpr auto PIOB_OER_P31 = hr::field_mask_literal< 0x400e1010, 31, 1 >();

// ODR
   // Output Disable
   constexpr auto PIOB_ODR_P0 = hr::field_mask_literal< 0x400e1014, 0, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P1 = hr::field_mask_literal< 0x400e1014, 1, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P2 = hr::field_mask_literal< 0x400e1014, 2, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P3 = hr::field_mask_literal< 0x400e1014, 3, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P4 = hr::field_mask_literal< 0x400e1014, 4, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P5 = hr::field_mask_literal< 0x400e1014, 5, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P6 = hr::field_mask_literal< 0x400e1014, 6, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P7 = hr::field_mask_literal< 0x400e1014, 7, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P8 = hr::field_mask_literal< 0x400e1014, 8, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P9 = hr::field_mask_literal< 0x400e1014, 9, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P10 = hr::field_mask_literal< 0x400e1014, 10, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P11 = hr::field_mask_literal< 0x400e1014, 11, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P12 = hr::field_mask_literal< 0x400e1014, 12, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P13 = hr::field_mask_literal< 0x400e1014, 13, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P14 = hr::field_mask_literal< 0x400e1014, 14, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P15 = hr::field_mask_literal< 0x400e1014, 15, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P16 = hr::field_mask_literal< 0x400e1014, 16, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P17 = hr::field_mask_literal< 0x400e1014, 17, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P18 = hr::field_mask_literal< 0x400e1014, 18, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P19 = hr::field_mask_literal< 0x400e1014, 19, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P20 = hr::field_mask_literal< 0x400e1014, 20, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P21 = hr::field_mask_literal< 0x400e1014, 21, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P22 = hr::field_mask_literal< 0x400e1014, 22, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P23 = hr::field_mask_literal< 0x400e1014, 23, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P24 = hr::field_mask_literal< 0x400e1014, 24, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P25 = hr::field_mask_literal< 0x400e1014, 25, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P26 = hr::field_mask_literal< 0x400e1014, 26, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P27 = hr::field_mask_literal< 0x400e1014, 27, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P28 = hr::field_mask_literal< 0x400e1014, 28, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P29 = hr::field_mask_literal< 0x400e1014, 29, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P30 = hr::field_mask_literal< 0x400e1014, 30, 1 >();
   // Output Disable
   constexpr auto PIOB_ODR_P31 = hr::field_mask_literal< 0x400e1014, 31, 1 >();

// OSR
   // Output Status
   constexpr auto PIOB_OSR_P0 = hr::field_mask_literal< 0x400e1018, 0, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P1 = hr::field_mask_literal< 0x400e1018, 1, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P2 = hr::field_mask_literal< 0x400e1018, 2, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P3 = hr::field_mask_literal< 0x400e1018, 3, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P4 = hr::field_mask_literal< 0x400e1018, 4, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P5 = hr::field_mask_literal< 0x400e1018, 5, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P6 = hr::field_mask_literal< 0x400e1018, 6, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P7 = hr::field_mask_literal< 0x400e1018, 7, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P8 = hr::field_mask_literal< 0x400e1018, 8, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P9 = hr::field_mask_literal< 0x400e1018, 9, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P10 = hr::field_mask_literal< 0x400e1018, 10, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P11 = hr::field_mask_literal< 0x400e1018, 11, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P12 = hr::field_mask_literal< 0x400e1018, 12, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P13 = hr::field_mask_literal< 0x400e1018, 13, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P14 = hr::field_mask_literal< 0x400e1018, 14, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P15 = hr::field_mask_literal< 0x400e1018, 15, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P16 = hr::field_mask_literal< 0x400e1018, 16, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P17 = hr::field_mask_literal< 0x400e1018, 17, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P18 = hr::field_mask_literal< 0x400e1018, 18, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P19 = hr::field_mask_literal< 0x400e1018, 19, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P20 = hr::field_mask_literal< 0x400e1018, 20, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P21 = hr::field_mask_literal< 0x400e1018, 21, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P22 = hr::field_mask_literal< 0x400e1018, 22, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P23 = hr::field_mask_literal< 0x400e1018, 23, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P24 = hr::field_mask_literal< 0x400e1018, 24, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P25 = hr::field_mask_literal< 0x400e1018, 25, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P26 = hr::field_mask_literal< 0x400e1018, 26, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P27 = hr::field_mask_literal< 0x400e1018, 27, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P28 = hr::field_mask_literal< 0x400e1018, 28, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P29 = hr::field_mask_literal< 0x400e1018, 29, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P30 = hr::field_mask_literal< 0x400e1018, 30, 1 >();
   // Output Status
   constexpr auto PIOB_OSR_P31 = hr::field_mask_literal< 0x400e1018, 31, 1 >();

// IFER
   // Input Filter Enable
   constexpr auto PIOB_IFER_P0 = hr::field_mask_literal< 0x400e1020, 0, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P1 = hr::field_mask_literal< 0x400e1020, 1, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P2 = hr::field_mask_literal< 0x400e1020, 2, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P3 = hr::field_mask_literal< 0x400e1020, 3, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P4 = hr::field_mask_literal< 0x400e1020, 4, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P5 = hr::field_mask_literal< 0x400e1020, 5, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P6 = hr::field_mask_literal< 0x400e1020, 6, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P7 = hr::field_mask_literal< 0x400e1020, 7, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P8 = hr::field_mask_literal< 0x400e1020, 8, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P9 = hr::field_mask_literal< 0x400e1020, 9, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P10 = hr::field_mask_literal< 0x400e1020, 10, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P11 = hr::field_mask_literal< 0x400e1020, 11, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P12 = hr::field_mask_literal< 0x400e1020, 12, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P13 = hr::field_mask_literal< 0x400e1020, 13, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P14 = hr::field_mask_literal< 0x400e1020, 14, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P15 = hr::field_mask_literal< 0x400e1020, 15, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P16 = hr::field_mask_literal< 0x400e1020, 16, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P17 = hr::field_mask_literal< 0x400e1020, 17, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P18 = hr::field_mask_literal< 0x400e1020, 18, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P19 = hr::field_mask_literal< 0x400e1020, 19, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P20 = hr::field_mask_literal< 0x400e1020, 20, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P21 = hr::field_mask_literal< 0x400e1020, 21, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P22 = hr::field_mask_literal< 0x400e1020, 22, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P23 = hr::field_mask_literal< 0x400e1020, 23, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P24 = hr::field_mask_literal< 0x400e1020, 24, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P25 = hr::field_mask_literal< 0x400e1020, 25, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P26 = hr::field_mask_literal< 0x400e1020, 26, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P27 = hr::field_mask_literal< 0x400e1020, 27, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P28 = hr::field_mask_literal< 0x400e1020, 28, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P29 = hr::field_mask_literal< 0x400e1020, 29, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P30 = hr::field_mask_literal< 0x400e1020, 30, 1 >();
   // Input Filter Enable
   constexpr auto PIOB_IFER_P31 = hr::field_mask_literal< 0x400e1020, 31, 1 >();

// IFDR
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P0 = hr::field_mask_literal< 0x400e1024, 0, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P1 = hr::field_mask_literal< 0x400e1024, 1, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P2 = hr::field_mask_literal< 0x400e1024, 2, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P3 = hr::field_mask_literal< 0x400e1024, 3, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P4 = hr::field_mask_literal< 0x400e1024, 4, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P5 = hr::field_mask_literal< 0x400e1024, 5, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P6 = hr::field_mask_literal< 0x400e1024, 6, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P7 = hr::field_mask_literal< 0x400e1024, 7, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P8 = hr::field_mask_literal< 0x400e1024, 8, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P9 = hr::field_mask_literal< 0x400e1024, 9, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P10 = hr::field_mask_literal< 0x400e1024, 10, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P11 = hr::field_mask_literal< 0x400e1024, 11, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P12 = hr::field_mask_literal< 0x400e1024, 12, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P13 = hr::field_mask_literal< 0x400e1024, 13, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P14 = hr::field_mask_literal< 0x400e1024, 14, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P15 = hr::field_mask_literal< 0x400e1024, 15, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P16 = hr::field_mask_literal< 0x400e1024, 16, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P17 = hr::field_mask_literal< 0x400e1024, 17, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P18 = hr::field_mask_literal< 0x400e1024, 18, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P19 = hr::field_mask_literal< 0x400e1024, 19, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P20 = hr::field_mask_literal< 0x400e1024, 20, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P21 = hr::field_mask_literal< 0x400e1024, 21, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P22 = hr::field_mask_literal< 0x400e1024, 22, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P23 = hr::field_mask_literal< 0x400e1024, 23, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P24 = hr::field_mask_literal< 0x400e1024, 24, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P25 = hr::field_mask_literal< 0x400e1024, 25, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P26 = hr::field_mask_literal< 0x400e1024, 26, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P27 = hr::field_mask_literal< 0x400e1024, 27, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P28 = hr::field_mask_literal< 0x400e1024, 28, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P29 = hr::field_mask_literal< 0x400e1024, 29, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P30 = hr::field_mask_literal< 0x400e1024, 30, 1 >();
   // Input Filter Disable
   constexpr auto PIOB_IFDR_P31 = hr::field_mask_literal< 0x400e1024, 31, 1 >();

// IFSR
   // Input Filer Status
   constexpr auto PIOB_IFSR_P0 = hr::field_mask_literal< 0x400e1028, 0, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P1 = hr::field_mask_literal< 0x400e1028, 1, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P2 = hr::field_mask_literal< 0x400e1028, 2, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P3 = hr::field_mask_literal< 0x400e1028, 3, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P4 = hr::field_mask_literal< 0x400e1028, 4, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P5 = hr::field_mask_literal< 0x400e1028, 5, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P6 = hr::field_mask_literal< 0x400e1028, 6, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P7 = hr::field_mask_literal< 0x400e1028, 7, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P8 = hr::field_mask_literal< 0x400e1028, 8, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P9 = hr::field_mask_literal< 0x400e1028, 9, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P10 = hr::field_mask_literal< 0x400e1028, 10, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P11 = hr::field_mask_literal< 0x400e1028, 11, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P12 = hr::field_mask_literal< 0x400e1028, 12, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P13 = hr::field_mask_literal< 0x400e1028, 13, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P14 = hr::field_mask_literal< 0x400e1028, 14, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P15 = hr::field_mask_literal< 0x400e1028, 15, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P16 = hr::field_mask_literal< 0x400e1028, 16, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P17 = hr::field_mask_literal< 0x400e1028, 17, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P18 = hr::field_mask_literal< 0x400e1028, 18, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P19 = hr::field_mask_literal< 0x400e1028, 19, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P20 = hr::field_mask_literal< 0x400e1028, 20, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P21 = hr::field_mask_literal< 0x400e1028, 21, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P22 = hr::field_mask_literal< 0x400e1028, 22, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P23 = hr::field_mask_literal< 0x400e1028, 23, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P24 = hr::field_mask_literal< 0x400e1028, 24, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P25 = hr::field_mask_literal< 0x400e1028, 25, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P26 = hr::field_mask_literal< 0x400e1028, 26, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P27 = hr::field_mask_literal< 0x400e1028, 27, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P28 = hr::field_mask_literal< 0x400e1028, 28, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P29 = hr::field_mask_literal< 0x400e1028, 29, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P30 = hr::field_mask_literal< 0x400e1028, 30, 1 >();
   // Input Filer Status
   constexpr auto PIOB_IFSR_P31 = hr::field_mask_literal< 0x400e1028, 31, 1 >();

// SODR
   // Set Output Data
   constexpr auto PIOB_SODR_P0 = hr::field_mask_literal< 0x400e1030, 0, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P1 = hr::field_mask_literal< 0x400e1030, 1, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P2 = hr::field_mask_literal< 0x400e1030, 2, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P3 = hr::field_mask_literal< 0x400e1030, 3, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P4 = hr::field_mask_literal< 0x400e1030, 4, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P5 = hr::field_mask_literal< 0x400e1030, 5, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P6 = hr::field_mask_literal< 0x400e1030, 6, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P7 = hr::field_mask_literal< 0x400e1030, 7, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P8 = hr::field_mask_literal< 0x400e1030, 8, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P9 = hr::field_mask_literal< 0x400e1030, 9, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P10 = hr::field_mask_literal< 0x400e1030, 10, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P11 = hr::field_mask_literal< 0x400e1030, 11, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P12 = hr::field_mask_literal< 0x400e1030, 12, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P13 = hr::field_mask_literal< 0x400e1030, 13, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P14 = hr::field_mask_literal< 0x400e1030, 14, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P15 = hr::field_mask_literal< 0x400e1030, 15, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P16 = hr::field_mask_literal< 0x400e1030, 16, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P17 = hr::field_mask_literal< 0x400e1030, 17, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P18 = hr::field_mask_literal< 0x400e1030, 18, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P19 = hr::field_mask_literal< 0x400e1030, 19, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P20 = hr::field_mask_literal< 0x400e1030, 20, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P21 = hr::field_mask_literal< 0x400e1030, 21, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P22 = hr::field_mask_literal< 0x400e1030, 22, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P23 = hr::field_mask_literal< 0x400e1030, 23, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P24 = hr::field_mask_literal< 0x400e1030, 24, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P25 = hr::field_mask_literal< 0x400e1030, 25, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P26 = hr::field_mask_literal< 0x400e1030, 26, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P27 = hr::field_mask_literal< 0x400e1030, 27, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P28 = hr::field_mask_literal< 0x400e1030, 28, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P29 = hr::field_mask_literal< 0x400e1030, 29, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P30 = hr::field_mask_literal< 0x400e1030, 30, 1 >();
   // Set Output Data
   constexpr auto PIOB_SODR_P31 = hr::field_mask_literal< 0x400e1030, 31, 1 >();

// CODR
   // Clear Output Data
   constexpr auto PIOB_CODR_P0 = hr::field_mask_literal< 0x400e1034, 0, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P1 = hr::field_mask_literal< 0x400e1034, 1, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P2 = hr::field_mask_literal< 0x400e1034, 2, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P3 = hr::field_mask_literal< 0x400e1034, 3, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P4 = hr::field_mask_literal< 0x400e1034, 4, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P5 = hr::field_mask_literal< 0x400e1034, 5, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P6 = hr::field_mask_literal< 0x400e1034, 6, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P7 = hr::field_mask_literal< 0x400e1034, 7, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P8 = hr::field_mask_literal< 0x400e1034, 8, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P9 = hr::field_mask_literal< 0x400e1034, 9, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P10 = hr::field_mask_literal< 0x400e1034, 10, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P11 = hr::field_mask_literal< 0x400e1034, 11, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P12 = hr::field_mask_literal< 0x400e1034, 12, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P13 = hr::field_mask_literal< 0x400e1034, 13, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P14 = hr::field_mask_literal< 0x400e1034, 14, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P15 = hr::field_mask_literal< 0x400e1034, 15, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P16 = hr::field_mask_literal< 0x400e1034, 16, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P17 = hr::field_mask_literal< 0x400e1034, 17, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P18 = hr::field_mask_literal< 0x400e1034, 18, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P19 = hr::field_mask_literal< 0x400e1034, 19, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P20 = hr::field_mask_literal< 0x400e1034, 20, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P21 = hr::field_mask_literal< 0x400e1034, 21, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P22 = hr::field_mask_literal< 0x400e1034, 22, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P23 = hr::field_mask_literal< 0x400e1034, 23, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P24 = hr::field_mask_literal< 0x400e1034, 24, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P25 = hr::field_mask_literal< 0x400e1034, 25, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P26 = hr::field_mask_literal< 0x400e1034, 26, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P27 = hr::field_mask_literal< 0x400e1034, 27, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P28 = hr::field_mask_literal< 0x400e1034, 28, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P29 = hr::field_mask_literal< 0x400e1034, 29, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P30 = hr::field_mask_literal< 0x400e1034, 30, 1 >();
   // Clear Output Data
   constexpr auto PIOB_CODR_P31 = hr::field_mask_literal< 0x400e1034, 31, 1 >();

// ODSR
   // Output Data Status
   constexpr auto PIOB_ODSR_P0 = hr::field_mask_literal< 0x400e1038, 0, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P1 = hr::field_mask_literal< 0x400e1038, 1, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P2 = hr::field_mask_literal< 0x400e1038, 2, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P3 = hr::field_mask_literal< 0x400e1038, 3, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P4 = hr::field_mask_literal< 0x400e1038, 4, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P5 = hr::field_mask_literal< 0x400e1038, 5, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P6 = hr::field_mask_literal< 0x400e1038, 6, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P7 = hr::field_mask_literal< 0x400e1038, 7, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P8 = hr::field_mask_literal< 0x400e1038, 8, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P9 = hr::field_mask_literal< 0x400e1038, 9, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P10 = hr::field_mask_literal< 0x400e1038, 10, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P11 = hr::field_mask_literal< 0x400e1038, 11, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P12 = hr::field_mask_literal< 0x400e1038, 12, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P13 = hr::field_mask_literal< 0x400e1038, 13, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P14 = hr::field_mask_literal< 0x400e1038, 14, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P15 = hr::field_mask_literal< 0x400e1038, 15, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P16 = hr::field_mask_literal< 0x400e1038, 16, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P17 = hr::field_mask_literal< 0x400e1038, 17, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P18 = hr::field_mask_literal< 0x400e1038, 18, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P19 = hr::field_mask_literal< 0x400e1038, 19, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P20 = hr::field_mask_literal< 0x400e1038, 20, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P21 = hr::field_mask_literal< 0x400e1038, 21, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P22 = hr::field_mask_literal< 0x400e1038, 22, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P23 = hr::field_mask_literal< 0x400e1038, 23, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P24 = hr::field_mask_literal< 0x400e1038, 24, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P25 = hr::field_mask_literal< 0x400e1038, 25, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P26 = hr::field_mask_literal< 0x400e1038, 26, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P27 = hr::field_mask_literal< 0x400e1038, 27, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P28 = hr::field_mask_literal< 0x400e1038, 28, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P29 = hr::field_mask_literal< 0x400e1038, 29, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P30 = hr::field_mask_literal< 0x400e1038, 30, 1 >();
   // Output Data Status
   constexpr auto PIOB_ODSR_P31 = hr::field_mask_literal< 0x400e1038, 31, 1 >();

// PDSR
   // Output Data Status
   constexpr auto PIOB_PDSR_P0 = hr::field_mask_literal< 0x400e103c, 0, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P1 = hr::field_mask_literal< 0x400e103c, 1, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P2 = hr::field_mask_literal< 0x400e103c, 2, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P3 = hr::field_mask_literal< 0x400e103c, 3, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P4 = hr::field_mask_literal< 0x400e103c, 4, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P5 = hr::field_mask_literal< 0x400e103c, 5, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P6 = hr::field_mask_literal< 0x400e103c, 6, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P7 = hr::field_mask_literal< 0x400e103c, 7, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P8 = hr::field_mask_literal< 0x400e103c, 8, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P9 = hr::field_mask_literal< 0x400e103c, 9, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P10 = hr::field_mask_literal< 0x400e103c, 10, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P11 = hr::field_mask_literal< 0x400e103c, 11, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P12 = hr::field_mask_literal< 0x400e103c, 12, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P13 = hr::field_mask_literal< 0x400e103c, 13, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P14 = hr::field_mask_literal< 0x400e103c, 14, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P15 = hr::field_mask_literal< 0x400e103c, 15, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P16 = hr::field_mask_literal< 0x400e103c, 16, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P17 = hr::field_mask_literal< 0x400e103c, 17, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P18 = hr::field_mask_literal< 0x400e103c, 18, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P19 = hr::field_mask_literal< 0x400e103c, 19, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P20 = hr::field_mask_literal< 0x400e103c, 20, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P21 = hr::field_mask_literal< 0x400e103c, 21, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P22 = hr::field_mask_literal< 0x400e103c, 22, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P23 = hr::field_mask_literal< 0x400e103c, 23, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P24 = hr::field_mask_literal< 0x400e103c, 24, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P25 = hr::field_mask_literal< 0x400e103c, 25, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P26 = hr::field_mask_literal< 0x400e103c, 26, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P27 = hr::field_mask_literal< 0x400e103c, 27, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P28 = hr::field_mask_literal< 0x400e103c, 28, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P29 = hr::field_mask_literal< 0x400e103c, 29, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P30 = hr::field_mask_literal< 0x400e103c, 30, 1 >();
   // Output Data Status
   constexpr auto PIOB_PDSR_P31 = hr::field_mask_literal< 0x400e103c, 31, 1 >();

// IER
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P0 = hr::field_mask_literal< 0x400e1040, 0, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P1 = hr::field_mask_literal< 0x400e1040, 1, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P2 = hr::field_mask_literal< 0x400e1040, 2, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P3 = hr::field_mask_literal< 0x400e1040, 3, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P4 = hr::field_mask_literal< 0x400e1040, 4, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P5 = hr::field_mask_literal< 0x400e1040, 5, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P6 = hr::field_mask_literal< 0x400e1040, 6, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P7 = hr::field_mask_literal< 0x400e1040, 7, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P8 = hr::field_mask_literal< 0x400e1040, 8, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P9 = hr::field_mask_literal< 0x400e1040, 9, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P10 = hr::field_mask_literal< 0x400e1040, 10, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P11 = hr::field_mask_literal< 0x400e1040, 11, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P12 = hr::field_mask_literal< 0x400e1040, 12, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P13 = hr::field_mask_literal< 0x400e1040, 13, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P14 = hr::field_mask_literal< 0x400e1040, 14, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P15 = hr::field_mask_literal< 0x400e1040, 15, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P16 = hr::field_mask_literal< 0x400e1040, 16, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P17 = hr::field_mask_literal< 0x400e1040, 17, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P18 = hr::field_mask_literal< 0x400e1040, 18, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P19 = hr::field_mask_literal< 0x400e1040, 19, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P20 = hr::field_mask_literal< 0x400e1040, 20, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P21 = hr::field_mask_literal< 0x400e1040, 21, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P22 = hr::field_mask_literal< 0x400e1040, 22, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P23 = hr::field_mask_literal< 0x400e1040, 23, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P24 = hr::field_mask_literal< 0x400e1040, 24, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P25 = hr::field_mask_literal< 0x400e1040, 25, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P26 = hr::field_mask_literal< 0x400e1040, 26, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P27 = hr::field_mask_literal< 0x400e1040, 27, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P28 = hr::field_mask_literal< 0x400e1040, 28, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P29 = hr::field_mask_literal< 0x400e1040, 29, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P30 = hr::field_mask_literal< 0x400e1040, 30, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOB_IER_P31 = hr::field_mask_literal< 0x400e1040, 31, 1 >();

// IDR
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P0 = hr::field_mask_literal< 0x400e1044, 0, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P1 = hr::field_mask_literal< 0x400e1044, 1, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P2 = hr::field_mask_literal< 0x400e1044, 2, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P3 = hr::field_mask_literal< 0x400e1044, 3, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P4 = hr::field_mask_literal< 0x400e1044, 4, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P5 = hr::field_mask_literal< 0x400e1044, 5, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P6 = hr::field_mask_literal< 0x400e1044, 6, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P7 = hr::field_mask_literal< 0x400e1044, 7, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P8 = hr::field_mask_literal< 0x400e1044, 8, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P9 = hr::field_mask_literal< 0x400e1044, 9, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P10 = hr::field_mask_literal< 0x400e1044, 10, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P11 = hr::field_mask_literal< 0x400e1044, 11, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P12 = hr::field_mask_literal< 0x400e1044, 12, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P13 = hr::field_mask_literal< 0x400e1044, 13, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P14 = hr::field_mask_literal< 0x400e1044, 14, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P15 = hr::field_mask_literal< 0x400e1044, 15, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P16 = hr::field_mask_literal< 0x400e1044, 16, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P17 = hr::field_mask_literal< 0x400e1044, 17, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P18 = hr::field_mask_literal< 0x400e1044, 18, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P19 = hr::field_mask_literal< 0x400e1044, 19, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P20 = hr::field_mask_literal< 0x400e1044, 20, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P21 = hr::field_mask_literal< 0x400e1044, 21, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P22 = hr::field_mask_literal< 0x400e1044, 22, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P23 = hr::field_mask_literal< 0x400e1044, 23, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P24 = hr::field_mask_literal< 0x400e1044, 24, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P25 = hr::field_mask_literal< 0x400e1044, 25, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P26 = hr::field_mask_literal< 0x400e1044, 26, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P27 = hr::field_mask_literal< 0x400e1044, 27, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P28 = hr::field_mask_literal< 0x400e1044, 28, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P29 = hr::field_mask_literal< 0x400e1044, 29, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P30 = hr::field_mask_literal< 0x400e1044, 30, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOB_IDR_P31 = hr::field_mask_literal< 0x400e1044, 31, 1 >();

// IMR
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P0 = hr::field_mask_literal< 0x400e1048, 0, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P1 = hr::field_mask_literal< 0x400e1048, 1, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P2 = hr::field_mask_literal< 0x400e1048, 2, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P3 = hr::field_mask_literal< 0x400e1048, 3, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P4 = hr::field_mask_literal< 0x400e1048, 4, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P5 = hr::field_mask_literal< 0x400e1048, 5, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P6 = hr::field_mask_literal< 0x400e1048, 6, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P7 = hr::field_mask_literal< 0x400e1048, 7, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P8 = hr::field_mask_literal< 0x400e1048, 8, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P9 = hr::field_mask_literal< 0x400e1048, 9, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P10 = hr::field_mask_literal< 0x400e1048, 10, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P11 = hr::field_mask_literal< 0x400e1048, 11, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P12 = hr::field_mask_literal< 0x400e1048, 12, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P13 = hr::field_mask_literal< 0x400e1048, 13, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P14 = hr::field_mask_literal< 0x400e1048, 14, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P15 = hr::field_mask_literal< 0x400e1048, 15, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P16 = hr::field_mask_literal< 0x400e1048, 16, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P17 = hr::field_mask_literal< 0x400e1048, 17, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P18 = hr::field_mask_literal< 0x400e1048, 18, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P19 = hr::field_mask_literal< 0x400e1048, 19, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P20 = hr::field_mask_literal< 0x400e1048, 20, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P21 = hr::field_mask_literal< 0x400e1048, 21, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P22 = hr::field_mask_literal< 0x400e1048, 22, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P23 = hr::field_mask_literal< 0x400e1048, 23, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P24 = hr::field_mask_literal< 0x400e1048, 24, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P25 = hr::field_mask_literal< 0x400e1048, 25, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P26 = hr::field_mask_literal< 0x400e1048, 26, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P27 = hr::field_mask_literal< 0x400e1048, 27, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P28 = hr::field_mask_literal< 0x400e1048, 28, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P29 = hr::field_mask_literal< 0x400e1048, 29, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P30 = hr::field_mask_literal< 0x400e1048, 30, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOB_IMR_P31 = hr::field_mask_literal< 0x400e1048, 31, 1 >();

// ISR
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P0 = hr::field_mask_literal< 0x400e104c, 0, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P1 = hr::field_mask_literal< 0x400e104c, 1, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P2 = hr::field_mask_literal< 0x400e104c, 2, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P3 = hr::field_mask_literal< 0x400e104c, 3, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P4 = hr::field_mask_literal< 0x400e104c, 4, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P5 = hr::field_mask_literal< 0x400e104c, 5, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P6 = hr::field_mask_literal< 0x400e104c, 6, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P7 = hr::field_mask_literal< 0x400e104c, 7, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P8 = hr::field_mask_literal< 0x400e104c, 8, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P9 = hr::field_mask_literal< 0x400e104c, 9, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P10 = hr::field_mask_literal< 0x400e104c, 10, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P11 = hr::field_mask_literal< 0x400e104c, 11, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P12 = hr::field_mask_literal< 0x400e104c, 12, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P13 = hr::field_mask_literal< 0x400e104c, 13, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P14 = hr::field_mask_literal< 0x400e104c, 14, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P15 = hr::field_mask_literal< 0x400e104c, 15, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P16 = hr::field_mask_literal< 0x400e104c, 16, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P17 = hr::field_mask_literal< 0x400e104c, 17, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P18 = hr::field_mask_literal< 0x400e104c, 18, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P19 = hr::field_mask_literal< 0x400e104c, 19, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P20 = hr::field_mask_literal< 0x400e104c, 20, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P21 = hr::field_mask_literal< 0x400e104c, 21, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P22 = hr::field_mask_literal< 0x400e104c, 22, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P23 = hr::field_mask_literal< 0x400e104c, 23, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P24 = hr::field_mask_literal< 0x400e104c, 24, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P25 = hr::field_mask_literal< 0x400e104c, 25, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P26 = hr::field_mask_literal< 0x400e104c, 26, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P27 = hr::field_mask_literal< 0x400e104c, 27, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P28 = hr::field_mask_literal< 0x400e104c, 28, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P29 = hr::field_mask_literal< 0x400e104c, 29, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P30 = hr::field_mask_literal< 0x400e104c, 30, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOB_ISR_P31 = hr::field_mask_literal< 0x400e104c, 31, 1 >();

// MDER
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P0 = hr::field_mask_literal< 0x400e1050, 0, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P1 = hr::field_mask_literal< 0x400e1050, 1, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P2 = hr::field_mask_literal< 0x400e1050, 2, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P3 = hr::field_mask_literal< 0x400e1050, 3, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P4 = hr::field_mask_literal< 0x400e1050, 4, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P5 = hr::field_mask_literal< 0x400e1050, 5, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P6 = hr::field_mask_literal< 0x400e1050, 6, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P7 = hr::field_mask_literal< 0x400e1050, 7, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P8 = hr::field_mask_literal< 0x400e1050, 8, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P9 = hr::field_mask_literal< 0x400e1050, 9, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P10 = hr::field_mask_literal< 0x400e1050, 10, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P11 = hr::field_mask_literal< 0x400e1050, 11, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P12 = hr::field_mask_literal< 0x400e1050, 12, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P13 = hr::field_mask_literal< 0x400e1050, 13, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P14 = hr::field_mask_literal< 0x400e1050, 14, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P15 = hr::field_mask_literal< 0x400e1050, 15, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P16 = hr::field_mask_literal< 0x400e1050, 16, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P17 = hr::field_mask_literal< 0x400e1050, 17, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P18 = hr::field_mask_literal< 0x400e1050, 18, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P19 = hr::field_mask_literal< 0x400e1050, 19, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P20 = hr::field_mask_literal< 0x400e1050, 20, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P21 = hr::field_mask_literal< 0x400e1050, 21, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P22 = hr::field_mask_literal< 0x400e1050, 22, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P23 = hr::field_mask_literal< 0x400e1050, 23, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P24 = hr::field_mask_literal< 0x400e1050, 24, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P25 = hr::field_mask_literal< 0x400e1050, 25, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P26 = hr::field_mask_literal< 0x400e1050, 26, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P27 = hr::field_mask_literal< 0x400e1050, 27, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P28 = hr::field_mask_literal< 0x400e1050, 28, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P29 = hr::field_mask_literal< 0x400e1050, 29, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P30 = hr::field_mask_literal< 0x400e1050, 30, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOB_MDER_P31 = hr::field_mask_literal< 0x400e1050, 31, 1 >();

// MDDR
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P0 = hr::field_mask_literal< 0x400e1054, 0, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P1 = hr::field_mask_literal< 0x400e1054, 1, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P2 = hr::field_mask_literal< 0x400e1054, 2, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P3 = hr::field_mask_literal< 0x400e1054, 3, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P4 = hr::field_mask_literal< 0x400e1054, 4, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P5 = hr::field_mask_literal< 0x400e1054, 5, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P6 = hr::field_mask_literal< 0x400e1054, 6, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P7 = hr::field_mask_literal< 0x400e1054, 7, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P8 = hr::field_mask_literal< 0x400e1054, 8, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P9 = hr::field_mask_literal< 0x400e1054, 9, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P10 = hr::field_mask_literal< 0x400e1054, 10, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P11 = hr::field_mask_literal< 0x400e1054, 11, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P12 = hr::field_mask_literal< 0x400e1054, 12, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P13 = hr::field_mask_literal< 0x400e1054, 13, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P14 = hr::field_mask_literal< 0x400e1054, 14, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P15 = hr::field_mask_literal< 0x400e1054, 15, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P16 = hr::field_mask_literal< 0x400e1054, 16, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P17 = hr::field_mask_literal< 0x400e1054, 17, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P18 = hr::field_mask_literal< 0x400e1054, 18, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P19 = hr::field_mask_literal< 0x400e1054, 19, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P20 = hr::field_mask_literal< 0x400e1054, 20, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P21 = hr::field_mask_literal< 0x400e1054, 21, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P22 = hr::field_mask_literal< 0x400e1054, 22, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P23 = hr::field_mask_literal< 0x400e1054, 23, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P24 = hr::field_mask_literal< 0x400e1054, 24, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P25 = hr::field_mask_literal< 0x400e1054, 25, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P26 = hr::field_mask_literal< 0x400e1054, 26, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P27 = hr::field_mask_literal< 0x400e1054, 27, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P28 = hr::field_mask_literal< 0x400e1054, 28, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P29 = hr::field_mask_literal< 0x400e1054, 29, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P30 = hr::field_mask_literal< 0x400e1054, 30, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOB_MDDR_P31 = hr::field_mask_literal< 0x400e1054, 31, 1 >();

// MDSR
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P0 = hr::field_mask_literal< 0x400e1058, 0, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P1 = hr::field_mask_literal< 0x400e1058, 1, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P2 = hr::field_mask_literal< 0x400e1058, 2, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P3 = hr::field_mask_literal< 0x400e1058, 3, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P4 = hr::field_mask_literal< 0x400e1058, 4, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P5 = hr::field_mask_literal< 0x400e1058, 5, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P6 = hr::field_mask_literal< 0x400e1058, 6, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P7 = hr::field_mask_literal< 0x400e1058, 7, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P8 = hr::field_mask_literal< 0x400e1058, 8, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P9 = hr::field_mask_literal< 0x400e1058, 9, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P10 = hr::field_mask_literal< 0x400e1058, 10, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P11 = hr::field_mask_literal< 0x400e1058, 11, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P12 = hr::field_mask_literal< 0x400e1058, 12, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P13 = hr::field_mask_literal< 0x400e1058, 13, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P14 = hr::field_mask_literal< 0x400e1058, 14, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P15 = hr::field_mask_literal< 0x400e1058, 15, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P16 = hr::field_mask_literal< 0x400e1058, 16, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P17 = hr::field_mask_literal< 0x400e1058, 17, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P18 = hr::field_mask_literal< 0x400e1058, 18, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P19 = hr::field_mask_literal< 0x400e1058, 19, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P20 = hr::field_mask_literal< 0x400e1058, 20, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P21 = hr::field_mask_literal< 0x400e1058, 21, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P22 = hr::field_mask_literal< 0x400e1058, 22, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P23 = hr::field_mask_literal< 0x400e1058, 23, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P24 = hr::field_mask_literal< 0x400e1058, 24, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P25 = hr::field_mask_literal< 0x400e1058, 25, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P26 = hr::field_mask_literal< 0x400e1058, 26, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P27 = hr::field_mask_literal< 0x400e1058, 27, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P28 = hr::field_mask_literal< 0x400e1058, 28, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P29 = hr::field_mask_literal< 0x400e1058, 29, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P30 = hr::field_mask_literal< 0x400e1058, 30, 1 >();
   // Multi Drive Status.
   constexpr auto PIOB_MDSR_P31 = hr::field_mask_literal< 0x400e1058, 31, 1 >();

// PUDR
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P0 = hr::field_mask_literal< 0x400e1060, 0, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P1 = hr::field_mask_literal< 0x400e1060, 1, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P2 = hr::field_mask_literal< 0x400e1060, 2, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P3 = hr::field_mask_literal< 0x400e1060, 3, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P4 = hr::field_mask_literal< 0x400e1060, 4, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P5 = hr::field_mask_literal< 0x400e1060, 5, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P6 = hr::field_mask_literal< 0x400e1060, 6, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P7 = hr::field_mask_literal< 0x400e1060, 7, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P8 = hr::field_mask_literal< 0x400e1060, 8, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P9 = hr::field_mask_literal< 0x400e1060, 9, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P10 = hr::field_mask_literal< 0x400e1060, 10, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P11 = hr::field_mask_literal< 0x400e1060, 11, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P12 = hr::field_mask_literal< 0x400e1060, 12, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P13 = hr::field_mask_literal< 0x400e1060, 13, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P14 = hr::field_mask_literal< 0x400e1060, 14, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P15 = hr::field_mask_literal< 0x400e1060, 15, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P16 = hr::field_mask_literal< 0x400e1060, 16, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P17 = hr::field_mask_literal< 0x400e1060, 17, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P18 = hr::field_mask_literal< 0x400e1060, 18, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P19 = hr::field_mask_literal< 0x400e1060, 19, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P20 = hr::field_mask_literal< 0x400e1060, 20, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P21 = hr::field_mask_literal< 0x400e1060, 21, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P22 = hr::field_mask_literal< 0x400e1060, 22, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P23 = hr::field_mask_literal< 0x400e1060, 23, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P24 = hr::field_mask_literal< 0x400e1060, 24, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P25 = hr::field_mask_literal< 0x400e1060, 25, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P26 = hr::field_mask_literal< 0x400e1060, 26, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P27 = hr::field_mask_literal< 0x400e1060, 27, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P28 = hr::field_mask_literal< 0x400e1060, 28, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P29 = hr::field_mask_literal< 0x400e1060, 29, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P30 = hr::field_mask_literal< 0x400e1060, 30, 1 >();
   // Pull Up Disable.
   constexpr auto PIOB_PUDR_P31 = hr::field_mask_literal< 0x400e1060, 31, 1 >();

// PUER
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P0 = hr::field_mask_literal< 0x400e1064, 0, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P1 = hr::field_mask_literal< 0x400e1064, 1, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P2 = hr::field_mask_literal< 0x400e1064, 2, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P3 = hr::field_mask_literal< 0x400e1064, 3, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P4 = hr::field_mask_literal< 0x400e1064, 4, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P5 = hr::field_mask_literal< 0x400e1064, 5, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P6 = hr::field_mask_literal< 0x400e1064, 6, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P7 = hr::field_mask_literal< 0x400e1064, 7, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P8 = hr::field_mask_literal< 0x400e1064, 8, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P9 = hr::field_mask_literal< 0x400e1064, 9, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P10 = hr::field_mask_literal< 0x400e1064, 10, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P11 = hr::field_mask_literal< 0x400e1064, 11, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P12 = hr::field_mask_literal< 0x400e1064, 12, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P13 = hr::field_mask_literal< 0x400e1064, 13, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P14 = hr::field_mask_literal< 0x400e1064, 14, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P15 = hr::field_mask_literal< 0x400e1064, 15, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P16 = hr::field_mask_literal< 0x400e1064, 16, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P17 = hr::field_mask_literal< 0x400e1064, 17, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P18 = hr::field_mask_literal< 0x400e1064, 18, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P19 = hr::field_mask_literal< 0x400e1064, 19, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P20 = hr::field_mask_literal< 0x400e1064, 20, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P21 = hr::field_mask_literal< 0x400e1064, 21, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P22 = hr::field_mask_literal< 0x400e1064, 22, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P23 = hr::field_mask_literal< 0x400e1064, 23, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P24 = hr::field_mask_literal< 0x400e1064, 24, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P25 = hr::field_mask_literal< 0x400e1064, 25, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P26 = hr::field_mask_literal< 0x400e1064, 26, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P27 = hr::field_mask_literal< 0x400e1064, 27, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P28 = hr::field_mask_literal< 0x400e1064, 28, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P29 = hr::field_mask_literal< 0x400e1064, 29, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P30 = hr::field_mask_literal< 0x400e1064, 30, 1 >();
   // Pull Up Enable.
   constexpr auto PIOB_PUER_P31 = hr::field_mask_literal< 0x400e1064, 31, 1 >();

// PUSR
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P0 = hr::field_mask_literal< 0x400e1068, 0, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P1 = hr::field_mask_literal< 0x400e1068, 1, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P2 = hr::field_mask_literal< 0x400e1068, 2, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P3 = hr::field_mask_literal< 0x400e1068, 3, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P4 = hr::field_mask_literal< 0x400e1068, 4, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P5 = hr::field_mask_literal< 0x400e1068, 5, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P6 = hr::field_mask_literal< 0x400e1068, 6, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P7 = hr::field_mask_literal< 0x400e1068, 7, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P8 = hr::field_mask_literal< 0x400e1068, 8, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P9 = hr::field_mask_literal< 0x400e1068, 9, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P10 = hr::field_mask_literal< 0x400e1068, 10, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P11 = hr::field_mask_literal< 0x400e1068, 11, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P12 = hr::field_mask_literal< 0x400e1068, 12, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P13 = hr::field_mask_literal< 0x400e1068, 13, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P14 = hr::field_mask_literal< 0x400e1068, 14, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P15 = hr::field_mask_literal< 0x400e1068, 15, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P16 = hr::field_mask_literal< 0x400e1068, 16, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P17 = hr::field_mask_literal< 0x400e1068, 17, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P18 = hr::field_mask_literal< 0x400e1068, 18, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P19 = hr::field_mask_literal< 0x400e1068, 19, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P20 = hr::field_mask_literal< 0x400e1068, 20, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P21 = hr::field_mask_literal< 0x400e1068, 21, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P22 = hr::field_mask_literal< 0x400e1068, 22, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P23 = hr::field_mask_literal< 0x400e1068, 23, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P24 = hr::field_mask_literal< 0x400e1068, 24, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P25 = hr::field_mask_literal< 0x400e1068, 25, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P26 = hr::field_mask_literal< 0x400e1068, 26, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P27 = hr::field_mask_literal< 0x400e1068, 27, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P28 = hr::field_mask_literal< 0x400e1068, 28, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P29 = hr::field_mask_literal< 0x400e1068, 29, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P30 = hr::field_mask_literal< 0x400e1068, 30, 1 >();
   // Pull Up Status.
   constexpr auto PIOB_PUSR_P31 = hr::field_mask_literal< 0x400e1068, 31, 1 >();

// ABSR
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P0 = hr::field_mask_literal< 0x400e1070, 0, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P1 = hr::field_mask_literal< 0x400e1070, 1, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P2 = hr::field_mask_literal< 0x400e1070, 2, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P3 = hr::field_mask_literal< 0x400e1070, 3, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P4 = hr::field_mask_literal< 0x400e1070, 4, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P5 = hr::field_mask_literal< 0x400e1070, 5, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P6 = hr::field_mask_literal< 0x400e1070, 6, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P7 = hr::field_mask_literal< 0x400e1070, 7, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P8 = hr::field_mask_literal< 0x400e1070, 8, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P9 = hr::field_mask_literal< 0x400e1070, 9, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P10 = hr::field_mask_literal< 0x400e1070, 10, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P11 = hr::field_mask_literal< 0x400e1070, 11, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P12 = hr::field_mask_literal< 0x400e1070, 12, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P13 = hr::field_mask_literal< 0x400e1070, 13, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P14 = hr::field_mask_literal< 0x400e1070, 14, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P15 = hr::field_mask_literal< 0x400e1070, 15, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P16 = hr::field_mask_literal< 0x400e1070, 16, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P17 = hr::field_mask_literal< 0x400e1070, 17, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P18 = hr::field_mask_literal< 0x400e1070, 18, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P19 = hr::field_mask_literal< 0x400e1070, 19, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P20 = hr::field_mask_literal< 0x400e1070, 20, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P21 = hr::field_mask_literal< 0x400e1070, 21, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P22 = hr::field_mask_literal< 0x400e1070, 22, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P23 = hr::field_mask_literal< 0x400e1070, 23, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P24 = hr::field_mask_literal< 0x400e1070, 24, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P25 = hr::field_mask_literal< 0x400e1070, 25, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P26 = hr::field_mask_literal< 0x400e1070, 26, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P27 = hr::field_mask_literal< 0x400e1070, 27, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P28 = hr::field_mask_literal< 0x400e1070, 28, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P29 = hr::field_mask_literal< 0x400e1070, 29, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P30 = hr::field_mask_literal< 0x400e1070, 30, 1 >();
   // Peripheral A Select.
   constexpr auto PIOB_ABSR_P31 = hr::field_mask_literal< 0x400e1070, 31, 1 >();

// SCIFSR
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P0 = hr::field_mask_literal< 0x400e1080, 0, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P1 = hr::field_mask_literal< 0x400e1080, 1, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P2 = hr::field_mask_literal< 0x400e1080, 2, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P3 = hr::field_mask_literal< 0x400e1080, 3, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P4 = hr::field_mask_literal< 0x400e1080, 4, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P5 = hr::field_mask_literal< 0x400e1080, 5, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P6 = hr::field_mask_literal< 0x400e1080, 6, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P7 = hr::field_mask_literal< 0x400e1080, 7, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P8 = hr::field_mask_literal< 0x400e1080, 8, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P9 = hr::field_mask_literal< 0x400e1080, 9, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P10 = hr::field_mask_literal< 0x400e1080, 10, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P11 = hr::field_mask_literal< 0x400e1080, 11, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P12 = hr::field_mask_literal< 0x400e1080, 12, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P13 = hr::field_mask_literal< 0x400e1080, 13, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P14 = hr::field_mask_literal< 0x400e1080, 14, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P15 = hr::field_mask_literal< 0x400e1080, 15, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P16 = hr::field_mask_literal< 0x400e1080, 16, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P17 = hr::field_mask_literal< 0x400e1080, 17, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P18 = hr::field_mask_literal< 0x400e1080, 18, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P19 = hr::field_mask_literal< 0x400e1080, 19, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P20 = hr::field_mask_literal< 0x400e1080, 20, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P21 = hr::field_mask_literal< 0x400e1080, 21, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P22 = hr::field_mask_literal< 0x400e1080, 22, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P23 = hr::field_mask_literal< 0x400e1080, 23, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P24 = hr::field_mask_literal< 0x400e1080, 24, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P25 = hr::field_mask_literal< 0x400e1080, 25, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P26 = hr::field_mask_literal< 0x400e1080, 26, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P27 = hr::field_mask_literal< 0x400e1080, 27, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P28 = hr::field_mask_literal< 0x400e1080, 28, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P29 = hr::field_mask_literal< 0x400e1080, 29, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P30 = hr::field_mask_literal< 0x400e1080, 30, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOB_SCIFSR_P31 = hr::field_mask_literal< 0x400e1080, 31, 1 >();

// DIFSR
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P0 = hr::field_mask_literal< 0x400e1084, 0, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P1 = hr::field_mask_literal< 0x400e1084, 1, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P2 = hr::field_mask_literal< 0x400e1084, 2, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P3 = hr::field_mask_literal< 0x400e1084, 3, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P4 = hr::field_mask_literal< 0x400e1084, 4, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P5 = hr::field_mask_literal< 0x400e1084, 5, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P6 = hr::field_mask_literal< 0x400e1084, 6, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P7 = hr::field_mask_literal< 0x400e1084, 7, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P8 = hr::field_mask_literal< 0x400e1084, 8, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P9 = hr::field_mask_literal< 0x400e1084, 9, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P10 = hr::field_mask_literal< 0x400e1084, 10, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P11 = hr::field_mask_literal< 0x400e1084, 11, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P12 = hr::field_mask_literal< 0x400e1084, 12, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P13 = hr::field_mask_literal< 0x400e1084, 13, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P14 = hr::field_mask_literal< 0x400e1084, 14, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P15 = hr::field_mask_literal< 0x400e1084, 15, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P16 = hr::field_mask_literal< 0x400e1084, 16, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P17 = hr::field_mask_literal< 0x400e1084, 17, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P18 = hr::field_mask_literal< 0x400e1084, 18, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P19 = hr::field_mask_literal< 0x400e1084, 19, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P20 = hr::field_mask_literal< 0x400e1084, 20, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P21 = hr::field_mask_literal< 0x400e1084, 21, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P22 = hr::field_mask_literal< 0x400e1084, 22, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P23 = hr::field_mask_literal< 0x400e1084, 23, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P24 = hr::field_mask_literal< 0x400e1084, 24, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P25 = hr::field_mask_literal< 0x400e1084, 25, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P26 = hr::field_mask_literal< 0x400e1084, 26, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P27 = hr::field_mask_literal< 0x400e1084, 27, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P28 = hr::field_mask_literal< 0x400e1084, 28, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P29 = hr::field_mask_literal< 0x400e1084, 29, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P30 = hr::field_mask_literal< 0x400e1084, 30, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOB_DIFSR_P31 = hr::field_mask_literal< 0x400e1084, 31, 1 >();

// IFDGSR
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P0 = hr::field_mask_literal< 0x400e1088, 0, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P1 = hr::field_mask_literal< 0x400e1088, 1, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P2 = hr::field_mask_literal< 0x400e1088, 2, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P3 = hr::field_mask_literal< 0x400e1088, 3, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P4 = hr::field_mask_literal< 0x400e1088, 4, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P5 = hr::field_mask_literal< 0x400e1088, 5, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P6 = hr::field_mask_literal< 0x400e1088, 6, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P7 = hr::field_mask_literal< 0x400e1088, 7, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P8 = hr::field_mask_literal< 0x400e1088, 8, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P9 = hr::field_mask_literal< 0x400e1088, 9, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P10 = hr::field_mask_literal< 0x400e1088, 10, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P11 = hr::field_mask_literal< 0x400e1088, 11, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P12 = hr::field_mask_literal< 0x400e1088, 12, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P13 = hr::field_mask_literal< 0x400e1088, 13, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P14 = hr::field_mask_literal< 0x400e1088, 14, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P15 = hr::field_mask_literal< 0x400e1088, 15, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P16 = hr::field_mask_literal< 0x400e1088, 16, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P17 = hr::field_mask_literal< 0x400e1088, 17, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P18 = hr::field_mask_literal< 0x400e1088, 18, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P19 = hr::field_mask_literal< 0x400e1088, 19, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P20 = hr::field_mask_literal< 0x400e1088, 20, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P21 = hr::field_mask_literal< 0x400e1088, 21, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P22 = hr::field_mask_literal< 0x400e1088, 22, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P23 = hr::field_mask_literal< 0x400e1088, 23, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P24 = hr::field_mask_literal< 0x400e1088, 24, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P25 = hr::field_mask_literal< 0x400e1088, 25, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P26 = hr::field_mask_literal< 0x400e1088, 26, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P27 = hr::field_mask_literal< 0x400e1088, 27, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P28 = hr::field_mask_literal< 0x400e1088, 28, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P29 = hr::field_mask_literal< 0x400e1088, 29, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P30 = hr::field_mask_literal< 0x400e1088, 30, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOB_IFDGSR_P31 = hr::field_mask_literal< 0x400e1088, 31, 1 >();

// SCDR
   // Slow Clock Divider Selection for Debouncing
   constexpr auto PIOB_SCDR_DIV_Msk = hr::field_mask_literal< 0x400e108c, 0, 14 >();

// OWER
   // Output Write Enable.
   constexpr auto PIOB_OWER_P0 = hr::field_mask_literal< 0x400e10a0, 0, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P1 = hr::field_mask_literal< 0x400e10a0, 1, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P2 = hr::field_mask_literal< 0x400e10a0, 2, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P3 = hr::field_mask_literal< 0x400e10a0, 3, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P4 = hr::field_mask_literal< 0x400e10a0, 4, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P5 = hr::field_mask_literal< 0x400e10a0, 5, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P6 = hr::field_mask_literal< 0x400e10a0, 6, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P7 = hr::field_mask_literal< 0x400e10a0, 7, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P8 = hr::field_mask_literal< 0x400e10a0, 8, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P9 = hr::field_mask_literal< 0x400e10a0, 9, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P10 = hr::field_mask_literal< 0x400e10a0, 10, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P11 = hr::field_mask_literal< 0x400e10a0, 11, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P12 = hr::field_mask_literal< 0x400e10a0, 12, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P13 = hr::field_mask_literal< 0x400e10a0, 13, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P14 = hr::field_mask_literal< 0x400e10a0, 14, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P15 = hr::field_mask_literal< 0x400e10a0, 15, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P16 = hr::field_mask_literal< 0x400e10a0, 16, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P17 = hr::field_mask_literal< 0x400e10a0, 17, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P18 = hr::field_mask_literal< 0x400e10a0, 18, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P19 = hr::field_mask_literal< 0x400e10a0, 19, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P20 = hr::field_mask_literal< 0x400e10a0, 20, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P21 = hr::field_mask_literal< 0x400e10a0, 21, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P22 = hr::field_mask_literal< 0x400e10a0, 22, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P23 = hr::field_mask_literal< 0x400e10a0, 23, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P24 = hr::field_mask_literal< 0x400e10a0, 24, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P25 = hr::field_mask_literal< 0x400e10a0, 25, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P26 = hr::field_mask_literal< 0x400e10a0, 26, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P27 = hr::field_mask_literal< 0x400e10a0, 27, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P28 = hr::field_mask_literal< 0x400e10a0, 28, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P29 = hr::field_mask_literal< 0x400e10a0, 29, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P30 = hr::field_mask_literal< 0x400e10a0, 30, 1 >();
   // Output Write Enable.
   constexpr auto PIOB_OWER_P31 = hr::field_mask_literal< 0x400e10a0, 31, 1 >();

// OWDR
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P0 = hr::field_mask_literal< 0x400e10a4, 0, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P1 = hr::field_mask_literal< 0x400e10a4, 1, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P2 = hr::field_mask_literal< 0x400e10a4, 2, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P3 = hr::field_mask_literal< 0x400e10a4, 3, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P4 = hr::field_mask_literal< 0x400e10a4, 4, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P5 = hr::field_mask_literal< 0x400e10a4, 5, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P6 = hr::field_mask_literal< 0x400e10a4, 6, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P7 = hr::field_mask_literal< 0x400e10a4, 7, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P8 = hr::field_mask_literal< 0x400e10a4, 8, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P9 = hr::field_mask_literal< 0x400e10a4, 9, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P10 = hr::field_mask_literal< 0x400e10a4, 10, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P11 = hr::field_mask_literal< 0x400e10a4, 11, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P12 = hr::field_mask_literal< 0x400e10a4, 12, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P13 = hr::field_mask_literal< 0x400e10a4, 13, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P14 = hr::field_mask_literal< 0x400e10a4, 14, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P15 = hr::field_mask_literal< 0x400e10a4, 15, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P16 = hr::field_mask_literal< 0x400e10a4, 16, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P17 = hr::field_mask_literal< 0x400e10a4, 17, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P18 = hr::field_mask_literal< 0x400e10a4, 18, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P19 = hr::field_mask_literal< 0x400e10a4, 19, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P20 = hr::field_mask_literal< 0x400e10a4, 20, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P21 = hr::field_mask_literal< 0x400e10a4, 21, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P22 = hr::field_mask_literal< 0x400e10a4, 22, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P23 = hr::field_mask_literal< 0x400e10a4, 23, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P24 = hr::field_mask_literal< 0x400e10a4, 24, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P25 = hr::field_mask_literal< 0x400e10a4, 25, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P26 = hr::field_mask_literal< 0x400e10a4, 26, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P27 = hr::field_mask_literal< 0x400e10a4, 27, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P28 = hr::field_mask_literal< 0x400e10a4, 28, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P29 = hr::field_mask_literal< 0x400e10a4, 29, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P30 = hr::field_mask_literal< 0x400e10a4, 30, 1 >();
   // Output Write Disable.
   constexpr auto PIOB_OWDR_P31 = hr::field_mask_literal< 0x400e10a4, 31, 1 >();

// OWSR
   // Output Write Status.
   constexpr auto PIOB_OWSR_P0 = hr::field_mask_literal< 0x400e10a8, 0, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P1 = hr::field_mask_literal< 0x400e10a8, 1, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P2 = hr::field_mask_literal< 0x400e10a8, 2, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P3 = hr::field_mask_literal< 0x400e10a8, 3, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P4 = hr::field_mask_literal< 0x400e10a8, 4, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P5 = hr::field_mask_literal< 0x400e10a8, 5, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P6 = hr::field_mask_literal< 0x400e10a8, 6, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P7 = hr::field_mask_literal< 0x400e10a8, 7, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P8 = hr::field_mask_literal< 0x400e10a8, 8, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P9 = hr::field_mask_literal< 0x400e10a8, 9, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P10 = hr::field_mask_literal< 0x400e10a8, 10, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P11 = hr::field_mask_literal< 0x400e10a8, 11, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P12 = hr::field_mask_literal< 0x400e10a8, 12, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P13 = hr::field_mask_literal< 0x400e10a8, 13, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P14 = hr::field_mask_literal< 0x400e10a8, 14, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P15 = hr::field_mask_literal< 0x400e10a8, 15, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P16 = hr::field_mask_literal< 0x400e10a8, 16, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P17 = hr::field_mask_literal< 0x400e10a8, 17, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P18 = hr::field_mask_literal< 0x400e10a8, 18, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P19 = hr::field_mask_literal< 0x400e10a8, 19, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P20 = hr::field_mask_literal< 0x400e10a8, 20, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P21 = hr::field_mask_literal< 0x400e10a8, 21, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P22 = hr::field_mask_literal< 0x400e10a8, 22, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P23 = hr::field_mask_literal< 0x400e10a8, 23, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P24 = hr::field_mask_literal< 0x400e10a8, 24, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P25 = hr::field_mask_literal< 0x400e10a8, 25, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P26 = hr::field_mask_literal< 0x400e10a8, 26, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P27 = hr::field_mask_literal< 0x400e10a8, 27, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P28 = hr::field_mask_literal< 0x400e10a8, 28, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P29 = hr::field_mask_literal< 0x400e10a8, 29, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P30 = hr::field_mask_literal< 0x400e10a8, 30, 1 >();
   // Output Write Status.
   constexpr auto PIOB_OWSR_P31 = hr::field_mask_literal< 0x400e10a8, 31, 1 >();

// AIMER
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P0 = hr::field_mask_literal< 0x400e10b0, 0, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P1 = hr::field_mask_literal< 0x400e10b0, 1, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P2 = hr::field_mask_literal< 0x400e10b0, 2, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P3 = hr::field_mask_literal< 0x400e10b0, 3, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P4 = hr::field_mask_literal< 0x400e10b0, 4, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P5 = hr::field_mask_literal< 0x400e10b0, 5, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P6 = hr::field_mask_literal< 0x400e10b0, 6, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P7 = hr::field_mask_literal< 0x400e10b0, 7, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P8 = hr::field_mask_literal< 0x400e10b0, 8, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P9 = hr::field_mask_literal< 0x400e10b0, 9, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P10 = hr::field_mask_literal< 0x400e10b0, 10, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P11 = hr::field_mask_literal< 0x400e10b0, 11, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P12 = hr::field_mask_literal< 0x400e10b0, 12, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P13 = hr::field_mask_literal< 0x400e10b0, 13, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P14 = hr::field_mask_literal< 0x400e10b0, 14, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P15 = hr::field_mask_literal< 0x400e10b0, 15, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P16 = hr::field_mask_literal< 0x400e10b0, 16, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P17 = hr::field_mask_literal< 0x400e10b0, 17, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P18 = hr::field_mask_literal< 0x400e10b0, 18, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P19 = hr::field_mask_literal< 0x400e10b0, 19, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P20 = hr::field_mask_literal< 0x400e10b0, 20, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P21 = hr::field_mask_literal< 0x400e10b0, 21, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P22 = hr::field_mask_literal< 0x400e10b0, 22, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P23 = hr::field_mask_literal< 0x400e10b0, 23, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P24 = hr::field_mask_literal< 0x400e10b0, 24, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P25 = hr::field_mask_literal< 0x400e10b0, 25, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P26 = hr::field_mask_literal< 0x400e10b0, 26, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P27 = hr::field_mask_literal< 0x400e10b0, 27, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P28 = hr::field_mask_literal< 0x400e10b0, 28, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P29 = hr::field_mask_literal< 0x400e10b0, 29, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P30 = hr::field_mask_literal< 0x400e10b0, 30, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOB_AIMER_P31 = hr::field_mask_literal< 0x400e10b0, 31, 1 >();

// AIMDR
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P0 = hr::field_mask_literal< 0x400e10b4, 0, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P1 = hr::field_mask_literal< 0x400e10b4, 1, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P2 = hr::field_mask_literal< 0x400e10b4, 2, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P3 = hr::field_mask_literal< 0x400e10b4, 3, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P4 = hr::field_mask_literal< 0x400e10b4, 4, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P5 = hr::field_mask_literal< 0x400e10b4, 5, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P6 = hr::field_mask_literal< 0x400e10b4, 6, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P7 = hr::field_mask_literal< 0x400e10b4, 7, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P8 = hr::field_mask_literal< 0x400e10b4, 8, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P9 = hr::field_mask_literal< 0x400e10b4, 9, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P10 = hr::field_mask_literal< 0x400e10b4, 10, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P11 = hr::field_mask_literal< 0x400e10b4, 11, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P12 = hr::field_mask_literal< 0x400e10b4, 12, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P13 = hr::field_mask_literal< 0x400e10b4, 13, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P14 = hr::field_mask_literal< 0x400e10b4, 14, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P15 = hr::field_mask_literal< 0x400e10b4, 15, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P16 = hr::field_mask_literal< 0x400e10b4, 16, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P17 = hr::field_mask_literal< 0x400e10b4, 17, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P18 = hr::field_mask_literal< 0x400e10b4, 18, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P19 = hr::field_mask_literal< 0x400e10b4, 19, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P20 = hr::field_mask_literal< 0x400e10b4, 20, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P21 = hr::field_mask_literal< 0x400e10b4, 21, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P22 = hr::field_mask_literal< 0x400e10b4, 22, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P23 = hr::field_mask_literal< 0x400e10b4, 23, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P24 = hr::field_mask_literal< 0x400e10b4, 24, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P25 = hr::field_mask_literal< 0x400e10b4, 25, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P26 = hr::field_mask_literal< 0x400e10b4, 26, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P27 = hr::field_mask_literal< 0x400e10b4, 27, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P28 = hr::field_mask_literal< 0x400e10b4, 28, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P29 = hr::field_mask_literal< 0x400e10b4, 29, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P30 = hr::field_mask_literal< 0x400e10b4, 30, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOB_AIMDR_P31 = hr::field_mask_literal< 0x400e10b4, 31, 1 >();

// AIMMR
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P0 = hr::field_mask_literal< 0x400e10b8, 0, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P1 = hr::field_mask_literal< 0x400e10b8, 1, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P2 = hr::field_mask_literal< 0x400e10b8, 2, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P3 = hr::field_mask_literal< 0x400e10b8, 3, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P4 = hr::field_mask_literal< 0x400e10b8, 4, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P5 = hr::field_mask_literal< 0x400e10b8, 5, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P6 = hr::field_mask_literal< 0x400e10b8, 6, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P7 = hr::field_mask_literal< 0x400e10b8, 7, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P8 = hr::field_mask_literal< 0x400e10b8, 8, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P9 = hr::field_mask_literal< 0x400e10b8, 9, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P10 = hr::field_mask_literal< 0x400e10b8, 10, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P11 = hr::field_mask_literal< 0x400e10b8, 11, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P12 = hr::field_mask_literal< 0x400e10b8, 12, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P13 = hr::field_mask_literal< 0x400e10b8, 13, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P14 = hr::field_mask_literal< 0x400e10b8, 14, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P15 = hr::field_mask_literal< 0x400e10b8, 15, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P16 = hr::field_mask_literal< 0x400e10b8, 16, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P17 = hr::field_mask_literal< 0x400e10b8, 17, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P18 = hr::field_mask_literal< 0x400e10b8, 18, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P19 = hr::field_mask_literal< 0x400e10b8, 19, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P20 = hr::field_mask_literal< 0x400e10b8, 20, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P21 = hr::field_mask_literal< 0x400e10b8, 21, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P22 = hr::field_mask_literal< 0x400e10b8, 22, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P23 = hr::field_mask_literal< 0x400e10b8, 23, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P24 = hr::field_mask_literal< 0x400e10b8, 24, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P25 = hr::field_mask_literal< 0x400e10b8, 25, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P26 = hr::field_mask_literal< 0x400e10b8, 26, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P27 = hr::field_mask_literal< 0x400e10b8, 27, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P28 = hr::field_mask_literal< 0x400e10b8, 28, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P29 = hr::field_mask_literal< 0x400e10b8, 29, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P30 = hr::field_mask_literal< 0x400e10b8, 30, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOB_AIMMR_P31 = hr::field_mask_literal< 0x400e10b8, 31, 1 >();

// ESR
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P0 = hr::field_mask_literal< 0x400e10c0, 0, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P1 = hr::field_mask_literal< 0x400e10c0, 1, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P2 = hr::field_mask_literal< 0x400e10c0, 2, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P3 = hr::field_mask_literal< 0x400e10c0, 3, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P4 = hr::field_mask_literal< 0x400e10c0, 4, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P5 = hr::field_mask_literal< 0x400e10c0, 5, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P6 = hr::field_mask_literal< 0x400e10c0, 6, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P7 = hr::field_mask_literal< 0x400e10c0, 7, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P8 = hr::field_mask_literal< 0x400e10c0, 8, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P9 = hr::field_mask_literal< 0x400e10c0, 9, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P10 = hr::field_mask_literal< 0x400e10c0, 10, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P11 = hr::field_mask_literal< 0x400e10c0, 11, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P12 = hr::field_mask_literal< 0x400e10c0, 12, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P13 = hr::field_mask_literal< 0x400e10c0, 13, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P14 = hr::field_mask_literal< 0x400e10c0, 14, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P15 = hr::field_mask_literal< 0x400e10c0, 15, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P16 = hr::field_mask_literal< 0x400e10c0, 16, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P17 = hr::field_mask_literal< 0x400e10c0, 17, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P18 = hr::field_mask_literal< 0x400e10c0, 18, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P19 = hr::field_mask_literal< 0x400e10c0, 19, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P20 = hr::field_mask_literal< 0x400e10c0, 20, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P21 = hr::field_mask_literal< 0x400e10c0, 21, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P22 = hr::field_mask_literal< 0x400e10c0, 22, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P23 = hr::field_mask_literal< 0x400e10c0, 23, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P24 = hr::field_mask_literal< 0x400e10c0, 24, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P25 = hr::field_mask_literal< 0x400e10c0, 25, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P26 = hr::field_mask_literal< 0x400e10c0, 26, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P27 = hr::field_mask_literal< 0x400e10c0, 27, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P28 = hr::field_mask_literal< 0x400e10c0, 28, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P29 = hr::field_mask_literal< 0x400e10c0, 29, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P30 = hr::field_mask_literal< 0x400e10c0, 30, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOB_ESR_P31 = hr::field_mask_literal< 0x400e10c0, 31, 1 >();

// LSR
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P0 = hr::field_mask_literal< 0x400e10c4, 0, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P1 = hr::field_mask_literal< 0x400e10c4, 1, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P2 = hr::field_mask_literal< 0x400e10c4, 2, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P3 = hr::field_mask_literal< 0x400e10c4, 3, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P4 = hr::field_mask_literal< 0x400e10c4, 4, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P5 = hr::field_mask_literal< 0x400e10c4, 5, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P6 = hr::field_mask_literal< 0x400e10c4, 6, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P7 = hr::field_mask_literal< 0x400e10c4, 7, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P8 = hr::field_mask_literal< 0x400e10c4, 8, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P9 = hr::field_mask_literal< 0x400e10c4, 9, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P10 = hr::field_mask_literal< 0x400e10c4, 10, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P11 = hr::field_mask_literal< 0x400e10c4, 11, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P12 = hr::field_mask_literal< 0x400e10c4, 12, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P13 = hr::field_mask_literal< 0x400e10c4, 13, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P14 = hr::field_mask_literal< 0x400e10c4, 14, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P15 = hr::field_mask_literal< 0x400e10c4, 15, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P16 = hr::field_mask_literal< 0x400e10c4, 16, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P17 = hr::field_mask_literal< 0x400e10c4, 17, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P18 = hr::field_mask_literal< 0x400e10c4, 18, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P19 = hr::field_mask_literal< 0x400e10c4, 19, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P20 = hr::field_mask_literal< 0x400e10c4, 20, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P21 = hr::field_mask_literal< 0x400e10c4, 21, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P22 = hr::field_mask_literal< 0x400e10c4, 22, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P23 = hr::field_mask_literal< 0x400e10c4, 23, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P24 = hr::field_mask_literal< 0x400e10c4, 24, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P25 = hr::field_mask_literal< 0x400e10c4, 25, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P26 = hr::field_mask_literal< 0x400e10c4, 26, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P27 = hr::field_mask_literal< 0x400e10c4, 27, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P28 = hr::field_mask_literal< 0x400e10c4, 28, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P29 = hr::field_mask_literal< 0x400e10c4, 29, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P30 = hr::field_mask_literal< 0x400e10c4, 30, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOB_LSR_P31 = hr::field_mask_literal< 0x400e10c4, 31, 1 >();

// ELSR
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P0 = hr::field_mask_literal< 0x400e10c8, 0, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P1 = hr::field_mask_literal< 0x400e10c8, 1, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P2 = hr::field_mask_literal< 0x400e10c8, 2, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P3 = hr::field_mask_literal< 0x400e10c8, 3, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P4 = hr::field_mask_literal< 0x400e10c8, 4, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P5 = hr::field_mask_literal< 0x400e10c8, 5, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P6 = hr::field_mask_literal< 0x400e10c8, 6, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P7 = hr::field_mask_literal< 0x400e10c8, 7, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P8 = hr::field_mask_literal< 0x400e10c8, 8, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P9 = hr::field_mask_literal< 0x400e10c8, 9, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P10 = hr::field_mask_literal< 0x400e10c8, 10, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P11 = hr::field_mask_literal< 0x400e10c8, 11, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P12 = hr::field_mask_literal< 0x400e10c8, 12, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P13 = hr::field_mask_literal< 0x400e10c8, 13, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P14 = hr::field_mask_literal< 0x400e10c8, 14, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P15 = hr::field_mask_literal< 0x400e10c8, 15, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P16 = hr::field_mask_literal< 0x400e10c8, 16, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P17 = hr::field_mask_literal< 0x400e10c8, 17, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P18 = hr::field_mask_literal< 0x400e10c8, 18, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P19 = hr::field_mask_literal< 0x400e10c8, 19, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P20 = hr::field_mask_literal< 0x400e10c8, 20, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P21 = hr::field_mask_literal< 0x400e10c8, 21, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P22 = hr::field_mask_literal< 0x400e10c8, 22, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P23 = hr::field_mask_literal< 0x400e10c8, 23, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P24 = hr::field_mask_literal< 0x400e10c8, 24, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P25 = hr::field_mask_literal< 0x400e10c8, 25, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P26 = hr::field_mask_literal< 0x400e10c8, 26, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P27 = hr::field_mask_literal< 0x400e10c8, 27, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P28 = hr::field_mask_literal< 0x400e10c8, 28, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P29 = hr::field_mask_literal< 0x400e10c8, 29, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P30 = hr::field_mask_literal< 0x400e10c8, 30, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOB_ELSR_P31 = hr::field_mask_literal< 0x400e10c8, 31, 1 >();

// FELLSR
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P0 = hr::field_mask_literal< 0x400e10d0, 0, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P1 = hr::field_mask_literal< 0x400e10d0, 1, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P2 = hr::field_mask_literal< 0x400e10d0, 2, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P3 = hr::field_mask_literal< 0x400e10d0, 3, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P4 = hr::field_mask_literal< 0x400e10d0, 4, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P5 = hr::field_mask_literal< 0x400e10d0, 5, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P6 = hr::field_mask_literal< 0x400e10d0, 6, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P7 = hr::field_mask_literal< 0x400e10d0, 7, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P8 = hr::field_mask_literal< 0x400e10d0, 8, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P9 = hr::field_mask_literal< 0x400e10d0, 9, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P10 = hr::field_mask_literal< 0x400e10d0, 10, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P11 = hr::field_mask_literal< 0x400e10d0, 11, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P12 = hr::field_mask_literal< 0x400e10d0, 12, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P13 = hr::field_mask_literal< 0x400e10d0, 13, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P14 = hr::field_mask_literal< 0x400e10d0, 14, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P15 = hr::field_mask_literal< 0x400e10d0, 15, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P16 = hr::field_mask_literal< 0x400e10d0, 16, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P17 = hr::field_mask_literal< 0x400e10d0, 17, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P18 = hr::field_mask_literal< 0x400e10d0, 18, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P19 = hr::field_mask_literal< 0x400e10d0, 19, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P20 = hr::field_mask_literal< 0x400e10d0, 20, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P21 = hr::field_mask_literal< 0x400e10d0, 21, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P22 = hr::field_mask_literal< 0x400e10d0, 22, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P23 = hr::field_mask_literal< 0x400e10d0, 23, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P24 = hr::field_mask_literal< 0x400e10d0, 24, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P25 = hr::field_mask_literal< 0x400e10d0, 25, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P26 = hr::field_mask_literal< 0x400e10d0, 26, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P27 = hr::field_mask_literal< 0x400e10d0, 27, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P28 = hr::field_mask_literal< 0x400e10d0, 28, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P29 = hr::field_mask_literal< 0x400e10d0, 29, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P30 = hr::field_mask_literal< 0x400e10d0, 30, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOB_FELLSR_P31 = hr::field_mask_literal< 0x400e10d0, 31, 1 >();

// REHLSR
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P0 = hr::field_mask_literal< 0x400e10d4, 0, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P1 = hr::field_mask_literal< 0x400e10d4, 1, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P2 = hr::field_mask_literal< 0x400e10d4, 2, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P3 = hr::field_mask_literal< 0x400e10d4, 3, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P4 = hr::field_mask_literal< 0x400e10d4, 4, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P5 = hr::field_mask_literal< 0x400e10d4, 5, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P6 = hr::field_mask_literal< 0x400e10d4, 6, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P7 = hr::field_mask_literal< 0x400e10d4, 7, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P8 = hr::field_mask_literal< 0x400e10d4, 8, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P9 = hr::field_mask_literal< 0x400e10d4, 9, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P10 = hr::field_mask_literal< 0x400e10d4, 10, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P11 = hr::field_mask_literal< 0x400e10d4, 11, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P12 = hr::field_mask_literal< 0x400e10d4, 12, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P13 = hr::field_mask_literal< 0x400e10d4, 13, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P14 = hr::field_mask_literal< 0x400e10d4, 14, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P15 = hr::field_mask_literal< 0x400e10d4, 15, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P16 = hr::field_mask_literal< 0x400e10d4, 16, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P17 = hr::field_mask_literal< 0x400e10d4, 17, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P18 = hr::field_mask_literal< 0x400e10d4, 18, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P19 = hr::field_mask_literal< 0x400e10d4, 19, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P20 = hr::field_mask_literal< 0x400e10d4, 20, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P21 = hr::field_mask_literal< 0x400e10d4, 21, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P22 = hr::field_mask_literal< 0x400e10d4, 22, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P23 = hr::field_mask_literal< 0x400e10d4, 23, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P24 = hr::field_mask_literal< 0x400e10d4, 24, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P25 = hr::field_mask_literal< 0x400e10d4, 25, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P26 = hr::field_mask_literal< 0x400e10d4, 26, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P27 = hr::field_mask_literal< 0x400e10d4, 27, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P28 = hr::field_mask_literal< 0x400e10d4, 28, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P29 = hr::field_mask_literal< 0x400e10d4, 29, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P30 = hr::field_mask_literal< 0x400e10d4, 30, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOB_REHLSR_P31 = hr::field_mask_literal< 0x400e10d4, 31, 1 >();

// FRLHSR
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P0 = hr::field_mask_literal< 0x400e10d8, 0, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P1 = hr::field_mask_literal< 0x400e10d8, 1, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P2 = hr::field_mask_literal< 0x400e10d8, 2, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P3 = hr::field_mask_literal< 0x400e10d8, 3, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P4 = hr::field_mask_literal< 0x400e10d8, 4, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P5 = hr::field_mask_literal< 0x400e10d8, 5, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P6 = hr::field_mask_literal< 0x400e10d8, 6, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P7 = hr::field_mask_literal< 0x400e10d8, 7, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P8 = hr::field_mask_literal< 0x400e10d8, 8, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P9 = hr::field_mask_literal< 0x400e10d8, 9, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P10 = hr::field_mask_literal< 0x400e10d8, 10, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P11 = hr::field_mask_literal< 0x400e10d8, 11, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P12 = hr::field_mask_literal< 0x400e10d8, 12, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P13 = hr::field_mask_literal< 0x400e10d8, 13, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P14 = hr::field_mask_literal< 0x400e10d8, 14, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P15 = hr::field_mask_literal< 0x400e10d8, 15, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P16 = hr::field_mask_literal< 0x400e10d8, 16, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P17 = hr::field_mask_literal< 0x400e10d8, 17, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P18 = hr::field_mask_literal< 0x400e10d8, 18, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P19 = hr::field_mask_literal< 0x400e10d8, 19, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P20 = hr::field_mask_literal< 0x400e10d8, 20, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P21 = hr::field_mask_literal< 0x400e10d8, 21, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P22 = hr::field_mask_literal< 0x400e10d8, 22, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P23 = hr::field_mask_literal< 0x400e10d8, 23, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P24 = hr::field_mask_literal< 0x400e10d8, 24, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P25 = hr::field_mask_literal< 0x400e10d8, 25, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P26 = hr::field_mask_literal< 0x400e10d8, 26, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P27 = hr::field_mask_literal< 0x400e10d8, 27, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P28 = hr::field_mask_literal< 0x400e10d8, 28, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P29 = hr::field_mask_literal< 0x400e10d8, 29, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P30 = hr::field_mask_literal< 0x400e10d8, 30, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOB_FRLHSR_P31 = hr::field_mask_literal< 0x400e10d8, 31, 1 >();

// LOCKSR
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P0 = hr::field_mask_literal< 0x400e10e0, 0, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P1 = hr::field_mask_literal< 0x400e10e0, 1, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P2 = hr::field_mask_literal< 0x400e10e0, 2, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P3 = hr::field_mask_literal< 0x400e10e0, 3, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P4 = hr::field_mask_literal< 0x400e10e0, 4, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P5 = hr::field_mask_literal< 0x400e10e0, 5, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P6 = hr::field_mask_literal< 0x400e10e0, 6, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P7 = hr::field_mask_literal< 0x400e10e0, 7, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P8 = hr::field_mask_literal< 0x400e10e0, 8, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P9 = hr::field_mask_literal< 0x400e10e0, 9, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P10 = hr::field_mask_literal< 0x400e10e0, 10, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P11 = hr::field_mask_literal< 0x400e10e0, 11, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P12 = hr::field_mask_literal< 0x400e10e0, 12, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P13 = hr::field_mask_literal< 0x400e10e0, 13, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P14 = hr::field_mask_literal< 0x400e10e0, 14, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P15 = hr::field_mask_literal< 0x400e10e0, 15, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P16 = hr::field_mask_literal< 0x400e10e0, 16, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P17 = hr::field_mask_literal< 0x400e10e0, 17, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P18 = hr::field_mask_literal< 0x400e10e0, 18, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P19 = hr::field_mask_literal< 0x400e10e0, 19, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P20 = hr::field_mask_literal< 0x400e10e0, 20, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P21 = hr::field_mask_literal< 0x400e10e0, 21, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P22 = hr::field_mask_literal< 0x400e10e0, 22, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P23 = hr::field_mask_literal< 0x400e10e0, 23, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P24 = hr::field_mask_literal< 0x400e10e0, 24, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P25 = hr::field_mask_literal< 0x400e10e0, 25, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P26 = hr::field_mask_literal< 0x400e10e0, 26, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P27 = hr::field_mask_literal< 0x400e10e0, 27, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P28 = hr::field_mask_literal< 0x400e10e0, 28, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P29 = hr::field_mask_literal< 0x400e10e0, 29, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P30 = hr::field_mask_literal< 0x400e10e0, 30, 1 >();
   // Lock Status.
   constexpr auto PIOB_LOCKSR_P31 = hr::field_mask_literal< 0x400e10e0, 31, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto PIOB_WPMR_WPEN = hr::field_mask_literal< 0x400e10e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto PIOB_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e10e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto PIOB_WPSR_WPVS = hr::field_mask_literal< 0x400e10e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto PIOB_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400e10e8, 8, 16 >();

// =============================================================================
//
// PIOC
// base address = 0x400e1200
// Parallel Input/Output Controller C
//
// =============================================================================

struct Pioc {
   hr::hardware_register<0x400e1200> PER;
   hr::hardware_register<0x400e1204> PDR;
   hr::hardware_register<0x400e1208> PSR;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x400e1210> OER;
   hr::hardware_register<0x400e1214> ODR;
   hr::hardware_register<0x400e1218> OSR;
   hr::reserved< 0x1C, 1 > _reserved_at_0x1C;
   hr::hardware_register<0x400e1220> IFER;
   hr::hardware_register<0x400e1224> IFDR;
   hr::hardware_register<0x400e1228> IFSR;
   hr::reserved< 0x2C, 1 > _reserved_at_0x2C;
   hr::hardware_register<0x400e1230> SODR;
   hr::hardware_register<0x400e1234> CODR;
   hr::hardware_register<0x400e1238> ODSR;
   hr::hardware_register<0x400e123c> PDSR;
   hr::hardware_register<0x400e1240> IER;
   hr::hardware_register<0x400e1244> IDR;
   hr::hardware_register<0x400e1248> IMR;
   hr::hardware_register<0x400e124c> ISR;
   hr::hardware_register<0x400e1250> MDER;
   hr::hardware_register<0x400e1254> MDDR;
   hr::hardware_register<0x400e1258> MDSR;
   hr::reserved< 0x5C, 1 > _reserved_at_0x5C;
   hr::hardware_register<0x400e1260> PUDR;
   hr::hardware_register<0x400e1264> PUER;
   hr::hardware_register<0x400e1268> PUSR;
   hr::reserved< 0x6C, 1 > _reserved_at_0x6C;
   hr::hardware_register<0x400e1270> ABSR;
   hr::reserved< 0x74, 3 > _reserved_at_0x74;
   hr::hardware_register<0x400e1280> SCIFSR;
   hr::hardware_register<0x400e1284> DIFSR;
   hr::hardware_register<0x400e1288> IFDGSR;
   hr::hardware_register<0x400e128c> SCDR;
   hr::reserved< 0x90, 4 > _reserved_at_0x90;
   hr::hardware_register<0x400e12a0> OWER;
   hr::hardware_register<0x400e12a4> OWDR;
   hr::hardware_register<0x400e12a8> OWSR;
   hr::reserved< 0xAC, 1 > _reserved_at_0xAC;
   hr::hardware_register<0x400e12b0> AIMER;
   hr::hardware_register<0x400e12b4> AIMDR;
   hr::hardware_register<0x400e12b8> AIMMR;
   hr::reserved< 0xBC, 1 > _reserved_at_0xBC;
   hr::hardware_register<0x400e12c0> ESR;
   hr::hardware_register<0x400e12c4> LSR;
   hr::hardware_register<0x400e12c8> ELSR;
   hr::reserved< 0xCC, 1 > _reserved_at_0xCC;
   hr::hardware_register<0x400e12d0> FELLSR;
   hr::hardware_register<0x400e12d4> REHLSR;
   hr::hardware_register<0x400e12d8> FRLHSR;
   hr::reserved< 0xDC, 1 > _reserved_at_0xDC;
   hr::hardware_register<0x400e12e0> LOCKSR;
   hr::hardware_register<0x400e12e4> WPMR;
   hr::hardware_register<0x400e12e8> WPSR;
};

#define PIOC ( ( Pioc * ) 0x400e1200 )

// PER
   // PIO Enable
   constexpr auto PIOC_PER_P0 = hr::field_mask_literal< 0x400e1200, 0, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P1 = hr::field_mask_literal< 0x400e1200, 1, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P2 = hr::field_mask_literal< 0x400e1200, 2, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P3 = hr::field_mask_literal< 0x400e1200, 3, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P4 = hr::field_mask_literal< 0x400e1200, 4, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P5 = hr::field_mask_literal< 0x400e1200, 5, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P6 = hr::field_mask_literal< 0x400e1200, 6, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P7 = hr::field_mask_literal< 0x400e1200, 7, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P8 = hr::field_mask_literal< 0x400e1200, 8, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P9 = hr::field_mask_literal< 0x400e1200, 9, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P10 = hr::field_mask_literal< 0x400e1200, 10, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P11 = hr::field_mask_literal< 0x400e1200, 11, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P12 = hr::field_mask_literal< 0x400e1200, 12, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P13 = hr::field_mask_literal< 0x400e1200, 13, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P14 = hr::field_mask_literal< 0x400e1200, 14, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P15 = hr::field_mask_literal< 0x400e1200, 15, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P16 = hr::field_mask_literal< 0x400e1200, 16, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P17 = hr::field_mask_literal< 0x400e1200, 17, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P18 = hr::field_mask_literal< 0x400e1200, 18, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P19 = hr::field_mask_literal< 0x400e1200, 19, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P20 = hr::field_mask_literal< 0x400e1200, 20, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P21 = hr::field_mask_literal< 0x400e1200, 21, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P22 = hr::field_mask_literal< 0x400e1200, 22, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P23 = hr::field_mask_literal< 0x400e1200, 23, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P24 = hr::field_mask_literal< 0x400e1200, 24, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P25 = hr::field_mask_literal< 0x400e1200, 25, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P26 = hr::field_mask_literal< 0x400e1200, 26, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P27 = hr::field_mask_literal< 0x400e1200, 27, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P28 = hr::field_mask_literal< 0x400e1200, 28, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P29 = hr::field_mask_literal< 0x400e1200, 29, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P30 = hr::field_mask_literal< 0x400e1200, 30, 1 >();
   // PIO Enable
   constexpr auto PIOC_PER_P31 = hr::field_mask_literal< 0x400e1200, 31, 1 >();

// PDR
   // PIO Disable
   constexpr auto PIOC_PDR_P0 = hr::field_mask_literal< 0x400e1204, 0, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P1 = hr::field_mask_literal< 0x400e1204, 1, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P2 = hr::field_mask_literal< 0x400e1204, 2, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P3 = hr::field_mask_literal< 0x400e1204, 3, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P4 = hr::field_mask_literal< 0x400e1204, 4, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P5 = hr::field_mask_literal< 0x400e1204, 5, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P6 = hr::field_mask_literal< 0x400e1204, 6, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P7 = hr::field_mask_literal< 0x400e1204, 7, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P8 = hr::field_mask_literal< 0x400e1204, 8, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P9 = hr::field_mask_literal< 0x400e1204, 9, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P10 = hr::field_mask_literal< 0x400e1204, 10, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P11 = hr::field_mask_literal< 0x400e1204, 11, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P12 = hr::field_mask_literal< 0x400e1204, 12, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P13 = hr::field_mask_literal< 0x400e1204, 13, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P14 = hr::field_mask_literal< 0x400e1204, 14, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P15 = hr::field_mask_literal< 0x400e1204, 15, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P16 = hr::field_mask_literal< 0x400e1204, 16, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P17 = hr::field_mask_literal< 0x400e1204, 17, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P18 = hr::field_mask_literal< 0x400e1204, 18, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P19 = hr::field_mask_literal< 0x400e1204, 19, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P20 = hr::field_mask_literal< 0x400e1204, 20, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P21 = hr::field_mask_literal< 0x400e1204, 21, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P22 = hr::field_mask_literal< 0x400e1204, 22, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P23 = hr::field_mask_literal< 0x400e1204, 23, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P24 = hr::field_mask_literal< 0x400e1204, 24, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P25 = hr::field_mask_literal< 0x400e1204, 25, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P26 = hr::field_mask_literal< 0x400e1204, 26, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P27 = hr::field_mask_literal< 0x400e1204, 27, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P28 = hr::field_mask_literal< 0x400e1204, 28, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P29 = hr::field_mask_literal< 0x400e1204, 29, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P30 = hr::field_mask_literal< 0x400e1204, 30, 1 >();
   // PIO Disable
   constexpr auto PIOC_PDR_P31 = hr::field_mask_literal< 0x400e1204, 31, 1 >();

// PSR
   // PIO Status
   constexpr auto PIOC_PSR_P0 = hr::field_mask_literal< 0x400e1208, 0, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P1 = hr::field_mask_literal< 0x400e1208, 1, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P2 = hr::field_mask_literal< 0x400e1208, 2, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P3 = hr::field_mask_literal< 0x400e1208, 3, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P4 = hr::field_mask_literal< 0x400e1208, 4, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P5 = hr::field_mask_literal< 0x400e1208, 5, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P6 = hr::field_mask_literal< 0x400e1208, 6, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P7 = hr::field_mask_literal< 0x400e1208, 7, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P8 = hr::field_mask_literal< 0x400e1208, 8, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P9 = hr::field_mask_literal< 0x400e1208, 9, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P10 = hr::field_mask_literal< 0x400e1208, 10, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P11 = hr::field_mask_literal< 0x400e1208, 11, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P12 = hr::field_mask_literal< 0x400e1208, 12, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P13 = hr::field_mask_literal< 0x400e1208, 13, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P14 = hr::field_mask_literal< 0x400e1208, 14, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P15 = hr::field_mask_literal< 0x400e1208, 15, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P16 = hr::field_mask_literal< 0x400e1208, 16, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P17 = hr::field_mask_literal< 0x400e1208, 17, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P18 = hr::field_mask_literal< 0x400e1208, 18, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P19 = hr::field_mask_literal< 0x400e1208, 19, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P20 = hr::field_mask_literal< 0x400e1208, 20, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P21 = hr::field_mask_literal< 0x400e1208, 21, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P22 = hr::field_mask_literal< 0x400e1208, 22, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P23 = hr::field_mask_literal< 0x400e1208, 23, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P24 = hr::field_mask_literal< 0x400e1208, 24, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P25 = hr::field_mask_literal< 0x400e1208, 25, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P26 = hr::field_mask_literal< 0x400e1208, 26, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P27 = hr::field_mask_literal< 0x400e1208, 27, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P28 = hr::field_mask_literal< 0x400e1208, 28, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P29 = hr::field_mask_literal< 0x400e1208, 29, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P30 = hr::field_mask_literal< 0x400e1208, 30, 1 >();
   // PIO Status
   constexpr auto PIOC_PSR_P31 = hr::field_mask_literal< 0x400e1208, 31, 1 >();

// OER
   // Output Enable
   constexpr auto PIOC_OER_P0 = hr::field_mask_literal< 0x400e1210, 0, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P1 = hr::field_mask_literal< 0x400e1210, 1, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P2 = hr::field_mask_literal< 0x400e1210, 2, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P3 = hr::field_mask_literal< 0x400e1210, 3, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P4 = hr::field_mask_literal< 0x400e1210, 4, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P5 = hr::field_mask_literal< 0x400e1210, 5, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P6 = hr::field_mask_literal< 0x400e1210, 6, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P7 = hr::field_mask_literal< 0x400e1210, 7, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P8 = hr::field_mask_literal< 0x400e1210, 8, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P9 = hr::field_mask_literal< 0x400e1210, 9, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P10 = hr::field_mask_literal< 0x400e1210, 10, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P11 = hr::field_mask_literal< 0x400e1210, 11, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P12 = hr::field_mask_literal< 0x400e1210, 12, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P13 = hr::field_mask_literal< 0x400e1210, 13, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P14 = hr::field_mask_literal< 0x400e1210, 14, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P15 = hr::field_mask_literal< 0x400e1210, 15, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P16 = hr::field_mask_literal< 0x400e1210, 16, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P17 = hr::field_mask_literal< 0x400e1210, 17, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P18 = hr::field_mask_literal< 0x400e1210, 18, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P19 = hr::field_mask_literal< 0x400e1210, 19, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P20 = hr::field_mask_literal< 0x400e1210, 20, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P21 = hr::field_mask_literal< 0x400e1210, 21, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P22 = hr::field_mask_literal< 0x400e1210, 22, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P23 = hr::field_mask_literal< 0x400e1210, 23, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P24 = hr::field_mask_literal< 0x400e1210, 24, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P25 = hr::field_mask_literal< 0x400e1210, 25, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P26 = hr::field_mask_literal< 0x400e1210, 26, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P27 = hr::field_mask_literal< 0x400e1210, 27, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P28 = hr::field_mask_literal< 0x400e1210, 28, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P29 = hr::field_mask_literal< 0x400e1210, 29, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P30 = hr::field_mask_literal< 0x400e1210, 30, 1 >();
   // Output Enable
   constexpr auto PIOC_OER_P31 = hr::field_mask_literal< 0x400e1210, 31, 1 >();

// ODR
   // Output Disable
   constexpr auto PIOC_ODR_P0 = hr::field_mask_literal< 0x400e1214, 0, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P1 = hr::field_mask_literal< 0x400e1214, 1, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P2 = hr::field_mask_literal< 0x400e1214, 2, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P3 = hr::field_mask_literal< 0x400e1214, 3, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P4 = hr::field_mask_literal< 0x400e1214, 4, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P5 = hr::field_mask_literal< 0x400e1214, 5, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P6 = hr::field_mask_literal< 0x400e1214, 6, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P7 = hr::field_mask_literal< 0x400e1214, 7, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P8 = hr::field_mask_literal< 0x400e1214, 8, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P9 = hr::field_mask_literal< 0x400e1214, 9, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P10 = hr::field_mask_literal< 0x400e1214, 10, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P11 = hr::field_mask_literal< 0x400e1214, 11, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P12 = hr::field_mask_literal< 0x400e1214, 12, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P13 = hr::field_mask_literal< 0x400e1214, 13, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P14 = hr::field_mask_literal< 0x400e1214, 14, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P15 = hr::field_mask_literal< 0x400e1214, 15, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P16 = hr::field_mask_literal< 0x400e1214, 16, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P17 = hr::field_mask_literal< 0x400e1214, 17, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P18 = hr::field_mask_literal< 0x400e1214, 18, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P19 = hr::field_mask_literal< 0x400e1214, 19, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P20 = hr::field_mask_literal< 0x400e1214, 20, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P21 = hr::field_mask_literal< 0x400e1214, 21, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P22 = hr::field_mask_literal< 0x400e1214, 22, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P23 = hr::field_mask_literal< 0x400e1214, 23, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P24 = hr::field_mask_literal< 0x400e1214, 24, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P25 = hr::field_mask_literal< 0x400e1214, 25, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P26 = hr::field_mask_literal< 0x400e1214, 26, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P27 = hr::field_mask_literal< 0x400e1214, 27, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P28 = hr::field_mask_literal< 0x400e1214, 28, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P29 = hr::field_mask_literal< 0x400e1214, 29, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P30 = hr::field_mask_literal< 0x400e1214, 30, 1 >();
   // Output Disable
   constexpr auto PIOC_ODR_P31 = hr::field_mask_literal< 0x400e1214, 31, 1 >();

// OSR
   // Output Status
   constexpr auto PIOC_OSR_P0 = hr::field_mask_literal< 0x400e1218, 0, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P1 = hr::field_mask_literal< 0x400e1218, 1, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P2 = hr::field_mask_literal< 0x400e1218, 2, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P3 = hr::field_mask_literal< 0x400e1218, 3, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P4 = hr::field_mask_literal< 0x400e1218, 4, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P5 = hr::field_mask_literal< 0x400e1218, 5, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P6 = hr::field_mask_literal< 0x400e1218, 6, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P7 = hr::field_mask_literal< 0x400e1218, 7, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P8 = hr::field_mask_literal< 0x400e1218, 8, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P9 = hr::field_mask_literal< 0x400e1218, 9, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P10 = hr::field_mask_literal< 0x400e1218, 10, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P11 = hr::field_mask_literal< 0x400e1218, 11, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P12 = hr::field_mask_literal< 0x400e1218, 12, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P13 = hr::field_mask_literal< 0x400e1218, 13, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P14 = hr::field_mask_literal< 0x400e1218, 14, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P15 = hr::field_mask_literal< 0x400e1218, 15, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P16 = hr::field_mask_literal< 0x400e1218, 16, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P17 = hr::field_mask_literal< 0x400e1218, 17, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P18 = hr::field_mask_literal< 0x400e1218, 18, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P19 = hr::field_mask_literal< 0x400e1218, 19, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P20 = hr::field_mask_literal< 0x400e1218, 20, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P21 = hr::field_mask_literal< 0x400e1218, 21, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P22 = hr::field_mask_literal< 0x400e1218, 22, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P23 = hr::field_mask_literal< 0x400e1218, 23, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P24 = hr::field_mask_literal< 0x400e1218, 24, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P25 = hr::field_mask_literal< 0x400e1218, 25, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P26 = hr::field_mask_literal< 0x400e1218, 26, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P27 = hr::field_mask_literal< 0x400e1218, 27, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P28 = hr::field_mask_literal< 0x400e1218, 28, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P29 = hr::field_mask_literal< 0x400e1218, 29, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P30 = hr::field_mask_literal< 0x400e1218, 30, 1 >();
   // Output Status
   constexpr auto PIOC_OSR_P31 = hr::field_mask_literal< 0x400e1218, 31, 1 >();

// IFER
   // Input Filter Enable
   constexpr auto PIOC_IFER_P0 = hr::field_mask_literal< 0x400e1220, 0, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P1 = hr::field_mask_literal< 0x400e1220, 1, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P2 = hr::field_mask_literal< 0x400e1220, 2, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P3 = hr::field_mask_literal< 0x400e1220, 3, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P4 = hr::field_mask_literal< 0x400e1220, 4, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P5 = hr::field_mask_literal< 0x400e1220, 5, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P6 = hr::field_mask_literal< 0x400e1220, 6, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P7 = hr::field_mask_literal< 0x400e1220, 7, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P8 = hr::field_mask_literal< 0x400e1220, 8, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P9 = hr::field_mask_literal< 0x400e1220, 9, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P10 = hr::field_mask_literal< 0x400e1220, 10, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P11 = hr::field_mask_literal< 0x400e1220, 11, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P12 = hr::field_mask_literal< 0x400e1220, 12, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P13 = hr::field_mask_literal< 0x400e1220, 13, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P14 = hr::field_mask_literal< 0x400e1220, 14, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P15 = hr::field_mask_literal< 0x400e1220, 15, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P16 = hr::field_mask_literal< 0x400e1220, 16, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P17 = hr::field_mask_literal< 0x400e1220, 17, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P18 = hr::field_mask_literal< 0x400e1220, 18, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P19 = hr::field_mask_literal< 0x400e1220, 19, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P20 = hr::field_mask_literal< 0x400e1220, 20, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P21 = hr::field_mask_literal< 0x400e1220, 21, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P22 = hr::field_mask_literal< 0x400e1220, 22, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P23 = hr::field_mask_literal< 0x400e1220, 23, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P24 = hr::field_mask_literal< 0x400e1220, 24, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P25 = hr::field_mask_literal< 0x400e1220, 25, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P26 = hr::field_mask_literal< 0x400e1220, 26, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P27 = hr::field_mask_literal< 0x400e1220, 27, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P28 = hr::field_mask_literal< 0x400e1220, 28, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P29 = hr::field_mask_literal< 0x400e1220, 29, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P30 = hr::field_mask_literal< 0x400e1220, 30, 1 >();
   // Input Filter Enable
   constexpr auto PIOC_IFER_P31 = hr::field_mask_literal< 0x400e1220, 31, 1 >();

// IFDR
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P0 = hr::field_mask_literal< 0x400e1224, 0, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P1 = hr::field_mask_literal< 0x400e1224, 1, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P2 = hr::field_mask_literal< 0x400e1224, 2, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P3 = hr::field_mask_literal< 0x400e1224, 3, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P4 = hr::field_mask_literal< 0x400e1224, 4, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P5 = hr::field_mask_literal< 0x400e1224, 5, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P6 = hr::field_mask_literal< 0x400e1224, 6, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P7 = hr::field_mask_literal< 0x400e1224, 7, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P8 = hr::field_mask_literal< 0x400e1224, 8, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P9 = hr::field_mask_literal< 0x400e1224, 9, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P10 = hr::field_mask_literal< 0x400e1224, 10, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P11 = hr::field_mask_literal< 0x400e1224, 11, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P12 = hr::field_mask_literal< 0x400e1224, 12, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P13 = hr::field_mask_literal< 0x400e1224, 13, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P14 = hr::field_mask_literal< 0x400e1224, 14, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P15 = hr::field_mask_literal< 0x400e1224, 15, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P16 = hr::field_mask_literal< 0x400e1224, 16, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P17 = hr::field_mask_literal< 0x400e1224, 17, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P18 = hr::field_mask_literal< 0x400e1224, 18, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P19 = hr::field_mask_literal< 0x400e1224, 19, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P20 = hr::field_mask_literal< 0x400e1224, 20, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P21 = hr::field_mask_literal< 0x400e1224, 21, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P22 = hr::field_mask_literal< 0x400e1224, 22, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P23 = hr::field_mask_literal< 0x400e1224, 23, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P24 = hr::field_mask_literal< 0x400e1224, 24, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P25 = hr::field_mask_literal< 0x400e1224, 25, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P26 = hr::field_mask_literal< 0x400e1224, 26, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P27 = hr::field_mask_literal< 0x400e1224, 27, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P28 = hr::field_mask_literal< 0x400e1224, 28, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P29 = hr::field_mask_literal< 0x400e1224, 29, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P30 = hr::field_mask_literal< 0x400e1224, 30, 1 >();
   // Input Filter Disable
   constexpr auto PIOC_IFDR_P31 = hr::field_mask_literal< 0x400e1224, 31, 1 >();

// IFSR
   // Input Filer Status
   constexpr auto PIOC_IFSR_P0 = hr::field_mask_literal< 0x400e1228, 0, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P1 = hr::field_mask_literal< 0x400e1228, 1, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P2 = hr::field_mask_literal< 0x400e1228, 2, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P3 = hr::field_mask_literal< 0x400e1228, 3, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P4 = hr::field_mask_literal< 0x400e1228, 4, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P5 = hr::field_mask_literal< 0x400e1228, 5, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P6 = hr::field_mask_literal< 0x400e1228, 6, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P7 = hr::field_mask_literal< 0x400e1228, 7, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P8 = hr::field_mask_literal< 0x400e1228, 8, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P9 = hr::field_mask_literal< 0x400e1228, 9, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P10 = hr::field_mask_literal< 0x400e1228, 10, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P11 = hr::field_mask_literal< 0x400e1228, 11, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P12 = hr::field_mask_literal< 0x400e1228, 12, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P13 = hr::field_mask_literal< 0x400e1228, 13, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P14 = hr::field_mask_literal< 0x400e1228, 14, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P15 = hr::field_mask_literal< 0x400e1228, 15, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P16 = hr::field_mask_literal< 0x400e1228, 16, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P17 = hr::field_mask_literal< 0x400e1228, 17, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P18 = hr::field_mask_literal< 0x400e1228, 18, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P19 = hr::field_mask_literal< 0x400e1228, 19, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P20 = hr::field_mask_literal< 0x400e1228, 20, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P21 = hr::field_mask_literal< 0x400e1228, 21, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P22 = hr::field_mask_literal< 0x400e1228, 22, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P23 = hr::field_mask_literal< 0x400e1228, 23, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P24 = hr::field_mask_literal< 0x400e1228, 24, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P25 = hr::field_mask_literal< 0x400e1228, 25, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P26 = hr::field_mask_literal< 0x400e1228, 26, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P27 = hr::field_mask_literal< 0x400e1228, 27, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P28 = hr::field_mask_literal< 0x400e1228, 28, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P29 = hr::field_mask_literal< 0x400e1228, 29, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P30 = hr::field_mask_literal< 0x400e1228, 30, 1 >();
   // Input Filer Status
   constexpr auto PIOC_IFSR_P31 = hr::field_mask_literal< 0x400e1228, 31, 1 >();

// SODR
   // Set Output Data
   constexpr auto PIOC_SODR_P0 = hr::field_mask_literal< 0x400e1230, 0, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P1 = hr::field_mask_literal< 0x400e1230, 1, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P2 = hr::field_mask_literal< 0x400e1230, 2, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P3 = hr::field_mask_literal< 0x400e1230, 3, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P4 = hr::field_mask_literal< 0x400e1230, 4, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P5 = hr::field_mask_literal< 0x400e1230, 5, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P6 = hr::field_mask_literal< 0x400e1230, 6, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P7 = hr::field_mask_literal< 0x400e1230, 7, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P8 = hr::field_mask_literal< 0x400e1230, 8, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P9 = hr::field_mask_literal< 0x400e1230, 9, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P10 = hr::field_mask_literal< 0x400e1230, 10, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P11 = hr::field_mask_literal< 0x400e1230, 11, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P12 = hr::field_mask_literal< 0x400e1230, 12, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P13 = hr::field_mask_literal< 0x400e1230, 13, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P14 = hr::field_mask_literal< 0x400e1230, 14, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P15 = hr::field_mask_literal< 0x400e1230, 15, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P16 = hr::field_mask_literal< 0x400e1230, 16, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P17 = hr::field_mask_literal< 0x400e1230, 17, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P18 = hr::field_mask_literal< 0x400e1230, 18, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P19 = hr::field_mask_literal< 0x400e1230, 19, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P20 = hr::field_mask_literal< 0x400e1230, 20, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P21 = hr::field_mask_literal< 0x400e1230, 21, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P22 = hr::field_mask_literal< 0x400e1230, 22, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P23 = hr::field_mask_literal< 0x400e1230, 23, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P24 = hr::field_mask_literal< 0x400e1230, 24, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P25 = hr::field_mask_literal< 0x400e1230, 25, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P26 = hr::field_mask_literal< 0x400e1230, 26, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P27 = hr::field_mask_literal< 0x400e1230, 27, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P28 = hr::field_mask_literal< 0x400e1230, 28, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P29 = hr::field_mask_literal< 0x400e1230, 29, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P30 = hr::field_mask_literal< 0x400e1230, 30, 1 >();
   // Set Output Data
   constexpr auto PIOC_SODR_P31 = hr::field_mask_literal< 0x400e1230, 31, 1 >();

// CODR
   // Clear Output Data
   constexpr auto PIOC_CODR_P0 = hr::field_mask_literal< 0x400e1234, 0, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P1 = hr::field_mask_literal< 0x400e1234, 1, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P2 = hr::field_mask_literal< 0x400e1234, 2, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P3 = hr::field_mask_literal< 0x400e1234, 3, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P4 = hr::field_mask_literal< 0x400e1234, 4, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P5 = hr::field_mask_literal< 0x400e1234, 5, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P6 = hr::field_mask_literal< 0x400e1234, 6, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P7 = hr::field_mask_literal< 0x400e1234, 7, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P8 = hr::field_mask_literal< 0x400e1234, 8, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P9 = hr::field_mask_literal< 0x400e1234, 9, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P10 = hr::field_mask_literal< 0x400e1234, 10, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P11 = hr::field_mask_literal< 0x400e1234, 11, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P12 = hr::field_mask_literal< 0x400e1234, 12, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P13 = hr::field_mask_literal< 0x400e1234, 13, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P14 = hr::field_mask_literal< 0x400e1234, 14, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P15 = hr::field_mask_literal< 0x400e1234, 15, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P16 = hr::field_mask_literal< 0x400e1234, 16, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P17 = hr::field_mask_literal< 0x400e1234, 17, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P18 = hr::field_mask_literal< 0x400e1234, 18, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P19 = hr::field_mask_literal< 0x400e1234, 19, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P20 = hr::field_mask_literal< 0x400e1234, 20, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P21 = hr::field_mask_literal< 0x400e1234, 21, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P22 = hr::field_mask_literal< 0x400e1234, 22, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P23 = hr::field_mask_literal< 0x400e1234, 23, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P24 = hr::field_mask_literal< 0x400e1234, 24, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P25 = hr::field_mask_literal< 0x400e1234, 25, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P26 = hr::field_mask_literal< 0x400e1234, 26, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P27 = hr::field_mask_literal< 0x400e1234, 27, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P28 = hr::field_mask_literal< 0x400e1234, 28, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P29 = hr::field_mask_literal< 0x400e1234, 29, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P30 = hr::field_mask_literal< 0x400e1234, 30, 1 >();
   // Clear Output Data
   constexpr auto PIOC_CODR_P31 = hr::field_mask_literal< 0x400e1234, 31, 1 >();

// ODSR
   // Output Data Status
   constexpr auto PIOC_ODSR_P0 = hr::field_mask_literal< 0x400e1238, 0, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P1 = hr::field_mask_literal< 0x400e1238, 1, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P2 = hr::field_mask_literal< 0x400e1238, 2, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P3 = hr::field_mask_literal< 0x400e1238, 3, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P4 = hr::field_mask_literal< 0x400e1238, 4, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P5 = hr::field_mask_literal< 0x400e1238, 5, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P6 = hr::field_mask_literal< 0x400e1238, 6, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P7 = hr::field_mask_literal< 0x400e1238, 7, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P8 = hr::field_mask_literal< 0x400e1238, 8, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P9 = hr::field_mask_literal< 0x400e1238, 9, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P10 = hr::field_mask_literal< 0x400e1238, 10, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P11 = hr::field_mask_literal< 0x400e1238, 11, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P12 = hr::field_mask_literal< 0x400e1238, 12, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P13 = hr::field_mask_literal< 0x400e1238, 13, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P14 = hr::field_mask_literal< 0x400e1238, 14, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P15 = hr::field_mask_literal< 0x400e1238, 15, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P16 = hr::field_mask_literal< 0x400e1238, 16, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P17 = hr::field_mask_literal< 0x400e1238, 17, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P18 = hr::field_mask_literal< 0x400e1238, 18, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P19 = hr::field_mask_literal< 0x400e1238, 19, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P20 = hr::field_mask_literal< 0x400e1238, 20, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P21 = hr::field_mask_literal< 0x400e1238, 21, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P22 = hr::field_mask_literal< 0x400e1238, 22, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P23 = hr::field_mask_literal< 0x400e1238, 23, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P24 = hr::field_mask_literal< 0x400e1238, 24, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P25 = hr::field_mask_literal< 0x400e1238, 25, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P26 = hr::field_mask_literal< 0x400e1238, 26, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P27 = hr::field_mask_literal< 0x400e1238, 27, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P28 = hr::field_mask_literal< 0x400e1238, 28, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P29 = hr::field_mask_literal< 0x400e1238, 29, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P30 = hr::field_mask_literal< 0x400e1238, 30, 1 >();
   // Output Data Status
   constexpr auto PIOC_ODSR_P31 = hr::field_mask_literal< 0x400e1238, 31, 1 >();

// PDSR
   // Output Data Status
   constexpr auto PIOC_PDSR_P0 = hr::field_mask_literal< 0x400e123c, 0, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P1 = hr::field_mask_literal< 0x400e123c, 1, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P2 = hr::field_mask_literal< 0x400e123c, 2, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P3 = hr::field_mask_literal< 0x400e123c, 3, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P4 = hr::field_mask_literal< 0x400e123c, 4, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P5 = hr::field_mask_literal< 0x400e123c, 5, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P6 = hr::field_mask_literal< 0x400e123c, 6, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P7 = hr::field_mask_literal< 0x400e123c, 7, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P8 = hr::field_mask_literal< 0x400e123c, 8, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P9 = hr::field_mask_literal< 0x400e123c, 9, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P10 = hr::field_mask_literal< 0x400e123c, 10, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P11 = hr::field_mask_literal< 0x400e123c, 11, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P12 = hr::field_mask_literal< 0x400e123c, 12, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P13 = hr::field_mask_literal< 0x400e123c, 13, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P14 = hr::field_mask_literal< 0x400e123c, 14, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P15 = hr::field_mask_literal< 0x400e123c, 15, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P16 = hr::field_mask_literal< 0x400e123c, 16, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P17 = hr::field_mask_literal< 0x400e123c, 17, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P18 = hr::field_mask_literal< 0x400e123c, 18, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P19 = hr::field_mask_literal< 0x400e123c, 19, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P20 = hr::field_mask_literal< 0x400e123c, 20, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P21 = hr::field_mask_literal< 0x400e123c, 21, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P22 = hr::field_mask_literal< 0x400e123c, 22, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P23 = hr::field_mask_literal< 0x400e123c, 23, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P24 = hr::field_mask_literal< 0x400e123c, 24, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P25 = hr::field_mask_literal< 0x400e123c, 25, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P26 = hr::field_mask_literal< 0x400e123c, 26, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P27 = hr::field_mask_literal< 0x400e123c, 27, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P28 = hr::field_mask_literal< 0x400e123c, 28, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P29 = hr::field_mask_literal< 0x400e123c, 29, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P30 = hr::field_mask_literal< 0x400e123c, 30, 1 >();
   // Output Data Status
   constexpr auto PIOC_PDSR_P31 = hr::field_mask_literal< 0x400e123c, 31, 1 >();

// IER
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P0 = hr::field_mask_literal< 0x400e1240, 0, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P1 = hr::field_mask_literal< 0x400e1240, 1, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P2 = hr::field_mask_literal< 0x400e1240, 2, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P3 = hr::field_mask_literal< 0x400e1240, 3, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P4 = hr::field_mask_literal< 0x400e1240, 4, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P5 = hr::field_mask_literal< 0x400e1240, 5, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P6 = hr::field_mask_literal< 0x400e1240, 6, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P7 = hr::field_mask_literal< 0x400e1240, 7, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P8 = hr::field_mask_literal< 0x400e1240, 8, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P9 = hr::field_mask_literal< 0x400e1240, 9, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P10 = hr::field_mask_literal< 0x400e1240, 10, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P11 = hr::field_mask_literal< 0x400e1240, 11, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P12 = hr::field_mask_literal< 0x400e1240, 12, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P13 = hr::field_mask_literal< 0x400e1240, 13, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P14 = hr::field_mask_literal< 0x400e1240, 14, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P15 = hr::field_mask_literal< 0x400e1240, 15, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P16 = hr::field_mask_literal< 0x400e1240, 16, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P17 = hr::field_mask_literal< 0x400e1240, 17, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P18 = hr::field_mask_literal< 0x400e1240, 18, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P19 = hr::field_mask_literal< 0x400e1240, 19, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P20 = hr::field_mask_literal< 0x400e1240, 20, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P21 = hr::field_mask_literal< 0x400e1240, 21, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P22 = hr::field_mask_literal< 0x400e1240, 22, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P23 = hr::field_mask_literal< 0x400e1240, 23, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P24 = hr::field_mask_literal< 0x400e1240, 24, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P25 = hr::field_mask_literal< 0x400e1240, 25, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P26 = hr::field_mask_literal< 0x400e1240, 26, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P27 = hr::field_mask_literal< 0x400e1240, 27, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P28 = hr::field_mask_literal< 0x400e1240, 28, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P29 = hr::field_mask_literal< 0x400e1240, 29, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P30 = hr::field_mask_literal< 0x400e1240, 30, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOC_IER_P31 = hr::field_mask_literal< 0x400e1240, 31, 1 >();

// IDR
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P0 = hr::field_mask_literal< 0x400e1244, 0, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P1 = hr::field_mask_literal< 0x400e1244, 1, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P2 = hr::field_mask_literal< 0x400e1244, 2, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P3 = hr::field_mask_literal< 0x400e1244, 3, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P4 = hr::field_mask_literal< 0x400e1244, 4, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P5 = hr::field_mask_literal< 0x400e1244, 5, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P6 = hr::field_mask_literal< 0x400e1244, 6, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P7 = hr::field_mask_literal< 0x400e1244, 7, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P8 = hr::field_mask_literal< 0x400e1244, 8, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P9 = hr::field_mask_literal< 0x400e1244, 9, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P10 = hr::field_mask_literal< 0x400e1244, 10, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P11 = hr::field_mask_literal< 0x400e1244, 11, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P12 = hr::field_mask_literal< 0x400e1244, 12, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P13 = hr::field_mask_literal< 0x400e1244, 13, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P14 = hr::field_mask_literal< 0x400e1244, 14, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P15 = hr::field_mask_literal< 0x400e1244, 15, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P16 = hr::field_mask_literal< 0x400e1244, 16, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P17 = hr::field_mask_literal< 0x400e1244, 17, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P18 = hr::field_mask_literal< 0x400e1244, 18, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P19 = hr::field_mask_literal< 0x400e1244, 19, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P20 = hr::field_mask_literal< 0x400e1244, 20, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P21 = hr::field_mask_literal< 0x400e1244, 21, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P22 = hr::field_mask_literal< 0x400e1244, 22, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P23 = hr::field_mask_literal< 0x400e1244, 23, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P24 = hr::field_mask_literal< 0x400e1244, 24, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P25 = hr::field_mask_literal< 0x400e1244, 25, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P26 = hr::field_mask_literal< 0x400e1244, 26, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P27 = hr::field_mask_literal< 0x400e1244, 27, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P28 = hr::field_mask_literal< 0x400e1244, 28, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P29 = hr::field_mask_literal< 0x400e1244, 29, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P30 = hr::field_mask_literal< 0x400e1244, 30, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOC_IDR_P31 = hr::field_mask_literal< 0x400e1244, 31, 1 >();

// IMR
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P0 = hr::field_mask_literal< 0x400e1248, 0, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P1 = hr::field_mask_literal< 0x400e1248, 1, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P2 = hr::field_mask_literal< 0x400e1248, 2, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P3 = hr::field_mask_literal< 0x400e1248, 3, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P4 = hr::field_mask_literal< 0x400e1248, 4, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P5 = hr::field_mask_literal< 0x400e1248, 5, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P6 = hr::field_mask_literal< 0x400e1248, 6, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P7 = hr::field_mask_literal< 0x400e1248, 7, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P8 = hr::field_mask_literal< 0x400e1248, 8, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P9 = hr::field_mask_literal< 0x400e1248, 9, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P10 = hr::field_mask_literal< 0x400e1248, 10, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P11 = hr::field_mask_literal< 0x400e1248, 11, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P12 = hr::field_mask_literal< 0x400e1248, 12, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P13 = hr::field_mask_literal< 0x400e1248, 13, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P14 = hr::field_mask_literal< 0x400e1248, 14, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P15 = hr::field_mask_literal< 0x400e1248, 15, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P16 = hr::field_mask_literal< 0x400e1248, 16, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P17 = hr::field_mask_literal< 0x400e1248, 17, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P18 = hr::field_mask_literal< 0x400e1248, 18, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P19 = hr::field_mask_literal< 0x400e1248, 19, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P20 = hr::field_mask_literal< 0x400e1248, 20, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P21 = hr::field_mask_literal< 0x400e1248, 21, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P22 = hr::field_mask_literal< 0x400e1248, 22, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P23 = hr::field_mask_literal< 0x400e1248, 23, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P24 = hr::field_mask_literal< 0x400e1248, 24, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P25 = hr::field_mask_literal< 0x400e1248, 25, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P26 = hr::field_mask_literal< 0x400e1248, 26, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P27 = hr::field_mask_literal< 0x400e1248, 27, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P28 = hr::field_mask_literal< 0x400e1248, 28, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P29 = hr::field_mask_literal< 0x400e1248, 29, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P30 = hr::field_mask_literal< 0x400e1248, 30, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOC_IMR_P31 = hr::field_mask_literal< 0x400e1248, 31, 1 >();

// ISR
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P0 = hr::field_mask_literal< 0x400e124c, 0, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P1 = hr::field_mask_literal< 0x400e124c, 1, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P2 = hr::field_mask_literal< 0x400e124c, 2, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P3 = hr::field_mask_literal< 0x400e124c, 3, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P4 = hr::field_mask_literal< 0x400e124c, 4, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P5 = hr::field_mask_literal< 0x400e124c, 5, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P6 = hr::field_mask_literal< 0x400e124c, 6, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P7 = hr::field_mask_literal< 0x400e124c, 7, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P8 = hr::field_mask_literal< 0x400e124c, 8, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P9 = hr::field_mask_literal< 0x400e124c, 9, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P10 = hr::field_mask_literal< 0x400e124c, 10, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P11 = hr::field_mask_literal< 0x400e124c, 11, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P12 = hr::field_mask_literal< 0x400e124c, 12, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P13 = hr::field_mask_literal< 0x400e124c, 13, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P14 = hr::field_mask_literal< 0x400e124c, 14, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P15 = hr::field_mask_literal< 0x400e124c, 15, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P16 = hr::field_mask_literal< 0x400e124c, 16, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P17 = hr::field_mask_literal< 0x400e124c, 17, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P18 = hr::field_mask_literal< 0x400e124c, 18, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P19 = hr::field_mask_literal< 0x400e124c, 19, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P20 = hr::field_mask_literal< 0x400e124c, 20, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P21 = hr::field_mask_literal< 0x400e124c, 21, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P22 = hr::field_mask_literal< 0x400e124c, 22, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P23 = hr::field_mask_literal< 0x400e124c, 23, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P24 = hr::field_mask_literal< 0x400e124c, 24, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P25 = hr::field_mask_literal< 0x400e124c, 25, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P26 = hr::field_mask_literal< 0x400e124c, 26, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P27 = hr::field_mask_literal< 0x400e124c, 27, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P28 = hr::field_mask_literal< 0x400e124c, 28, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P29 = hr::field_mask_literal< 0x400e124c, 29, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P30 = hr::field_mask_literal< 0x400e124c, 30, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOC_ISR_P31 = hr::field_mask_literal< 0x400e124c, 31, 1 >();

// MDER
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P0 = hr::field_mask_literal< 0x400e1250, 0, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P1 = hr::field_mask_literal< 0x400e1250, 1, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P2 = hr::field_mask_literal< 0x400e1250, 2, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P3 = hr::field_mask_literal< 0x400e1250, 3, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P4 = hr::field_mask_literal< 0x400e1250, 4, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P5 = hr::field_mask_literal< 0x400e1250, 5, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P6 = hr::field_mask_literal< 0x400e1250, 6, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P7 = hr::field_mask_literal< 0x400e1250, 7, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P8 = hr::field_mask_literal< 0x400e1250, 8, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P9 = hr::field_mask_literal< 0x400e1250, 9, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P10 = hr::field_mask_literal< 0x400e1250, 10, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P11 = hr::field_mask_literal< 0x400e1250, 11, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P12 = hr::field_mask_literal< 0x400e1250, 12, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P13 = hr::field_mask_literal< 0x400e1250, 13, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P14 = hr::field_mask_literal< 0x400e1250, 14, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P15 = hr::field_mask_literal< 0x400e1250, 15, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P16 = hr::field_mask_literal< 0x400e1250, 16, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P17 = hr::field_mask_literal< 0x400e1250, 17, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P18 = hr::field_mask_literal< 0x400e1250, 18, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P19 = hr::field_mask_literal< 0x400e1250, 19, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P20 = hr::field_mask_literal< 0x400e1250, 20, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P21 = hr::field_mask_literal< 0x400e1250, 21, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P22 = hr::field_mask_literal< 0x400e1250, 22, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P23 = hr::field_mask_literal< 0x400e1250, 23, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P24 = hr::field_mask_literal< 0x400e1250, 24, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P25 = hr::field_mask_literal< 0x400e1250, 25, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P26 = hr::field_mask_literal< 0x400e1250, 26, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P27 = hr::field_mask_literal< 0x400e1250, 27, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P28 = hr::field_mask_literal< 0x400e1250, 28, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P29 = hr::field_mask_literal< 0x400e1250, 29, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P30 = hr::field_mask_literal< 0x400e1250, 30, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOC_MDER_P31 = hr::field_mask_literal< 0x400e1250, 31, 1 >();

// MDDR
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P0 = hr::field_mask_literal< 0x400e1254, 0, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P1 = hr::field_mask_literal< 0x400e1254, 1, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P2 = hr::field_mask_literal< 0x400e1254, 2, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P3 = hr::field_mask_literal< 0x400e1254, 3, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P4 = hr::field_mask_literal< 0x400e1254, 4, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P5 = hr::field_mask_literal< 0x400e1254, 5, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P6 = hr::field_mask_literal< 0x400e1254, 6, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P7 = hr::field_mask_literal< 0x400e1254, 7, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P8 = hr::field_mask_literal< 0x400e1254, 8, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P9 = hr::field_mask_literal< 0x400e1254, 9, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P10 = hr::field_mask_literal< 0x400e1254, 10, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P11 = hr::field_mask_literal< 0x400e1254, 11, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P12 = hr::field_mask_literal< 0x400e1254, 12, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P13 = hr::field_mask_literal< 0x400e1254, 13, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P14 = hr::field_mask_literal< 0x400e1254, 14, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P15 = hr::field_mask_literal< 0x400e1254, 15, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P16 = hr::field_mask_literal< 0x400e1254, 16, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P17 = hr::field_mask_literal< 0x400e1254, 17, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P18 = hr::field_mask_literal< 0x400e1254, 18, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P19 = hr::field_mask_literal< 0x400e1254, 19, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P20 = hr::field_mask_literal< 0x400e1254, 20, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P21 = hr::field_mask_literal< 0x400e1254, 21, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P22 = hr::field_mask_literal< 0x400e1254, 22, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P23 = hr::field_mask_literal< 0x400e1254, 23, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P24 = hr::field_mask_literal< 0x400e1254, 24, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P25 = hr::field_mask_literal< 0x400e1254, 25, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P26 = hr::field_mask_literal< 0x400e1254, 26, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P27 = hr::field_mask_literal< 0x400e1254, 27, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P28 = hr::field_mask_literal< 0x400e1254, 28, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P29 = hr::field_mask_literal< 0x400e1254, 29, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P30 = hr::field_mask_literal< 0x400e1254, 30, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOC_MDDR_P31 = hr::field_mask_literal< 0x400e1254, 31, 1 >();

// MDSR
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P0 = hr::field_mask_literal< 0x400e1258, 0, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P1 = hr::field_mask_literal< 0x400e1258, 1, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P2 = hr::field_mask_literal< 0x400e1258, 2, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P3 = hr::field_mask_literal< 0x400e1258, 3, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P4 = hr::field_mask_literal< 0x400e1258, 4, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P5 = hr::field_mask_literal< 0x400e1258, 5, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P6 = hr::field_mask_literal< 0x400e1258, 6, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P7 = hr::field_mask_literal< 0x400e1258, 7, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P8 = hr::field_mask_literal< 0x400e1258, 8, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P9 = hr::field_mask_literal< 0x400e1258, 9, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P10 = hr::field_mask_literal< 0x400e1258, 10, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P11 = hr::field_mask_literal< 0x400e1258, 11, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P12 = hr::field_mask_literal< 0x400e1258, 12, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P13 = hr::field_mask_literal< 0x400e1258, 13, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P14 = hr::field_mask_literal< 0x400e1258, 14, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P15 = hr::field_mask_literal< 0x400e1258, 15, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P16 = hr::field_mask_literal< 0x400e1258, 16, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P17 = hr::field_mask_literal< 0x400e1258, 17, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P18 = hr::field_mask_literal< 0x400e1258, 18, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P19 = hr::field_mask_literal< 0x400e1258, 19, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P20 = hr::field_mask_literal< 0x400e1258, 20, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P21 = hr::field_mask_literal< 0x400e1258, 21, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P22 = hr::field_mask_literal< 0x400e1258, 22, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P23 = hr::field_mask_literal< 0x400e1258, 23, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P24 = hr::field_mask_literal< 0x400e1258, 24, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P25 = hr::field_mask_literal< 0x400e1258, 25, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P26 = hr::field_mask_literal< 0x400e1258, 26, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P27 = hr::field_mask_literal< 0x400e1258, 27, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P28 = hr::field_mask_literal< 0x400e1258, 28, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P29 = hr::field_mask_literal< 0x400e1258, 29, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P30 = hr::field_mask_literal< 0x400e1258, 30, 1 >();
   // Multi Drive Status.
   constexpr auto PIOC_MDSR_P31 = hr::field_mask_literal< 0x400e1258, 31, 1 >();

// PUDR
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P0 = hr::field_mask_literal< 0x400e1260, 0, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P1 = hr::field_mask_literal< 0x400e1260, 1, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P2 = hr::field_mask_literal< 0x400e1260, 2, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P3 = hr::field_mask_literal< 0x400e1260, 3, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P4 = hr::field_mask_literal< 0x400e1260, 4, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P5 = hr::field_mask_literal< 0x400e1260, 5, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P6 = hr::field_mask_literal< 0x400e1260, 6, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P7 = hr::field_mask_literal< 0x400e1260, 7, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P8 = hr::field_mask_literal< 0x400e1260, 8, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P9 = hr::field_mask_literal< 0x400e1260, 9, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P10 = hr::field_mask_literal< 0x400e1260, 10, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P11 = hr::field_mask_literal< 0x400e1260, 11, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P12 = hr::field_mask_literal< 0x400e1260, 12, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P13 = hr::field_mask_literal< 0x400e1260, 13, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P14 = hr::field_mask_literal< 0x400e1260, 14, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P15 = hr::field_mask_literal< 0x400e1260, 15, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P16 = hr::field_mask_literal< 0x400e1260, 16, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P17 = hr::field_mask_literal< 0x400e1260, 17, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P18 = hr::field_mask_literal< 0x400e1260, 18, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P19 = hr::field_mask_literal< 0x400e1260, 19, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P20 = hr::field_mask_literal< 0x400e1260, 20, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P21 = hr::field_mask_literal< 0x400e1260, 21, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P22 = hr::field_mask_literal< 0x400e1260, 22, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P23 = hr::field_mask_literal< 0x400e1260, 23, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P24 = hr::field_mask_literal< 0x400e1260, 24, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P25 = hr::field_mask_literal< 0x400e1260, 25, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P26 = hr::field_mask_literal< 0x400e1260, 26, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P27 = hr::field_mask_literal< 0x400e1260, 27, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P28 = hr::field_mask_literal< 0x400e1260, 28, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P29 = hr::field_mask_literal< 0x400e1260, 29, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P30 = hr::field_mask_literal< 0x400e1260, 30, 1 >();
   // Pull Up Disable.
   constexpr auto PIOC_PUDR_P31 = hr::field_mask_literal< 0x400e1260, 31, 1 >();

// PUER
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P0 = hr::field_mask_literal< 0x400e1264, 0, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P1 = hr::field_mask_literal< 0x400e1264, 1, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P2 = hr::field_mask_literal< 0x400e1264, 2, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P3 = hr::field_mask_literal< 0x400e1264, 3, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P4 = hr::field_mask_literal< 0x400e1264, 4, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P5 = hr::field_mask_literal< 0x400e1264, 5, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P6 = hr::field_mask_literal< 0x400e1264, 6, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P7 = hr::field_mask_literal< 0x400e1264, 7, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P8 = hr::field_mask_literal< 0x400e1264, 8, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P9 = hr::field_mask_literal< 0x400e1264, 9, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P10 = hr::field_mask_literal< 0x400e1264, 10, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P11 = hr::field_mask_literal< 0x400e1264, 11, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P12 = hr::field_mask_literal< 0x400e1264, 12, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P13 = hr::field_mask_literal< 0x400e1264, 13, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P14 = hr::field_mask_literal< 0x400e1264, 14, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P15 = hr::field_mask_literal< 0x400e1264, 15, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P16 = hr::field_mask_literal< 0x400e1264, 16, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P17 = hr::field_mask_literal< 0x400e1264, 17, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P18 = hr::field_mask_literal< 0x400e1264, 18, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P19 = hr::field_mask_literal< 0x400e1264, 19, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P20 = hr::field_mask_literal< 0x400e1264, 20, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P21 = hr::field_mask_literal< 0x400e1264, 21, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P22 = hr::field_mask_literal< 0x400e1264, 22, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P23 = hr::field_mask_literal< 0x400e1264, 23, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P24 = hr::field_mask_literal< 0x400e1264, 24, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P25 = hr::field_mask_literal< 0x400e1264, 25, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P26 = hr::field_mask_literal< 0x400e1264, 26, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P27 = hr::field_mask_literal< 0x400e1264, 27, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P28 = hr::field_mask_literal< 0x400e1264, 28, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P29 = hr::field_mask_literal< 0x400e1264, 29, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P30 = hr::field_mask_literal< 0x400e1264, 30, 1 >();
   // Pull Up Enable.
   constexpr auto PIOC_PUER_P31 = hr::field_mask_literal< 0x400e1264, 31, 1 >();

// PUSR
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P0 = hr::field_mask_literal< 0x400e1268, 0, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P1 = hr::field_mask_literal< 0x400e1268, 1, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P2 = hr::field_mask_literal< 0x400e1268, 2, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P3 = hr::field_mask_literal< 0x400e1268, 3, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P4 = hr::field_mask_literal< 0x400e1268, 4, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P5 = hr::field_mask_literal< 0x400e1268, 5, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P6 = hr::field_mask_literal< 0x400e1268, 6, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P7 = hr::field_mask_literal< 0x400e1268, 7, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P8 = hr::field_mask_literal< 0x400e1268, 8, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P9 = hr::field_mask_literal< 0x400e1268, 9, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P10 = hr::field_mask_literal< 0x400e1268, 10, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P11 = hr::field_mask_literal< 0x400e1268, 11, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P12 = hr::field_mask_literal< 0x400e1268, 12, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P13 = hr::field_mask_literal< 0x400e1268, 13, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P14 = hr::field_mask_literal< 0x400e1268, 14, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P15 = hr::field_mask_literal< 0x400e1268, 15, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P16 = hr::field_mask_literal< 0x400e1268, 16, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P17 = hr::field_mask_literal< 0x400e1268, 17, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P18 = hr::field_mask_literal< 0x400e1268, 18, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P19 = hr::field_mask_literal< 0x400e1268, 19, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P20 = hr::field_mask_literal< 0x400e1268, 20, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P21 = hr::field_mask_literal< 0x400e1268, 21, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P22 = hr::field_mask_literal< 0x400e1268, 22, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P23 = hr::field_mask_literal< 0x400e1268, 23, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P24 = hr::field_mask_literal< 0x400e1268, 24, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P25 = hr::field_mask_literal< 0x400e1268, 25, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P26 = hr::field_mask_literal< 0x400e1268, 26, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P27 = hr::field_mask_literal< 0x400e1268, 27, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P28 = hr::field_mask_literal< 0x400e1268, 28, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P29 = hr::field_mask_literal< 0x400e1268, 29, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P30 = hr::field_mask_literal< 0x400e1268, 30, 1 >();
   // Pull Up Status.
   constexpr auto PIOC_PUSR_P31 = hr::field_mask_literal< 0x400e1268, 31, 1 >();

// ABSR
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P0 = hr::field_mask_literal< 0x400e1270, 0, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P1 = hr::field_mask_literal< 0x400e1270, 1, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P2 = hr::field_mask_literal< 0x400e1270, 2, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P3 = hr::field_mask_literal< 0x400e1270, 3, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P4 = hr::field_mask_literal< 0x400e1270, 4, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P5 = hr::field_mask_literal< 0x400e1270, 5, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P6 = hr::field_mask_literal< 0x400e1270, 6, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P7 = hr::field_mask_literal< 0x400e1270, 7, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P8 = hr::field_mask_literal< 0x400e1270, 8, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P9 = hr::field_mask_literal< 0x400e1270, 9, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P10 = hr::field_mask_literal< 0x400e1270, 10, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P11 = hr::field_mask_literal< 0x400e1270, 11, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P12 = hr::field_mask_literal< 0x400e1270, 12, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P13 = hr::field_mask_literal< 0x400e1270, 13, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P14 = hr::field_mask_literal< 0x400e1270, 14, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P15 = hr::field_mask_literal< 0x400e1270, 15, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P16 = hr::field_mask_literal< 0x400e1270, 16, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P17 = hr::field_mask_literal< 0x400e1270, 17, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P18 = hr::field_mask_literal< 0x400e1270, 18, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P19 = hr::field_mask_literal< 0x400e1270, 19, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P20 = hr::field_mask_literal< 0x400e1270, 20, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P21 = hr::field_mask_literal< 0x400e1270, 21, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P22 = hr::field_mask_literal< 0x400e1270, 22, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P23 = hr::field_mask_literal< 0x400e1270, 23, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P24 = hr::field_mask_literal< 0x400e1270, 24, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P25 = hr::field_mask_literal< 0x400e1270, 25, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P26 = hr::field_mask_literal< 0x400e1270, 26, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P27 = hr::field_mask_literal< 0x400e1270, 27, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P28 = hr::field_mask_literal< 0x400e1270, 28, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P29 = hr::field_mask_literal< 0x400e1270, 29, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P30 = hr::field_mask_literal< 0x400e1270, 30, 1 >();
   // Peripheral A Select.
   constexpr auto PIOC_ABSR_P31 = hr::field_mask_literal< 0x400e1270, 31, 1 >();

// SCIFSR
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P0 = hr::field_mask_literal< 0x400e1280, 0, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P1 = hr::field_mask_literal< 0x400e1280, 1, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P2 = hr::field_mask_literal< 0x400e1280, 2, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P3 = hr::field_mask_literal< 0x400e1280, 3, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P4 = hr::field_mask_literal< 0x400e1280, 4, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P5 = hr::field_mask_literal< 0x400e1280, 5, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P6 = hr::field_mask_literal< 0x400e1280, 6, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P7 = hr::field_mask_literal< 0x400e1280, 7, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P8 = hr::field_mask_literal< 0x400e1280, 8, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P9 = hr::field_mask_literal< 0x400e1280, 9, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P10 = hr::field_mask_literal< 0x400e1280, 10, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P11 = hr::field_mask_literal< 0x400e1280, 11, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P12 = hr::field_mask_literal< 0x400e1280, 12, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P13 = hr::field_mask_literal< 0x400e1280, 13, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P14 = hr::field_mask_literal< 0x400e1280, 14, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P15 = hr::field_mask_literal< 0x400e1280, 15, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P16 = hr::field_mask_literal< 0x400e1280, 16, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P17 = hr::field_mask_literal< 0x400e1280, 17, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P18 = hr::field_mask_literal< 0x400e1280, 18, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P19 = hr::field_mask_literal< 0x400e1280, 19, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P20 = hr::field_mask_literal< 0x400e1280, 20, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P21 = hr::field_mask_literal< 0x400e1280, 21, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P22 = hr::field_mask_literal< 0x400e1280, 22, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P23 = hr::field_mask_literal< 0x400e1280, 23, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P24 = hr::field_mask_literal< 0x400e1280, 24, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P25 = hr::field_mask_literal< 0x400e1280, 25, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P26 = hr::field_mask_literal< 0x400e1280, 26, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P27 = hr::field_mask_literal< 0x400e1280, 27, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P28 = hr::field_mask_literal< 0x400e1280, 28, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P29 = hr::field_mask_literal< 0x400e1280, 29, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P30 = hr::field_mask_literal< 0x400e1280, 30, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOC_SCIFSR_P31 = hr::field_mask_literal< 0x400e1280, 31, 1 >();

// DIFSR
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P0 = hr::field_mask_literal< 0x400e1284, 0, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P1 = hr::field_mask_literal< 0x400e1284, 1, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P2 = hr::field_mask_literal< 0x400e1284, 2, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P3 = hr::field_mask_literal< 0x400e1284, 3, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P4 = hr::field_mask_literal< 0x400e1284, 4, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P5 = hr::field_mask_literal< 0x400e1284, 5, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P6 = hr::field_mask_literal< 0x400e1284, 6, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P7 = hr::field_mask_literal< 0x400e1284, 7, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P8 = hr::field_mask_literal< 0x400e1284, 8, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P9 = hr::field_mask_literal< 0x400e1284, 9, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P10 = hr::field_mask_literal< 0x400e1284, 10, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P11 = hr::field_mask_literal< 0x400e1284, 11, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P12 = hr::field_mask_literal< 0x400e1284, 12, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P13 = hr::field_mask_literal< 0x400e1284, 13, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P14 = hr::field_mask_literal< 0x400e1284, 14, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P15 = hr::field_mask_literal< 0x400e1284, 15, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P16 = hr::field_mask_literal< 0x400e1284, 16, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P17 = hr::field_mask_literal< 0x400e1284, 17, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P18 = hr::field_mask_literal< 0x400e1284, 18, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P19 = hr::field_mask_literal< 0x400e1284, 19, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P20 = hr::field_mask_literal< 0x400e1284, 20, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P21 = hr::field_mask_literal< 0x400e1284, 21, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P22 = hr::field_mask_literal< 0x400e1284, 22, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P23 = hr::field_mask_literal< 0x400e1284, 23, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P24 = hr::field_mask_literal< 0x400e1284, 24, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P25 = hr::field_mask_literal< 0x400e1284, 25, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P26 = hr::field_mask_literal< 0x400e1284, 26, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P27 = hr::field_mask_literal< 0x400e1284, 27, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P28 = hr::field_mask_literal< 0x400e1284, 28, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P29 = hr::field_mask_literal< 0x400e1284, 29, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P30 = hr::field_mask_literal< 0x400e1284, 30, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOC_DIFSR_P31 = hr::field_mask_literal< 0x400e1284, 31, 1 >();

// IFDGSR
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P0 = hr::field_mask_literal< 0x400e1288, 0, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P1 = hr::field_mask_literal< 0x400e1288, 1, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P2 = hr::field_mask_literal< 0x400e1288, 2, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P3 = hr::field_mask_literal< 0x400e1288, 3, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P4 = hr::field_mask_literal< 0x400e1288, 4, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P5 = hr::field_mask_literal< 0x400e1288, 5, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P6 = hr::field_mask_literal< 0x400e1288, 6, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P7 = hr::field_mask_literal< 0x400e1288, 7, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P8 = hr::field_mask_literal< 0x400e1288, 8, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P9 = hr::field_mask_literal< 0x400e1288, 9, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P10 = hr::field_mask_literal< 0x400e1288, 10, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P11 = hr::field_mask_literal< 0x400e1288, 11, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P12 = hr::field_mask_literal< 0x400e1288, 12, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P13 = hr::field_mask_literal< 0x400e1288, 13, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P14 = hr::field_mask_literal< 0x400e1288, 14, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P15 = hr::field_mask_literal< 0x400e1288, 15, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P16 = hr::field_mask_literal< 0x400e1288, 16, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P17 = hr::field_mask_literal< 0x400e1288, 17, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P18 = hr::field_mask_literal< 0x400e1288, 18, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P19 = hr::field_mask_literal< 0x400e1288, 19, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P20 = hr::field_mask_literal< 0x400e1288, 20, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P21 = hr::field_mask_literal< 0x400e1288, 21, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P22 = hr::field_mask_literal< 0x400e1288, 22, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P23 = hr::field_mask_literal< 0x400e1288, 23, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P24 = hr::field_mask_literal< 0x400e1288, 24, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P25 = hr::field_mask_literal< 0x400e1288, 25, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P26 = hr::field_mask_literal< 0x400e1288, 26, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P27 = hr::field_mask_literal< 0x400e1288, 27, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P28 = hr::field_mask_literal< 0x400e1288, 28, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P29 = hr::field_mask_literal< 0x400e1288, 29, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P30 = hr::field_mask_literal< 0x400e1288, 30, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOC_IFDGSR_P31 = hr::field_mask_literal< 0x400e1288, 31, 1 >();

// SCDR
   // Slow Clock Divider Selection for Debouncing
   constexpr auto PIOC_SCDR_DIV_Msk = hr::field_mask_literal< 0x400e128c, 0, 14 >();

// OWER
   // Output Write Enable.
   constexpr auto PIOC_OWER_P0 = hr::field_mask_literal< 0x400e12a0, 0, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P1 = hr::field_mask_literal< 0x400e12a0, 1, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P2 = hr::field_mask_literal< 0x400e12a0, 2, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P3 = hr::field_mask_literal< 0x400e12a0, 3, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P4 = hr::field_mask_literal< 0x400e12a0, 4, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P5 = hr::field_mask_literal< 0x400e12a0, 5, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P6 = hr::field_mask_literal< 0x400e12a0, 6, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P7 = hr::field_mask_literal< 0x400e12a0, 7, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P8 = hr::field_mask_literal< 0x400e12a0, 8, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P9 = hr::field_mask_literal< 0x400e12a0, 9, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P10 = hr::field_mask_literal< 0x400e12a0, 10, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P11 = hr::field_mask_literal< 0x400e12a0, 11, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P12 = hr::field_mask_literal< 0x400e12a0, 12, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P13 = hr::field_mask_literal< 0x400e12a0, 13, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P14 = hr::field_mask_literal< 0x400e12a0, 14, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P15 = hr::field_mask_literal< 0x400e12a0, 15, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P16 = hr::field_mask_literal< 0x400e12a0, 16, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P17 = hr::field_mask_literal< 0x400e12a0, 17, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P18 = hr::field_mask_literal< 0x400e12a0, 18, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P19 = hr::field_mask_literal< 0x400e12a0, 19, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P20 = hr::field_mask_literal< 0x400e12a0, 20, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P21 = hr::field_mask_literal< 0x400e12a0, 21, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P22 = hr::field_mask_literal< 0x400e12a0, 22, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P23 = hr::field_mask_literal< 0x400e12a0, 23, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P24 = hr::field_mask_literal< 0x400e12a0, 24, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P25 = hr::field_mask_literal< 0x400e12a0, 25, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P26 = hr::field_mask_literal< 0x400e12a0, 26, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P27 = hr::field_mask_literal< 0x400e12a0, 27, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P28 = hr::field_mask_literal< 0x400e12a0, 28, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P29 = hr::field_mask_literal< 0x400e12a0, 29, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P30 = hr::field_mask_literal< 0x400e12a0, 30, 1 >();
   // Output Write Enable.
   constexpr auto PIOC_OWER_P31 = hr::field_mask_literal< 0x400e12a0, 31, 1 >();

// OWDR
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P0 = hr::field_mask_literal< 0x400e12a4, 0, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P1 = hr::field_mask_literal< 0x400e12a4, 1, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P2 = hr::field_mask_literal< 0x400e12a4, 2, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P3 = hr::field_mask_literal< 0x400e12a4, 3, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P4 = hr::field_mask_literal< 0x400e12a4, 4, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P5 = hr::field_mask_literal< 0x400e12a4, 5, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P6 = hr::field_mask_literal< 0x400e12a4, 6, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P7 = hr::field_mask_literal< 0x400e12a4, 7, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P8 = hr::field_mask_literal< 0x400e12a4, 8, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P9 = hr::field_mask_literal< 0x400e12a4, 9, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P10 = hr::field_mask_literal< 0x400e12a4, 10, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P11 = hr::field_mask_literal< 0x400e12a4, 11, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P12 = hr::field_mask_literal< 0x400e12a4, 12, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P13 = hr::field_mask_literal< 0x400e12a4, 13, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P14 = hr::field_mask_literal< 0x400e12a4, 14, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P15 = hr::field_mask_literal< 0x400e12a4, 15, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P16 = hr::field_mask_literal< 0x400e12a4, 16, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P17 = hr::field_mask_literal< 0x400e12a4, 17, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P18 = hr::field_mask_literal< 0x400e12a4, 18, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P19 = hr::field_mask_literal< 0x400e12a4, 19, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P20 = hr::field_mask_literal< 0x400e12a4, 20, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P21 = hr::field_mask_literal< 0x400e12a4, 21, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P22 = hr::field_mask_literal< 0x400e12a4, 22, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P23 = hr::field_mask_literal< 0x400e12a4, 23, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P24 = hr::field_mask_literal< 0x400e12a4, 24, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P25 = hr::field_mask_literal< 0x400e12a4, 25, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P26 = hr::field_mask_literal< 0x400e12a4, 26, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P27 = hr::field_mask_literal< 0x400e12a4, 27, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P28 = hr::field_mask_literal< 0x400e12a4, 28, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P29 = hr::field_mask_literal< 0x400e12a4, 29, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P30 = hr::field_mask_literal< 0x400e12a4, 30, 1 >();
   // Output Write Disable.
   constexpr auto PIOC_OWDR_P31 = hr::field_mask_literal< 0x400e12a4, 31, 1 >();

// OWSR
   // Output Write Status.
   constexpr auto PIOC_OWSR_P0 = hr::field_mask_literal< 0x400e12a8, 0, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P1 = hr::field_mask_literal< 0x400e12a8, 1, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P2 = hr::field_mask_literal< 0x400e12a8, 2, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P3 = hr::field_mask_literal< 0x400e12a8, 3, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P4 = hr::field_mask_literal< 0x400e12a8, 4, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P5 = hr::field_mask_literal< 0x400e12a8, 5, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P6 = hr::field_mask_literal< 0x400e12a8, 6, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P7 = hr::field_mask_literal< 0x400e12a8, 7, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P8 = hr::field_mask_literal< 0x400e12a8, 8, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P9 = hr::field_mask_literal< 0x400e12a8, 9, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P10 = hr::field_mask_literal< 0x400e12a8, 10, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P11 = hr::field_mask_literal< 0x400e12a8, 11, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P12 = hr::field_mask_literal< 0x400e12a8, 12, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P13 = hr::field_mask_literal< 0x400e12a8, 13, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P14 = hr::field_mask_literal< 0x400e12a8, 14, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P15 = hr::field_mask_literal< 0x400e12a8, 15, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P16 = hr::field_mask_literal< 0x400e12a8, 16, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P17 = hr::field_mask_literal< 0x400e12a8, 17, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P18 = hr::field_mask_literal< 0x400e12a8, 18, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P19 = hr::field_mask_literal< 0x400e12a8, 19, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P20 = hr::field_mask_literal< 0x400e12a8, 20, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P21 = hr::field_mask_literal< 0x400e12a8, 21, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P22 = hr::field_mask_literal< 0x400e12a8, 22, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P23 = hr::field_mask_literal< 0x400e12a8, 23, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P24 = hr::field_mask_literal< 0x400e12a8, 24, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P25 = hr::field_mask_literal< 0x400e12a8, 25, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P26 = hr::field_mask_literal< 0x400e12a8, 26, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P27 = hr::field_mask_literal< 0x400e12a8, 27, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P28 = hr::field_mask_literal< 0x400e12a8, 28, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P29 = hr::field_mask_literal< 0x400e12a8, 29, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P30 = hr::field_mask_literal< 0x400e12a8, 30, 1 >();
   // Output Write Status.
   constexpr auto PIOC_OWSR_P31 = hr::field_mask_literal< 0x400e12a8, 31, 1 >();

// AIMER
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P0 = hr::field_mask_literal< 0x400e12b0, 0, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P1 = hr::field_mask_literal< 0x400e12b0, 1, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P2 = hr::field_mask_literal< 0x400e12b0, 2, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P3 = hr::field_mask_literal< 0x400e12b0, 3, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P4 = hr::field_mask_literal< 0x400e12b0, 4, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P5 = hr::field_mask_literal< 0x400e12b0, 5, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P6 = hr::field_mask_literal< 0x400e12b0, 6, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P7 = hr::field_mask_literal< 0x400e12b0, 7, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P8 = hr::field_mask_literal< 0x400e12b0, 8, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P9 = hr::field_mask_literal< 0x400e12b0, 9, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P10 = hr::field_mask_literal< 0x400e12b0, 10, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P11 = hr::field_mask_literal< 0x400e12b0, 11, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P12 = hr::field_mask_literal< 0x400e12b0, 12, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P13 = hr::field_mask_literal< 0x400e12b0, 13, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P14 = hr::field_mask_literal< 0x400e12b0, 14, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P15 = hr::field_mask_literal< 0x400e12b0, 15, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P16 = hr::field_mask_literal< 0x400e12b0, 16, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P17 = hr::field_mask_literal< 0x400e12b0, 17, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P18 = hr::field_mask_literal< 0x400e12b0, 18, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P19 = hr::field_mask_literal< 0x400e12b0, 19, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P20 = hr::field_mask_literal< 0x400e12b0, 20, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P21 = hr::field_mask_literal< 0x400e12b0, 21, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P22 = hr::field_mask_literal< 0x400e12b0, 22, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P23 = hr::field_mask_literal< 0x400e12b0, 23, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P24 = hr::field_mask_literal< 0x400e12b0, 24, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P25 = hr::field_mask_literal< 0x400e12b0, 25, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P26 = hr::field_mask_literal< 0x400e12b0, 26, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P27 = hr::field_mask_literal< 0x400e12b0, 27, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P28 = hr::field_mask_literal< 0x400e12b0, 28, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P29 = hr::field_mask_literal< 0x400e12b0, 29, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P30 = hr::field_mask_literal< 0x400e12b0, 30, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOC_AIMER_P31 = hr::field_mask_literal< 0x400e12b0, 31, 1 >();

// AIMDR
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P0 = hr::field_mask_literal< 0x400e12b4, 0, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P1 = hr::field_mask_literal< 0x400e12b4, 1, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P2 = hr::field_mask_literal< 0x400e12b4, 2, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P3 = hr::field_mask_literal< 0x400e12b4, 3, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P4 = hr::field_mask_literal< 0x400e12b4, 4, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P5 = hr::field_mask_literal< 0x400e12b4, 5, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P6 = hr::field_mask_literal< 0x400e12b4, 6, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P7 = hr::field_mask_literal< 0x400e12b4, 7, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P8 = hr::field_mask_literal< 0x400e12b4, 8, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P9 = hr::field_mask_literal< 0x400e12b4, 9, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P10 = hr::field_mask_literal< 0x400e12b4, 10, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P11 = hr::field_mask_literal< 0x400e12b4, 11, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P12 = hr::field_mask_literal< 0x400e12b4, 12, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P13 = hr::field_mask_literal< 0x400e12b4, 13, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P14 = hr::field_mask_literal< 0x400e12b4, 14, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P15 = hr::field_mask_literal< 0x400e12b4, 15, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P16 = hr::field_mask_literal< 0x400e12b4, 16, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P17 = hr::field_mask_literal< 0x400e12b4, 17, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P18 = hr::field_mask_literal< 0x400e12b4, 18, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P19 = hr::field_mask_literal< 0x400e12b4, 19, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P20 = hr::field_mask_literal< 0x400e12b4, 20, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P21 = hr::field_mask_literal< 0x400e12b4, 21, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P22 = hr::field_mask_literal< 0x400e12b4, 22, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P23 = hr::field_mask_literal< 0x400e12b4, 23, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P24 = hr::field_mask_literal< 0x400e12b4, 24, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P25 = hr::field_mask_literal< 0x400e12b4, 25, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P26 = hr::field_mask_literal< 0x400e12b4, 26, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P27 = hr::field_mask_literal< 0x400e12b4, 27, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P28 = hr::field_mask_literal< 0x400e12b4, 28, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P29 = hr::field_mask_literal< 0x400e12b4, 29, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P30 = hr::field_mask_literal< 0x400e12b4, 30, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOC_AIMDR_P31 = hr::field_mask_literal< 0x400e12b4, 31, 1 >();

// AIMMR
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P0 = hr::field_mask_literal< 0x400e12b8, 0, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P1 = hr::field_mask_literal< 0x400e12b8, 1, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P2 = hr::field_mask_literal< 0x400e12b8, 2, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P3 = hr::field_mask_literal< 0x400e12b8, 3, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P4 = hr::field_mask_literal< 0x400e12b8, 4, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P5 = hr::field_mask_literal< 0x400e12b8, 5, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P6 = hr::field_mask_literal< 0x400e12b8, 6, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P7 = hr::field_mask_literal< 0x400e12b8, 7, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P8 = hr::field_mask_literal< 0x400e12b8, 8, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P9 = hr::field_mask_literal< 0x400e12b8, 9, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P10 = hr::field_mask_literal< 0x400e12b8, 10, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P11 = hr::field_mask_literal< 0x400e12b8, 11, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P12 = hr::field_mask_literal< 0x400e12b8, 12, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P13 = hr::field_mask_literal< 0x400e12b8, 13, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P14 = hr::field_mask_literal< 0x400e12b8, 14, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P15 = hr::field_mask_literal< 0x400e12b8, 15, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P16 = hr::field_mask_literal< 0x400e12b8, 16, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P17 = hr::field_mask_literal< 0x400e12b8, 17, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P18 = hr::field_mask_literal< 0x400e12b8, 18, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P19 = hr::field_mask_literal< 0x400e12b8, 19, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P20 = hr::field_mask_literal< 0x400e12b8, 20, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P21 = hr::field_mask_literal< 0x400e12b8, 21, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P22 = hr::field_mask_literal< 0x400e12b8, 22, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P23 = hr::field_mask_literal< 0x400e12b8, 23, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P24 = hr::field_mask_literal< 0x400e12b8, 24, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P25 = hr::field_mask_literal< 0x400e12b8, 25, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P26 = hr::field_mask_literal< 0x400e12b8, 26, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P27 = hr::field_mask_literal< 0x400e12b8, 27, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P28 = hr::field_mask_literal< 0x400e12b8, 28, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P29 = hr::field_mask_literal< 0x400e12b8, 29, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P30 = hr::field_mask_literal< 0x400e12b8, 30, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOC_AIMMR_P31 = hr::field_mask_literal< 0x400e12b8, 31, 1 >();

// ESR
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P0 = hr::field_mask_literal< 0x400e12c0, 0, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P1 = hr::field_mask_literal< 0x400e12c0, 1, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P2 = hr::field_mask_literal< 0x400e12c0, 2, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P3 = hr::field_mask_literal< 0x400e12c0, 3, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P4 = hr::field_mask_literal< 0x400e12c0, 4, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P5 = hr::field_mask_literal< 0x400e12c0, 5, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P6 = hr::field_mask_literal< 0x400e12c0, 6, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P7 = hr::field_mask_literal< 0x400e12c0, 7, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P8 = hr::field_mask_literal< 0x400e12c0, 8, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P9 = hr::field_mask_literal< 0x400e12c0, 9, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P10 = hr::field_mask_literal< 0x400e12c0, 10, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P11 = hr::field_mask_literal< 0x400e12c0, 11, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P12 = hr::field_mask_literal< 0x400e12c0, 12, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P13 = hr::field_mask_literal< 0x400e12c0, 13, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P14 = hr::field_mask_literal< 0x400e12c0, 14, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P15 = hr::field_mask_literal< 0x400e12c0, 15, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P16 = hr::field_mask_literal< 0x400e12c0, 16, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P17 = hr::field_mask_literal< 0x400e12c0, 17, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P18 = hr::field_mask_literal< 0x400e12c0, 18, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P19 = hr::field_mask_literal< 0x400e12c0, 19, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P20 = hr::field_mask_literal< 0x400e12c0, 20, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P21 = hr::field_mask_literal< 0x400e12c0, 21, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P22 = hr::field_mask_literal< 0x400e12c0, 22, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P23 = hr::field_mask_literal< 0x400e12c0, 23, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P24 = hr::field_mask_literal< 0x400e12c0, 24, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P25 = hr::field_mask_literal< 0x400e12c0, 25, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P26 = hr::field_mask_literal< 0x400e12c0, 26, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P27 = hr::field_mask_literal< 0x400e12c0, 27, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P28 = hr::field_mask_literal< 0x400e12c0, 28, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P29 = hr::field_mask_literal< 0x400e12c0, 29, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P30 = hr::field_mask_literal< 0x400e12c0, 30, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOC_ESR_P31 = hr::field_mask_literal< 0x400e12c0, 31, 1 >();

// LSR
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P0 = hr::field_mask_literal< 0x400e12c4, 0, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P1 = hr::field_mask_literal< 0x400e12c4, 1, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P2 = hr::field_mask_literal< 0x400e12c4, 2, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P3 = hr::field_mask_literal< 0x400e12c4, 3, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P4 = hr::field_mask_literal< 0x400e12c4, 4, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P5 = hr::field_mask_literal< 0x400e12c4, 5, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P6 = hr::field_mask_literal< 0x400e12c4, 6, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P7 = hr::field_mask_literal< 0x400e12c4, 7, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P8 = hr::field_mask_literal< 0x400e12c4, 8, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P9 = hr::field_mask_literal< 0x400e12c4, 9, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P10 = hr::field_mask_literal< 0x400e12c4, 10, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P11 = hr::field_mask_literal< 0x400e12c4, 11, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P12 = hr::field_mask_literal< 0x400e12c4, 12, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P13 = hr::field_mask_literal< 0x400e12c4, 13, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P14 = hr::field_mask_literal< 0x400e12c4, 14, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P15 = hr::field_mask_literal< 0x400e12c4, 15, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P16 = hr::field_mask_literal< 0x400e12c4, 16, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P17 = hr::field_mask_literal< 0x400e12c4, 17, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P18 = hr::field_mask_literal< 0x400e12c4, 18, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P19 = hr::field_mask_literal< 0x400e12c4, 19, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P20 = hr::field_mask_literal< 0x400e12c4, 20, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P21 = hr::field_mask_literal< 0x400e12c4, 21, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P22 = hr::field_mask_literal< 0x400e12c4, 22, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P23 = hr::field_mask_literal< 0x400e12c4, 23, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P24 = hr::field_mask_literal< 0x400e12c4, 24, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P25 = hr::field_mask_literal< 0x400e12c4, 25, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P26 = hr::field_mask_literal< 0x400e12c4, 26, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P27 = hr::field_mask_literal< 0x400e12c4, 27, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P28 = hr::field_mask_literal< 0x400e12c4, 28, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P29 = hr::field_mask_literal< 0x400e12c4, 29, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P30 = hr::field_mask_literal< 0x400e12c4, 30, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOC_LSR_P31 = hr::field_mask_literal< 0x400e12c4, 31, 1 >();

// ELSR
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P0 = hr::field_mask_literal< 0x400e12c8, 0, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P1 = hr::field_mask_literal< 0x400e12c8, 1, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P2 = hr::field_mask_literal< 0x400e12c8, 2, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P3 = hr::field_mask_literal< 0x400e12c8, 3, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P4 = hr::field_mask_literal< 0x400e12c8, 4, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P5 = hr::field_mask_literal< 0x400e12c8, 5, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P6 = hr::field_mask_literal< 0x400e12c8, 6, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P7 = hr::field_mask_literal< 0x400e12c8, 7, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P8 = hr::field_mask_literal< 0x400e12c8, 8, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P9 = hr::field_mask_literal< 0x400e12c8, 9, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P10 = hr::field_mask_literal< 0x400e12c8, 10, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P11 = hr::field_mask_literal< 0x400e12c8, 11, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P12 = hr::field_mask_literal< 0x400e12c8, 12, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P13 = hr::field_mask_literal< 0x400e12c8, 13, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P14 = hr::field_mask_literal< 0x400e12c8, 14, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P15 = hr::field_mask_literal< 0x400e12c8, 15, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P16 = hr::field_mask_literal< 0x400e12c8, 16, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P17 = hr::field_mask_literal< 0x400e12c8, 17, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P18 = hr::field_mask_literal< 0x400e12c8, 18, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P19 = hr::field_mask_literal< 0x400e12c8, 19, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P20 = hr::field_mask_literal< 0x400e12c8, 20, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P21 = hr::field_mask_literal< 0x400e12c8, 21, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P22 = hr::field_mask_literal< 0x400e12c8, 22, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P23 = hr::field_mask_literal< 0x400e12c8, 23, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P24 = hr::field_mask_literal< 0x400e12c8, 24, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P25 = hr::field_mask_literal< 0x400e12c8, 25, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P26 = hr::field_mask_literal< 0x400e12c8, 26, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P27 = hr::field_mask_literal< 0x400e12c8, 27, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P28 = hr::field_mask_literal< 0x400e12c8, 28, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P29 = hr::field_mask_literal< 0x400e12c8, 29, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P30 = hr::field_mask_literal< 0x400e12c8, 30, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOC_ELSR_P31 = hr::field_mask_literal< 0x400e12c8, 31, 1 >();

// FELLSR
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P0 = hr::field_mask_literal< 0x400e12d0, 0, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P1 = hr::field_mask_literal< 0x400e12d0, 1, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P2 = hr::field_mask_literal< 0x400e12d0, 2, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P3 = hr::field_mask_literal< 0x400e12d0, 3, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P4 = hr::field_mask_literal< 0x400e12d0, 4, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P5 = hr::field_mask_literal< 0x400e12d0, 5, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P6 = hr::field_mask_literal< 0x400e12d0, 6, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P7 = hr::field_mask_literal< 0x400e12d0, 7, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P8 = hr::field_mask_literal< 0x400e12d0, 8, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P9 = hr::field_mask_literal< 0x400e12d0, 9, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P10 = hr::field_mask_literal< 0x400e12d0, 10, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P11 = hr::field_mask_literal< 0x400e12d0, 11, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P12 = hr::field_mask_literal< 0x400e12d0, 12, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P13 = hr::field_mask_literal< 0x400e12d0, 13, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P14 = hr::field_mask_literal< 0x400e12d0, 14, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P15 = hr::field_mask_literal< 0x400e12d0, 15, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P16 = hr::field_mask_literal< 0x400e12d0, 16, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P17 = hr::field_mask_literal< 0x400e12d0, 17, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P18 = hr::field_mask_literal< 0x400e12d0, 18, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P19 = hr::field_mask_literal< 0x400e12d0, 19, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P20 = hr::field_mask_literal< 0x400e12d0, 20, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P21 = hr::field_mask_literal< 0x400e12d0, 21, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P22 = hr::field_mask_literal< 0x400e12d0, 22, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P23 = hr::field_mask_literal< 0x400e12d0, 23, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P24 = hr::field_mask_literal< 0x400e12d0, 24, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P25 = hr::field_mask_literal< 0x400e12d0, 25, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P26 = hr::field_mask_literal< 0x400e12d0, 26, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P27 = hr::field_mask_literal< 0x400e12d0, 27, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P28 = hr::field_mask_literal< 0x400e12d0, 28, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P29 = hr::field_mask_literal< 0x400e12d0, 29, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P30 = hr::field_mask_literal< 0x400e12d0, 30, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOC_FELLSR_P31 = hr::field_mask_literal< 0x400e12d0, 31, 1 >();

// REHLSR
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P0 = hr::field_mask_literal< 0x400e12d4, 0, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P1 = hr::field_mask_literal< 0x400e12d4, 1, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P2 = hr::field_mask_literal< 0x400e12d4, 2, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P3 = hr::field_mask_literal< 0x400e12d4, 3, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P4 = hr::field_mask_literal< 0x400e12d4, 4, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P5 = hr::field_mask_literal< 0x400e12d4, 5, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P6 = hr::field_mask_literal< 0x400e12d4, 6, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P7 = hr::field_mask_literal< 0x400e12d4, 7, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P8 = hr::field_mask_literal< 0x400e12d4, 8, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P9 = hr::field_mask_literal< 0x400e12d4, 9, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P10 = hr::field_mask_literal< 0x400e12d4, 10, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P11 = hr::field_mask_literal< 0x400e12d4, 11, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P12 = hr::field_mask_literal< 0x400e12d4, 12, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P13 = hr::field_mask_literal< 0x400e12d4, 13, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P14 = hr::field_mask_literal< 0x400e12d4, 14, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P15 = hr::field_mask_literal< 0x400e12d4, 15, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P16 = hr::field_mask_literal< 0x400e12d4, 16, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P17 = hr::field_mask_literal< 0x400e12d4, 17, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P18 = hr::field_mask_literal< 0x400e12d4, 18, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P19 = hr::field_mask_literal< 0x400e12d4, 19, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P20 = hr::field_mask_literal< 0x400e12d4, 20, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P21 = hr::field_mask_literal< 0x400e12d4, 21, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P22 = hr::field_mask_literal< 0x400e12d4, 22, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P23 = hr::field_mask_literal< 0x400e12d4, 23, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P24 = hr::field_mask_literal< 0x400e12d4, 24, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P25 = hr::field_mask_literal< 0x400e12d4, 25, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P26 = hr::field_mask_literal< 0x400e12d4, 26, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P27 = hr::field_mask_literal< 0x400e12d4, 27, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P28 = hr::field_mask_literal< 0x400e12d4, 28, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P29 = hr::field_mask_literal< 0x400e12d4, 29, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P30 = hr::field_mask_literal< 0x400e12d4, 30, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOC_REHLSR_P31 = hr::field_mask_literal< 0x400e12d4, 31, 1 >();

// FRLHSR
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P0 = hr::field_mask_literal< 0x400e12d8, 0, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P1 = hr::field_mask_literal< 0x400e12d8, 1, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P2 = hr::field_mask_literal< 0x400e12d8, 2, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P3 = hr::field_mask_literal< 0x400e12d8, 3, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P4 = hr::field_mask_literal< 0x400e12d8, 4, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P5 = hr::field_mask_literal< 0x400e12d8, 5, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P6 = hr::field_mask_literal< 0x400e12d8, 6, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P7 = hr::field_mask_literal< 0x400e12d8, 7, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P8 = hr::field_mask_literal< 0x400e12d8, 8, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P9 = hr::field_mask_literal< 0x400e12d8, 9, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P10 = hr::field_mask_literal< 0x400e12d8, 10, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P11 = hr::field_mask_literal< 0x400e12d8, 11, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P12 = hr::field_mask_literal< 0x400e12d8, 12, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P13 = hr::field_mask_literal< 0x400e12d8, 13, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P14 = hr::field_mask_literal< 0x400e12d8, 14, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P15 = hr::field_mask_literal< 0x400e12d8, 15, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P16 = hr::field_mask_literal< 0x400e12d8, 16, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P17 = hr::field_mask_literal< 0x400e12d8, 17, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P18 = hr::field_mask_literal< 0x400e12d8, 18, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P19 = hr::field_mask_literal< 0x400e12d8, 19, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P20 = hr::field_mask_literal< 0x400e12d8, 20, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P21 = hr::field_mask_literal< 0x400e12d8, 21, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P22 = hr::field_mask_literal< 0x400e12d8, 22, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P23 = hr::field_mask_literal< 0x400e12d8, 23, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P24 = hr::field_mask_literal< 0x400e12d8, 24, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P25 = hr::field_mask_literal< 0x400e12d8, 25, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P26 = hr::field_mask_literal< 0x400e12d8, 26, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P27 = hr::field_mask_literal< 0x400e12d8, 27, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P28 = hr::field_mask_literal< 0x400e12d8, 28, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P29 = hr::field_mask_literal< 0x400e12d8, 29, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P30 = hr::field_mask_literal< 0x400e12d8, 30, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOC_FRLHSR_P31 = hr::field_mask_literal< 0x400e12d8, 31, 1 >();

// LOCKSR
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P0 = hr::field_mask_literal< 0x400e12e0, 0, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P1 = hr::field_mask_literal< 0x400e12e0, 1, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P2 = hr::field_mask_literal< 0x400e12e0, 2, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P3 = hr::field_mask_literal< 0x400e12e0, 3, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P4 = hr::field_mask_literal< 0x400e12e0, 4, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P5 = hr::field_mask_literal< 0x400e12e0, 5, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P6 = hr::field_mask_literal< 0x400e12e0, 6, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P7 = hr::field_mask_literal< 0x400e12e0, 7, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P8 = hr::field_mask_literal< 0x400e12e0, 8, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P9 = hr::field_mask_literal< 0x400e12e0, 9, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P10 = hr::field_mask_literal< 0x400e12e0, 10, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P11 = hr::field_mask_literal< 0x400e12e0, 11, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P12 = hr::field_mask_literal< 0x400e12e0, 12, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P13 = hr::field_mask_literal< 0x400e12e0, 13, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P14 = hr::field_mask_literal< 0x400e12e0, 14, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P15 = hr::field_mask_literal< 0x400e12e0, 15, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P16 = hr::field_mask_literal< 0x400e12e0, 16, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P17 = hr::field_mask_literal< 0x400e12e0, 17, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P18 = hr::field_mask_literal< 0x400e12e0, 18, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P19 = hr::field_mask_literal< 0x400e12e0, 19, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P20 = hr::field_mask_literal< 0x400e12e0, 20, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P21 = hr::field_mask_literal< 0x400e12e0, 21, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P22 = hr::field_mask_literal< 0x400e12e0, 22, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P23 = hr::field_mask_literal< 0x400e12e0, 23, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P24 = hr::field_mask_literal< 0x400e12e0, 24, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P25 = hr::field_mask_literal< 0x400e12e0, 25, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P26 = hr::field_mask_literal< 0x400e12e0, 26, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P27 = hr::field_mask_literal< 0x400e12e0, 27, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P28 = hr::field_mask_literal< 0x400e12e0, 28, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P29 = hr::field_mask_literal< 0x400e12e0, 29, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P30 = hr::field_mask_literal< 0x400e12e0, 30, 1 >();
   // Lock Status.
   constexpr auto PIOC_LOCKSR_P31 = hr::field_mask_literal< 0x400e12e0, 31, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto PIOC_WPMR_WPEN = hr::field_mask_literal< 0x400e12e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto PIOC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e12e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto PIOC_WPSR_WPVS = hr::field_mask_literal< 0x400e12e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto PIOC_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400e12e8, 8, 16 >();

// =============================================================================
//
// PIOD
// base address = 0x400e1400
// Parallel Input/Output Controller D
//
// =============================================================================

struct Piod {
   hr::hardware_register<0x400e1400> PER;
   hr::hardware_register<0x400e1404> PDR;
   hr::hardware_register<0x400e1408> PSR;
   hr::reserved< 0xC, 1 > _reserved_at_0xC;
   hr::hardware_register<0x400e1410> OER;
   hr::hardware_register<0x400e1414> ODR;
   hr::hardware_register<0x400e1418> OSR;
   hr::reserved< 0x1C, 1 > _reserved_at_0x1C;
   hr::hardware_register<0x400e1420> IFER;
   hr::hardware_register<0x400e1424> IFDR;
   hr::hardware_register<0x400e1428> IFSR;
   hr::reserved< 0x2C, 1 > _reserved_at_0x2C;
   hr::hardware_register<0x400e1430> SODR;
   hr::hardware_register<0x400e1434> CODR;
   hr::hardware_register<0x400e1438> ODSR;
   hr::hardware_register<0x400e143c> PDSR;
   hr::hardware_register<0x400e1440> IER;
   hr::hardware_register<0x400e1444> IDR;
   hr::hardware_register<0x400e1448> IMR;
   hr::hardware_register<0x400e144c> ISR;
   hr::hardware_register<0x400e1450> MDER;
   hr::hardware_register<0x400e1454> MDDR;
   hr::hardware_register<0x400e1458> MDSR;
   hr::reserved< 0x5C, 1 > _reserved_at_0x5C;
   hr::hardware_register<0x400e1460> PUDR;
   hr::hardware_register<0x400e1464> PUER;
   hr::hardware_register<0x400e1468> PUSR;
   hr::reserved< 0x6C, 1 > _reserved_at_0x6C;
   hr::hardware_register<0x400e1470> ABSR;
   hr::reserved< 0x74, 3 > _reserved_at_0x74;
   hr::hardware_register<0x400e1480> SCIFSR;
   hr::hardware_register<0x400e1484> DIFSR;
   hr::hardware_register<0x400e1488> IFDGSR;
   hr::hardware_register<0x400e148c> SCDR;
   hr::reserved< 0x90, 4 > _reserved_at_0x90;
   hr::hardware_register<0x400e14a0> OWER;
   hr::hardware_register<0x400e14a4> OWDR;
   hr::hardware_register<0x400e14a8> OWSR;
   hr::reserved< 0xAC, 1 > _reserved_at_0xAC;
   hr::hardware_register<0x400e14b0> AIMER;
   hr::hardware_register<0x400e14b4> AIMDR;
   hr::hardware_register<0x400e14b8> AIMMR;
   hr::reserved< 0xBC, 1 > _reserved_at_0xBC;
   hr::hardware_register<0x400e14c0> ESR;
   hr::hardware_register<0x400e14c4> LSR;
   hr::hardware_register<0x400e14c8> ELSR;
   hr::reserved< 0xCC, 1 > _reserved_at_0xCC;
   hr::hardware_register<0x400e14d0> FELLSR;
   hr::hardware_register<0x400e14d4> REHLSR;
   hr::hardware_register<0x400e14d8> FRLHSR;
   hr::reserved< 0xDC, 1 > _reserved_at_0xDC;
   hr::hardware_register<0x400e14e0> LOCKSR;
   hr::hardware_register<0x400e14e4> WPMR;
   hr::hardware_register<0x400e14e8> WPSR;
};

#define PIOD ( ( Piod * ) 0x400e1400 )

// PER
   // PIO Enable
   constexpr auto PIOD_PER_P0 = hr::field_mask_literal< 0x400e1400, 0, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P1 = hr::field_mask_literal< 0x400e1400, 1, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P2 = hr::field_mask_literal< 0x400e1400, 2, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P3 = hr::field_mask_literal< 0x400e1400, 3, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P4 = hr::field_mask_literal< 0x400e1400, 4, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P5 = hr::field_mask_literal< 0x400e1400, 5, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P6 = hr::field_mask_literal< 0x400e1400, 6, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P7 = hr::field_mask_literal< 0x400e1400, 7, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P8 = hr::field_mask_literal< 0x400e1400, 8, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P9 = hr::field_mask_literal< 0x400e1400, 9, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P10 = hr::field_mask_literal< 0x400e1400, 10, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P11 = hr::field_mask_literal< 0x400e1400, 11, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P12 = hr::field_mask_literal< 0x400e1400, 12, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P13 = hr::field_mask_literal< 0x400e1400, 13, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P14 = hr::field_mask_literal< 0x400e1400, 14, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P15 = hr::field_mask_literal< 0x400e1400, 15, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P16 = hr::field_mask_literal< 0x400e1400, 16, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P17 = hr::field_mask_literal< 0x400e1400, 17, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P18 = hr::field_mask_literal< 0x400e1400, 18, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P19 = hr::field_mask_literal< 0x400e1400, 19, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P20 = hr::field_mask_literal< 0x400e1400, 20, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P21 = hr::field_mask_literal< 0x400e1400, 21, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P22 = hr::field_mask_literal< 0x400e1400, 22, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P23 = hr::field_mask_literal< 0x400e1400, 23, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P24 = hr::field_mask_literal< 0x400e1400, 24, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P25 = hr::field_mask_literal< 0x400e1400, 25, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P26 = hr::field_mask_literal< 0x400e1400, 26, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P27 = hr::field_mask_literal< 0x400e1400, 27, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P28 = hr::field_mask_literal< 0x400e1400, 28, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P29 = hr::field_mask_literal< 0x400e1400, 29, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P30 = hr::field_mask_literal< 0x400e1400, 30, 1 >();
   // PIO Enable
   constexpr auto PIOD_PER_P31 = hr::field_mask_literal< 0x400e1400, 31, 1 >();

// PDR
   // PIO Disable
   constexpr auto PIOD_PDR_P0 = hr::field_mask_literal< 0x400e1404, 0, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P1 = hr::field_mask_literal< 0x400e1404, 1, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P2 = hr::field_mask_literal< 0x400e1404, 2, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P3 = hr::field_mask_literal< 0x400e1404, 3, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P4 = hr::field_mask_literal< 0x400e1404, 4, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P5 = hr::field_mask_literal< 0x400e1404, 5, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P6 = hr::field_mask_literal< 0x400e1404, 6, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P7 = hr::field_mask_literal< 0x400e1404, 7, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P8 = hr::field_mask_literal< 0x400e1404, 8, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P9 = hr::field_mask_literal< 0x400e1404, 9, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P10 = hr::field_mask_literal< 0x400e1404, 10, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P11 = hr::field_mask_literal< 0x400e1404, 11, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P12 = hr::field_mask_literal< 0x400e1404, 12, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P13 = hr::field_mask_literal< 0x400e1404, 13, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P14 = hr::field_mask_literal< 0x400e1404, 14, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P15 = hr::field_mask_literal< 0x400e1404, 15, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P16 = hr::field_mask_literal< 0x400e1404, 16, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P17 = hr::field_mask_literal< 0x400e1404, 17, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P18 = hr::field_mask_literal< 0x400e1404, 18, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P19 = hr::field_mask_literal< 0x400e1404, 19, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P20 = hr::field_mask_literal< 0x400e1404, 20, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P21 = hr::field_mask_literal< 0x400e1404, 21, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P22 = hr::field_mask_literal< 0x400e1404, 22, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P23 = hr::field_mask_literal< 0x400e1404, 23, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P24 = hr::field_mask_literal< 0x400e1404, 24, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P25 = hr::field_mask_literal< 0x400e1404, 25, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P26 = hr::field_mask_literal< 0x400e1404, 26, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P27 = hr::field_mask_literal< 0x400e1404, 27, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P28 = hr::field_mask_literal< 0x400e1404, 28, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P29 = hr::field_mask_literal< 0x400e1404, 29, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P30 = hr::field_mask_literal< 0x400e1404, 30, 1 >();
   // PIO Disable
   constexpr auto PIOD_PDR_P31 = hr::field_mask_literal< 0x400e1404, 31, 1 >();

// PSR
   // PIO Status
   constexpr auto PIOD_PSR_P0 = hr::field_mask_literal< 0x400e1408, 0, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P1 = hr::field_mask_literal< 0x400e1408, 1, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P2 = hr::field_mask_literal< 0x400e1408, 2, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P3 = hr::field_mask_literal< 0x400e1408, 3, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P4 = hr::field_mask_literal< 0x400e1408, 4, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P5 = hr::field_mask_literal< 0x400e1408, 5, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P6 = hr::field_mask_literal< 0x400e1408, 6, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P7 = hr::field_mask_literal< 0x400e1408, 7, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P8 = hr::field_mask_literal< 0x400e1408, 8, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P9 = hr::field_mask_literal< 0x400e1408, 9, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P10 = hr::field_mask_literal< 0x400e1408, 10, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P11 = hr::field_mask_literal< 0x400e1408, 11, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P12 = hr::field_mask_literal< 0x400e1408, 12, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P13 = hr::field_mask_literal< 0x400e1408, 13, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P14 = hr::field_mask_literal< 0x400e1408, 14, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P15 = hr::field_mask_literal< 0x400e1408, 15, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P16 = hr::field_mask_literal< 0x400e1408, 16, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P17 = hr::field_mask_literal< 0x400e1408, 17, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P18 = hr::field_mask_literal< 0x400e1408, 18, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P19 = hr::field_mask_literal< 0x400e1408, 19, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P20 = hr::field_mask_literal< 0x400e1408, 20, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P21 = hr::field_mask_literal< 0x400e1408, 21, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P22 = hr::field_mask_literal< 0x400e1408, 22, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P23 = hr::field_mask_literal< 0x400e1408, 23, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P24 = hr::field_mask_literal< 0x400e1408, 24, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P25 = hr::field_mask_literal< 0x400e1408, 25, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P26 = hr::field_mask_literal< 0x400e1408, 26, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P27 = hr::field_mask_literal< 0x400e1408, 27, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P28 = hr::field_mask_literal< 0x400e1408, 28, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P29 = hr::field_mask_literal< 0x400e1408, 29, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P30 = hr::field_mask_literal< 0x400e1408, 30, 1 >();
   // PIO Status
   constexpr auto PIOD_PSR_P31 = hr::field_mask_literal< 0x400e1408, 31, 1 >();

// OER
   // Output Enable
   constexpr auto PIOD_OER_P0 = hr::field_mask_literal< 0x400e1410, 0, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P1 = hr::field_mask_literal< 0x400e1410, 1, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P2 = hr::field_mask_literal< 0x400e1410, 2, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P3 = hr::field_mask_literal< 0x400e1410, 3, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P4 = hr::field_mask_literal< 0x400e1410, 4, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P5 = hr::field_mask_literal< 0x400e1410, 5, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P6 = hr::field_mask_literal< 0x400e1410, 6, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P7 = hr::field_mask_literal< 0x400e1410, 7, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P8 = hr::field_mask_literal< 0x400e1410, 8, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P9 = hr::field_mask_literal< 0x400e1410, 9, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P10 = hr::field_mask_literal< 0x400e1410, 10, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P11 = hr::field_mask_literal< 0x400e1410, 11, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P12 = hr::field_mask_literal< 0x400e1410, 12, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P13 = hr::field_mask_literal< 0x400e1410, 13, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P14 = hr::field_mask_literal< 0x400e1410, 14, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P15 = hr::field_mask_literal< 0x400e1410, 15, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P16 = hr::field_mask_literal< 0x400e1410, 16, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P17 = hr::field_mask_literal< 0x400e1410, 17, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P18 = hr::field_mask_literal< 0x400e1410, 18, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P19 = hr::field_mask_literal< 0x400e1410, 19, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P20 = hr::field_mask_literal< 0x400e1410, 20, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P21 = hr::field_mask_literal< 0x400e1410, 21, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P22 = hr::field_mask_literal< 0x400e1410, 22, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P23 = hr::field_mask_literal< 0x400e1410, 23, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P24 = hr::field_mask_literal< 0x400e1410, 24, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P25 = hr::field_mask_literal< 0x400e1410, 25, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P26 = hr::field_mask_literal< 0x400e1410, 26, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P27 = hr::field_mask_literal< 0x400e1410, 27, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P28 = hr::field_mask_literal< 0x400e1410, 28, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P29 = hr::field_mask_literal< 0x400e1410, 29, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P30 = hr::field_mask_literal< 0x400e1410, 30, 1 >();
   // Output Enable
   constexpr auto PIOD_OER_P31 = hr::field_mask_literal< 0x400e1410, 31, 1 >();

// ODR
   // Output Disable
   constexpr auto PIOD_ODR_P0 = hr::field_mask_literal< 0x400e1414, 0, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P1 = hr::field_mask_literal< 0x400e1414, 1, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P2 = hr::field_mask_literal< 0x400e1414, 2, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P3 = hr::field_mask_literal< 0x400e1414, 3, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P4 = hr::field_mask_literal< 0x400e1414, 4, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P5 = hr::field_mask_literal< 0x400e1414, 5, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P6 = hr::field_mask_literal< 0x400e1414, 6, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P7 = hr::field_mask_literal< 0x400e1414, 7, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P8 = hr::field_mask_literal< 0x400e1414, 8, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P9 = hr::field_mask_literal< 0x400e1414, 9, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P10 = hr::field_mask_literal< 0x400e1414, 10, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P11 = hr::field_mask_literal< 0x400e1414, 11, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P12 = hr::field_mask_literal< 0x400e1414, 12, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P13 = hr::field_mask_literal< 0x400e1414, 13, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P14 = hr::field_mask_literal< 0x400e1414, 14, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P15 = hr::field_mask_literal< 0x400e1414, 15, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P16 = hr::field_mask_literal< 0x400e1414, 16, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P17 = hr::field_mask_literal< 0x400e1414, 17, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P18 = hr::field_mask_literal< 0x400e1414, 18, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P19 = hr::field_mask_literal< 0x400e1414, 19, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P20 = hr::field_mask_literal< 0x400e1414, 20, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P21 = hr::field_mask_literal< 0x400e1414, 21, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P22 = hr::field_mask_literal< 0x400e1414, 22, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P23 = hr::field_mask_literal< 0x400e1414, 23, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P24 = hr::field_mask_literal< 0x400e1414, 24, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P25 = hr::field_mask_literal< 0x400e1414, 25, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P26 = hr::field_mask_literal< 0x400e1414, 26, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P27 = hr::field_mask_literal< 0x400e1414, 27, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P28 = hr::field_mask_literal< 0x400e1414, 28, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P29 = hr::field_mask_literal< 0x400e1414, 29, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P30 = hr::field_mask_literal< 0x400e1414, 30, 1 >();
   // Output Disable
   constexpr auto PIOD_ODR_P31 = hr::field_mask_literal< 0x400e1414, 31, 1 >();

// OSR
   // Output Status
   constexpr auto PIOD_OSR_P0 = hr::field_mask_literal< 0x400e1418, 0, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P1 = hr::field_mask_literal< 0x400e1418, 1, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P2 = hr::field_mask_literal< 0x400e1418, 2, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P3 = hr::field_mask_literal< 0x400e1418, 3, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P4 = hr::field_mask_literal< 0x400e1418, 4, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P5 = hr::field_mask_literal< 0x400e1418, 5, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P6 = hr::field_mask_literal< 0x400e1418, 6, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P7 = hr::field_mask_literal< 0x400e1418, 7, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P8 = hr::field_mask_literal< 0x400e1418, 8, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P9 = hr::field_mask_literal< 0x400e1418, 9, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P10 = hr::field_mask_literal< 0x400e1418, 10, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P11 = hr::field_mask_literal< 0x400e1418, 11, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P12 = hr::field_mask_literal< 0x400e1418, 12, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P13 = hr::field_mask_literal< 0x400e1418, 13, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P14 = hr::field_mask_literal< 0x400e1418, 14, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P15 = hr::field_mask_literal< 0x400e1418, 15, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P16 = hr::field_mask_literal< 0x400e1418, 16, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P17 = hr::field_mask_literal< 0x400e1418, 17, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P18 = hr::field_mask_literal< 0x400e1418, 18, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P19 = hr::field_mask_literal< 0x400e1418, 19, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P20 = hr::field_mask_literal< 0x400e1418, 20, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P21 = hr::field_mask_literal< 0x400e1418, 21, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P22 = hr::field_mask_literal< 0x400e1418, 22, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P23 = hr::field_mask_literal< 0x400e1418, 23, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P24 = hr::field_mask_literal< 0x400e1418, 24, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P25 = hr::field_mask_literal< 0x400e1418, 25, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P26 = hr::field_mask_literal< 0x400e1418, 26, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P27 = hr::field_mask_literal< 0x400e1418, 27, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P28 = hr::field_mask_literal< 0x400e1418, 28, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P29 = hr::field_mask_literal< 0x400e1418, 29, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P30 = hr::field_mask_literal< 0x400e1418, 30, 1 >();
   // Output Status
   constexpr auto PIOD_OSR_P31 = hr::field_mask_literal< 0x400e1418, 31, 1 >();

// IFER
   // Input Filter Enable
   constexpr auto PIOD_IFER_P0 = hr::field_mask_literal< 0x400e1420, 0, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P1 = hr::field_mask_literal< 0x400e1420, 1, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P2 = hr::field_mask_literal< 0x400e1420, 2, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P3 = hr::field_mask_literal< 0x400e1420, 3, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P4 = hr::field_mask_literal< 0x400e1420, 4, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P5 = hr::field_mask_literal< 0x400e1420, 5, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P6 = hr::field_mask_literal< 0x400e1420, 6, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P7 = hr::field_mask_literal< 0x400e1420, 7, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P8 = hr::field_mask_literal< 0x400e1420, 8, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P9 = hr::field_mask_literal< 0x400e1420, 9, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P10 = hr::field_mask_literal< 0x400e1420, 10, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P11 = hr::field_mask_literal< 0x400e1420, 11, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P12 = hr::field_mask_literal< 0x400e1420, 12, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P13 = hr::field_mask_literal< 0x400e1420, 13, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P14 = hr::field_mask_literal< 0x400e1420, 14, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P15 = hr::field_mask_literal< 0x400e1420, 15, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P16 = hr::field_mask_literal< 0x400e1420, 16, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P17 = hr::field_mask_literal< 0x400e1420, 17, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P18 = hr::field_mask_literal< 0x400e1420, 18, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P19 = hr::field_mask_literal< 0x400e1420, 19, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P20 = hr::field_mask_literal< 0x400e1420, 20, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P21 = hr::field_mask_literal< 0x400e1420, 21, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P22 = hr::field_mask_literal< 0x400e1420, 22, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P23 = hr::field_mask_literal< 0x400e1420, 23, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P24 = hr::field_mask_literal< 0x400e1420, 24, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P25 = hr::field_mask_literal< 0x400e1420, 25, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P26 = hr::field_mask_literal< 0x400e1420, 26, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P27 = hr::field_mask_literal< 0x400e1420, 27, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P28 = hr::field_mask_literal< 0x400e1420, 28, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P29 = hr::field_mask_literal< 0x400e1420, 29, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P30 = hr::field_mask_literal< 0x400e1420, 30, 1 >();
   // Input Filter Enable
   constexpr auto PIOD_IFER_P31 = hr::field_mask_literal< 0x400e1420, 31, 1 >();

// IFDR
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P0 = hr::field_mask_literal< 0x400e1424, 0, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P1 = hr::field_mask_literal< 0x400e1424, 1, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P2 = hr::field_mask_literal< 0x400e1424, 2, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P3 = hr::field_mask_literal< 0x400e1424, 3, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P4 = hr::field_mask_literal< 0x400e1424, 4, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P5 = hr::field_mask_literal< 0x400e1424, 5, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P6 = hr::field_mask_literal< 0x400e1424, 6, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P7 = hr::field_mask_literal< 0x400e1424, 7, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P8 = hr::field_mask_literal< 0x400e1424, 8, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P9 = hr::field_mask_literal< 0x400e1424, 9, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P10 = hr::field_mask_literal< 0x400e1424, 10, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P11 = hr::field_mask_literal< 0x400e1424, 11, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P12 = hr::field_mask_literal< 0x400e1424, 12, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P13 = hr::field_mask_literal< 0x400e1424, 13, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P14 = hr::field_mask_literal< 0x400e1424, 14, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P15 = hr::field_mask_literal< 0x400e1424, 15, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P16 = hr::field_mask_literal< 0x400e1424, 16, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P17 = hr::field_mask_literal< 0x400e1424, 17, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P18 = hr::field_mask_literal< 0x400e1424, 18, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P19 = hr::field_mask_literal< 0x400e1424, 19, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P20 = hr::field_mask_literal< 0x400e1424, 20, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P21 = hr::field_mask_literal< 0x400e1424, 21, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P22 = hr::field_mask_literal< 0x400e1424, 22, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P23 = hr::field_mask_literal< 0x400e1424, 23, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P24 = hr::field_mask_literal< 0x400e1424, 24, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P25 = hr::field_mask_literal< 0x400e1424, 25, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P26 = hr::field_mask_literal< 0x400e1424, 26, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P27 = hr::field_mask_literal< 0x400e1424, 27, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P28 = hr::field_mask_literal< 0x400e1424, 28, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P29 = hr::field_mask_literal< 0x400e1424, 29, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P30 = hr::field_mask_literal< 0x400e1424, 30, 1 >();
   // Input Filter Disable
   constexpr auto PIOD_IFDR_P31 = hr::field_mask_literal< 0x400e1424, 31, 1 >();

// IFSR
   // Input Filer Status
   constexpr auto PIOD_IFSR_P0 = hr::field_mask_literal< 0x400e1428, 0, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P1 = hr::field_mask_literal< 0x400e1428, 1, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P2 = hr::field_mask_literal< 0x400e1428, 2, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P3 = hr::field_mask_literal< 0x400e1428, 3, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P4 = hr::field_mask_literal< 0x400e1428, 4, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P5 = hr::field_mask_literal< 0x400e1428, 5, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P6 = hr::field_mask_literal< 0x400e1428, 6, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P7 = hr::field_mask_literal< 0x400e1428, 7, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P8 = hr::field_mask_literal< 0x400e1428, 8, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P9 = hr::field_mask_literal< 0x400e1428, 9, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P10 = hr::field_mask_literal< 0x400e1428, 10, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P11 = hr::field_mask_literal< 0x400e1428, 11, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P12 = hr::field_mask_literal< 0x400e1428, 12, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P13 = hr::field_mask_literal< 0x400e1428, 13, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P14 = hr::field_mask_literal< 0x400e1428, 14, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P15 = hr::field_mask_literal< 0x400e1428, 15, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P16 = hr::field_mask_literal< 0x400e1428, 16, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P17 = hr::field_mask_literal< 0x400e1428, 17, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P18 = hr::field_mask_literal< 0x400e1428, 18, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P19 = hr::field_mask_literal< 0x400e1428, 19, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P20 = hr::field_mask_literal< 0x400e1428, 20, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P21 = hr::field_mask_literal< 0x400e1428, 21, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P22 = hr::field_mask_literal< 0x400e1428, 22, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P23 = hr::field_mask_literal< 0x400e1428, 23, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P24 = hr::field_mask_literal< 0x400e1428, 24, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P25 = hr::field_mask_literal< 0x400e1428, 25, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P26 = hr::field_mask_literal< 0x400e1428, 26, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P27 = hr::field_mask_literal< 0x400e1428, 27, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P28 = hr::field_mask_literal< 0x400e1428, 28, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P29 = hr::field_mask_literal< 0x400e1428, 29, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P30 = hr::field_mask_literal< 0x400e1428, 30, 1 >();
   // Input Filer Status
   constexpr auto PIOD_IFSR_P31 = hr::field_mask_literal< 0x400e1428, 31, 1 >();

// SODR
   // Set Output Data
   constexpr auto PIOD_SODR_P0 = hr::field_mask_literal< 0x400e1430, 0, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P1 = hr::field_mask_literal< 0x400e1430, 1, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P2 = hr::field_mask_literal< 0x400e1430, 2, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P3 = hr::field_mask_literal< 0x400e1430, 3, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P4 = hr::field_mask_literal< 0x400e1430, 4, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P5 = hr::field_mask_literal< 0x400e1430, 5, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P6 = hr::field_mask_literal< 0x400e1430, 6, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P7 = hr::field_mask_literal< 0x400e1430, 7, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P8 = hr::field_mask_literal< 0x400e1430, 8, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P9 = hr::field_mask_literal< 0x400e1430, 9, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P10 = hr::field_mask_literal< 0x400e1430, 10, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P11 = hr::field_mask_literal< 0x400e1430, 11, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P12 = hr::field_mask_literal< 0x400e1430, 12, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P13 = hr::field_mask_literal< 0x400e1430, 13, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P14 = hr::field_mask_literal< 0x400e1430, 14, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P15 = hr::field_mask_literal< 0x400e1430, 15, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P16 = hr::field_mask_literal< 0x400e1430, 16, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P17 = hr::field_mask_literal< 0x400e1430, 17, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P18 = hr::field_mask_literal< 0x400e1430, 18, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P19 = hr::field_mask_literal< 0x400e1430, 19, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P20 = hr::field_mask_literal< 0x400e1430, 20, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P21 = hr::field_mask_literal< 0x400e1430, 21, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P22 = hr::field_mask_literal< 0x400e1430, 22, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P23 = hr::field_mask_literal< 0x400e1430, 23, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P24 = hr::field_mask_literal< 0x400e1430, 24, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P25 = hr::field_mask_literal< 0x400e1430, 25, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P26 = hr::field_mask_literal< 0x400e1430, 26, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P27 = hr::field_mask_literal< 0x400e1430, 27, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P28 = hr::field_mask_literal< 0x400e1430, 28, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P29 = hr::field_mask_literal< 0x400e1430, 29, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P30 = hr::field_mask_literal< 0x400e1430, 30, 1 >();
   // Set Output Data
   constexpr auto PIOD_SODR_P31 = hr::field_mask_literal< 0x400e1430, 31, 1 >();

// CODR
   // Clear Output Data
   constexpr auto PIOD_CODR_P0 = hr::field_mask_literal< 0x400e1434, 0, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P1 = hr::field_mask_literal< 0x400e1434, 1, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P2 = hr::field_mask_literal< 0x400e1434, 2, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P3 = hr::field_mask_literal< 0x400e1434, 3, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P4 = hr::field_mask_literal< 0x400e1434, 4, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P5 = hr::field_mask_literal< 0x400e1434, 5, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P6 = hr::field_mask_literal< 0x400e1434, 6, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P7 = hr::field_mask_literal< 0x400e1434, 7, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P8 = hr::field_mask_literal< 0x400e1434, 8, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P9 = hr::field_mask_literal< 0x400e1434, 9, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P10 = hr::field_mask_literal< 0x400e1434, 10, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P11 = hr::field_mask_literal< 0x400e1434, 11, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P12 = hr::field_mask_literal< 0x400e1434, 12, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P13 = hr::field_mask_literal< 0x400e1434, 13, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P14 = hr::field_mask_literal< 0x400e1434, 14, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P15 = hr::field_mask_literal< 0x400e1434, 15, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P16 = hr::field_mask_literal< 0x400e1434, 16, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P17 = hr::field_mask_literal< 0x400e1434, 17, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P18 = hr::field_mask_literal< 0x400e1434, 18, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P19 = hr::field_mask_literal< 0x400e1434, 19, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P20 = hr::field_mask_literal< 0x400e1434, 20, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P21 = hr::field_mask_literal< 0x400e1434, 21, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P22 = hr::field_mask_literal< 0x400e1434, 22, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P23 = hr::field_mask_literal< 0x400e1434, 23, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P24 = hr::field_mask_literal< 0x400e1434, 24, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P25 = hr::field_mask_literal< 0x400e1434, 25, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P26 = hr::field_mask_literal< 0x400e1434, 26, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P27 = hr::field_mask_literal< 0x400e1434, 27, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P28 = hr::field_mask_literal< 0x400e1434, 28, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P29 = hr::field_mask_literal< 0x400e1434, 29, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P30 = hr::field_mask_literal< 0x400e1434, 30, 1 >();
   // Clear Output Data
   constexpr auto PIOD_CODR_P31 = hr::field_mask_literal< 0x400e1434, 31, 1 >();

// ODSR
   // Output Data Status
   constexpr auto PIOD_ODSR_P0 = hr::field_mask_literal< 0x400e1438, 0, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P1 = hr::field_mask_literal< 0x400e1438, 1, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P2 = hr::field_mask_literal< 0x400e1438, 2, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P3 = hr::field_mask_literal< 0x400e1438, 3, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P4 = hr::field_mask_literal< 0x400e1438, 4, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P5 = hr::field_mask_literal< 0x400e1438, 5, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P6 = hr::field_mask_literal< 0x400e1438, 6, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P7 = hr::field_mask_literal< 0x400e1438, 7, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P8 = hr::field_mask_literal< 0x400e1438, 8, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P9 = hr::field_mask_literal< 0x400e1438, 9, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P10 = hr::field_mask_literal< 0x400e1438, 10, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P11 = hr::field_mask_literal< 0x400e1438, 11, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P12 = hr::field_mask_literal< 0x400e1438, 12, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P13 = hr::field_mask_literal< 0x400e1438, 13, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P14 = hr::field_mask_literal< 0x400e1438, 14, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P15 = hr::field_mask_literal< 0x400e1438, 15, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P16 = hr::field_mask_literal< 0x400e1438, 16, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P17 = hr::field_mask_literal< 0x400e1438, 17, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P18 = hr::field_mask_literal< 0x400e1438, 18, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P19 = hr::field_mask_literal< 0x400e1438, 19, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P20 = hr::field_mask_literal< 0x400e1438, 20, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P21 = hr::field_mask_literal< 0x400e1438, 21, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P22 = hr::field_mask_literal< 0x400e1438, 22, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P23 = hr::field_mask_literal< 0x400e1438, 23, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P24 = hr::field_mask_literal< 0x400e1438, 24, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P25 = hr::field_mask_literal< 0x400e1438, 25, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P26 = hr::field_mask_literal< 0x400e1438, 26, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P27 = hr::field_mask_literal< 0x400e1438, 27, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P28 = hr::field_mask_literal< 0x400e1438, 28, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P29 = hr::field_mask_literal< 0x400e1438, 29, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P30 = hr::field_mask_literal< 0x400e1438, 30, 1 >();
   // Output Data Status
   constexpr auto PIOD_ODSR_P31 = hr::field_mask_literal< 0x400e1438, 31, 1 >();

// PDSR
   // Output Data Status
   constexpr auto PIOD_PDSR_P0 = hr::field_mask_literal< 0x400e143c, 0, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P1 = hr::field_mask_literal< 0x400e143c, 1, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P2 = hr::field_mask_literal< 0x400e143c, 2, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P3 = hr::field_mask_literal< 0x400e143c, 3, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P4 = hr::field_mask_literal< 0x400e143c, 4, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P5 = hr::field_mask_literal< 0x400e143c, 5, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P6 = hr::field_mask_literal< 0x400e143c, 6, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P7 = hr::field_mask_literal< 0x400e143c, 7, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P8 = hr::field_mask_literal< 0x400e143c, 8, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P9 = hr::field_mask_literal< 0x400e143c, 9, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P10 = hr::field_mask_literal< 0x400e143c, 10, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P11 = hr::field_mask_literal< 0x400e143c, 11, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P12 = hr::field_mask_literal< 0x400e143c, 12, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P13 = hr::field_mask_literal< 0x400e143c, 13, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P14 = hr::field_mask_literal< 0x400e143c, 14, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P15 = hr::field_mask_literal< 0x400e143c, 15, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P16 = hr::field_mask_literal< 0x400e143c, 16, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P17 = hr::field_mask_literal< 0x400e143c, 17, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P18 = hr::field_mask_literal< 0x400e143c, 18, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P19 = hr::field_mask_literal< 0x400e143c, 19, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P20 = hr::field_mask_literal< 0x400e143c, 20, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P21 = hr::field_mask_literal< 0x400e143c, 21, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P22 = hr::field_mask_literal< 0x400e143c, 22, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P23 = hr::field_mask_literal< 0x400e143c, 23, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P24 = hr::field_mask_literal< 0x400e143c, 24, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P25 = hr::field_mask_literal< 0x400e143c, 25, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P26 = hr::field_mask_literal< 0x400e143c, 26, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P27 = hr::field_mask_literal< 0x400e143c, 27, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P28 = hr::field_mask_literal< 0x400e143c, 28, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P29 = hr::field_mask_literal< 0x400e143c, 29, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P30 = hr::field_mask_literal< 0x400e143c, 30, 1 >();
   // Output Data Status
   constexpr auto PIOD_PDSR_P31 = hr::field_mask_literal< 0x400e143c, 31, 1 >();

// IER
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P0 = hr::field_mask_literal< 0x400e1440, 0, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P1 = hr::field_mask_literal< 0x400e1440, 1, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P2 = hr::field_mask_literal< 0x400e1440, 2, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P3 = hr::field_mask_literal< 0x400e1440, 3, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P4 = hr::field_mask_literal< 0x400e1440, 4, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P5 = hr::field_mask_literal< 0x400e1440, 5, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P6 = hr::field_mask_literal< 0x400e1440, 6, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P7 = hr::field_mask_literal< 0x400e1440, 7, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P8 = hr::field_mask_literal< 0x400e1440, 8, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P9 = hr::field_mask_literal< 0x400e1440, 9, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P10 = hr::field_mask_literal< 0x400e1440, 10, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P11 = hr::field_mask_literal< 0x400e1440, 11, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P12 = hr::field_mask_literal< 0x400e1440, 12, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P13 = hr::field_mask_literal< 0x400e1440, 13, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P14 = hr::field_mask_literal< 0x400e1440, 14, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P15 = hr::field_mask_literal< 0x400e1440, 15, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P16 = hr::field_mask_literal< 0x400e1440, 16, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P17 = hr::field_mask_literal< 0x400e1440, 17, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P18 = hr::field_mask_literal< 0x400e1440, 18, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P19 = hr::field_mask_literal< 0x400e1440, 19, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P20 = hr::field_mask_literal< 0x400e1440, 20, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P21 = hr::field_mask_literal< 0x400e1440, 21, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P22 = hr::field_mask_literal< 0x400e1440, 22, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P23 = hr::field_mask_literal< 0x400e1440, 23, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P24 = hr::field_mask_literal< 0x400e1440, 24, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P25 = hr::field_mask_literal< 0x400e1440, 25, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P26 = hr::field_mask_literal< 0x400e1440, 26, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P27 = hr::field_mask_literal< 0x400e1440, 27, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P28 = hr::field_mask_literal< 0x400e1440, 28, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P29 = hr::field_mask_literal< 0x400e1440, 29, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P30 = hr::field_mask_literal< 0x400e1440, 30, 1 >();
   // Input Change Interrupt Enable
   constexpr auto PIOD_IER_P31 = hr::field_mask_literal< 0x400e1440, 31, 1 >();

// IDR
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P0 = hr::field_mask_literal< 0x400e1444, 0, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P1 = hr::field_mask_literal< 0x400e1444, 1, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P2 = hr::field_mask_literal< 0x400e1444, 2, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P3 = hr::field_mask_literal< 0x400e1444, 3, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P4 = hr::field_mask_literal< 0x400e1444, 4, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P5 = hr::field_mask_literal< 0x400e1444, 5, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P6 = hr::field_mask_literal< 0x400e1444, 6, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P7 = hr::field_mask_literal< 0x400e1444, 7, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P8 = hr::field_mask_literal< 0x400e1444, 8, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P9 = hr::field_mask_literal< 0x400e1444, 9, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P10 = hr::field_mask_literal< 0x400e1444, 10, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P11 = hr::field_mask_literal< 0x400e1444, 11, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P12 = hr::field_mask_literal< 0x400e1444, 12, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P13 = hr::field_mask_literal< 0x400e1444, 13, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P14 = hr::field_mask_literal< 0x400e1444, 14, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P15 = hr::field_mask_literal< 0x400e1444, 15, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P16 = hr::field_mask_literal< 0x400e1444, 16, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P17 = hr::field_mask_literal< 0x400e1444, 17, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P18 = hr::field_mask_literal< 0x400e1444, 18, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P19 = hr::field_mask_literal< 0x400e1444, 19, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P20 = hr::field_mask_literal< 0x400e1444, 20, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P21 = hr::field_mask_literal< 0x400e1444, 21, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P22 = hr::field_mask_literal< 0x400e1444, 22, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P23 = hr::field_mask_literal< 0x400e1444, 23, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P24 = hr::field_mask_literal< 0x400e1444, 24, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P25 = hr::field_mask_literal< 0x400e1444, 25, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P26 = hr::field_mask_literal< 0x400e1444, 26, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P27 = hr::field_mask_literal< 0x400e1444, 27, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P28 = hr::field_mask_literal< 0x400e1444, 28, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P29 = hr::field_mask_literal< 0x400e1444, 29, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P30 = hr::field_mask_literal< 0x400e1444, 30, 1 >();
   // Input Change Interrupt Disable
   constexpr auto PIOD_IDR_P31 = hr::field_mask_literal< 0x400e1444, 31, 1 >();

// IMR
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P0 = hr::field_mask_literal< 0x400e1448, 0, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P1 = hr::field_mask_literal< 0x400e1448, 1, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P2 = hr::field_mask_literal< 0x400e1448, 2, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P3 = hr::field_mask_literal< 0x400e1448, 3, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P4 = hr::field_mask_literal< 0x400e1448, 4, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P5 = hr::field_mask_literal< 0x400e1448, 5, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P6 = hr::field_mask_literal< 0x400e1448, 6, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P7 = hr::field_mask_literal< 0x400e1448, 7, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P8 = hr::field_mask_literal< 0x400e1448, 8, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P9 = hr::field_mask_literal< 0x400e1448, 9, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P10 = hr::field_mask_literal< 0x400e1448, 10, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P11 = hr::field_mask_literal< 0x400e1448, 11, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P12 = hr::field_mask_literal< 0x400e1448, 12, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P13 = hr::field_mask_literal< 0x400e1448, 13, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P14 = hr::field_mask_literal< 0x400e1448, 14, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P15 = hr::field_mask_literal< 0x400e1448, 15, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P16 = hr::field_mask_literal< 0x400e1448, 16, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P17 = hr::field_mask_literal< 0x400e1448, 17, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P18 = hr::field_mask_literal< 0x400e1448, 18, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P19 = hr::field_mask_literal< 0x400e1448, 19, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P20 = hr::field_mask_literal< 0x400e1448, 20, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P21 = hr::field_mask_literal< 0x400e1448, 21, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P22 = hr::field_mask_literal< 0x400e1448, 22, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P23 = hr::field_mask_literal< 0x400e1448, 23, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P24 = hr::field_mask_literal< 0x400e1448, 24, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P25 = hr::field_mask_literal< 0x400e1448, 25, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P26 = hr::field_mask_literal< 0x400e1448, 26, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P27 = hr::field_mask_literal< 0x400e1448, 27, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P28 = hr::field_mask_literal< 0x400e1448, 28, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P29 = hr::field_mask_literal< 0x400e1448, 29, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P30 = hr::field_mask_literal< 0x400e1448, 30, 1 >();
   // Input Change Interrupt Mask
   constexpr auto PIOD_IMR_P31 = hr::field_mask_literal< 0x400e1448, 31, 1 >();

// ISR
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P0 = hr::field_mask_literal< 0x400e144c, 0, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P1 = hr::field_mask_literal< 0x400e144c, 1, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P2 = hr::field_mask_literal< 0x400e144c, 2, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P3 = hr::field_mask_literal< 0x400e144c, 3, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P4 = hr::field_mask_literal< 0x400e144c, 4, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P5 = hr::field_mask_literal< 0x400e144c, 5, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P6 = hr::field_mask_literal< 0x400e144c, 6, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P7 = hr::field_mask_literal< 0x400e144c, 7, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P8 = hr::field_mask_literal< 0x400e144c, 8, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P9 = hr::field_mask_literal< 0x400e144c, 9, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P10 = hr::field_mask_literal< 0x400e144c, 10, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P11 = hr::field_mask_literal< 0x400e144c, 11, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P12 = hr::field_mask_literal< 0x400e144c, 12, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P13 = hr::field_mask_literal< 0x400e144c, 13, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P14 = hr::field_mask_literal< 0x400e144c, 14, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P15 = hr::field_mask_literal< 0x400e144c, 15, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P16 = hr::field_mask_literal< 0x400e144c, 16, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P17 = hr::field_mask_literal< 0x400e144c, 17, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P18 = hr::field_mask_literal< 0x400e144c, 18, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P19 = hr::field_mask_literal< 0x400e144c, 19, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P20 = hr::field_mask_literal< 0x400e144c, 20, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P21 = hr::field_mask_literal< 0x400e144c, 21, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P22 = hr::field_mask_literal< 0x400e144c, 22, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P23 = hr::field_mask_literal< 0x400e144c, 23, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P24 = hr::field_mask_literal< 0x400e144c, 24, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P25 = hr::field_mask_literal< 0x400e144c, 25, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P26 = hr::field_mask_literal< 0x400e144c, 26, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P27 = hr::field_mask_literal< 0x400e144c, 27, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P28 = hr::field_mask_literal< 0x400e144c, 28, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P29 = hr::field_mask_literal< 0x400e144c, 29, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P30 = hr::field_mask_literal< 0x400e144c, 30, 1 >();
   // Input Change Interrupt Status
   constexpr auto PIOD_ISR_P31 = hr::field_mask_literal< 0x400e144c, 31, 1 >();

// MDER
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P0 = hr::field_mask_literal< 0x400e1450, 0, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P1 = hr::field_mask_literal< 0x400e1450, 1, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P2 = hr::field_mask_literal< 0x400e1450, 2, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P3 = hr::field_mask_literal< 0x400e1450, 3, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P4 = hr::field_mask_literal< 0x400e1450, 4, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P5 = hr::field_mask_literal< 0x400e1450, 5, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P6 = hr::field_mask_literal< 0x400e1450, 6, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P7 = hr::field_mask_literal< 0x400e1450, 7, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P8 = hr::field_mask_literal< 0x400e1450, 8, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P9 = hr::field_mask_literal< 0x400e1450, 9, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P10 = hr::field_mask_literal< 0x400e1450, 10, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P11 = hr::field_mask_literal< 0x400e1450, 11, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P12 = hr::field_mask_literal< 0x400e1450, 12, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P13 = hr::field_mask_literal< 0x400e1450, 13, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P14 = hr::field_mask_literal< 0x400e1450, 14, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P15 = hr::field_mask_literal< 0x400e1450, 15, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P16 = hr::field_mask_literal< 0x400e1450, 16, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P17 = hr::field_mask_literal< 0x400e1450, 17, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P18 = hr::field_mask_literal< 0x400e1450, 18, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P19 = hr::field_mask_literal< 0x400e1450, 19, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P20 = hr::field_mask_literal< 0x400e1450, 20, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P21 = hr::field_mask_literal< 0x400e1450, 21, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P22 = hr::field_mask_literal< 0x400e1450, 22, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P23 = hr::field_mask_literal< 0x400e1450, 23, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P24 = hr::field_mask_literal< 0x400e1450, 24, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P25 = hr::field_mask_literal< 0x400e1450, 25, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P26 = hr::field_mask_literal< 0x400e1450, 26, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P27 = hr::field_mask_literal< 0x400e1450, 27, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P28 = hr::field_mask_literal< 0x400e1450, 28, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P29 = hr::field_mask_literal< 0x400e1450, 29, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P30 = hr::field_mask_literal< 0x400e1450, 30, 1 >();
   // Multi Drive Enable.
   constexpr auto PIOD_MDER_P31 = hr::field_mask_literal< 0x400e1450, 31, 1 >();

// MDDR
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P0 = hr::field_mask_literal< 0x400e1454, 0, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P1 = hr::field_mask_literal< 0x400e1454, 1, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P2 = hr::field_mask_literal< 0x400e1454, 2, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P3 = hr::field_mask_literal< 0x400e1454, 3, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P4 = hr::field_mask_literal< 0x400e1454, 4, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P5 = hr::field_mask_literal< 0x400e1454, 5, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P6 = hr::field_mask_literal< 0x400e1454, 6, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P7 = hr::field_mask_literal< 0x400e1454, 7, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P8 = hr::field_mask_literal< 0x400e1454, 8, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P9 = hr::field_mask_literal< 0x400e1454, 9, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P10 = hr::field_mask_literal< 0x400e1454, 10, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P11 = hr::field_mask_literal< 0x400e1454, 11, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P12 = hr::field_mask_literal< 0x400e1454, 12, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P13 = hr::field_mask_literal< 0x400e1454, 13, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P14 = hr::field_mask_literal< 0x400e1454, 14, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P15 = hr::field_mask_literal< 0x400e1454, 15, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P16 = hr::field_mask_literal< 0x400e1454, 16, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P17 = hr::field_mask_literal< 0x400e1454, 17, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P18 = hr::field_mask_literal< 0x400e1454, 18, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P19 = hr::field_mask_literal< 0x400e1454, 19, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P20 = hr::field_mask_literal< 0x400e1454, 20, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P21 = hr::field_mask_literal< 0x400e1454, 21, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P22 = hr::field_mask_literal< 0x400e1454, 22, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P23 = hr::field_mask_literal< 0x400e1454, 23, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P24 = hr::field_mask_literal< 0x400e1454, 24, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P25 = hr::field_mask_literal< 0x400e1454, 25, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P26 = hr::field_mask_literal< 0x400e1454, 26, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P27 = hr::field_mask_literal< 0x400e1454, 27, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P28 = hr::field_mask_literal< 0x400e1454, 28, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P29 = hr::field_mask_literal< 0x400e1454, 29, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P30 = hr::field_mask_literal< 0x400e1454, 30, 1 >();
   // Multi Drive Disable.
   constexpr auto PIOD_MDDR_P31 = hr::field_mask_literal< 0x400e1454, 31, 1 >();

// MDSR
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P0 = hr::field_mask_literal< 0x400e1458, 0, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P1 = hr::field_mask_literal< 0x400e1458, 1, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P2 = hr::field_mask_literal< 0x400e1458, 2, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P3 = hr::field_mask_literal< 0x400e1458, 3, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P4 = hr::field_mask_literal< 0x400e1458, 4, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P5 = hr::field_mask_literal< 0x400e1458, 5, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P6 = hr::field_mask_literal< 0x400e1458, 6, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P7 = hr::field_mask_literal< 0x400e1458, 7, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P8 = hr::field_mask_literal< 0x400e1458, 8, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P9 = hr::field_mask_literal< 0x400e1458, 9, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P10 = hr::field_mask_literal< 0x400e1458, 10, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P11 = hr::field_mask_literal< 0x400e1458, 11, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P12 = hr::field_mask_literal< 0x400e1458, 12, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P13 = hr::field_mask_literal< 0x400e1458, 13, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P14 = hr::field_mask_literal< 0x400e1458, 14, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P15 = hr::field_mask_literal< 0x400e1458, 15, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P16 = hr::field_mask_literal< 0x400e1458, 16, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P17 = hr::field_mask_literal< 0x400e1458, 17, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P18 = hr::field_mask_literal< 0x400e1458, 18, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P19 = hr::field_mask_literal< 0x400e1458, 19, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P20 = hr::field_mask_literal< 0x400e1458, 20, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P21 = hr::field_mask_literal< 0x400e1458, 21, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P22 = hr::field_mask_literal< 0x400e1458, 22, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P23 = hr::field_mask_literal< 0x400e1458, 23, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P24 = hr::field_mask_literal< 0x400e1458, 24, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P25 = hr::field_mask_literal< 0x400e1458, 25, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P26 = hr::field_mask_literal< 0x400e1458, 26, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P27 = hr::field_mask_literal< 0x400e1458, 27, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P28 = hr::field_mask_literal< 0x400e1458, 28, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P29 = hr::field_mask_literal< 0x400e1458, 29, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P30 = hr::field_mask_literal< 0x400e1458, 30, 1 >();
   // Multi Drive Status.
   constexpr auto PIOD_MDSR_P31 = hr::field_mask_literal< 0x400e1458, 31, 1 >();

// PUDR
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P0 = hr::field_mask_literal< 0x400e1460, 0, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P1 = hr::field_mask_literal< 0x400e1460, 1, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P2 = hr::field_mask_literal< 0x400e1460, 2, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P3 = hr::field_mask_literal< 0x400e1460, 3, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P4 = hr::field_mask_literal< 0x400e1460, 4, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P5 = hr::field_mask_literal< 0x400e1460, 5, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P6 = hr::field_mask_literal< 0x400e1460, 6, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P7 = hr::field_mask_literal< 0x400e1460, 7, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P8 = hr::field_mask_literal< 0x400e1460, 8, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P9 = hr::field_mask_literal< 0x400e1460, 9, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P10 = hr::field_mask_literal< 0x400e1460, 10, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P11 = hr::field_mask_literal< 0x400e1460, 11, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P12 = hr::field_mask_literal< 0x400e1460, 12, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P13 = hr::field_mask_literal< 0x400e1460, 13, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P14 = hr::field_mask_literal< 0x400e1460, 14, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P15 = hr::field_mask_literal< 0x400e1460, 15, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P16 = hr::field_mask_literal< 0x400e1460, 16, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P17 = hr::field_mask_literal< 0x400e1460, 17, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P18 = hr::field_mask_literal< 0x400e1460, 18, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P19 = hr::field_mask_literal< 0x400e1460, 19, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P20 = hr::field_mask_literal< 0x400e1460, 20, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P21 = hr::field_mask_literal< 0x400e1460, 21, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P22 = hr::field_mask_literal< 0x400e1460, 22, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P23 = hr::field_mask_literal< 0x400e1460, 23, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P24 = hr::field_mask_literal< 0x400e1460, 24, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P25 = hr::field_mask_literal< 0x400e1460, 25, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P26 = hr::field_mask_literal< 0x400e1460, 26, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P27 = hr::field_mask_literal< 0x400e1460, 27, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P28 = hr::field_mask_literal< 0x400e1460, 28, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P29 = hr::field_mask_literal< 0x400e1460, 29, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P30 = hr::field_mask_literal< 0x400e1460, 30, 1 >();
   // Pull Up Disable.
   constexpr auto PIOD_PUDR_P31 = hr::field_mask_literal< 0x400e1460, 31, 1 >();

// PUER
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P0 = hr::field_mask_literal< 0x400e1464, 0, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P1 = hr::field_mask_literal< 0x400e1464, 1, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P2 = hr::field_mask_literal< 0x400e1464, 2, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P3 = hr::field_mask_literal< 0x400e1464, 3, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P4 = hr::field_mask_literal< 0x400e1464, 4, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P5 = hr::field_mask_literal< 0x400e1464, 5, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P6 = hr::field_mask_literal< 0x400e1464, 6, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P7 = hr::field_mask_literal< 0x400e1464, 7, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P8 = hr::field_mask_literal< 0x400e1464, 8, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P9 = hr::field_mask_literal< 0x400e1464, 9, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P10 = hr::field_mask_literal< 0x400e1464, 10, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P11 = hr::field_mask_literal< 0x400e1464, 11, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P12 = hr::field_mask_literal< 0x400e1464, 12, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P13 = hr::field_mask_literal< 0x400e1464, 13, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P14 = hr::field_mask_literal< 0x400e1464, 14, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P15 = hr::field_mask_literal< 0x400e1464, 15, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P16 = hr::field_mask_literal< 0x400e1464, 16, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P17 = hr::field_mask_literal< 0x400e1464, 17, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P18 = hr::field_mask_literal< 0x400e1464, 18, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P19 = hr::field_mask_literal< 0x400e1464, 19, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P20 = hr::field_mask_literal< 0x400e1464, 20, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P21 = hr::field_mask_literal< 0x400e1464, 21, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P22 = hr::field_mask_literal< 0x400e1464, 22, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P23 = hr::field_mask_literal< 0x400e1464, 23, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P24 = hr::field_mask_literal< 0x400e1464, 24, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P25 = hr::field_mask_literal< 0x400e1464, 25, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P26 = hr::field_mask_literal< 0x400e1464, 26, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P27 = hr::field_mask_literal< 0x400e1464, 27, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P28 = hr::field_mask_literal< 0x400e1464, 28, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P29 = hr::field_mask_literal< 0x400e1464, 29, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P30 = hr::field_mask_literal< 0x400e1464, 30, 1 >();
   // Pull Up Enable.
   constexpr auto PIOD_PUER_P31 = hr::field_mask_literal< 0x400e1464, 31, 1 >();

// PUSR
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P0 = hr::field_mask_literal< 0x400e1468, 0, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P1 = hr::field_mask_literal< 0x400e1468, 1, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P2 = hr::field_mask_literal< 0x400e1468, 2, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P3 = hr::field_mask_literal< 0x400e1468, 3, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P4 = hr::field_mask_literal< 0x400e1468, 4, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P5 = hr::field_mask_literal< 0x400e1468, 5, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P6 = hr::field_mask_literal< 0x400e1468, 6, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P7 = hr::field_mask_literal< 0x400e1468, 7, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P8 = hr::field_mask_literal< 0x400e1468, 8, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P9 = hr::field_mask_literal< 0x400e1468, 9, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P10 = hr::field_mask_literal< 0x400e1468, 10, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P11 = hr::field_mask_literal< 0x400e1468, 11, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P12 = hr::field_mask_literal< 0x400e1468, 12, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P13 = hr::field_mask_literal< 0x400e1468, 13, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P14 = hr::field_mask_literal< 0x400e1468, 14, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P15 = hr::field_mask_literal< 0x400e1468, 15, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P16 = hr::field_mask_literal< 0x400e1468, 16, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P17 = hr::field_mask_literal< 0x400e1468, 17, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P18 = hr::field_mask_literal< 0x400e1468, 18, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P19 = hr::field_mask_literal< 0x400e1468, 19, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P20 = hr::field_mask_literal< 0x400e1468, 20, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P21 = hr::field_mask_literal< 0x400e1468, 21, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P22 = hr::field_mask_literal< 0x400e1468, 22, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P23 = hr::field_mask_literal< 0x400e1468, 23, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P24 = hr::field_mask_literal< 0x400e1468, 24, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P25 = hr::field_mask_literal< 0x400e1468, 25, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P26 = hr::field_mask_literal< 0x400e1468, 26, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P27 = hr::field_mask_literal< 0x400e1468, 27, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P28 = hr::field_mask_literal< 0x400e1468, 28, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P29 = hr::field_mask_literal< 0x400e1468, 29, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P30 = hr::field_mask_literal< 0x400e1468, 30, 1 >();
   // Pull Up Status.
   constexpr auto PIOD_PUSR_P31 = hr::field_mask_literal< 0x400e1468, 31, 1 >();

// ABSR
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P0 = hr::field_mask_literal< 0x400e1470, 0, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P1 = hr::field_mask_literal< 0x400e1470, 1, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P2 = hr::field_mask_literal< 0x400e1470, 2, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P3 = hr::field_mask_literal< 0x400e1470, 3, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P4 = hr::field_mask_literal< 0x400e1470, 4, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P5 = hr::field_mask_literal< 0x400e1470, 5, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P6 = hr::field_mask_literal< 0x400e1470, 6, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P7 = hr::field_mask_literal< 0x400e1470, 7, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P8 = hr::field_mask_literal< 0x400e1470, 8, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P9 = hr::field_mask_literal< 0x400e1470, 9, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P10 = hr::field_mask_literal< 0x400e1470, 10, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P11 = hr::field_mask_literal< 0x400e1470, 11, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P12 = hr::field_mask_literal< 0x400e1470, 12, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P13 = hr::field_mask_literal< 0x400e1470, 13, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P14 = hr::field_mask_literal< 0x400e1470, 14, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P15 = hr::field_mask_literal< 0x400e1470, 15, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P16 = hr::field_mask_literal< 0x400e1470, 16, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P17 = hr::field_mask_literal< 0x400e1470, 17, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P18 = hr::field_mask_literal< 0x400e1470, 18, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P19 = hr::field_mask_literal< 0x400e1470, 19, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P20 = hr::field_mask_literal< 0x400e1470, 20, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P21 = hr::field_mask_literal< 0x400e1470, 21, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P22 = hr::field_mask_literal< 0x400e1470, 22, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P23 = hr::field_mask_literal< 0x400e1470, 23, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P24 = hr::field_mask_literal< 0x400e1470, 24, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P25 = hr::field_mask_literal< 0x400e1470, 25, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P26 = hr::field_mask_literal< 0x400e1470, 26, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P27 = hr::field_mask_literal< 0x400e1470, 27, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P28 = hr::field_mask_literal< 0x400e1470, 28, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P29 = hr::field_mask_literal< 0x400e1470, 29, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P30 = hr::field_mask_literal< 0x400e1470, 30, 1 >();
   // Peripheral A Select.
   constexpr auto PIOD_ABSR_P31 = hr::field_mask_literal< 0x400e1470, 31, 1 >();

// SCIFSR
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P0 = hr::field_mask_literal< 0x400e1480, 0, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P1 = hr::field_mask_literal< 0x400e1480, 1, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P2 = hr::field_mask_literal< 0x400e1480, 2, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P3 = hr::field_mask_literal< 0x400e1480, 3, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P4 = hr::field_mask_literal< 0x400e1480, 4, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P5 = hr::field_mask_literal< 0x400e1480, 5, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P6 = hr::field_mask_literal< 0x400e1480, 6, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P7 = hr::field_mask_literal< 0x400e1480, 7, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P8 = hr::field_mask_literal< 0x400e1480, 8, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P9 = hr::field_mask_literal< 0x400e1480, 9, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P10 = hr::field_mask_literal< 0x400e1480, 10, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P11 = hr::field_mask_literal< 0x400e1480, 11, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P12 = hr::field_mask_literal< 0x400e1480, 12, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P13 = hr::field_mask_literal< 0x400e1480, 13, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P14 = hr::field_mask_literal< 0x400e1480, 14, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P15 = hr::field_mask_literal< 0x400e1480, 15, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P16 = hr::field_mask_literal< 0x400e1480, 16, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P17 = hr::field_mask_literal< 0x400e1480, 17, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P18 = hr::field_mask_literal< 0x400e1480, 18, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P19 = hr::field_mask_literal< 0x400e1480, 19, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P20 = hr::field_mask_literal< 0x400e1480, 20, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P21 = hr::field_mask_literal< 0x400e1480, 21, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P22 = hr::field_mask_literal< 0x400e1480, 22, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P23 = hr::field_mask_literal< 0x400e1480, 23, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P24 = hr::field_mask_literal< 0x400e1480, 24, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P25 = hr::field_mask_literal< 0x400e1480, 25, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P26 = hr::field_mask_literal< 0x400e1480, 26, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P27 = hr::field_mask_literal< 0x400e1480, 27, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P28 = hr::field_mask_literal< 0x400e1480, 28, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P29 = hr::field_mask_literal< 0x400e1480, 29, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P30 = hr::field_mask_literal< 0x400e1480, 30, 1 >();
   // System Clock Glitch Filtering Select.
   constexpr auto PIOD_SCIFSR_P31 = hr::field_mask_literal< 0x400e1480, 31, 1 >();

// DIFSR
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P0 = hr::field_mask_literal< 0x400e1484, 0, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P1 = hr::field_mask_literal< 0x400e1484, 1, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P2 = hr::field_mask_literal< 0x400e1484, 2, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P3 = hr::field_mask_literal< 0x400e1484, 3, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P4 = hr::field_mask_literal< 0x400e1484, 4, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P5 = hr::field_mask_literal< 0x400e1484, 5, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P6 = hr::field_mask_literal< 0x400e1484, 6, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P7 = hr::field_mask_literal< 0x400e1484, 7, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P8 = hr::field_mask_literal< 0x400e1484, 8, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P9 = hr::field_mask_literal< 0x400e1484, 9, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P10 = hr::field_mask_literal< 0x400e1484, 10, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P11 = hr::field_mask_literal< 0x400e1484, 11, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P12 = hr::field_mask_literal< 0x400e1484, 12, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P13 = hr::field_mask_literal< 0x400e1484, 13, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P14 = hr::field_mask_literal< 0x400e1484, 14, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P15 = hr::field_mask_literal< 0x400e1484, 15, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P16 = hr::field_mask_literal< 0x400e1484, 16, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P17 = hr::field_mask_literal< 0x400e1484, 17, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P18 = hr::field_mask_literal< 0x400e1484, 18, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P19 = hr::field_mask_literal< 0x400e1484, 19, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P20 = hr::field_mask_literal< 0x400e1484, 20, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P21 = hr::field_mask_literal< 0x400e1484, 21, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P22 = hr::field_mask_literal< 0x400e1484, 22, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P23 = hr::field_mask_literal< 0x400e1484, 23, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P24 = hr::field_mask_literal< 0x400e1484, 24, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P25 = hr::field_mask_literal< 0x400e1484, 25, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P26 = hr::field_mask_literal< 0x400e1484, 26, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P27 = hr::field_mask_literal< 0x400e1484, 27, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P28 = hr::field_mask_literal< 0x400e1484, 28, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P29 = hr::field_mask_literal< 0x400e1484, 29, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P30 = hr::field_mask_literal< 0x400e1484, 30, 1 >();
   // Debouncing Filtering Select.
   constexpr auto PIOD_DIFSR_P31 = hr::field_mask_literal< 0x400e1484, 31, 1 >();

// IFDGSR
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P0 = hr::field_mask_literal< 0x400e1488, 0, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P1 = hr::field_mask_literal< 0x400e1488, 1, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P2 = hr::field_mask_literal< 0x400e1488, 2, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P3 = hr::field_mask_literal< 0x400e1488, 3, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P4 = hr::field_mask_literal< 0x400e1488, 4, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P5 = hr::field_mask_literal< 0x400e1488, 5, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P6 = hr::field_mask_literal< 0x400e1488, 6, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P7 = hr::field_mask_literal< 0x400e1488, 7, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P8 = hr::field_mask_literal< 0x400e1488, 8, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P9 = hr::field_mask_literal< 0x400e1488, 9, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P10 = hr::field_mask_literal< 0x400e1488, 10, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P11 = hr::field_mask_literal< 0x400e1488, 11, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P12 = hr::field_mask_literal< 0x400e1488, 12, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P13 = hr::field_mask_literal< 0x400e1488, 13, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P14 = hr::field_mask_literal< 0x400e1488, 14, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P15 = hr::field_mask_literal< 0x400e1488, 15, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P16 = hr::field_mask_literal< 0x400e1488, 16, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P17 = hr::field_mask_literal< 0x400e1488, 17, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P18 = hr::field_mask_literal< 0x400e1488, 18, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P19 = hr::field_mask_literal< 0x400e1488, 19, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P20 = hr::field_mask_literal< 0x400e1488, 20, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P21 = hr::field_mask_literal< 0x400e1488, 21, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P22 = hr::field_mask_literal< 0x400e1488, 22, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P23 = hr::field_mask_literal< 0x400e1488, 23, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P24 = hr::field_mask_literal< 0x400e1488, 24, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P25 = hr::field_mask_literal< 0x400e1488, 25, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P26 = hr::field_mask_literal< 0x400e1488, 26, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P27 = hr::field_mask_literal< 0x400e1488, 27, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P28 = hr::field_mask_literal< 0x400e1488, 28, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P29 = hr::field_mask_literal< 0x400e1488, 29, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P30 = hr::field_mask_literal< 0x400e1488, 30, 1 >();
   // Glitch or Debouncing Filter Selection Status
   constexpr auto PIOD_IFDGSR_P31 = hr::field_mask_literal< 0x400e1488, 31, 1 >();

// SCDR
   // Slow Clock Divider Selection for Debouncing
   constexpr auto PIOD_SCDR_DIV_Msk = hr::field_mask_literal< 0x400e148c, 0, 14 >();

// OWER
   // Output Write Enable.
   constexpr auto PIOD_OWER_P0 = hr::field_mask_literal< 0x400e14a0, 0, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P1 = hr::field_mask_literal< 0x400e14a0, 1, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P2 = hr::field_mask_literal< 0x400e14a0, 2, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P3 = hr::field_mask_literal< 0x400e14a0, 3, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P4 = hr::field_mask_literal< 0x400e14a0, 4, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P5 = hr::field_mask_literal< 0x400e14a0, 5, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P6 = hr::field_mask_literal< 0x400e14a0, 6, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P7 = hr::field_mask_literal< 0x400e14a0, 7, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P8 = hr::field_mask_literal< 0x400e14a0, 8, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P9 = hr::field_mask_literal< 0x400e14a0, 9, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P10 = hr::field_mask_literal< 0x400e14a0, 10, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P11 = hr::field_mask_literal< 0x400e14a0, 11, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P12 = hr::field_mask_literal< 0x400e14a0, 12, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P13 = hr::field_mask_literal< 0x400e14a0, 13, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P14 = hr::field_mask_literal< 0x400e14a0, 14, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P15 = hr::field_mask_literal< 0x400e14a0, 15, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P16 = hr::field_mask_literal< 0x400e14a0, 16, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P17 = hr::field_mask_literal< 0x400e14a0, 17, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P18 = hr::field_mask_literal< 0x400e14a0, 18, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P19 = hr::field_mask_literal< 0x400e14a0, 19, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P20 = hr::field_mask_literal< 0x400e14a0, 20, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P21 = hr::field_mask_literal< 0x400e14a0, 21, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P22 = hr::field_mask_literal< 0x400e14a0, 22, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P23 = hr::field_mask_literal< 0x400e14a0, 23, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P24 = hr::field_mask_literal< 0x400e14a0, 24, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P25 = hr::field_mask_literal< 0x400e14a0, 25, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P26 = hr::field_mask_literal< 0x400e14a0, 26, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P27 = hr::field_mask_literal< 0x400e14a0, 27, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P28 = hr::field_mask_literal< 0x400e14a0, 28, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P29 = hr::field_mask_literal< 0x400e14a0, 29, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P30 = hr::field_mask_literal< 0x400e14a0, 30, 1 >();
   // Output Write Enable.
   constexpr auto PIOD_OWER_P31 = hr::field_mask_literal< 0x400e14a0, 31, 1 >();

// OWDR
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P0 = hr::field_mask_literal< 0x400e14a4, 0, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P1 = hr::field_mask_literal< 0x400e14a4, 1, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P2 = hr::field_mask_literal< 0x400e14a4, 2, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P3 = hr::field_mask_literal< 0x400e14a4, 3, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P4 = hr::field_mask_literal< 0x400e14a4, 4, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P5 = hr::field_mask_literal< 0x400e14a4, 5, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P6 = hr::field_mask_literal< 0x400e14a4, 6, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P7 = hr::field_mask_literal< 0x400e14a4, 7, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P8 = hr::field_mask_literal< 0x400e14a4, 8, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P9 = hr::field_mask_literal< 0x400e14a4, 9, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P10 = hr::field_mask_literal< 0x400e14a4, 10, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P11 = hr::field_mask_literal< 0x400e14a4, 11, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P12 = hr::field_mask_literal< 0x400e14a4, 12, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P13 = hr::field_mask_literal< 0x400e14a4, 13, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P14 = hr::field_mask_literal< 0x400e14a4, 14, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P15 = hr::field_mask_literal< 0x400e14a4, 15, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P16 = hr::field_mask_literal< 0x400e14a4, 16, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P17 = hr::field_mask_literal< 0x400e14a4, 17, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P18 = hr::field_mask_literal< 0x400e14a4, 18, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P19 = hr::field_mask_literal< 0x400e14a4, 19, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P20 = hr::field_mask_literal< 0x400e14a4, 20, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P21 = hr::field_mask_literal< 0x400e14a4, 21, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P22 = hr::field_mask_literal< 0x400e14a4, 22, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P23 = hr::field_mask_literal< 0x400e14a4, 23, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P24 = hr::field_mask_literal< 0x400e14a4, 24, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P25 = hr::field_mask_literal< 0x400e14a4, 25, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P26 = hr::field_mask_literal< 0x400e14a4, 26, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P27 = hr::field_mask_literal< 0x400e14a4, 27, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P28 = hr::field_mask_literal< 0x400e14a4, 28, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P29 = hr::field_mask_literal< 0x400e14a4, 29, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P30 = hr::field_mask_literal< 0x400e14a4, 30, 1 >();
   // Output Write Disable.
   constexpr auto PIOD_OWDR_P31 = hr::field_mask_literal< 0x400e14a4, 31, 1 >();

// OWSR
   // Output Write Status.
   constexpr auto PIOD_OWSR_P0 = hr::field_mask_literal< 0x400e14a8, 0, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P1 = hr::field_mask_literal< 0x400e14a8, 1, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P2 = hr::field_mask_literal< 0x400e14a8, 2, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P3 = hr::field_mask_literal< 0x400e14a8, 3, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P4 = hr::field_mask_literal< 0x400e14a8, 4, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P5 = hr::field_mask_literal< 0x400e14a8, 5, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P6 = hr::field_mask_literal< 0x400e14a8, 6, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P7 = hr::field_mask_literal< 0x400e14a8, 7, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P8 = hr::field_mask_literal< 0x400e14a8, 8, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P9 = hr::field_mask_literal< 0x400e14a8, 9, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P10 = hr::field_mask_literal< 0x400e14a8, 10, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P11 = hr::field_mask_literal< 0x400e14a8, 11, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P12 = hr::field_mask_literal< 0x400e14a8, 12, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P13 = hr::field_mask_literal< 0x400e14a8, 13, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P14 = hr::field_mask_literal< 0x400e14a8, 14, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P15 = hr::field_mask_literal< 0x400e14a8, 15, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P16 = hr::field_mask_literal< 0x400e14a8, 16, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P17 = hr::field_mask_literal< 0x400e14a8, 17, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P18 = hr::field_mask_literal< 0x400e14a8, 18, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P19 = hr::field_mask_literal< 0x400e14a8, 19, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P20 = hr::field_mask_literal< 0x400e14a8, 20, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P21 = hr::field_mask_literal< 0x400e14a8, 21, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P22 = hr::field_mask_literal< 0x400e14a8, 22, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P23 = hr::field_mask_literal< 0x400e14a8, 23, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P24 = hr::field_mask_literal< 0x400e14a8, 24, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P25 = hr::field_mask_literal< 0x400e14a8, 25, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P26 = hr::field_mask_literal< 0x400e14a8, 26, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P27 = hr::field_mask_literal< 0x400e14a8, 27, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P28 = hr::field_mask_literal< 0x400e14a8, 28, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P29 = hr::field_mask_literal< 0x400e14a8, 29, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P30 = hr::field_mask_literal< 0x400e14a8, 30, 1 >();
   // Output Write Status.
   constexpr auto PIOD_OWSR_P31 = hr::field_mask_literal< 0x400e14a8, 31, 1 >();

// AIMER
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P0 = hr::field_mask_literal< 0x400e14b0, 0, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P1 = hr::field_mask_literal< 0x400e14b0, 1, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P2 = hr::field_mask_literal< 0x400e14b0, 2, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P3 = hr::field_mask_literal< 0x400e14b0, 3, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P4 = hr::field_mask_literal< 0x400e14b0, 4, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P5 = hr::field_mask_literal< 0x400e14b0, 5, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P6 = hr::field_mask_literal< 0x400e14b0, 6, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P7 = hr::field_mask_literal< 0x400e14b0, 7, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P8 = hr::field_mask_literal< 0x400e14b0, 8, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P9 = hr::field_mask_literal< 0x400e14b0, 9, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P10 = hr::field_mask_literal< 0x400e14b0, 10, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P11 = hr::field_mask_literal< 0x400e14b0, 11, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P12 = hr::field_mask_literal< 0x400e14b0, 12, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P13 = hr::field_mask_literal< 0x400e14b0, 13, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P14 = hr::field_mask_literal< 0x400e14b0, 14, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P15 = hr::field_mask_literal< 0x400e14b0, 15, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P16 = hr::field_mask_literal< 0x400e14b0, 16, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P17 = hr::field_mask_literal< 0x400e14b0, 17, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P18 = hr::field_mask_literal< 0x400e14b0, 18, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P19 = hr::field_mask_literal< 0x400e14b0, 19, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P20 = hr::field_mask_literal< 0x400e14b0, 20, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P21 = hr::field_mask_literal< 0x400e14b0, 21, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P22 = hr::field_mask_literal< 0x400e14b0, 22, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P23 = hr::field_mask_literal< 0x400e14b0, 23, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P24 = hr::field_mask_literal< 0x400e14b0, 24, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P25 = hr::field_mask_literal< 0x400e14b0, 25, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P26 = hr::field_mask_literal< 0x400e14b0, 26, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P27 = hr::field_mask_literal< 0x400e14b0, 27, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P28 = hr::field_mask_literal< 0x400e14b0, 28, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P29 = hr::field_mask_literal< 0x400e14b0, 29, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P30 = hr::field_mask_literal< 0x400e14b0, 30, 1 >();
   // Additional Interrupt Modes Enable.
   constexpr auto PIOD_AIMER_P31 = hr::field_mask_literal< 0x400e14b0, 31, 1 >();

// AIMDR
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P0 = hr::field_mask_literal< 0x400e14b4, 0, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P1 = hr::field_mask_literal< 0x400e14b4, 1, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P2 = hr::field_mask_literal< 0x400e14b4, 2, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P3 = hr::field_mask_literal< 0x400e14b4, 3, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P4 = hr::field_mask_literal< 0x400e14b4, 4, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P5 = hr::field_mask_literal< 0x400e14b4, 5, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P6 = hr::field_mask_literal< 0x400e14b4, 6, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P7 = hr::field_mask_literal< 0x400e14b4, 7, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P8 = hr::field_mask_literal< 0x400e14b4, 8, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P9 = hr::field_mask_literal< 0x400e14b4, 9, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P10 = hr::field_mask_literal< 0x400e14b4, 10, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P11 = hr::field_mask_literal< 0x400e14b4, 11, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P12 = hr::field_mask_literal< 0x400e14b4, 12, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P13 = hr::field_mask_literal< 0x400e14b4, 13, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P14 = hr::field_mask_literal< 0x400e14b4, 14, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P15 = hr::field_mask_literal< 0x400e14b4, 15, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P16 = hr::field_mask_literal< 0x400e14b4, 16, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P17 = hr::field_mask_literal< 0x400e14b4, 17, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P18 = hr::field_mask_literal< 0x400e14b4, 18, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P19 = hr::field_mask_literal< 0x400e14b4, 19, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P20 = hr::field_mask_literal< 0x400e14b4, 20, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P21 = hr::field_mask_literal< 0x400e14b4, 21, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P22 = hr::field_mask_literal< 0x400e14b4, 22, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P23 = hr::field_mask_literal< 0x400e14b4, 23, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P24 = hr::field_mask_literal< 0x400e14b4, 24, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P25 = hr::field_mask_literal< 0x400e14b4, 25, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P26 = hr::field_mask_literal< 0x400e14b4, 26, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P27 = hr::field_mask_literal< 0x400e14b4, 27, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P28 = hr::field_mask_literal< 0x400e14b4, 28, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P29 = hr::field_mask_literal< 0x400e14b4, 29, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P30 = hr::field_mask_literal< 0x400e14b4, 30, 1 >();
   // Additional Interrupt Modes Disable.
   constexpr auto PIOD_AIMDR_P31 = hr::field_mask_literal< 0x400e14b4, 31, 1 >();

// AIMMR
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P0 = hr::field_mask_literal< 0x400e14b8, 0, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P1 = hr::field_mask_literal< 0x400e14b8, 1, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P2 = hr::field_mask_literal< 0x400e14b8, 2, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P3 = hr::field_mask_literal< 0x400e14b8, 3, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P4 = hr::field_mask_literal< 0x400e14b8, 4, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P5 = hr::field_mask_literal< 0x400e14b8, 5, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P6 = hr::field_mask_literal< 0x400e14b8, 6, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P7 = hr::field_mask_literal< 0x400e14b8, 7, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P8 = hr::field_mask_literal< 0x400e14b8, 8, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P9 = hr::field_mask_literal< 0x400e14b8, 9, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P10 = hr::field_mask_literal< 0x400e14b8, 10, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P11 = hr::field_mask_literal< 0x400e14b8, 11, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P12 = hr::field_mask_literal< 0x400e14b8, 12, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P13 = hr::field_mask_literal< 0x400e14b8, 13, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P14 = hr::field_mask_literal< 0x400e14b8, 14, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P15 = hr::field_mask_literal< 0x400e14b8, 15, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P16 = hr::field_mask_literal< 0x400e14b8, 16, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P17 = hr::field_mask_literal< 0x400e14b8, 17, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P18 = hr::field_mask_literal< 0x400e14b8, 18, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P19 = hr::field_mask_literal< 0x400e14b8, 19, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P20 = hr::field_mask_literal< 0x400e14b8, 20, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P21 = hr::field_mask_literal< 0x400e14b8, 21, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P22 = hr::field_mask_literal< 0x400e14b8, 22, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P23 = hr::field_mask_literal< 0x400e14b8, 23, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P24 = hr::field_mask_literal< 0x400e14b8, 24, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P25 = hr::field_mask_literal< 0x400e14b8, 25, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P26 = hr::field_mask_literal< 0x400e14b8, 26, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P27 = hr::field_mask_literal< 0x400e14b8, 27, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P28 = hr::field_mask_literal< 0x400e14b8, 28, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P29 = hr::field_mask_literal< 0x400e14b8, 29, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P30 = hr::field_mask_literal< 0x400e14b8, 30, 1 >();
   // Peripheral CD Status.
   constexpr auto PIOD_AIMMR_P31 = hr::field_mask_literal< 0x400e14b8, 31, 1 >();

// ESR
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P0 = hr::field_mask_literal< 0x400e14c0, 0, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P1 = hr::field_mask_literal< 0x400e14c0, 1, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P2 = hr::field_mask_literal< 0x400e14c0, 2, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P3 = hr::field_mask_literal< 0x400e14c0, 3, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P4 = hr::field_mask_literal< 0x400e14c0, 4, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P5 = hr::field_mask_literal< 0x400e14c0, 5, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P6 = hr::field_mask_literal< 0x400e14c0, 6, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P7 = hr::field_mask_literal< 0x400e14c0, 7, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P8 = hr::field_mask_literal< 0x400e14c0, 8, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P9 = hr::field_mask_literal< 0x400e14c0, 9, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P10 = hr::field_mask_literal< 0x400e14c0, 10, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P11 = hr::field_mask_literal< 0x400e14c0, 11, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P12 = hr::field_mask_literal< 0x400e14c0, 12, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P13 = hr::field_mask_literal< 0x400e14c0, 13, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P14 = hr::field_mask_literal< 0x400e14c0, 14, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P15 = hr::field_mask_literal< 0x400e14c0, 15, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P16 = hr::field_mask_literal< 0x400e14c0, 16, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P17 = hr::field_mask_literal< 0x400e14c0, 17, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P18 = hr::field_mask_literal< 0x400e14c0, 18, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P19 = hr::field_mask_literal< 0x400e14c0, 19, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P20 = hr::field_mask_literal< 0x400e14c0, 20, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P21 = hr::field_mask_literal< 0x400e14c0, 21, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P22 = hr::field_mask_literal< 0x400e14c0, 22, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P23 = hr::field_mask_literal< 0x400e14c0, 23, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P24 = hr::field_mask_literal< 0x400e14c0, 24, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P25 = hr::field_mask_literal< 0x400e14c0, 25, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P26 = hr::field_mask_literal< 0x400e14c0, 26, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P27 = hr::field_mask_literal< 0x400e14c0, 27, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P28 = hr::field_mask_literal< 0x400e14c0, 28, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P29 = hr::field_mask_literal< 0x400e14c0, 29, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P30 = hr::field_mask_literal< 0x400e14c0, 30, 1 >();
   // Edge Interrupt Selection.
   constexpr auto PIOD_ESR_P31 = hr::field_mask_literal< 0x400e14c0, 31, 1 >();

// LSR
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P0 = hr::field_mask_literal< 0x400e14c4, 0, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P1 = hr::field_mask_literal< 0x400e14c4, 1, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P2 = hr::field_mask_literal< 0x400e14c4, 2, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P3 = hr::field_mask_literal< 0x400e14c4, 3, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P4 = hr::field_mask_literal< 0x400e14c4, 4, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P5 = hr::field_mask_literal< 0x400e14c4, 5, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P6 = hr::field_mask_literal< 0x400e14c4, 6, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P7 = hr::field_mask_literal< 0x400e14c4, 7, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P8 = hr::field_mask_literal< 0x400e14c4, 8, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P9 = hr::field_mask_literal< 0x400e14c4, 9, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P10 = hr::field_mask_literal< 0x400e14c4, 10, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P11 = hr::field_mask_literal< 0x400e14c4, 11, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P12 = hr::field_mask_literal< 0x400e14c4, 12, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P13 = hr::field_mask_literal< 0x400e14c4, 13, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P14 = hr::field_mask_literal< 0x400e14c4, 14, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P15 = hr::field_mask_literal< 0x400e14c4, 15, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P16 = hr::field_mask_literal< 0x400e14c4, 16, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P17 = hr::field_mask_literal< 0x400e14c4, 17, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P18 = hr::field_mask_literal< 0x400e14c4, 18, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P19 = hr::field_mask_literal< 0x400e14c4, 19, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P20 = hr::field_mask_literal< 0x400e14c4, 20, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P21 = hr::field_mask_literal< 0x400e14c4, 21, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P22 = hr::field_mask_literal< 0x400e14c4, 22, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P23 = hr::field_mask_literal< 0x400e14c4, 23, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P24 = hr::field_mask_literal< 0x400e14c4, 24, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P25 = hr::field_mask_literal< 0x400e14c4, 25, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P26 = hr::field_mask_literal< 0x400e14c4, 26, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P27 = hr::field_mask_literal< 0x400e14c4, 27, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P28 = hr::field_mask_literal< 0x400e14c4, 28, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P29 = hr::field_mask_literal< 0x400e14c4, 29, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P30 = hr::field_mask_literal< 0x400e14c4, 30, 1 >();
   // Level Interrupt Selection.
   constexpr auto PIOD_LSR_P31 = hr::field_mask_literal< 0x400e14c4, 31, 1 >();

// ELSR
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P0 = hr::field_mask_literal< 0x400e14c8, 0, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P1 = hr::field_mask_literal< 0x400e14c8, 1, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P2 = hr::field_mask_literal< 0x400e14c8, 2, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P3 = hr::field_mask_literal< 0x400e14c8, 3, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P4 = hr::field_mask_literal< 0x400e14c8, 4, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P5 = hr::field_mask_literal< 0x400e14c8, 5, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P6 = hr::field_mask_literal< 0x400e14c8, 6, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P7 = hr::field_mask_literal< 0x400e14c8, 7, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P8 = hr::field_mask_literal< 0x400e14c8, 8, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P9 = hr::field_mask_literal< 0x400e14c8, 9, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P10 = hr::field_mask_literal< 0x400e14c8, 10, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P11 = hr::field_mask_literal< 0x400e14c8, 11, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P12 = hr::field_mask_literal< 0x400e14c8, 12, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P13 = hr::field_mask_literal< 0x400e14c8, 13, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P14 = hr::field_mask_literal< 0x400e14c8, 14, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P15 = hr::field_mask_literal< 0x400e14c8, 15, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P16 = hr::field_mask_literal< 0x400e14c8, 16, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P17 = hr::field_mask_literal< 0x400e14c8, 17, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P18 = hr::field_mask_literal< 0x400e14c8, 18, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P19 = hr::field_mask_literal< 0x400e14c8, 19, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P20 = hr::field_mask_literal< 0x400e14c8, 20, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P21 = hr::field_mask_literal< 0x400e14c8, 21, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P22 = hr::field_mask_literal< 0x400e14c8, 22, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P23 = hr::field_mask_literal< 0x400e14c8, 23, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P24 = hr::field_mask_literal< 0x400e14c8, 24, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P25 = hr::field_mask_literal< 0x400e14c8, 25, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P26 = hr::field_mask_literal< 0x400e14c8, 26, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P27 = hr::field_mask_literal< 0x400e14c8, 27, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P28 = hr::field_mask_literal< 0x400e14c8, 28, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P29 = hr::field_mask_literal< 0x400e14c8, 29, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P30 = hr::field_mask_literal< 0x400e14c8, 30, 1 >();
   // Edge/Level Interrupt source selection.
   constexpr auto PIOD_ELSR_P31 = hr::field_mask_literal< 0x400e14c8, 31, 1 >();

// FELLSR
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P0 = hr::field_mask_literal< 0x400e14d0, 0, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P1 = hr::field_mask_literal< 0x400e14d0, 1, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P2 = hr::field_mask_literal< 0x400e14d0, 2, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P3 = hr::field_mask_literal< 0x400e14d0, 3, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P4 = hr::field_mask_literal< 0x400e14d0, 4, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P5 = hr::field_mask_literal< 0x400e14d0, 5, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P6 = hr::field_mask_literal< 0x400e14d0, 6, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P7 = hr::field_mask_literal< 0x400e14d0, 7, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P8 = hr::field_mask_literal< 0x400e14d0, 8, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P9 = hr::field_mask_literal< 0x400e14d0, 9, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P10 = hr::field_mask_literal< 0x400e14d0, 10, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P11 = hr::field_mask_literal< 0x400e14d0, 11, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P12 = hr::field_mask_literal< 0x400e14d0, 12, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P13 = hr::field_mask_literal< 0x400e14d0, 13, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P14 = hr::field_mask_literal< 0x400e14d0, 14, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P15 = hr::field_mask_literal< 0x400e14d0, 15, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P16 = hr::field_mask_literal< 0x400e14d0, 16, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P17 = hr::field_mask_literal< 0x400e14d0, 17, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P18 = hr::field_mask_literal< 0x400e14d0, 18, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P19 = hr::field_mask_literal< 0x400e14d0, 19, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P20 = hr::field_mask_literal< 0x400e14d0, 20, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P21 = hr::field_mask_literal< 0x400e14d0, 21, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P22 = hr::field_mask_literal< 0x400e14d0, 22, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P23 = hr::field_mask_literal< 0x400e14d0, 23, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P24 = hr::field_mask_literal< 0x400e14d0, 24, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P25 = hr::field_mask_literal< 0x400e14d0, 25, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P26 = hr::field_mask_literal< 0x400e14d0, 26, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P27 = hr::field_mask_literal< 0x400e14d0, 27, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P28 = hr::field_mask_literal< 0x400e14d0, 28, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P29 = hr::field_mask_literal< 0x400e14d0, 29, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P30 = hr::field_mask_literal< 0x400e14d0, 30, 1 >();
   // Falling Edge/Low Level Interrupt Selection.
   constexpr auto PIOD_FELLSR_P31 = hr::field_mask_literal< 0x400e14d0, 31, 1 >();

// REHLSR
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P0 = hr::field_mask_literal< 0x400e14d4, 0, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P1 = hr::field_mask_literal< 0x400e14d4, 1, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P2 = hr::field_mask_literal< 0x400e14d4, 2, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P3 = hr::field_mask_literal< 0x400e14d4, 3, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P4 = hr::field_mask_literal< 0x400e14d4, 4, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P5 = hr::field_mask_literal< 0x400e14d4, 5, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P6 = hr::field_mask_literal< 0x400e14d4, 6, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P7 = hr::field_mask_literal< 0x400e14d4, 7, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P8 = hr::field_mask_literal< 0x400e14d4, 8, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P9 = hr::field_mask_literal< 0x400e14d4, 9, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P10 = hr::field_mask_literal< 0x400e14d4, 10, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P11 = hr::field_mask_literal< 0x400e14d4, 11, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P12 = hr::field_mask_literal< 0x400e14d4, 12, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P13 = hr::field_mask_literal< 0x400e14d4, 13, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P14 = hr::field_mask_literal< 0x400e14d4, 14, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P15 = hr::field_mask_literal< 0x400e14d4, 15, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P16 = hr::field_mask_literal< 0x400e14d4, 16, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P17 = hr::field_mask_literal< 0x400e14d4, 17, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P18 = hr::field_mask_literal< 0x400e14d4, 18, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P19 = hr::field_mask_literal< 0x400e14d4, 19, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P20 = hr::field_mask_literal< 0x400e14d4, 20, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P21 = hr::field_mask_literal< 0x400e14d4, 21, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P22 = hr::field_mask_literal< 0x400e14d4, 22, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P23 = hr::field_mask_literal< 0x400e14d4, 23, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P24 = hr::field_mask_literal< 0x400e14d4, 24, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P25 = hr::field_mask_literal< 0x400e14d4, 25, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P26 = hr::field_mask_literal< 0x400e14d4, 26, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P27 = hr::field_mask_literal< 0x400e14d4, 27, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P28 = hr::field_mask_literal< 0x400e14d4, 28, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P29 = hr::field_mask_literal< 0x400e14d4, 29, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P30 = hr::field_mask_literal< 0x400e14d4, 30, 1 >();
   // Rising Edge /High Level Interrupt Selection.
   constexpr auto PIOD_REHLSR_P31 = hr::field_mask_literal< 0x400e14d4, 31, 1 >();

// FRLHSR
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P0 = hr::field_mask_literal< 0x400e14d8, 0, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P1 = hr::field_mask_literal< 0x400e14d8, 1, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P2 = hr::field_mask_literal< 0x400e14d8, 2, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P3 = hr::field_mask_literal< 0x400e14d8, 3, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P4 = hr::field_mask_literal< 0x400e14d8, 4, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P5 = hr::field_mask_literal< 0x400e14d8, 5, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P6 = hr::field_mask_literal< 0x400e14d8, 6, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P7 = hr::field_mask_literal< 0x400e14d8, 7, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P8 = hr::field_mask_literal< 0x400e14d8, 8, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P9 = hr::field_mask_literal< 0x400e14d8, 9, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P10 = hr::field_mask_literal< 0x400e14d8, 10, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P11 = hr::field_mask_literal< 0x400e14d8, 11, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P12 = hr::field_mask_literal< 0x400e14d8, 12, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P13 = hr::field_mask_literal< 0x400e14d8, 13, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P14 = hr::field_mask_literal< 0x400e14d8, 14, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P15 = hr::field_mask_literal< 0x400e14d8, 15, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P16 = hr::field_mask_literal< 0x400e14d8, 16, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P17 = hr::field_mask_literal< 0x400e14d8, 17, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P18 = hr::field_mask_literal< 0x400e14d8, 18, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P19 = hr::field_mask_literal< 0x400e14d8, 19, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P20 = hr::field_mask_literal< 0x400e14d8, 20, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P21 = hr::field_mask_literal< 0x400e14d8, 21, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P22 = hr::field_mask_literal< 0x400e14d8, 22, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P23 = hr::field_mask_literal< 0x400e14d8, 23, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P24 = hr::field_mask_literal< 0x400e14d8, 24, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P25 = hr::field_mask_literal< 0x400e14d8, 25, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P26 = hr::field_mask_literal< 0x400e14d8, 26, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P27 = hr::field_mask_literal< 0x400e14d8, 27, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P28 = hr::field_mask_literal< 0x400e14d8, 28, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P29 = hr::field_mask_literal< 0x400e14d8, 29, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P30 = hr::field_mask_literal< 0x400e14d8, 30, 1 >();
   // Edge /Level Interrupt Source Selection.
   constexpr auto PIOD_FRLHSR_P31 = hr::field_mask_literal< 0x400e14d8, 31, 1 >();

// LOCKSR
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P0 = hr::field_mask_literal< 0x400e14e0, 0, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P1 = hr::field_mask_literal< 0x400e14e0, 1, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P2 = hr::field_mask_literal< 0x400e14e0, 2, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P3 = hr::field_mask_literal< 0x400e14e0, 3, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P4 = hr::field_mask_literal< 0x400e14e0, 4, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P5 = hr::field_mask_literal< 0x400e14e0, 5, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P6 = hr::field_mask_literal< 0x400e14e0, 6, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P7 = hr::field_mask_literal< 0x400e14e0, 7, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P8 = hr::field_mask_literal< 0x400e14e0, 8, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P9 = hr::field_mask_literal< 0x400e14e0, 9, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P10 = hr::field_mask_literal< 0x400e14e0, 10, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P11 = hr::field_mask_literal< 0x400e14e0, 11, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P12 = hr::field_mask_literal< 0x400e14e0, 12, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P13 = hr::field_mask_literal< 0x400e14e0, 13, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P14 = hr::field_mask_literal< 0x400e14e0, 14, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P15 = hr::field_mask_literal< 0x400e14e0, 15, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P16 = hr::field_mask_literal< 0x400e14e0, 16, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P17 = hr::field_mask_literal< 0x400e14e0, 17, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P18 = hr::field_mask_literal< 0x400e14e0, 18, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P19 = hr::field_mask_literal< 0x400e14e0, 19, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P20 = hr::field_mask_literal< 0x400e14e0, 20, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P21 = hr::field_mask_literal< 0x400e14e0, 21, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P22 = hr::field_mask_literal< 0x400e14e0, 22, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P23 = hr::field_mask_literal< 0x400e14e0, 23, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P24 = hr::field_mask_literal< 0x400e14e0, 24, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P25 = hr::field_mask_literal< 0x400e14e0, 25, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P26 = hr::field_mask_literal< 0x400e14e0, 26, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P27 = hr::field_mask_literal< 0x400e14e0, 27, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P28 = hr::field_mask_literal< 0x400e14e0, 28, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P29 = hr::field_mask_literal< 0x400e14e0, 29, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P30 = hr::field_mask_literal< 0x400e14e0, 30, 1 >();
   // Lock Status.
   constexpr auto PIOD_LOCKSR_P31 = hr::field_mask_literal< 0x400e14e0, 31, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto PIOD_WPMR_WPEN = hr::field_mask_literal< 0x400e14e4, 0, 1 >();
   // Write Protect KEY
   constexpr auto PIOD_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e14e4, 8, 24 >();

// WPSR
   // Write Protect Violation Status
   constexpr auto PIOD_WPSR_WPVS = hr::field_mask_literal< 0x400e14e8, 0, 1 >();
   // Write Protect Violation Source
   constexpr auto PIOD_WPSR_WPVSRC_Msk = hr::field_mask_literal< 0x400e14e8, 8, 16 >();

// =============================================================================
//
// RSTC
// base address = 0x400e1a00
// Reset Controller
//
// =============================================================================

struct Rstc {
   hr::hardware_register<0x400e1a00> CR;
   hr::hardware_register<0x400e1a04> SR;
   hr::hardware_register<0x400e1a08> MR;
};

#define RSTC ( ( Rstc * ) 0x400e1a00 )

// CR
   // Processor Reset
   constexpr auto RSTC_CR_PROCRST = hr::field_mask_literal< 0x400e1a00, 0, 1 >();
   // Peripheral Reset
   constexpr auto RSTC_CR_PERRST = hr::field_mask_literal< 0x400e1a00, 2, 1 >();
   // External Reset
   constexpr auto RSTC_CR_EXTRST = hr::field_mask_literal< 0x400e1a00, 3, 1 >();
   // System Reset Key
   constexpr auto RSTC_CR_KEY_Msk = hr::field_mask_literal< 0x400e1a00, 24, 8 >();

// SR
   // User Reset Status
   constexpr auto RSTC_SR_URSTS = hr::field_mask_literal< 0x400e1a04, 0, 1 >();
   // Reset Type
   constexpr auto RSTC_SR_RSTTYP_Msk = hr::field_mask_literal< 0x400e1a04, 8, 3 >();
   // NRST Pin Level
   constexpr auto RSTC_SR_NRSTL = hr::field_mask_literal< 0x400e1a04, 16, 1 >();
   // Software Reset Command in Progress
   constexpr auto RSTC_SR_SRCMP = hr::field_mask_literal< 0x400e1a04, 17, 1 >();

// MR
   // User Reset Enable
   constexpr auto RSTC_MR_URSTEN = hr::field_mask_literal< 0x400e1a08, 0, 1 >();
   // User Reset Interrupt Enable
   constexpr auto RSTC_MR_URSTIEN = hr::field_mask_literal< 0x400e1a08, 4, 1 >();
   // External Reset Length
   constexpr auto RSTC_MR_ERSTL_Msk = hr::field_mask_literal< 0x400e1a08, 8, 4 >();
   // Password
   constexpr auto RSTC_MR_KEY_Msk = hr::field_mask_literal< 0x400e1a08, 24, 8 >();

// =============================================================================
//
// SUPC
// base address = 0x400e1a10
// Supply Controller
//
// =============================================================================

struct Supc {
   hr::hardware_register<0x400e1a10> CR;
   hr::hardware_register<0x400e1a14> SMMR;
   hr::hardware_register<0x400e1a18> MR;
   hr::hardware_register<0x400e1a1c> WUMR;
   hr::hardware_register<0x400e1a20> WUIR;
   hr::hardware_register<0x400e1a24> SR;
};

#define SUPC ( ( Supc * ) 0x400e1a10 )

// CR
   // Voltage Regulator Off
   constexpr auto SUPC_CR_VROFF = hr::field_mask_literal< 0x400e1a10, 2, 1 >();
      // no effect.
      constexpr auto SUPC_CR_VROFF_NO_EFFECT = hr::field_value_literal< 0x400e1a10, 2, 1 >( 0 );
      // if KEY is correct, asserts vddcore_nreset and stops the voltage regulator.
      constexpr auto SUPC_CR_VROFF_STOP_VREG = hr::field_value_literal< 0x400e1a10, 2, 1 >( 1 );
   // Crystal Oscillator Select
   constexpr auto SUPC_CR_XTALSEL = hr::field_mask_literal< 0x400e1a10, 3, 1 >();
      // no effect.
      constexpr auto SUPC_CR_XTALSEL_NO_EFFECT = hr::field_value_literal< 0x400e1a10, 3, 1 >( 0 );
      // if KEY is correct, switches the slow clock on the crystal oscillator output.
      constexpr auto SUPC_CR_XTALSEL_CRYSTAL_SEL = hr::field_value_literal< 0x400e1a10, 3, 1 >( 1 );
   // Password
   constexpr auto SUPC_CR_KEY_Msk = hr::field_mask_literal< 0x400e1a10, 24, 8 >();

// SMMR
   // Supply Monitor Threshold
   constexpr auto SUPC_SMMR_SMTH_Msk = hr::field_mask_literal< 0x400e1a14, 0, 4 >();
      // 1.9 V
      constexpr auto SUPC_SMMR_SMTH_1_9V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 0 );
      // 2.0 V
      constexpr auto SUPC_SMMR_SMTH_2_0V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 1 );
      // 2.1 V
      constexpr auto SUPC_SMMR_SMTH_2_1V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 2 );
      // 2.2 V
      constexpr auto SUPC_SMMR_SMTH_2_2V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 3 );
      // 2.3 V
      constexpr auto SUPC_SMMR_SMTH_2_3V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 4 );
      // 2.4 V
      constexpr auto SUPC_SMMR_SMTH_2_4V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 5 );
      // 2.5 V
      constexpr auto SUPC_SMMR_SMTH_2_5V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 6 );
      // 2.6 V
      constexpr auto SUPC_SMMR_SMTH_2_6V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 7 );
      // 2.7 V
      constexpr auto SUPC_SMMR_SMTH_2_7V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 8 );
      // 2.8 V
      constexpr auto SUPC_SMMR_SMTH_2_8V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 9 );
      // 2.9 V
      constexpr auto SUPC_SMMR_SMTH_2_9V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 10 );
      // 3.0 V
      constexpr auto SUPC_SMMR_SMTH_3_0V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 11 );
      // 3.1 V
      constexpr auto SUPC_SMMR_SMTH_3_1V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 12 );
      // 3.2 V
      constexpr auto SUPC_SMMR_SMTH_3_2V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 13 );
      // 3.3 V
      constexpr auto SUPC_SMMR_SMTH_3_3V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 14 );
      // 3.4 V
      constexpr auto SUPC_SMMR_SMTH_3_4V = hr::field_value_literal< 0x400e1a14, 0, 4 >( 15 );
   // Supply Monitor Sampling Period
   constexpr auto SUPC_SMMR_SMSMPL_Msk = hr::field_mask_literal< 0x400e1a14, 8, 3 >();
      // Supply Monitor disabled
      constexpr auto SUPC_SMMR_SMSMPL_SMD = hr::field_value_literal< 0x400e1a14, 8, 3 >( 0 );
      // Continuous Supply Monitor
      constexpr auto SUPC_SMMR_SMSMPL_CSM = hr::field_value_literal< 0x400e1a14, 8, 3 >( 1 );
      // Supply Monitor enabled one SLCK period every 32 SLCK periods
      constexpr auto SUPC_SMMR_SMSMPL_32SLCK = hr::field_value_literal< 0x400e1a14, 8, 3 >( 2 );
      // Supply Monitor enabled one SLCK period every 256 SLCK periods
      constexpr auto SUPC_SMMR_SMSMPL_256SLCK = hr::field_value_literal< 0x400e1a14, 8, 3 >( 3 );
      // Supply Monitor enabled one SLCK period every 2,048 SLCK periods
      constexpr auto SUPC_SMMR_SMSMPL_2048SLCK = hr::field_value_literal< 0x400e1a14, 8, 3 >( 4 );
   // Supply Monitor Reset Enable
   constexpr auto SUPC_SMMR_SMRSTEN = hr::field_mask_literal< 0x400e1a14, 12, 1 >();
      // the core reset signal "vddcore_nreset" is not affected when a supply monitor detection occurs.
      constexpr auto SUPC_SMMR_SMRSTEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a14, 12, 1 >( 0 );
      // the core reset signal, vddcore_nreset is asserted when a supply monitor detection occurs.
      constexpr auto SUPC_SMMR_SMRSTEN_ENABLE = hr::field_value_literal< 0x400e1a14, 12, 1 >( 1 );
   // Supply Monitor Interrupt Enable
   constexpr auto SUPC_SMMR_SMIEN = hr::field_mask_literal< 0x400e1a14, 13, 1 >();
      // the SUPC interrupt signal is not affected when a supply monitor detection occurs.
      constexpr auto SUPC_SMMR_SMIEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a14, 13, 1 >( 0 );
      // the SUPC interrupt signal is asserted when a supply monitor detection occurs.
      constexpr auto SUPC_SMMR_SMIEN_ENABLE = hr::field_value_literal< 0x400e1a14, 13, 1 >( 1 );

// MR
   // Brownout Detector Reset Enable
   constexpr auto SUPC_MR_BODRSTEN = hr::field_mask_literal< 0x400e1a18, 12, 1 >();
      // the core reset signal "vddcore_nreset" is not affected when a brownout detection occurs.
      constexpr auto SUPC_MR_BODRSTEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a18, 12, 1 >( 0 );
      // the core reset signal, vddcore_nreset is asserted when a brownout detection occurs.
      constexpr auto SUPC_MR_BODRSTEN_ENABLE = hr::field_value_literal< 0x400e1a18, 12, 1 >( 1 );
   // Brownout Detector Disable
   constexpr auto SUPC_MR_BODDIS = hr::field_mask_literal< 0x400e1a18, 13, 1 >();
      // the core brownout detector is enabled.
      constexpr auto SUPC_MR_BODDIS_ENABLE = hr::field_value_literal< 0x400e1a18, 13, 1 >( 0 );
      // the core brownout detector is disabled.
      constexpr auto SUPC_MR_BODDIS_DISABLE = hr::field_value_literal< 0x400e1a18, 13, 1 >( 1 );
   // None
   constexpr auto SUPC_MR_VDDIORDYONREG = hr::field_mask_literal< 0x400e1a18, 14, 1 >();
   // Oscillator Bypass
   constexpr auto SUPC_MR_OSCBYPASS = hr::field_mask_literal< 0x400e1a18, 20, 1 >();
      // no effect. Clock selection depends on XTALSEL value.
      constexpr auto SUPC_MR_OSCBYPASS_NO_EFFECT = hr::field_value_literal< 0x400e1a18, 20, 1 >( 0 );
      // the 32-KHz XTAL oscillator is selected and is put in bypass mode.
      constexpr auto SUPC_MR_OSCBYPASS_BYPASS = hr::field_value_literal< 0x400e1a18, 20, 1 >( 1 );
   // Password Key
   constexpr auto SUPC_MR_KEY_Msk = hr::field_mask_literal< 0x400e1a18, 24, 8 >();

// WUMR
   // Force Wake Up Enable
   constexpr auto SUPC_WUMR_FWUPEN = hr::field_mask_literal< 0x400e1a1c, 0, 1 >();
      // the Force Wake Up pin has no wake up effect.
      constexpr auto SUPC_WUMR_FWUPEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a1c, 0, 1 >( 0 );
      // the Force Wake Up pin low forces the wake up of the core power supply.
      constexpr auto SUPC_WUMR_FWUPEN_ENABLE = hr::field_value_literal< 0x400e1a1c, 0, 1 >( 1 );
   // Supply Monitor Wake Up Enable
   constexpr auto SUPC_WUMR_SMEN = hr::field_mask_literal< 0x400e1a1c, 1, 1 >();
      // the supply monitor detection has no wake up effect.
      constexpr auto SUPC_WUMR_SMEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a1c, 1, 1 >( 0 );
      // the supply monitor detection forces the wake up of the core power supply.
      constexpr auto SUPC_WUMR_SMEN_ENABLE = hr::field_value_literal< 0x400e1a1c, 1, 1 >( 1 );
   // Real Time Timer Wake Up Enable
   constexpr auto SUPC_WUMR_RTTEN = hr::field_mask_literal< 0x400e1a1c, 2, 1 >();
      // the RTT alarm signal has no wake up effect.
      constexpr auto SUPC_WUMR_RTTEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a1c, 2, 1 >( 0 );
      // the RTT alarm signal forces the wake up of the core power supply.
      constexpr auto SUPC_WUMR_RTTEN_ENABLE = hr::field_value_literal< 0x400e1a1c, 2, 1 >( 1 );
   // Real Time Clock Wake Up Enable
   constexpr auto SUPC_WUMR_RTCEN = hr::field_mask_literal< 0x400e1a1c, 3, 1 >();
      // the RTC alarm signal has no wake up effect.
      constexpr auto SUPC_WUMR_RTCEN_NOT_ENABLE = hr::field_value_literal< 0x400e1a1c, 3, 1 >( 0 );
      // the RTC alarm signal forces the wake up of the core power supply.
      constexpr auto SUPC_WUMR_RTCEN_ENABLE = hr::field_value_literal< 0x400e1a1c, 3, 1 >( 1 );
   // Force Wake Up Debouncer Period
   constexpr auto SUPC_WUMR_FWUPDBC_Msk = hr::field_mask_literal< 0x400e1a1c, 8, 3 >();
      // Immediate, no debouncing, detected active at least on one Slow Clock edge.
      constexpr auto SUPC_WUMR_FWUPDBC_IMMEDIATE = hr::field_value_literal< 0x400e1a1c, 8, 3 >( 0 );
      // FWUP shall be low for at least 3 SLCK periods
      constexpr auto SUPC_WUMR_FWUPDBC_3_SCLK = hr::field_value_literal< 0x400e1a1c, 8, 3 >( 1 );
      // FWUP shall be low for at least 32 SLCK periods
      constexpr auto SUPC_WUMR_FWUPDBC_32_SCLK = hr::field_value_literal< 0x400e1a1c, 8, 3 >( 2 );
      // FWUP shall be low for at least 512 SLCK periods
      constexpr auto SUPC_WUMR_FWUPDBC_512_SCLK = hr::field_value_literal< 0x400e1a1c, 8, 3 >( 3 );
      // FWUP shall be low for at least 4,096 SLCK periods
      constexpr auto SUPC_WUMR_FWUPDBC_4096_SCLK = hr::field_value_literal< 0x400e1a1c, 8, 3 >( 4 );
      // FWUP shall be low for at least 32,768 SLCK periods
      constexpr auto SUPC_WUMR_FWUPDBC_32768_SCLK = hr::field_value_literal< 0x400e1a1c, 8, 3 >( 5 );
   // Wake Up Inputs Debouncer Period
   constexpr auto SUPC_WUMR_WKUPDBC_Msk = hr::field_mask_literal< 0x400e1a1c, 12, 3 >();
      // Immediate, no debouncing, detected active at least on one Slow Clock edge.
      constexpr auto SUPC_WUMR_WKUPDBC_IMMEDIATE = hr::field_value_literal< 0x400e1a1c, 12, 3 >( 0 );
      // WKUPx shall be in its active state for at least 3 SLCK periods
      constexpr auto SUPC_WUMR_WKUPDBC_3_SCLK = hr::field_value_literal< 0x400e1a1c, 12, 3 >( 1 );
      // WKUPx shall be in its active state for at least 32 SLCK periods
      constexpr auto SUPC_WUMR_WKUPDBC_32_SCLK = hr::field_value_literal< 0x400e1a1c, 12, 3 >( 2 );
      // WKUPx shall be in its active state for at least 512 SLCK periods
      constexpr auto SUPC_WUMR_WKUPDBC_512_SCLK = hr::field_value_literal< 0x400e1a1c, 12, 3 >( 3 );
      // WKUPx shall be in its active state for at least 4,096 SLCK periods
      constexpr auto SUPC_WUMR_WKUPDBC_4096_SCLK = hr::field_value_literal< 0x400e1a1c, 12, 3 >( 4 );
      // WKUPx shall be in its active state for at least 32,768 SLCK periods
      constexpr auto SUPC_WUMR_WKUPDBC_32768_SCLK = hr::field_value_literal< 0x400e1a1c, 12, 3 >( 5 );

// WUIR
   // Wake Up Input Enable 0
   constexpr auto SUPC_WUIR_WKUPEN0 = hr::field_mask_literal< 0x400e1a20, 0, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN0_DISABLE = hr::field_value_literal< 0x400e1a20, 0, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN0_ENABLE = hr::field_value_literal< 0x400e1a20, 0, 1 >( 1 );
   // Wake Up Input Enable 1
   constexpr auto SUPC_WUIR_WKUPEN1 = hr::field_mask_literal< 0x400e1a20, 1, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN1_DISABLE = hr::field_value_literal< 0x400e1a20, 1, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN1_ENABLE = hr::field_value_literal< 0x400e1a20, 1, 1 >( 1 );
   // Wake Up Input Enable 2
   constexpr auto SUPC_WUIR_WKUPEN2 = hr::field_mask_literal< 0x400e1a20, 2, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN2_DISABLE = hr::field_value_literal< 0x400e1a20, 2, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN2_ENABLE = hr::field_value_literal< 0x400e1a20, 2, 1 >( 1 );
   // Wake Up Input Enable 3
   constexpr auto SUPC_WUIR_WKUPEN3 = hr::field_mask_literal< 0x400e1a20, 3, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN3_DISABLE = hr::field_value_literal< 0x400e1a20, 3, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN3_ENABLE = hr::field_value_literal< 0x400e1a20, 3, 1 >( 1 );
   // Wake Up Input Enable 4
   constexpr auto SUPC_WUIR_WKUPEN4 = hr::field_mask_literal< 0x400e1a20, 4, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN4_DISABLE = hr::field_value_literal< 0x400e1a20, 4, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN4_ENABLE = hr::field_value_literal< 0x400e1a20, 4, 1 >( 1 );
   // Wake Up Input Enable 5
   constexpr auto SUPC_WUIR_WKUPEN5 = hr::field_mask_literal< 0x400e1a20, 5, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN5_DISABLE = hr::field_value_literal< 0x400e1a20, 5, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN5_ENABLE = hr::field_value_literal< 0x400e1a20, 5, 1 >( 1 );
   // Wake Up Input Enable 6
   constexpr auto SUPC_WUIR_WKUPEN6 = hr::field_mask_literal< 0x400e1a20, 6, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN6_DISABLE = hr::field_value_literal< 0x400e1a20, 6, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN6_ENABLE = hr::field_value_literal< 0x400e1a20, 6, 1 >( 1 );
   // Wake Up Input Enable 7
   constexpr auto SUPC_WUIR_WKUPEN7 = hr::field_mask_literal< 0x400e1a20, 7, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN7_DISABLE = hr::field_value_literal< 0x400e1a20, 7, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN7_ENABLE = hr::field_value_literal< 0x400e1a20, 7, 1 >( 1 );
   // Wake Up Input Enable 8
   constexpr auto SUPC_WUIR_WKUPEN8 = hr::field_mask_literal< 0x400e1a20, 8, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN8_DISABLE = hr::field_value_literal< 0x400e1a20, 8, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN8_ENABLE = hr::field_value_literal< 0x400e1a20, 8, 1 >( 1 );
   // Wake Up Input Enable 9
   constexpr auto SUPC_WUIR_WKUPEN9 = hr::field_mask_literal< 0x400e1a20, 9, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN9_DISABLE = hr::field_value_literal< 0x400e1a20, 9, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN9_ENABLE = hr::field_value_literal< 0x400e1a20, 9, 1 >( 1 );
   // Wake Up Input Enable 10
   constexpr auto SUPC_WUIR_WKUPEN10 = hr::field_mask_literal< 0x400e1a20, 10, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN10_DISABLE = hr::field_value_literal< 0x400e1a20, 10, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN10_ENABLE = hr::field_value_literal< 0x400e1a20, 10, 1 >( 1 );
   // Wake Up Input Enable 11
   constexpr auto SUPC_WUIR_WKUPEN11 = hr::field_mask_literal< 0x400e1a20, 11, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN11_DISABLE = hr::field_value_literal< 0x400e1a20, 11, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN11_ENABLE = hr::field_value_literal< 0x400e1a20, 11, 1 >( 1 );
   // Wake Up Input Enable 12
   constexpr auto SUPC_WUIR_WKUPEN12 = hr::field_mask_literal< 0x400e1a20, 12, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN12_DISABLE = hr::field_value_literal< 0x400e1a20, 12, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN12_ENABLE = hr::field_value_literal< 0x400e1a20, 12, 1 >( 1 );
   // Wake Up Input Enable 13
   constexpr auto SUPC_WUIR_WKUPEN13 = hr::field_mask_literal< 0x400e1a20, 13, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN13_DISABLE = hr::field_value_literal< 0x400e1a20, 13, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN13_ENABLE = hr::field_value_literal< 0x400e1a20, 13, 1 >( 1 );
   // Wake Up Input Enable 14
   constexpr auto SUPC_WUIR_WKUPEN14 = hr::field_mask_literal< 0x400e1a20, 14, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN14_DISABLE = hr::field_value_literal< 0x400e1a20, 14, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN14_ENABLE = hr::field_value_literal< 0x400e1a20, 14, 1 >( 1 );
   // Wake Up Input Enable 15
   constexpr auto SUPC_WUIR_WKUPEN15 = hr::field_mask_literal< 0x400e1a20, 15, 1 >();
      // the corresponding wake-up input has no wake up effect.
      constexpr auto SUPC_WUIR_WKUPEN15_DISABLE = hr::field_value_literal< 0x400e1a20, 15, 1 >( 0 );
      // the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPEN15_ENABLE = hr::field_value_literal< 0x400e1a20, 15, 1 >( 1 );
   // Wake Up Input Type 0
   constexpr auto SUPC_WUIR_WKUPT0 = hr::field_mask_literal< 0x400e1a20, 16, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT0_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 16, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT0_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 16, 1 >( 1 );
   // Wake Up Input Type 1
   constexpr auto SUPC_WUIR_WKUPT1 = hr::field_mask_literal< 0x400e1a20, 17, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT1_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 17, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT1_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 17, 1 >( 1 );
   // Wake Up Input Type 2
   constexpr auto SUPC_WUIR_WKUPT2 = hr::field_mask_literal< 0x400e1a20, 18, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT2_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 18, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT2_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 18, 1 >( 1 );
   // Wake Up Input Type 3
   constexpr auto SUPC_WUIR_WKUPT3 = hr::field_mask_literal< 0x400e1a20, 19, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT3_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 19, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT3_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 19, 1 >( 1 );
   // Wake Up Input Type 4
   constexpr auto SUPC_WUIR_WKUPT4 = hr::field_mask_literal< 0x400e1a20, 20, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT4_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 20, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT4_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 20, 1 >( 1 );
   // Wake Up Input Type 5
   constexpr auto SUPC_WUIR_WKUPT5 = hr::field_mask_literal< 0x400e1a20, 21, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT5_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 21, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT5_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 21, 1 >( 1 );
   // Wake Up Input Type 6
   constexpr auto SUPC_WUIR_WKUPT6 = hr::field_mask_literal< 0x400e1a20, 22, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT6_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 22, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT6_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 22, 1 >( 1 );
   // Wake Up Input Type 7
   constexpr auto SUPC_WUIR_WKUPT7 = hr::field_mask_literal< 0x400e1a20, 23, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT7_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 23, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT7_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 23, 1 >( 1 );
   // Wake Up Input Type 8
   constexpr auto SUPC_WUIR_WKUPT8 = hr::field_mask_literal< 0x400e1a20, 24, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT8_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 24, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT8_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 24, 1 >( 1 );
   // Wake Up Input Type 9
   constexpr auto SUPC_WUIR_WKUPT9 = hr::field_mask_literal< 0x400e1a20, 25, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT9_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 25, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT9_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 25, 1 >( 1 );
   // Wake Up Input Type 10
   constexpr auto SUPC_WUIR_WKUPT10 = hr::field_mask_literal< 0x400e1a20, 26, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT10_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 26, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT10_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 26, 1 >( 1 );
   // Wake Up Input Type 11
   constexpr auto SUPC_WUIR_WKUPT11 = hr::field_mask_literal< 0x400e1a20, 27, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT11_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 27, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT11_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 27, 1 >( 1 );
   // Wake Up Input Type 12
   constexpr auto SUPC_WUIR_WKUPT12 = hr::field_mask_literal< 0x400e1a20, 28, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT12_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 28, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT12_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 28, 1 >( 1 );
   // Wake Up Input Type 13
   constexpr auto SUPC_WUIR_WKUPT13 = hr::field_mask_literal< 0x400e1a20, 29, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT13_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 29, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT13_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 29, 1 >( 1 );
   // Wake Up Input Type 14
   constexpr auto SUPC_WUIR_WKUPT14 = hr::field_mask_literal< 0x400e1a20, 30, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT14_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 30, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT14_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 30, 1 >( 1 );
   // Wake Up Input Type 15
   constexpr auto SUPC_WUIR_WKUPT15 = hr::field_mask_literal< 0x400e1a20, 31, 1 >();
      // a high to low level transition for a period defined by WKUPDBC on the corresponding wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT15_HIGH_TO_LOW = hr::field_value_literal< 0x400e1a20, 31, 1 >( 0 );
      // a low to high level transition for a period defined by WKUPDBC on the correspond-ing wake-up input forces the wake up of the core power supply.
      constexpr auto SUPC_WUIR_WKUPT15_LOW_TO_HIGH = hr::field_value_literal< 0x400e1a20, 31, 1 >( 1 );

// SR
   // FWUP Wake Up Status
   constexpr auto SUPC_SR_FWUPS = hr::field_mask_literal< 0x400e1a24, 0, 1 >();
      // no wake up due to the assertion of the FWUP pin has occurred since the last read of SUPC_SR.
      constexpr auto SUPC_SR_FWUPS_NO = hr::field_value_literal< 0x400e1a24, 0, 1 >( 0 );
      // at least one wake up due to the assertion of the FWUP pin has occurred since the last read of SUPC_SR.
      constexpr auto SUPC_SR_FWUPS_PRESENT = hr::field_value_literal< 0x400e1a24, 0, 1 >( 1 );
   // WKUP Wake Up Status
   constexpr auto SUPC_SR_WKUPS = hr::field_mask_literal< 0x400e1a24, 1, 1 >();
      // no wake up due to the assertion of the WKUP pins has occurred since the last read of SUPC_SR.
      constexpr auto SUPC_SR_WKUPS_NO = hr::field_value_literal< 0x400e1a24, 1, 1 >( 0 );
      // at least one wake up due to the assertion of the WKUP pins has occurred since the last read of SUPC_SR.
      constexpr auto SUPC_SR_WKUPS_PRESENT = hr::field_value_literal< 0x400e1a24, 1, 1 >( 1 );
   // Supply Monitor Detection Wake Up Status
   constexpr auto SUPC_SR_SMWS = hr::field_mask_literal< 0x400e1a24, 2, 1 >();
      // no wake up due to a supply monitor detection has occurred since the last read of SUPC_SR.
      constexpr auto SUPC_SR_SMWS_NO = hr::field_value_literal< 0x400e1a24, 2, 1 >( 0 );
      // at least one wake up due to a supply monitor detection has occurred since the last read of SUPC_SR.
      constexpr auto SUPC_SR_SMWS_PRESENT = hr::field_value_literal< 0x400e1a24, 2, 1 >( 1 );
   // Brownout Detector Reset Status
   constexpr auto SUPC_SR_BODRSTS = hr::field_mask_literal< 0x400e1a24, 3, 1 >();
      // no core brownout rising edge event has been detected since the last read of the SUPC_SR.
      constexpr auto SUPC_SR_BODRSTS_NO = hr::field_value_literal< 0x400e1a24, 3, 1 >( 0 );
      // at least one brownout output rising edge event has been detected since the last read of the SUPC_SR.
      constexpr auto SUPC_SR_BODRSTS_PRESENT = hr::field_value_literal< 0x400e1a24, 3, 1 >( 1 );
   // Supply Monitor Reset Status
   constexpr auto SUPC_SR_SMRSTS = hr::field_mask_literal< 0x400e1a24, 4, 1 >();
      // no supply monitor detection has generated a core reset since the last read of the SUPC_SR.
      constexpr auto SUPC_SR_SMRSTS_NO = hr::field_value_literal< 0x400e1a24, 4, 1 >( 0 );
      // at least one supply monitor detection has generated a core reset since the last read of the SUPC_SR.
      constexpr auto SUPC_SR_SMRSTS_PRESENT = hr::field_value_literal< 0x400e1a24, 4, 1 >( 1 );
   // Supply Monitor Status
   constexpr auto SUPC_SR_SMS = hr::field_mask_literal< 0x400e1a24, 5, 1 >();
      // no supply monitor detection since the last read of SUPC_SR.
      constexpr auto SUPC_SR_SMS_NO = hr::field_value_literal< 0x400e1a24, 5, 1 >( 0 );
      // at least one supply monitor detection since the last read of SUPC_SR.
      constexpr auto SUPC_SR_SMS_PRESENT = hr::field_value_literal< 0x400e1a24, 5, 1 >( 1 );
   // Supply Monitor Output Status
   constexpr auto SUPC_SR_SMOS = hr::field_mask_literal< 0x400e1a24, 6, 1 >();
      // the supply monitor detected VDDUTMI higher than its threshold at its last measurement.
      constexpr auto SUPC_SR_SMOS_HIGH = hr::field_value_literal< 0x400e1a24, 6, 1 >( 0 );
      // the supply monitor detected VDDUTMI lower than its threshold at its last measurement.
      constexpr auto SUPC_SR_SMOS_LOW = hr::field_value_literal< 0x400e1a24, 6, 1 >( 1 );
   // 32-kHz Oscillator Selection Status
   constexpr auto SUPC_SR_OSCSEL = hr::field_mask_literal< 0x400e1a24, 7, 1 >();
      // the slow clock, SLCK is generated by the embedded 32-kHz RC oscillator.
      constexpr auto SUPC_SR_OSCSEL_RC = hr::field_value_literal< 0x400e1a24, 7, 1 >( 0 );
      // the slow clock, SLCK is generated by the 32-kHz crystal oscillator.
      constexpr auto SUPC_SR_OSCSEL_CRYST = hr::field_value_literal< 0x400e1a24, 7, 1 >( 1 );
   // FWUP Input Status
   constexpr auto SUPC_SR_FWUPIS = hr::field_mask_literal< 0x400e1a24, 12, 1 >();
      // FWUP input is tied low.
      constexpr auto SUPC_SR_FWUPIS_LOW = hr::field_value_literal< 0x400e1a24, 12, 1 >( 0 );
      // FWUP input is tied high.
      constexpr auto SUPC_SR_FWUPIS_HIGH = hr::field_value_literal< 0x400e1a24, 12, 1 >( 1 );
   // WKUP Input Status 0
   constexpr auto SUPC_SR_WKUPIS0 = hr::field_mask_literal< 0x400e1a24, 16, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS0_DIS = hr::field_value_literal< 0x400e1a24, 16, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS0_EN = hr::field_value_literal< 0x400e1a24, 16, 1 >( 1 );
   // WKUP Input Status 1
   constexpr auto SUPC_SR_WKUPIS1 = hr::field_mask_literal< 0x400e1a24, 17, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS1_DIS = hr::field_value_literal< 0x400e1a24, 17, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS1_EN = hr::field_value_literal< 0x400e1a24, 17, 1 >( 1 );
   // WKUP Input Status 2
   constexpr auto SUPC_SR_WKUPIS2 = hr::field_mask_literal< 0x400e1a24, 18, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS2_DIS = hr::field_value_literal< 0x400e1a24, 18, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS2_EN = hr::field_value_literal< 0x400e1a24, 18, 1 >( 1 );
   // WKUP Input Status 3
   constexpr auto SUPC_SR_WKUPIS3 = hr::field_mask_literal< 0x400e1a24, 19, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS3_DIS = hr::field_value_literal< 0x400e1a24, 19, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS3_EN = hr::field_value_literal< 0x400e1a24, 19, 1 >( 1 );
   // WKUP Input Status 4
   constexpr auto SUPC_SR_WKUPIS4 = hr::field_mask_literal< 0x400e1a24, 20, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS4_DIS = hr::field_value_literal< 0x400e1a24, 20, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS4_EN = hr::field_value_literal< 0x400e1a24, 20, 1 >( 1 );
   // WKUP Input Status 5
   constexpr auto SUPC_SR_WKUPIS5 = hr::field_mask_literal< 0x400e1a24, 21, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS5_DIS = hr::field_value_literal< 0x400e1a24, 21, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS5_EN = hr::field_value_literal< 0x400e1a24, 21, 1 >( 1 );
   // WKUP Input Status 6
   constexpr auto SUPC_SR_WKUPIS6 = hr::field_mask_literal< 0x400e1a24, 22, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS6_DIS = hr::field_value_literal< 0x400e1a24, 22, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS6_EN = hr::field_value_literal< 0x400e1a24, 22, 1 >( 1 );
   // WKUP Input Status 7
   constexpr auto SUPC_SR_WKUPIS7 = hr::field_mask_literal< 0x400e1a24, 23, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS7_DIS = hr::field_value_literal< 0x400e1a24, 23, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS7_EN = hr::field_value_literal< 0x400e1a24, 23, 1 >( 1 );
   // WKUP Input Status 8
   constexpr auto SUPC_SR_WKUPIS8 = hr::field_mask_literal< 0x400e1a24, 24, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS8_DIS = hr::field_value_literal< 0x400e1a24, 24, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS8_EN = hr::field_value_literal< 0x400e1a24, 24, 1 >( 1 );
   // WKUP Input Status 9
   constexpr auto SUPC_SR_WKUPIS9 = hr::field_mask_literal< 0x400e1a24, 25, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS9_DIS = hr::field_value_literal< 0x400e1a24, 25, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS9_EN = hr::field_value_literal< 0x400e1a24, 25, 1 >( 1 );
   // WKUP Input Status 10
   constexpr auto SUPC_SR_WKUPIS10 = hr::field_mask_literal< 0x400e1a24, 26, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS10_DIS = hr::field_value_literal< 0x400e1a24, 26, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS10_EN = hr::field_value_literal< 0x400e1a24, 26, 1 >( 1 );
   // WKUP Input Status 11
   constexpr auto SUPC_SR_WKUPIS11 = hr::field_mask_literal< 0x400e1a24, 27, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS11_DIS = hr::field_value_literal< 0x400e1a24, 27, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS11_EN = hr::field_value_literal< 0x400e1a24, 27, 1 >( 1 );
   // WKUP Input Status 12
   constexpr auto SUPC_SR_WKUPIS12 = hr::field_mask_literal< 0x400e1a24, 28, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS12_DIS = hr::field_value_literal< 0x400e1a24, 28, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS12_EN = hr::field_value_literal< 0x400e1a24, 28, 1 >( 1 );
   // WKUP Input Status 13
   constexpr auto SUPC_SR_WKUPIS13 = hr::field_mask_literal< 0x400e1a24, 29, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS13_DIS = hr::field_value_literal< 0x400e1a24, 29, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS13_EN = hr::field_value_literal< 0x400e1a24, 29, 1 >( 1 );
   // WKUP Input Status 14
   constexpr auto SUPC_SR_WKUPIS14 = hr::field_mask_literal< 0x400e1a24, 30, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS14_DIS = hr::field_value_literal< 0x400e1a24, 30, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS14_EN = hr::field_value_literal< 0x400e1a24, 30, 1 >( 1 );
   // WKUP Input Status 15
   constexpr auto SUPC_SR_WKUPIS15 = hr::field_mask_literal< 0x400e1a24, 31, 1 >();
      // the corresponding wake-up input is disabled, or was inactive at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS15_DIS = hr::field_value_literal< 0x400e1a24, 31, 1 >( 0 );
      // the corresponding wake-up input was active at the time the debouncer triggered a wake up event.
      constexpr auto SUPC_SR_WKUPIS15_EN = hr::field_value_literal< 0x400e1a24, 31, 1 >( 1 );

// =============================================================================
//
// RTT
// base address = 0x400e1a30
// Real-time Timer
//
// =============================================================================

struct Rtt {
   hr::hardware_register<0x400e1a30> MR;
   hr::hardware_register<0x400e1a34> AR;
   hr::hardware_register<0x400e1a38> VR;
   hr::hardware_register<0x400e1a3c> SR;
};

#define RTT ( ( Rtt * ) 0x400e1a30 )

// MR
   // Real-time Timer Prescaler Value
   constexpr auto RTT_MR_RTPRES_Msk = hr::field_mask_literal< 0x400e1a30, 0, 16 >();
   // Alarm Interrupt Enable
   constexpr auto RTT_MR_ALMIEN = hr::field_mask_literal< 0x400e1a30, 16, 1 >();
   // Real-time Timer Increment Interrupt Enable
   constexpr auto RTT_MR_RTTINCIEN = hr::field_mask_literal< 0x400e1a30, 17, 1 >();
   // Real-time Timer Restart
   constexpr auto RTT_MR_RTTRST = hr::field_mask_literal< 0x400e1a30, 18, 1 >();

// AR
   // Alarm Value
   constexpr auto RTT_AR_ALMV_Msk = hr::field_mask_literal< 0x400e1a34, 0, 32 >();

// VR
   // Current Real-time Value
   constexpr auto RTT_VR_CRTV_Msk = hr::field_mask_literal< 0x400e1a38, 0, 32 >();

// SR
   // Real-time Alarm Status
   constexpr auto RTT_SR_ALMS = hr::field_mask_literal< 0x400e1a3c, 0, 1 >();
   // Real-time Timer Increment
   constexpr auto RTT_SR_RTTINC = hr::field_mask_literal< 0x400e1a3c, 1, 1 >();

// =============================================================================
//
// WDT
// base address = 0x400e1a50
// Watchdog Timer
//
// =============================================================================

struct Wdt {
   hr::hardware_register<0x400e1a50> CR;
   hr::hardware_register<0x400e1a54> MR;
   hr::hardware_register<0x400e1a58> SR;
};

#define WDT ( ( Wdt * ) 0x400e1a50 )

// CR
   // Watchdog Restart
   constexpr auto WDT_CR_WDRSTT = hr::field_mask_literal< 0x400e1a50, 0, 1 >();
   // Password
   constexpr auto WDT_CR_KEY_Msk = hr::field_mask_literal< 0x400e1a50, 24, 8 >();

// MR
   // Watchdog Counter Value
   constexpr auto WDT_MR_WDV_Msk = hr::field_mask_literal< 0x400e1a54, 0, 12 >();
   // Watchdog Fault Interrupt Enable
   constexpr auto WDT_MR_WDFIEN = hr::field_mask_literal< 0x400e1a54, 12, 1 >();
   // Watchdog Reset Enable
   constexpr auto WDT_MR_WDRSTEN = hr::field_mask_literal< 0x400e1a54, 13, 1 >();
   // Watchdog Reset Processor
   constexpr auto WDT_MR_WDRPROC = hr::field_mask_literal< 0x400e1a54, 14, 1 >();
   // Watchdog Disable
   constexpr auto WDT_MR_WDDIS = hr::field_mask_literal< 0x400e1a54, 15, 1 >();
   // Watchdog Delta Value
   constexpr auto WDT_MR_WDD_Msk = hr::field_mask_literal< 0x400e1a54, 16, 12 >();
   // Watchdog Debug Halt
   constexpr auto WDT_MR_WDDBGHLT = hr::field_mask_literal< 0x400e1a54, 28, 1 >();
   // Watchdog Idle Halt
   constexpr auto WDT_MR_WDIDLEHLT = hr::field_mask_literal< 0x400e1a54, 29, 1 >();

// SR
   // Watchdog Underflow
   constexpr auto WDT_SR_WDUNF = hr::field_mask_literal< 0x400e1a58, 0, 1 >();
   // Watchdog Error
   constexpr auto WDT_SR_WDERR = hr::field_mask_literal< 0x400e1a58, 1, 1 >();

// =============================================================================
//
// RTC
// base address = 0x400e1a60
// Real-time Clock
//
// =============================================================================

struct Rtc {
   hr::hardware_register<0x400e1a60> CR;
   hr::hardware_register<0x400e1a64> MR;
   hr::hardware_register<0x400e1a68> TIMR;
   hr::hardware_register<0x400e1a6c> CALR;
   hr::hardware_register<0x400e1a70> TIMALR;
   hr::hardware_register<0x400e1a74> CALALR;
   hr::hardware_register<0x400e1a78> SR;
   hr::hardware_register<0x400e1a7c> SCCR;
   hr::hardware_register<0x400e1a80> IER;
   hr::hardware_register<0x400e1a84> IDR;
   hr::hardware_register<0x400e1a88> IMR;
   hr::hardware_register<0x400e1a8c> VER;
   hr::reserved< 0x30, 45 > _reserved_at_0x30;
   hr::hardware_register<0x400e1b44> WPMR;
};

#define RTC ( ( Rtc * ) 0x400e1a60 )

// CR
   // Update Request Time Register
   constexpr auto RTC_CR_UPDTIM = hr::field_mask_literal< 0x400e1a60, 0, 1 >();
   // Update Request Calendar Register
   constexpr auto RTC_CR_UPDCAL = hr::field_mask_literal< 0x400e1a60, 1, 1 >();
   // Time Event Selection
   constexpr auto RTC_CR_TIMEVSEL_Msk = hr::field_mask_literal< 0x400e1a60, 8, 2 >();
      // Minute change
      constexpr auto RTC_CR_TIMEVSEL_MINUTE = hr::field_value_literal< 0x400e1a60, 8, 2 >( 0 );
      // Hour change
      constexpr auto RTC_CR_TIMEVSEL_HOUR = hr::field_value_literal< 0x400e1a60, 8, 2 >( 1 );
      // Every day at midnight
      constexpr auto RTC_CR_TIMEVSEL_MIDNIGHT = hr::field_value_literal< 0x400e1a60, 8, 2 >( 2 );
      // Every day at noon
      constexpr auto RTC_CR_TIMEVSEL_NOON = hr::field_value_literal< 0x400e1a60, 8, 2 >( 3 );
   // Calendar Event Selection
   constexpr auto RTC_CR_CALEVSEL_Msk = hr::field_mask_literal< 0x400e1a60, 16, 2 >();
      // Week change (every Monday at time 00:00:00)
      constexpr auto RTC_CR_CALEVSEL_WEEK = hr::field_value_literal< 0x400e1a60, 16, 2 >( 0 );
      // Month change (every 01 of each month at time 00:00:00)
      constexpr auto RTC_CR_CALEVSEL_MONTH = hr::field_value_literal< 0x400e1a60, 16, 2 >( 1 );
      // Year change (every January 1 at time 00:00:00)
      constexpr auto RTC_CR_CALEVSEL_YEAR = hr::field_value_literal< 0x400e1a60, 16, 2 >( 2 );

// MR
   // 12-/24-hour Mode
   constexpr auto RTC_MR_HRMOD = hr::field_mask_literal< 0x400e1a64, 0, 1 >();

// TIMR
   // Current Second
   constexpr auto RTC_TIMR_SEC_Msk = hr::field_mask_literal< 0x400e1a68, 0, 7 >();
   // Current Minute
   constexpr auto RTC_TIMR_MIN_Msk = hr::field_mask_literal< 0x400e1a68, 8, 7 >();
   // Current Hour
   constexpr auto RTC_TIMR_HOUR_Msk = hr::field_mask_literal< 0x400e1a68, 16, 6 >();
   // Ante Meridiem Post Meridiem Indicator
   constexpr auto RTC_TIMR_AMPM = hr::field_mask_literal< 0x400e1a68, 22, 1 >();

// CALR
   // Current Century
   constexpr auto RTC_CALR_CENT_Msk = hr::field_mask_literal< 0x400e1a6c, 0, 7 >();
   // Current Year
   constexpr auto RTC_CALR_YEAR_Msk = hr::field_mask_literal< 0x400e1a6c, 8, 8 >();
   // Current Month
   constexpr auto RTC_CALR_MONTH_Msk = hr::field_mask_literal< 0x400e1a6c, 16, 5 >();
   // Current Day in Current Week
   constexpr auto RTC_CALR_DAY_Msk = hr::field_mask_literal< 0x400e1a6c, 21, 3 >();
   // Current Day in Current Month
   constexpr auto RTC_CALR_DATE_Msk = hr::field_mask_literal< 0x400e1a6c, 24, 6 >();

// TIMALR
   // Second Alarm
   constexpr auto RTC_TIMALR_SEC_Msk = hr::field_mask_literal< 0x400e1a70, 0, 7 >();
   // Second Alarm Enable
   constexpr auto RTC_TIMALR_SECEN = hr::field_mask_literal< 0x400e1a70, 7, 1 >();
   // Minute Alarm
   constexpr auto RTC_TIMALR_MIN_Msk = hr::field_mask_literal< 0x400e1a70, 8, 7 >();
   // Minute Alarm Enable
   constexpr auto RTC_TIMALR_MINEN = hr::field_mask_literal< 0x400e1a70, 15, 1 >();
   // Hour Alarm
   constexpr auto RTC_TIMALR_HOUR_Msk = hr::field_mask_literal< 0x400e1a70, 16, 6 >();
   // AM/PM Indicator
   constexpr auto RTC_TIMALR_AMPM = hr::field_mask_literal< 0x400e1a70, 22, 1 >();
   // Hour Alarm Enable
   constexpr auto RTC_TIMALR_HOUREN = hr::field_mask_literal< 0x400e1a70, 23, 1 >();

// CALALR
   // Month Alarm
   constexpr auto RTC_CALALR_MONTH_Msk = hr::field_mask_literal< 0x400e1a74, 16, 5 >();
   // Month Alarm Enable
   constexpr auto RTC_CALALR_MTHEN = hr::field_mask_literal< 0x400e1a74, 23, 1 >();
   // Date Alarm
   constexpr auto RTC_CALALR_DATE_Msk = hr::field_mask_literal< 0x400e1a74, 24, 6 >();
   // Date Alarm Enable
   constexpr auto RTC_CALALR_DATEEN = hr::field_mask_literal< 0x400e1a74, 31, 1 >();

// SR
   // Acknowledge for Update
   constexpr auto RTC_SR_ACKUPD = hr::field_mask_literal< 0x400e1a78, 0, 1 >();
   // Alarm Flag
   constexpr auto RTC_SR_ALARM = hr::field_mask_literal< 0x400e1a78, 1, 1 >();
   // Second Event
   constexpr auto RTC_SR_SEC = hr::field_mask_literal< 0x400e1a78, 2, 1 >();
   // Time Event
   constexpr auto RTC_SR_TIMEV = hr::field_mask_literal< 0x400e1a78, 3, 1 >();
   // Calendar Event
   constexpr auto RTC_SR_CALEV = hr::field_mask_literal< 0x400e1a78, 4, 1 >();

// SCCR
   // Acknowledge Clear
   constexpr auto RTC_SCCR_ACKCLR = hr::field_mask_literal< 0x400e1a7c, 0, 1 >();
   // Alarm Clear
   constexpr auto RTC_SCCR_ALRCLR = hr::field_mask_literal< 0x400e1a7c, 1, 1 >();
   // Second Clear
   constexpr auto RTC_SCCR_SECCLR = hr::field_mask_literal< 0x400e1a7c, 2, 1 >();
   // Time Clear
   constexpr auto RTC_SCCR_TIMCLR = hr::field_mask_literal< 0x400e1a7c, 3, 1 >();
   // Calendar Clear
   constexpr auto RTC_SCCR_CALCLR = hr::field_mask_literal< 0x400e1a7c, 4, 1 >();

// IER
   // Acknowledge Update Interrupt Enable
   constexpr auto RTC_IER_ACKEN = hr::field_mask_literal< 0x400e1a80, 0, 1 >();
   // Alarm Interrupt Enable
   constexpr auto RTC_IER_ALREN = hr::field_mask_literal< 0x400e1a80, 1, 1 >();
   // Second Event Interrupt Enable
   constexpr auto RTC_IER_SECEN = hr::field_mask_literal< 0x400e1a80, 2, 1 >();
   // Time Event Interrupt Enable
   constexpr auto RTC_IER_TIMEN = hr::field_mask_literal< 0x400e1a80, 3, 1 >();
   // Calendar Event Interrupt Enable
   constexpr auto RTC_IER_CALEN = hr::field_mask_literal< 0x400e1a80, 4, 1 >();

// IDR
   // Acknowledge Update Interrupt Disable
   constexpr auto RTC_IDR_ACKDIS = hr::field_mask_literal< 0x400e1a84, 0, 1 >();
   // Alarm Interrupt Disable
   constexpr auto RTC_IDR_ALRDIS = hr::field_mask_literal< 0x400e1a84, 1, 1 >();
   // Second Event Interrupt Disable
   constexpr auto RTC_IDR_SECDIS = hr::field_mask_literal< 0x400e1a84, 2, 1 >();
   // Time Event Interrupt Disable
   constexpr auto RTC_IDR_TIMDIS = hr::field_mask_literal< 0x400e1a84, 3, 1 >();
   // Calendar Event Interrupt Disable
   constexpr auto RTC_IDR_CALDIS = hr::field_mask_literal< 0x400e1a84, 4, 1 >();

// IMR
   // Acknowledge Update Interrupt Mask
   constexpr auto RTC_IMR_ACK = hr::field_mask_literal< 0x400e1a88, 0, 1 >();
   // Alarm Interrupt Mask
   constexpr auto RTC_IMR_ALR = hr::field_mask_literal< 0x400e1a88, 1, 1 >();
   // Second Event Interrupt Mask
   constexpr auto RTC_IMR_SEC = hr::field_mask_literal< 0x400e1a88, 2, 1 >();
   // Time Event Interrupt Mask
   constexpr auto RTC_IMR_TIM = hr::field_mask_literal< 0x400e1a88, 3, 1 >();
   // Calendar Event Interrupt Mask
   constexpr auto RTC_IMR_CAL = hr::field_mask_literal< 0x400e1a88, 4, 1 >();

// VER
   // Non-valid Time
   constexpr auto RTC_VER_NVTIM = hr::field_mask_literal< 0x400e1a8c, 0, 1 >();
   // Non-valid Calendar
   constexpr auto RTC_VER_NVCAL = hr::field_mask_literal< 0x400e1a8c, 1, 1 >();
   // Non-valid Time Alarm
   constexpr auto RTC_VER_NVTIMALR = hr::field_mask_literal< 0x400e1a8c, 2, 1 >();
   // Non-valid Calendar Alarm
   constexpr auto RTC_VER_NVCALALR = hr::field_mask_literal< 0x400e1a8c, 3, 1 >();

// WPMR
   // Write Protect Enable
   constexpr auto RTC_WPMR_WPEN = hr::field_mask_literal< 0x400e1b44, 0, 1 >();
   // None
   constexpr auto RTC_WPMR_WPKEY_Msk = hr::field_mask_literal< 0x400e1b44, 8, 24 >();

// =============================================================================
//
// GPBR
// base address = 0x400e1a90
// General Purpose Backup Register
//
// =============================================================================

struct Gpbr {
   hr::hardware_register<0x400e1a90> GPBR[8];
};

#define GPBR ( ( Gpbr * ) 0x400e1a90 )

// GPBR[0]
   // Value of GPBR x
   constexpr auto GPBR_GPBR_GPBR_VALUE_Msk = hr::field_mask_literal< 0x400e1a90, 0, 32 >();

